
RTOS_DA_NHIEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc74  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  0800cd88  0800cd88  0001cd88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5dc  0800d5dc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d5dc  0800d5dc  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d5dc  0800d5dc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5dc  0800d5dc  0001d5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5e0  0800d5e0  0001d5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d5e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002378  200001e4  0800d7c8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000255c  0800d7c8  0002255c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ad9b  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ba7  00000000  00000000  0003afeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  0003eb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001274  00000000  00000000  00040330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004d31  00000000  00000000  000415a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b901  00000000  00000000  000462d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098a3b  00000000  00000000  00061bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a90  00000000  00000000  000fa614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001020a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cd6c 	.word	0x0800cd6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800cd6c 	.word	0x0800cd6c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_fmul>:
 8000174:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000178:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800017c:	bf1e      	ittt	ne
 800017e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000182:	ea92 0f0c 	teqne	r2, ip
 8000186:	ea93 0f0c 	teqne	r3, ip
 800018a:	d06f      	beq.n	800026c <__aeabi_fmul+0xf8>
 800018c:	441a      	add	r2, r3
 800018e:	ea80 0c01 	eor.w	ip, r0, r1
 8000192:	0240      	lsls	r0, r0, #9
 8000194:	bf18      	it	ne
 8000196:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800019a:	d01e      	beq.n	80001da <__aeabi_fmul+0x66>
 800019c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a8:	fba0 3101 	umull	r3, r1, r0, r1
 80001ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b4:	bf3e      	ittt	cc
 80001b6:	0049      	lslcc	r1, r1, #1
 80001b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001bc:	005b      	lslcc	r3, r3, #1
 80001be:	ea40 0001 	orr.w	r0, r0, r1
 80001c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c6:	2afd      	cmp	r2, #253	; 0xfd
 80001c8:	d81d      	bhi.n	8000206 <__aeabi_fmul+0x92>
 80001ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001d2:	bf08      	it	eq
 80001d4:	f020 0001 	biceq.w	r0, r0, #1
 80001d8:	4770      	bx	lr
 80001da:	f090 0f00 	teq	r0, #0
 80001de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001e2:	bf08      	it	eq
 80001e4:	0249      	lsleq	r1, r1, #9
 80001e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ee:	3a7f      	subs	r2, #127	; 0x7f
 80001f0:	bfc2      	ittt	gt
 80001f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001fa:	4770      	bxgt	lr
 80001fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000200:	f04f 0300 	mov.w	r3, #0
 8000204:	3a01      	subs	r2, #1
 8000206:	dc5d      	bgt.n	80002c4 <__aeabi_fmul+0x150>
 8000208:	f112 0f19 	cmn.w	r2, #25
 800020c:	bfdc      	itt	le
 800020e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000212:	4770      	bxle	lr
 8000214:	f1c2 0200 	rsb	r2, r2, #0
 8000218:	0041      	lsls	r1, r0, #1
 800021a:	fa21 f102 	lsr.w	r1, r1, r2
 800021e:	f1c2 0220 	rsb	r2, r2, #32
 8000222:	fa00 fc02 	lsl.w	ip, r0, r2
 8000226:	ea5f 0031 	movs.w	r0, r1, rrx
 800022a:	f140 0000 	adc.w	r0, r0, #0
 800022e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000232:	bf08      	it	eq
 8000234:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000238:	4770      	bx	lr
 800023a:	f092 0f00 	teq	r2, #0
 800023e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0040      	lsleq	r0, r0, #1
 8000246:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800024a:	3a01      	subeq	r2, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xce>
 800024e:	ea40 000c 	orr.w	r0, r0, ip
 8000252:	f093 0f00 	teq	r3, #0
 8000256:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800025a:	bf02      	ittt	eq
 800025c:	0049      	lsleq	r1, r1, #1
 800025e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000262:	3b01      	subeq	r3, #1
 8000264:	d0f9      	beq.n	800025a <__aeabi_fmul+0xe6>
 8000266:	ea41 010c 	orr.w	r1, r1, ip
 800026a:	e78f      	b.n	800018c <__aeabi_fmul+0x18>
 800026c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000270:	ea92 0f0c 	teq	r2, ip
 8000274:	bf18      	it	ne
 8000276:	ea93 0f0c 	teqne	r3, ip
 800027a:	d00a      	beq.n	8000292 <__aeabi_fmul+0x11e>
 800027c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000280:	bf18      	it	ne
 8000282:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000286:	d1d8      	bne.n	800023a <__aeabi_fmul+0xc6>
 8000288:	ea80 0001 	eor.w	r0, r0, r1
 800028c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f090 0f00 	teq	r0, #0
 8000296:	bf17      	itett	ne
 8000298:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800029c:	4608      	moveq	r0, r1
 800029e:	f091 0f00 	teqne	r1, #0
 80002a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a6:	d014      	beq.n	80002d2 <__aeabi_fmul+0x15e>
 80002a8:	ea92 0f0c 	teq	r2, ip
 80002ac:	d101      	bne.n	80002b2 <__aeabi_fmul+0x13e>
 80002ae:	0242      	lsls	r2, r0, #9
 80002b0:	d10f      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002b2:	ea93 0f0c 	teq	r3, ip
 80002b6:	d103      	bne.n	80002c0 <__aeabi_fmul+0x14c>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	bf18      	it	ne
 80002bc:	4608      	movne	r0, r1
 80002be:	d108      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002c0:	ea80 0001 	eor.w	r0, r0, r1
 80002c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d0:	4770      	bx	lr
 80002d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002da:	4770      	bx	lr

080002dc <__aeabi_drsub>:
 80002dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	e002      	b.n	80002e8 <__adddf3>
 80002e2:	bf00      	nop

080002e4 <__aeabi_dsub>:
 80002e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e8 <__adddf3>:
 80002e8:	b530      	push	{r4, r5, lr}
 80002ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f2:	ea94 0f05 	teq	r4, r5
 80002f6:	bf08      	it	eq
 80002f8:	ea90 0f02 	teqeq	r0, r2
 80002fc:	bf1f      	itttt	ne
 80002fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000302:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000306:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030e:	f000 80e2 	beq.w	80004d6 <__adddf3+0x1ee>
 8000312:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000316:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031a:	bfb8      	it	lt
 800031c:	426d      	neglt	r5, r5
 800031e:	dd0c      	ble.n	800033a <__adddf3+0x52>
 8000320:	442c      	add	r4, r5
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	ea82 0000 	eor.w	r0, r2, r0
 800032e:	ea83 0101 	eor.w	r1, r3, r1
 8000332:	ea80 0202 	eor.w	r2, r0, r2
 8000336:	ea81 0303 	eor.w	r3, r1, r3
 800033a:	2d36      	cmp	r5, #54	; 0x36
 800033c:	bf88      	it	hi
 800033e:	bd30      	pophi	{r4, r5, pc}
 8000340:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000344:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000348:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800034c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x70>
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800035c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000360:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x84>
 8000366:	4252      	negs	r2, r2
 8000368:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036c:	ea94 0f05 	teq	r4, r5
 8000370:	f000 80a7 	beq.w	80004c2 <__adddf3+0x1da>
 8000374:	f1a4 0401 	sub.w	r4, r4, #1
 8000378:	f1d5 0e20 	rsbs	lr, r5, #32
 800037c:	db0d      	blt.n	800039a <__adddf3+0xb2>
 800037e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000382:	fa22 f205 	lsr.w	r2, r2, r5
 8000386:	1880      	adds	r0, r0, r2
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000390:	1880      	adds	r0, r0, r2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	4159      	adcs	r1, r3
 8000398:	e00e      	b.n	80003b8 <__adddf3+0xd0>
 800039a:	f1a5 0520 	sub.w	r5, r5, #32
 800039e:	f10e 0e20 	add.w	lr, lr, #32
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a8:	bf28      	it	cs
 80003aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	18c0      	adds	r0, r0, r3
 80003b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	d507      	bpl.n	80003ce <__adddf3+0xe6>
 80003be:	f04f 0e00 	mov.w	lr, #0
 80003c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d2:	d31b      	bcc.n	800040c <__adddf3+0x124>
 80003d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d8:	d30c      	bcc.n	80003f4 <__adddf3+0x10c>
 80003da:	0849      	lsrs	r1, r1, #1
 80003dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e4:	f104 0401 	add.w	r4, r4, #1
 80003e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f0:	f080 809a 	bcs.w	8000528 <__adddf3+0x240>
 80003f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f8:	bf08      	it	eq
 80003fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fe:	f150 0000 	adcs.w	r0, r0, #0
 8000402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000406:	ea41 0105 	orr.w	r1, r1, r5
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000410:	4140      	adcs	r0, r0
 8000412:	eb41 0101 	adc.w	r1, r1, r1
 8000416:	3c01      	subs	r4, #1
 8000418:	bf28      	it	cs
 800041a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041e:	d2e9      	bcs.n	80003f4 <__adddf3+0x10c>
 8000420:	f091 0f00 	teq	r1, #0
 8000424:	bf04      	itt	eq
 8000426:	4601      	moveq	r1, r0
 8000428:	2000      	moveq	r0, #0
 800042a:	fab1 f381 	clz	r3, r1
 800042e:	bf08      	it	eq
 8000430:	3320      	addeq	r3, #32
 8000432:	f1a3 030b 	sub.w	r3, r3, #11
 8000436:	f1b3 0220 	subs.w	r2, r3, #32
 800043a:	da0c      	bge.n	8000456 <__adddf3+0x16e>
 800043c:	320c      	adds	r2, #12
 800043e:	dd08      	ble.n	8000452 <__adddf3+0x16a>
 8000440:	f102 0c14 	add.w	ip, r2, #20
 8000444:	f1c2 020c 	rsb	r2, r2, #12
 8000448:	fa01 f00c 	lsl.w	r0, r1, ip
 800044c:	fa21 f102 	lsr.w	r1, r1, r2
 8000450:	e00c      	b.n	800046c <__adddf3+0x184>
 8000452:	f102 0214 	add.w	r2, r2, #20
 8000456:	bfd8      	it	le
 8000458:	f1c2 0c20 	rsble	ip, r2, #32
 800045c:	fa01 f102 	lsl.w	r1, r1, r2
 8000460:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000464:	bfdc      	itt	le
 8000466:	ea41 010c 	orrle.w	r1, r1, ip
 800046a:	4090      	lslle	r0, r2
 800046c:	1ae4      	subs	r4, r4, r3
 800046e:	bfa2      	ittt	ge
 8000470:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000474:	4329      	orrge	r1, r5
 8000476:	bd30      	popge	{r4, r5, pc}
 8000478:	ea6f 0404 	mvn.w	r4, r4
 800047c:	3c1f      	subs	r4, #31
 800047e:	da1c      	bge.n	80004ba <__adddf3+0x1d2>
 8000480:	340c      	adds	r4, #12
 8000482:	dc0e      	bgt.n	80004a2 <__adddf3+0x1ba>
 8000484:	f104 0414 	add.w	r4, r4, #20
 8000488:	f1c4 0220 	rsb	r2, r4, #32
 800048c:	fa20 f004 	lsr.w	r0, r0, r4
 8000490:	fa01 f302 	lsl.w	r3, r1, r2
 8000494:	ea40 0003 	orr.w	r0, r0, r3
 8000498:	fa21 f304 	lsr.w	r3, r1, r4
 800049c:	ea45 0103 	orr.w	r1, r5, r3
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f1c4 040c 	rsb	r4, r4, #12
 80004a6:	f1c4 0220 	rsb	r2, r4, #32
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 f304 	lsl.w	r3, r1, r4
 80004b2:	ea40 0003 	orr.w	r0, r0, r3
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	fa21 f004 	lsr.w	r0, r1, r4
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	f094 0f00 	teq	r4, #0
 80004c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ca:	bf06      	itte	eq
 80004cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d0:	3401      	addeq	r4, #1
 80004d2:	3d01      	subne	r5, #1
 80004d4:	e74e      	b.n	8000374 <__adddf3+0x8c>
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf18      	it	ne
 80004dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e0:	d029      	beq.n	8000536 <__adddf3+0x24e>
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	d005      	beq.n	80004fa <__adddf3+0x212>
 80004ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f2:	bf04      	itt	eq
 80004f4:	4619      	moveq	r1, r3
 80004f6:	4610      	moveq	r0, r2
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea91 0f03 	teq	r1, r3
 80004fe:	bf1e      	ittt	ne
 8000500:	2100      	movne	r1, #0
 8000502:	2000      	movne	r0, #0
 8000504:	bd30      	popne	{r4, r5, pc}
 8000506:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050a:	d105      	bne.n	8000518 <__adddf3+0x230>
 800050c:	0040      	lsls	r0, r0, #1
 800050e:	4149      	adcs	r1, r1
 8000510:	bf28      	it	cs
 8000512:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000516:	bd30      	pop	{r4, r5, pc}
 8000518:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800051c:	bf3c      	itt	cc
 800051e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000522:	bd30      	popcc	{r4, r5, pc}
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800052c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000530:	f04f 0000 	mov.w	r0, #0
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053a:	bf1a      	itte	ne
 800053c:	4619      	movne	r1, r3
 800053e:	4610      	movne	r0, r2
 8000540:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000544:	bf1c      	itt	ne
 8000546:	460b      	movne	r3, r1
 8000548:	4602      	movne	r2, r0
 800054a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054e:	bf06      	itte	eq
 8000550:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000554:	ea91 0f03 	teqeq	r1, r3
 8000558:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	bf00      	nop

08000560 <__aeabi_ui2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000574:	f04f 0500 	mov.w	r5, #0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e750      	b.n	8000420 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_i2d>:
 8000580:	f090 0f00 	teq	r0, #0
 8000584:	bf04      	itt	eq
 8000586:	2100      	moveq	r1, #0
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000590:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000594:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000598:	bf48      	it	mi
 800059a:	4240      	negmi	r0, r0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e73e      	b.n	8000420 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_f2d>:
 80005a4:	0042      	lsls	r2, r0, #1
 80005a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b2:	bf1f      	itttt	ne
 80005b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c0:	4770      	bxne	lr
 80005c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c6:	bf08      	it	eq
 80005c8:	4770      	bxeq	lr
 80005ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ce:	bf04      	itt	eq
 80005d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d4:	4770      	bxeq	lr
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	e71c      	b.n	8000420 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_ul2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	e00a      	b.n	800060e <__aeabi_l2d+0x16>

080005f8 <__aeabi_l2d>:
 80005f8:	ea50 0201 	orrs.w	r2, r0, r1
 80005fc:	bf08      	it	eq
 80005fe:	4770      	bxeq	lr
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000606:	d502      	bpl.n	800060e <__aeabi_l2d+0x16>
 8000608:	4240      	negs	r0, r0
 800060a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000612:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061a:	f43f aed8 	beq.w	80003ce <__adddf3+0xe6>
 800061e:	f04f 0203 	mov.w	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000636:	f1c2 0320 	rsb	r3, r2, #32
 800063a:	fa00 fc03 	lsl.w	ip, r0, r3
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 fe03 	lsl.w	lr, r1, r3
 8000646:	ea40 000e 	orr.w	r0, r0, lr
 800064a:	fa21 f102 	lsr.w	r1, r1, r2
 800064e:	4414      	add	r4, r2
 8000650:	e6bd      	b.n	80003ce <__adddf3+0xe6>
 8000652:	bf00      	nop

08000654 <__aeabi_dmul>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000662:	bf1d      	ittte	ne
 8000664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000668:	ea94 0f0c 	teqne	r4, ip
 800066c:	ea95 0f0c 	teqne	r5, ip
 8000670:	f000 f8de 	bleq	8000830 <__aeabi_dmul+0x1dc>
 8000674:	442c      	add	r4, r5
 8000676:	ea81 0603 	eor.w	r6, r1, r3
 800067a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000686:	bf18      	it	ne
 8000688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000694:	d038      	beq.n	8000708 <__aeabi_dmul+0xb4>
 8000696:	fba0 ce02 	umull	ip, lr, r0, r2
 800069a:	f04f 0500 	mov.w	r5, #0
 800069e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006aa:	f04f 0600 	mov.w	r6, #0
 80006ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b2:	f09c 0f00 	teq	ip, #0
 80006b6:	bf18      	it	ne
 80006b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c8:	d204      	bcs.n	80006d4 <__aeabi_dmul+0x80>
 80006ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ce:	416d      	adcs	r5, r5
 80006d0:	eb46 0606 	adc.w	r6, r6, r6
 80006d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ec:	bf88      	it	hi
 80006ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f2:	d81e      	bhi.n	8000732 <__aeabi_dmul+0xde>
 80006f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fe:	f150 0000 	adcs.w	r0, r0, #0
 8000702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800070c:	ea46 0101 	orr.w	r1, r6, r1
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	f300 80ab 	bgt.w	800088c <__aeabi_dmul+0x238>
 8000736:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073a:	bfde      	ittt	le
 800073c:	2000      	movle	r0, #0
 800073e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000742:	bd70      	pople	{r4, r5, r6, pc}
 8000744:	f1c4 0400 	rsb	r4, r4, #0
 8000748:	3c20      	subs	r4, #32
 800074a:	da35      	bge.n	80007b8 <__aeabi_dmul+0x164>
 800074c:	340c      	adds	r4, #12
 800074e:	dc1b      	bgt.n	8000788 <__aeabi_dmul+0x134>
 8000750:	f104 0414 	add.w	r4, r4, #20
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f305 	lsl.w	r3, r0, r5
 800075c:	fa20 f004 	lsr.w	r0, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	fa21 f604 	lsr.w	r6, r1, r4
 8000778:	eb42 0106 	adc.w	r1, r2, r6
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f1c4 040c 	rsb	r4, r4, #12
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f304 	lsl.w	r3, r0, r4
 8000794:	fa20 f005 	lsr.w	r0, r0, r5
 8000798:	fa01 f204 	lsl.w	r2, r1, r4
 800079c:	ea40 0002 	orr.w	r0, r0, r2
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	f141 0100 	adc.w	r1, r1, #0
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f205 	lsl.w	r2, r0, r5
 80007c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c4:	fa20 f304 	lsr.w	r3, r0, r4
 80007c8:	fa01 f205 	lsl.w	r2, r1, r5
 80007cc:	ea43 0302 	orr.w	r3, r3, r2
 80007d0:	fa21 f004 	lsr.w	r0, r1, r4
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	fa21 f204 	lsr.w	r2, r1, r4
 80007dc:	ea20 0002 	bic.w	r0, r0, r2
 80007e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f094 0f00 	teq	r4, #0
 80007f4:	d10f      	bne.n	8000816 <__aeabi_dmul+0x1c2>
 80007f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fa:	0040      	lsls	r0, r0, #1
 80007fc:	eb41 0101 	adc.w	r1, r1, r1
 8000800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000804:	bf08      	it	eq
 8000806:	3c01      	subeq	r4, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1a6>
 800080a:	ea41 0106 	orr.w	r1, r1, r6
 800080e:	f095 0f00 	teq	r5, #0
 8000812:	bf18      	it	ne
 8000814:	4770      	bxne	lr
 8000816:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	eb43 0303 	adc.w	r3, r3, r3
 8000820:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000824:	bf08      	it	eq
 8000826:	3d01      	subeq	r5, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1c6>
 800082a:	ea43 0306 	orr.w	r3, r3, r6
 800082e:	4770      	bx	lr
 8000830:	ea94 0f0c 	teq	r4, ip
 8000834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000838:	bf18      	it	ne
 800083a:	ea95 0f0c 	teqne	r5, ip
 800083e:	d00c      	beq.n	800085a <__aeabi_dmul+0x206>
 8000840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000844:	bf18      	it	ne
 8000846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084a:	d1d1      	bne.n	80007f0 <__aeabi_dmul+0x19c>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085e:	bf06      	itte	eq
 8000860:	4610      	moveq	r0, r2
 8000862:	4619      	moveq	r1, r3
 8000864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000868:	d019      	beq.n	800089e <__aeabi_dmul+0x24a>
 800086a:	ea94 0f0c 	teq	r4, ip
 800086e:	d102      	bne.n	8000876 <__aeabi_dmul+0x222>
 8000870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000874:	d113      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000876:	ea95 0f0c 	teq	r5, ip
 800087a:	d105      	bne.n	8000888 <__aeabi_dmul+0x234>
 800087c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000880:	bf1c      	itt	ne
 8000882:	4610      	movne	r0, r2
 8000884:	4619      	movne	r1, r3
 8000886:	d10a      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000890:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000894:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <__aeabi_ddiv>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b6:	bf1d      	ittte	ne
 80008b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008bc:	ea94 0f0c 	teqne	r4, ip
 80008c0:	ea95 0f0c 	teqne	r5, ip
 80008c4:	f000 f8a7 	bleq	8000a16 <__aeabi_ddiv+0x16e>
 80008c8:	eba4 0405 	sub.w	r4, r4, r5
 80008cc:	ea81 0e03 	eor.w	lr, r1, r3
 80008d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d8:	f000 8088 	beq.w	80009ec <__aeabi_ddiv+0x144>
 80008dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000900:	429d      	cmp	r5, r3
 8000902:	bf08      	it	eq
 8000904:	4296      	cmpeq	r6, r2
 8000906:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090e:	d202      	bcs.n	8000916 <__aeabi_ddiv+0x6e>
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	1ab6      	subs	r6, r6, r2
 8000918:	eb65 0503 	sbc.w	r5, r5, r3
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000926:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000984:	ea55 0e06 	orrs.w	lr, r5, r6
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x114>
 800098a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000992:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a6:	d1c0      	bne.n	800092a <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	d10b      	bne.n	80009c6 <__aeabi_ddiv+0x11e>
 80009ae:	ea41 0100 	orr.w	r1, r1, r0
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ba:	e7b6      	b.n	800092a <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	bf04      	itt	eq
 80009c2:	4301      	orreq	r1, r0
 80009c4:	2000      	moveq	r0, #0
 80009c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ca:	bf88      	it	hi
 80009cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d0:	f63f aeaf 	bhi.w	8000732 <__aeabi_dmul+0xde>
 80009d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d8:	bf04      	itt	eq
 80009da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f8:	bfc2      	ittt	gt
 80009fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	popgt	{r4, r5, r6, pc}
 8000a04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a08:	f04f 0e00 	mov.w	lr, #0
 8000a0c:	3c01      	subs	r4, #1
 8000a0e:	e690      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a10:	ea45 0e06 	orr.w	lr, r5, r6
 8000a14:	e68d      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1a:	ea94 0f0c 	teq	r4, ip
 8000a1e:	bf08      	it	eq
 8000a20:	ea95 0f0c 	teqeq	r5, ip
 8000a24:	f43f af3b 	beq.w	800089e <__aeabi_dmul+0x24a>
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	d10a      	bne.n	8000a44 <__aeabi_ddiv+0x19c>
 8000a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a32:	f47f af34 	bne.w	800089e <__aeabi_dmul+0x24a>
 8000a36:	ea95 0f0c 	teq	r5, ip
 8000a3a:	f47f af25 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e72c      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a44:	ea95 0f0c 	teq	r5, ip
 8000a48:	d106      	bne.n	8000a58 <__aeabi_ddiv+0x1b0>
 8000a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4e:	f43f aefd 	beq.w	800084c <__aeabi_dmul+0x1f8>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e722      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a62:	f47f aec5 	bne.w	80007f0 <__aeabi_dmul+0x19c>
 8000a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6a:	f47f af0d 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a72:	f47f aeeb 	bne.w	800084c <__aeabi_dmul+0x1f8>
 8000a76:	e712      	b.n	800089e <__aeabi_dmul+0x24a>

08000a78 <__gedf2>:
 8000a78:	f04f 3cff 	mov.w	ip, #4294967295
 8000a7c:	e006      	b.n	8000a8c <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__ledf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	e002      	b.n	8000a8c <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__cmpdf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa2:	d01b      	beq.n	8000adc <__cmpdf2+0x54>
 8000aa4:	b001      	add	sp, #4
 8000aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aaa:	bf0c      	ite	eq
 8000aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab0:	ea91 0f03 	teqne	r1, r3
 8000ab4:	bf02      	ittt	eq
 8000ab6:	ea90 0f02 	teqeq	r0, r2
 8000aba:	2000      	moveq	r0, #0
 8000abc:	4770      	bxeq	lr
 8000abe:	f110 0f00 	cmn.w	r0, #0
 8000ac2:	ea91 0f03 	teq	r1, r3
 8000ac6:	bf58      	it	pl
 8000ac8:	4299      	cmppl	r1, r3
 8000aca:	bf08      	it	eq
 8000acc:	4290      	cmpeq	r0, r2
 8000ace:	bf2c      	ite	cs
 8000ad0:	17d8      	asrcs	r0, r3, #31
 8000ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad6:	f040 0001 	orr.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__cmpdf2+0x64>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d107      	bne.n	8000afc <__cmpdf2+0x74>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d1d6      	bne.n	8000aa4 <__cmpdf2+0x1c>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d0d3      	beq.n	8000aa4 <__cmpdf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cdrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4610      	mov	r0, r2
 8000b08:	4662      	mov	r2, ip
 8000b0a:	468c      	mov	ip, r1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4663      	mov	r3, ip
 8000b10:	e000      	b.n	8000b14 <__aeabi_cdcmpeq>
 8000b12:	bf00      	nop

08000b14 <__aeabi_cdcmpeq>:
 8000b14:	b501      	push	{r0, lr}
 8000b16:	f7ff ffb7 	bl	8000a88 <__cmpdf2>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf48      	it	mi
 8000b1e:	f110 0f00 	cmnmi.w	r0, #0
 8000b22:	bd01      	pop	{r0, pc}

08000b24 <__aeabi_dcmpeq>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff fff4 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2001      	moveq	r0, #1
 8000b30:	2000      	movne	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmplt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffea 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmple>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffe0 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpge>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffce 	bl	8000b04 <__aeabi_cdrcmple>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpgt>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffc4 	bl	8000b04 <__aeabi_cdrcmple>
 8000b7c:	bf34      	ite	cc
 8000b7e:	2001      	movcc	r0, #1
 8000b80:	2000      	movcs	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpun>:
 8000b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d102      	bne.n	8000b98 <__aeabi_dcmpun+0x10>
 8000b92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b96:	d10a      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_dcmpun+0x20>
 8000ba2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0001 	mov.w	r0, #1
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2iz>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bbc:	d215      	bcs.n	8000bea <__aeabi_d2iz+0x36>
 8000bbe:	d511      	bpl.n	8000be4 <__aeabi_d2iz+0x30>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d912      	bls.n	8000bf0 <__aeabi_d2iz+0x3c>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	bf18      	it	ne
 8000be0:	4240      	negne	r0, r0
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d105      	bne.n	8000bfc <__aeabi_d2iz+0x48>
 8000bf0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	bf08      	it	eq
 8000bf6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfa:	4770      	bx	lr
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_d2uiz>:
 8000c04:	004a      	lsls	r2, r1, #1
 8000c06:	d211      	bcs.n	8000c2c <__aeabi_d2uiz+0x28>
 8000c08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c0c:	d211      	bcs.n	8000c32 <__aeabi_d2uiz+0x2e>
 8000c0e:	d50d      	bpl.n	8000c2c <__aeabi_d2uiz+0x28>
 8000c10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c18:	d40e      	bmi.n	8000c38 <__aeabi_d2uiz+0x34>
 8000c1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c26:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2a:	4770      	bx	lr
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c36:	d102      	bne.n	8000c3e <__aeabi_d2uiz+0x3a>
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	4770      	bx	lr
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_d2f>:
 8000c44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c4c:	bf24      	itt	cs
 8000c4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c56:	d90d      	bls.n	8000c74 <__aeabi_d2f+0x30>
 8000c58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c6c:	bf08      	it	eq
 8000c6e:	f020 0001 	biceq.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c78:	d121      	bne.n	8000cbe <__aeabi_d2f+0x7a>
 8000c7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c7e:	bfbc      	itt	lt
 8000c80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	4770      	bxlt	lr
 8000c86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c8e:	f1c2 0218 	rsb	r2, r2, #24
 8000c92:	f1c2 0c20 	rsb	ip, r2, #32
 8000c96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c9e:	bf18      	it	ne
 8000ca0:	f040 0001 	orrne.w	r0, r0, #1
 8000ca4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb0:	ea40 000c 	orr.w	r0, r0, ip
 8000cb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cbc:	e7cc      	b.n	8000c58 <__aeabi_d2f+0x14>
 8000cbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc2:	d107      	bne.n	8000cd4 <__aeabi_d2f+0x90>
 8000cc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc8:	bf1e      	ittt	ne
 8000cca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd2:	4770      	bxne	lr
 8000cd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_frsub>:
 8000ce4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ce8:	e002      	b.n	8000cf0 <__addsf3>
 8000cea:	bf00      	nop

08000cec <__aeabi_fsub>:
 8000cec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cf0 <__addsf3>:
 8000cf0:	0042      	lsls	r2, r0, #1
 8000cf2:	bf1f      	itttt	ne
 8000cf4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cf8:	ea92 0f03 	teqne	r2, r3
 8000cfc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d04:	d06a      	beq.n	8000ddc <__addsf3+0xec>
 8000d06:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d0e:	bfc1      	itttt	gt
 8000d10:	18d2      	addgt	r2, r2, r3
 8000d12:	4041      	eorgt	r1, r0
 8000d14:	4048      	eorgt	r0, r1
 8000d16:	4041      	eorgt	r1, r0
 8000d18:	bfb8      	it	lt
 8000d1a:	425b      	neglt	r3, r3
 8000d1c:	2b19      	cmp	r3, #25
 8000d1e:	bf88      	it	hi
 8000d20:	4770      	bxhi	lr
 8000d22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d2e:	bf18      	it	ne
 8000d30:	4240      	negne	r0, r0
 8000d32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d3e:	bf18      	it	ne
 8000d40:	4249      	negne	r1, r1
 8000d42:	ea92 0f03 	teq	r2, r3
 8000d46:	d03f      	beq.n	8000dc8 <__addsf3+0xd8>
 8000d48:	f1a2 0201 	sub.w	r2, r2, #1
 8000d4c:	fa41 fc03 	asr.w	ip, r1, r3
 8000d50:	eb10 000c 	adds.w	r0, r0, ip
 8000d54:	f1c3 0320 	rsb	r3, r3, #32
 8000d58:	fa01 f103 	lsl.w	r1, r1, r3
 8000d5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d60:	d502      	bpl.n	8000d68 <__addsf3+0x78>
 8000d62:	4249      	negs	r1, r1
 8000d64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d6c:	d313      	bcc.n	8000d96 <__addsf3+0xa6>
 8000d6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d72:	d306      	bcc.n	8000d82 <__addsf3+0x92>
 8000d74:	0840      	lsrs	r0, r0, #1
 8000d76:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d7a:	f102 0201 	add.w	r2, r2, #1
 8000d7e:	2afe      	cmp	r2, #254	; 0xfe
 8000d80:	d251      	bcs.n	8000e26 <__addsf3+0x136>
 8000d82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8a:	bf08      	it	eq
 8000d8c:	f020 0001 	biceq.w	r0, r0, #1
 8000d90:	ea40 0003 	orr.w	r0, r0, r3
 8000d94:	4770      	bx	lr
 8000d96:	0049      	lsls	r1, r1, #1
 8000d98:	eb40 0000 	adc.w	r0, r0, r0
 8000d9c:	3a01      	subs	r2, #1
 8000d9e:	bf28      	it	cs
 8000da0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000da4:	d2ed      	bcs.n	8000d82 <__addsf3+0x92>
 8000da6:	fab0 fc80 	clz	ip, r0
 8000daa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000dae:	ebb2 020c 	subs.w	r2, r2, ip
 8000db2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000db6:	bfaa      	itet	ge
 8000db8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000dbc:	4252      	neglt	r2, r2
 8000dbe:	4318      	orrge	r0, r3
 8000dc0:	bfbc      	itt	lt
 8000dc2:	40d0      	lsrlt	r0, r2
 8000dc4:	4318      	orrlt	r0, r3
 8000dc6:	4770      	bx	lr
 8000dc8:	f092 0f00 	teq	r2, #0
 8000dcc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dd0:	bf06      	itte	eq
 8000dd2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dd6:	3201      	addeq	r2, #1
 8000dd8:	3b01      	subne	r3, #1
 8000dda:	e7b5      	b.n	8000d48 <__addsf3+0x58>
 8000ddc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000de4:	bf18      	it	ne
 8000de6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dea:	d021      	beq.n	8000e30 <__addsf3+0x140>
 8000dec:	ea92 0f03 	teq	r2, r3
 8000df0:	d004      	beq.n	8000dfc <__addsf3+0x10c>
 8000df2:	f092 0f00 	teq	r2, #0
 8000df6:	bf08      	it	eq
 8000df8:	4608      	moveq	r0, r1
 8000dfa:	4770      	bx	lr
 8000dfc:	ea90 0f01 	teq	r0, r1
 8000e00:	bf1c      	itt	ne
 8000e02:	2000      	movne	r0, #0
 8000e04:	4770      	bxne	lr
 8000e06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000e0a:	d104      	bne.n	8000e16 <__addsf3+0x126>
 8000e0c:	0040      	lsls	r0, r0, #1
 8000e0e:	bf28      	it	cs
 8000e10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e1a:	bf3c      	itt	cc
 8000e1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e20:	4770      	bxcc	lr
 8000e22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e2e:	4770      	bx	lr
 8000e30:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e34:	bf16      	itet	ne
 8000e36:	4608      	movne	r0, r1
 8000e38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e3c:	4601      	movne	r1, r0
 8000e3e:	0242      	lsls	r2, r0, #9
 8000e40:	bf06      	itte	eq
 8000e42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e46:	ea90 0f01 	teqeq	r0, r1
 8000e4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e4e:	4770      	bx	lr

08000e50 <__aeabi_ui2f>:
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e004      	b.n	8000e60 <__aeabi_i2f+0x8>
 8000e56:	bf00      	nop

08000e58 <__aeabi_i2f>:
 8000e58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e5c:	bf48      	it	mi
 8000e5e:	4240      	negmi	r0, r0
 8000e60:	ea5f 0c00 	movs.w	ip, r0
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e6c:	4601      	mov	r1, r0
 8000e6e:	f04f 0000 	mov.w	r0, #0
 8000e72:	e01c      	b.n	8000eae <__aeabi_l2f+0x2a>

08000e74 <__aeabi_ul2f>:
 8000e74:	ea50 0201 	orrs.w	r2, r0, r1
 8000e78:	bf08      	it	eq
 8000e7a:	4770      	bxeq	lr
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	e00a      	b.n	8000e98 <__aeabi_l2f+0x14>
 8000e82:	bf00      	nop

08000e84 <__aeabi_l2f>:
 8000e84:	ea50 0201 	orrs.w	r2, r0, r1
 8000e88:	bf08      	it	eq
 8000e8a:	4770      	bxeq	lr
 8000e8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	d502      	bpl.n	8000e98 <__aeabi_l2f+0x14>
 8000e92:	4240      	negs	r0, r0
 8000e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e98:	ea5f 0c01 	movs.w	ip, r1
 8000e9c:	bf02      	ittt	eq
 8000e9e:	4684      	moveq	ip, r0
 8000ea0:	4601      	moveq	r1, r0
 8000ea2:	2000      	moveq	r0, #0
 8000ea4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ea8:	bf08      	it	eq
 8000eaa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000eae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000eb2:	fabc f28c 	clz	r2, ip
 8000eb6:	3a08      	subs	r2, #8
 8000eb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ebc:	db10      	blt.n	8000ee0 <__aeabi_l2f+0x5c>
 8000ebe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec8:	f1c2 0220 	rsb	r2, r2, #32
 8000ecc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ed0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ed4:	eb43 0002 	adc.w	r0, r3, r2
 8000ed8:	bf08      	it	eq
 8000eda:	f020 0001 	biceq.w	r0, r0, #1
 8000ede:	4770      	bx	lr
 8000ee0:	f102 0220 	add.w	r2, r2, #32
 8000ee4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ee8:	f1c2 0220 	rsb	r2, r2, #32
 8000eec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ef0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ef4:	eb43 0002 	adc.w	r0, r3, r2
 8000ef8:	bf08      	it	eq
 8000efa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000efe:	4770      	bx	lr

08000f00 <__gesf2>:
 8000f00:	f04f 3cff 	mov.w	ip, #4294967295
 8000f04:	e006      	b.n	8000f14 <__cmpsf2+0x4>
 8000f06:	bf00      	nop

08000f08 <__lesf2>:
 8000f08:	f04f 0c01 	mov.w	ip, #1
 8000f0c:	e002      	b.n	8000f14 <__cmpsf2+0x4>
 8000f0e:	bf00      	nop

08000f10 <__cmpsf2>:
 8000f10:	f04f 0c01 	mov.w	ip, #1
 8000f14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f24:	bf18      	it	ne
 8000f26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f2a:	d011      	beq.n	8000f50 <__cmpsf2+0x40>
 8000f2c:	b001      	add	sp, #4
 8000f2e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f32:	bf18      	it	ne
 8000f34:	ea90 0f01 	teqne	r0, r1
 8000f38:	bf58      	it	pl
 8000f3a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f3e:	bf88      	it	hi
 8000f40:	17c8      	asrhi	r0, r1, #31
 8000f42:	bf38      	it	cc
 8000f44:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f48:	bf18      	it	ne
 8000f4a:	f040 0001 	orrne.w	r0, r0, #1
 8000f4e:	4770      	bx	lr
 8000f50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f54:	d102      	bne.n	8000f5c <__cmpsf2+0x4c>
 8000f56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f5a:	d105      	bne.n	8000f68 <__cmpsf2+0x58>
 8000f5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f60:	d1e4      	bne.n	8000f2c <__cmpsf2+0x1c>
 8000f62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f66:	d0e1      	beq.n	8000f2c <__cmpsf2+0x1c>
 8000f68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <__aeabi_cfrcmple>:
 8000f70:	4684      	mov	ip, r0
 8000f72:	4608      	mov	r0, r1
 8000f74:	4661      	mov	r1, ip
 8000f76:	e7ff      	b.n	8000f78 <__aeabi_cfcmpeq>

08000f78 <__aeabi_cfcmpeq>:
 8000f78:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f7a:	f7ff ffc9 	bl	8000f10 <__cmpsf2>
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	bf48      	it	mi
 8000f82:	f110 0f00 	cmnmi.w	r0, #0
 8000f86:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f88 <__aeabi_fcmpeq>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff fff4 	bl	8000f78 <__aeabi_cfcmpeq>
 8000f90:	bf0c      	ite	eq
 8000f92:	2001      	moveq	r0, #1
 8000f94:	2000      	movne	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmplt>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffea 	bl	8000f78 <__aeabi_cfcmpeq>
 8000fa4:	bf34      	ite	cc
 8000fa6:	2001      	movcc	r0, #1
 8000fa8:	2000      	movcs	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmple>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffe0 	bl	8000f78 <__aeabi_cfcmpeq>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpge>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffd2 	bl	8000f70 <__aeabi_cfrcmple>
 8000fcc:	bf94      	ite	ls
 8000fce:	2001      	movls	r0, #1
 8000fd0:	2000      	movhi	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_fcmpgt>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff ffc8 	bl	8000f70 <__aeabi_cfrcmple>
 8000fe0:	bf34      	ite	cc
 8000fe2:	2001      	movcc	r0, #1
 8000fe4:	2000      	movcs	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_d2lz>:
 8000fec:	b538      	push	{r3, r4, r5, lr}
 8000fee:	4605      	mov	r5, r0
 8000ff0:	460c      	mov	r4, r1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	4621      	mov	r1, r4
 8000ffa:	f7ff fd9d 	bl	8000b38 <__aeabi_dcmplt>
 8000ffe:	b928      	cbnz	r0, 800100c <__aeabi_d2lz+0x20>
 8001000:	4628      	mov	r0, r5
 8001002:	4621      	mov	r1, r4
 8001004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001008:	f000 b80a 	b.w	8001020 <__aeabi_d2ulz>
 800100c:	4628      	mov	r0, r5
 800100e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001012:	f000 f805 	bl	8001020 <__aeabi_d2ulz>
 8001016:	4240      	negs	r0, r0
 8001018:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800101c:	bd38      	pop	{r3, r4, r5, pc}
 800101e:	bf00      	nop

08001020 <__aeabi_d2ulz>:
 8001020:	b5d0      	push	{r4, r6, r7, lr}
 8001022:	2200      	movs	r2, #0
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <__aeabi_d2ulz+0x34>)
 8001026:	4606      	mov	r6, r0
 8001028:	460f      	mov	r7, r1
 800102a:	f7ff fb13 	bl	8000654 <__aeabi_dmul>
 800102e:	f7ff fde9 	bl	8000c04 <__aeabi_d2uiz>
 8001032:	4604      	mov	r4, r0
 8001034:	f7ff fa94 	bl	8000560 <__aeabi_ui2d>
 8001038:	2200      	movs	r2, #0
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <__aeabi_d2ulz+0x38>)
 800103c:	f7ff fb0a 	bl	8000654 <__aeabi_dmul>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4630      	mov	r0, r6
 8001046:	4639      	mov	r1, r7
 8001048:	f7ff f94c 	bl	80002e4 <__aeabi_dsub>
 800104c:	f7ff fdda 	bl	8000c04 <__aeabi_d2uiz>
 8001050:	4621      	mov	r1, r4
 8001052:	bdd0      	pop	{r4, r6, r7, pc}
 8001054:	3df00000 	.word	0x3df00000
 8001058:	41f00000 	.word	0x41f00000

0800105c <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f002 feb3 	bl	8003dd0 <HAL_TIM_Base_Start>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 8001086:	bf00      	nop
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	429a      	cmp	r2, r3
 8001092:	d3f9      	bcc.n	8001088 <DELAY_TIM_Us+0x16>
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <DHT11_SetPinIn>:
static DHT11_Status DHT11_Start(DHT11_Sensor* dht);
static uint8_t DHT11_ReadByte(DHT11_Sensor* dht);

/* Private user code ---------------------------------------------------------*/
static void DHT11_SetPinIn(DHT11_Sensor* dht)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = dht->Pin;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	889b      	ldrh	r3, [r3, #4]
 80010ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f107 0208 	add.w	r2, r7, #8
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 fb9e 	bl	8002810 <HAL_GPIO_Init>
}
 80010d4:	bf00      	nop
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <DHT11_SetPinOut>:

static void DHT11_SetPinOut(DHT11_Sensor* dht)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = dht->Pin;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	889b      	ldrh	r3, [r3, #4]
 80010f6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2302      	movs	r3, #2
 80010fe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f107 0208 	add.w	r2, r7, #8
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fb80 	bl	8002810 <HAL_GPIO_Init>
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <DHT11_WritePin>:

static void DHT11_WritePin(DHT11_Sensor* dht, uint8_t value)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(dht->Port, dht->Pin, value);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	889b      	ldrh	r3, [r3, #4]
 800112c:	78fa      	ldrb	r2, [r7, #3]
 800112e:	4619      	mov	r1, r3
 8001130:	f001 fd09 	bl	8002b46 <HAL_GPIO_WritePin>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <DHT11_ReadPin>:

static uint8_t DHT11_ReadPin(DHT11_Sensor* dht)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    uint8_t value = HAL_GPIO_ReadPin(dht->Port, dht->Pin);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	889b      	ldrh	r3, [r3, #4]
 800114c:	4619      	mov	r1, r3
 800114e:	4610      	mov	r0, r2
 8001150:	f001 fce2 	bl	8002b18 <HAL_GPIO_ReadPin>
 8001154:	4603      	mov	r3, r0
 8001156:	73fb      	strb	r3, [r7, #15]
    return value;
 8001158:	7bfb      	ldrb	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <DHT11_DelayInit>:

static void DHT11_DelayInit(DHT11_Sensor* dht)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(dht->Timer);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff74 	bl	800105c <DELAY_TIM_Init>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <DHT11_DelayUs>:

static void DHT11_DelayUs(DHT11_Sensor* dht, uint16_t time)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(dht->Timer, time);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	887a      	ldrh	r2, [r7, #2]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff6e 	bl	8001072 <DELAY_TIM_Us>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <DHT11_Start>:

static DHT11_Status DHT11_Start(DHT11_Sensor* dht)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_ERR_RESPONSE;
 80011a6:	2301      	movs	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]

    DHT11_SetPinOut(dht);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff96 	bl	80010dc <DHT11_SetPinOut>

    /* MCU sends out start signal and pulls down  voltage for at least 18 ms */
    DHT11_WritePin(dht, 0);
 80011b0:	2100      	movs	r1, #0
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffb0 	bl	8001118 <DHT11_WritePin>
    DHT11_DelayUs(dht, 18000);
 80011b8:	f244 6150 	movw	r1, #18000	; 0x4650
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ffdd 	bl	800117c <DHT11_DelayUs>

    /* MCU waits for DHT response (20-40us) */
    DHT11_SetPinIn(dht);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff6c 	bl	80010a0 <DHT11_SetPinIn>
    DHT11_DelayUs(dht, 50);
 80011c8:	2132      	movs	r1, #50	; 0x32
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffd6 	bl	800117c <DHT11_DelayUs>

    /* DHT sends out response signal and keeps it for 80 us */
    if (DHT11_ReadPin(dht) == 0)
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ffb3 	bl	800113c <DHT11_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d112      	bne.n	8001202 <DHT11_Start+0x64>
    {
        DHT11_DelayUs(dht, 80);
 80011dc:	2150      	movs	r1, #80	; 0x50
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffcc 	bl	800117c <DHT11_DelayUs>
        if (DHT11_ReadPin(dht) == 1)
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ffa9 	bl	800113c <DHT11_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <DHT11_Start+0x64>
        {
            status = DHT11_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
            /* Wait for data transmission */
            while(DHT11_ReadPin(dht) == 1);
 80011f4:	bf00      	nop
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffa0 	bl	800113c <DHT11_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d0f9      	beq.n	80011f6 <DHT11_Start+0x58>
        }
    }

    return status;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <DHT11_ReadByte>:

static uint8_t DHT11_ReadByte(DHT11_Sensor* dht)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    uint8_t value = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    DHT11_SetPinIn(dht);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff41 	bl	80010a0 <DHT11_SetPinIn>

    for (idx = 0; idx < 8; idx++)
 800121e:	2300      	movs	r3, #0
 8001220:	73bb      	strb	r3, [r7, #14]
 8001222:	e035      	b.n	8001290 <DHT11_ReadByte+0x84>
    {
        /* Wait for old signal to end */
        while(DHT11_ReadPin(dht) == 0);
 8001224:	bf00      	nop
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff88 	bl	800113c <DHT11_ReadPin>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f9      	beq.n	8001226 <DHT11_ReadByte+0x1a>

        DHT11_DelayUs(dht, 40);
 8001232:	2128      	movs	r1, #40	; 0x28
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ffa1 	bl	800117c <DHT11_DelayUs>

        /* Bit 1 */
        if (DHT11_ReadPin(dht) == 1)
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff7e 	bl	800113c <DHT11_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b01      	cmp	r3, #1
 8001244:	d10c      	bne.n	8001260 <DHT11_ReadByte+0x54>
        {
            /* Set bit at (7-idx) position */
            value |= (0x01 << (7 - idx));
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	f1c3 0307 	rsb	r3, r3, #7
 800124c:	2201      	movs	r2, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	b25a      	sxtb	r2, r3
 8001254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001258:	4313      	orrs	r3, r2
 800125a:	b25b      	sxtb	r3, r3
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e00d      	b.n	800127c <DHT11_ReadByte+0x70>

        /* Bit 0 */
        else
        {
            /* Clear bit at (7-idx) position */
            value &= ~(0x01 << (7-idx));
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2201      	movs	r2, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	b25b      	sxtb	r3, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	b25a      	sxtb	r2, r3
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001276:	4013      	ands	r3, r2
 8001278:	b25b      	sxtb	r3, r3
 800127a:	73fb      	strb	r3, [r7, #15]
        }

        while(DHT11_ReadPin(dht) == 1);
 800127c:	bf00      	nop
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff5c 	bl	800113c <DHT11_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	d0f9      	beq.n	800127e <DHT11_ReadByte+0x72>
    for (idx = 0; idx < 8; idx++)
 800128a:	7bbb      	ldrb	r3, [r7, #14]
 800128c:	3301      	adds	r3, #1
 800128e:	73bb      	strb	r3, [r7, #14]
 8001290:	7bbb      	ldrb	r3, [r7, #14]
 8001292:	2b07      	cmp	r3, #7
 8001294:	d9c6      	bls.n	8001224 <DHT11_ReadByte+0x18>
    }

    return value;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <DHT11_Init>:

void DHT11_Init(DHT11_Sensor* dht, GPIO_TypeDef* port, uint16_t pin, TIM_HandleTypeDef* timer)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	4613      	mov	r3, r2
 80012ae:	80fb      	strh	r3, [r7, #6]
    dht->Port   = port;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	601a      	str	r2, [r3, #0]
    dht->Pin    = pin;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	88fa      	ldrh	r2, [r7, #6]
 80012ba:	809a      	strh	r2, [r3, #4]
    dht->Timer  = timer;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	609a      	str	r2, [r3, #8]
    dht->Temp   = INIT_TEMP_VALUE;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4a05      	ldr	r2, [pc, #20]	; (80012dc <DHT11_Init+0x3c>)
 80012c6:	60da      	str	r2, [r3, #12]
    dht->Humi   = INIT_HUMI_VALUE;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <DHT11_Init+0x3c>)
 80012cc:	611a      	str	r2, [r3, #16]

    DHT11_DelayInit(dht);
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff ff47 	bl	8001162 <DHT11_DelayInit>
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	bf800000 	.word	0xbf800000

080012e0 <DHT11_GetData>:

DHT11_Status DHT11_GetData(DHT11_Sensor* dht)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]

    uint8_t rh_integral, rh_decimal, temp_integral, temp_decimal, sum;

	status = DHT11_Start(dht);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff56 	bl	800119e <DHT11_Start>
 80012f2:	4603      	mov	r3, r0
 80012f4:	73fb      	strb	r3, [r7, #15]

    if (status == DHT11_OK)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d15f      	bne.n	80013bc <DHT11_GetData+0xdc>
    {
        /* Read 5 byte from DHT */
        rh_integral     = DHT11_ReadByte(dht);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff85 	bl	800120c <DHT11_ReadByte>
 8001302:	4603      	mov	r3, r0
 8001304:	73bb      	strb	r3, [r7, #14]
        rh_decimal      = DHT11_ReadByte(dht);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ff80 	bl	800120c <DHT11_ReadByte>
 800130c:	4603      	mov	r3, r0
 800130e:	737b      	strb	r3, [r7, #13]
        temp_integral   = DHT11_ReadByte(dht);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff7b 	bl	800120c <DHT11_ReadByte>
 8001316:	4603      	mov	r3, r0
 8001318:	733b      	strb	r3, [r7, #12]
        temp_decimal    = DHT11_ReadByte(dht);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff76 	bl	800120c <DHT11_ReadByte>
 8001320:	4603      	mov	r3, r0
 8001322:	72fb      	strb	r3, [r7, #11]
        sum             = DHT11_ReadByte(dht);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff71 	bl	800120c <DHT11_ReadByte>
 800132a:	4603      	mov	r3, r0
 800132c:	72bb      	strb	r3, [r7, #10]

        if (sum == rh_integral + rh_decimal + temp_integral + temp_decimal)
 800132e:	7aba      	ldrb	r2, [r7, #10]
 8001330:	7bb9      	ldrb	r1, [r7, #14]
 8001332:	7b7b      	ldrb	r3, [r7, #13]
 8001334:	4419      	add	r1, r3
 8001336:	7b3b      	ldrb	r3, [r7, #12]
 8001338:	4419      	add	r1, r3
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	440b      	add	r3, r1
 800133e:	429a      	cmp	r2, r3
 8001340:	d13a      	bne.n	80013b8 <DHT11_GetData+0xd8>
        {
            dht->Humi = rh_integral + (float)(rh_decimal/10.0);
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fd87 	bl	8000e58 <__aeabi_i2f>
 800134a:	4604      	mov	r4, r0
 800134c:	7b7b      	ldrb	r3, [r7, #13]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f916 	bl	8000580 <__aeabi_i2d>
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <DHT11_GetData+0xe8>)
 800135a:	f7ff faa5 	bl	80008a8 <__aeabi_ddiv>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fc6d 	bl	8000c44 <__aeabi_d2f>
 800136a:	4603      	mov	r3, r0
 800136c:	4619      	mov	r1, r3
 800136e:	4620      	mov	r0, r4
 8001370:	f7ff fcbe 	bl	8000cf0 <__addsf3>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	611a      	str	r2, [r3, #16]
            dht->Temp = temp_integral + (float)(temp_decimal/10.0);
 800137c:	7b3b      	ldrb	r3, [r7, #12]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fd6a 	bl	8000e58 <__aeabi_i2f>
 8001384:	4604      	mov	r4, r0
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8f9 	bl	8000580 <__aeabi_i2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <DHT11_GetData+0xe8>)
 8001394:	f7ff fa88 	bl	80008a8 <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fc50 	bl	8000c44 <__aeabi_d2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4619      	mov	r1, r3
 80013a8:	4620      	mov	r0, r4
 80013aa:	f7ff fca1 	bl	8000cf0 <__addsf3>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	e001      	b.n	80013bc <DHT11_GetData+0xdc>
        }

        else
        {
            status = DHT11_ERR_CHECKSUM;
 80013b8:	2302      	movs	r3, #2
 80013ba:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd90      	pop	{r4, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40240000 	.word	0x40240000

080013cc <SRF05_DELAY_Us>:
#define TRIG_LOW()		HAL_GPIO_WritePin(SRF05->TRIGGER_GPIOx, SRF05->TRIGGER_GPIO_Pin, GPIO_PIN_RESET)
#define READ_ECHO() 	HAL_GPIO_ReadPin(SRF05->ECHO_GPIOx, SRF05->ECHO_GPIO_Pin)
extern TIM_HandleTypeDef htim4;

static void SRF05_DELAY_Us(uint16_t Time)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
	DELAY_TIM_Us(&htim4, Time); // thay the ham nay neu su dung ham delay khac
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	4619      	mov	r1, r3
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <SRF05_DELAY_Us+0x1c>)
 80013dc:	f7ff fe49 	bl	8001072 <DELAY_TIM_Us>

}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000254 	.word	0x20000254

080013ec <SRF05_Init>:

//************************* HIGH Level Layer **********************************************************/
// function:  init SRF05
// input: SRF05 target, TRIG pin, Echo Pin
// output: 0 false, 1 true
uint8_t SRF05_Init(SRF05_Device_Name* SRF05, GPIO_TypeDef* ECHO_GPIOx, uint16_t ECHO_GPIO_Pin, GPIO_TypeDef* TRIGGER_GPIOx, uint16_t TRIGGER_GPIO_Pin) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	4613      	mov	r3, r2
 80013fa:	80fb      	strh	r3, [r7, #6]

	SRF05->ECHO_GPIOx = ECHO_GPIOx;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	601a      	str	r2, [r3, #0]
	SRF05->ECHO_GPIO_Pin = ECHO_GPIO_Pin;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	88fa      	ldrh	r2, [r7, #6]
 8001406:	809a      	strh	r2, [r3, #4]
	SRF05->TRIGGER_GPIOx = TRIGGER_GPIOx;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	609a      	str	r2, [r3, #8]
	SRF05->TRIGGER_GPIO_Pin = TRIGGER_GPIO_Pin;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	8b3a      	ldrh	r2, [r7, #24]
 8001412:	819a      	strh	r2, [r3, #12]
	TRIG_LOW();
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6898      	ldr	r0, [r3, #8]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	899b      	ldrh	r3, [r3, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	f001 fb91 	bl	8002b46 <HAL_GPIO_WritePin>
	if (SRF05_Read(SRF05) >= 0) {
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f000 f811 	bl	800144c <SRF05_Read>
 800142a:	4603      	mov	r3, r0
 800142c:	f04f 0100 	mov.w	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fdc7 	bl	8000fc4 <__aeabi_fcmpge>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SRF05_Init+0x54>
		return 1;
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <SRF05_Init+0x56>
	}
	return 0;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <SRF05_Read>:

float SRF05_Read(SRF05_Device_Name* SRF05) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	uint32_t time, timeout;

	TRIG_LOW();
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6898      	ldr	r0, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	899b      	ldrh	r3, [r3, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	4619      	mov	r1, r3
 8001460:	f001 fb71 	bl	8002b46 <HAL_GPIO_WritePin>
	SRF05_DELAY_Us(2);
 8001464:	2002      	movs	r0, #2
 8001466:	f7ff ffb1 	bl	80013cc <SRF05_DELAY_Us>
	TRIG_HIGH();
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6898      	ldr	r0, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	899b      	ldrh	r3, [r3, #12]
 8001472:	2201      	movs	r2, #1
 8001474:	4619      	mov	r1, r3
 8001476:	f001 fb66 	bl	8002b46 <HAL_GPIO_WritePin>
	SRF05_DELAY_Us(10);
 800147a:	200a      	movs	r0, #10
 800147c:	f7ff ffa6 	bl	80013cc <SRF05_DELAY_Us>
	TRIG_LOW();
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6898      	ldr	r0, [r3, #8]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	899b      	ldrh	r3, [r3, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	f001 fb5b 	bl	8002b46 <HAL_GPIO_WritePin>
	timeout = SRF05_TIMEOUT;
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <SRF05_Read+0xbc>)
 8001492:	60bb      	str	r3, [r7, #8]
	while (!READ_ECHO())
 8001494:	e006      	b.n	80014a4 <SRF05_Read+0x58>
	{
		if (timeout-- == 0x00)
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1e5a      	subs	r2, r3, #1
 800149a:	60ba      	str	r2, [r7, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <SRF05_Read+0x58>
		{
			return -1;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <SRF05_Read+0xc0>)
 80014a2:	e02c      	b.n	80014fe <SRF05_Read+0xb2>
	while (!READ_ECHO())
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	889b      	ldrh	r3, [r3, #4]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4610      	mov	r0, r2
 80014b0:	f001 fb32 	bl	8002b18 <HAL_GPIO_ReadPin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0ed      	beq.n	8001496 <SRF05_Read+0x4a>
		}
	}
	time = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
	while (READ_ECHO())
 80014be:	e005      	b.n	80014cc <SRF05_Read+0x80>
	{
		time++;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	3301      	adds	r3, #1
 80014c4:	60fb      	str	r3, [r7, #12]
		SRF05_DELAY_Us(1);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff ff80 	bl	80013cc <SRF05_DELAY_Us>
	while (READ_ECHO())
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	889b      	ldrh	r3, [r3, #4]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4610      	mov	r0, r2
 80014d8:	f001 fb1e 	bl	8002b18 <HAL_GPIO_ReadPin>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1ee      	bne.n	80014c0 <SRF05_Read+0x74>
	}
	SRF05->Distance =  (float)time * SRF05_NUMBER;
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7ff fcb4 	bl	8000e50 <__aeabi_ui2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4909      	ldr	r1, [pc, #36]	; (8001510 <SRF05_Read+0xc4>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe fe41 	bl	8000174 <__aeabi_fmul>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	611a      	str	r2, [r3, #16]

	return SRF05->Distance;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	000f4240 	.word	0x000f4240
 800150c:	bf800000 	.word	0xbf800000
 8001510:	3c8cc17a 	.word	0x3c8cc17a

08001514 <LCD_Write>:
static void LCD_WriteChar(LCD_I2C_Name* lcd, char character);

/* Private user code ---------------------------------------------------------*/

static void LCD_Write(LCD_I2C_Name* lcd, uint8_t data, uint8_t mode)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af02      	add	r7, sp, #8
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	70fb      	strb	r3, [r7, #3]
 8001520:	4613      	mov	r3, r2
 8001522:	70bb      	strb	r3, [r7, #2]
    uint8_t Data_H, Data_L;
	uint8_t Data_I2C[4];

	Data_H = data & 0xF0;
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	f023 030f 	bic.w	r3, r3, #15
 800152a:	73fb      	strb	r3, [r7, #15]
	Data_L = (data << 4) & 0xF0;
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	73bb      	strb	r3, [r7, #14]

	if(lcd->BackLight)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7adb      	ldrb	r3, [r3, #11]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d007      	beq.n	800154a <LCD_Write+0x36>
	{
        /* Set bit */
		Data_H |= LCD_BACKLIGHT;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8001542:	7bbb      	ldrb	r3, [r7, #14]
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA)
 800154a:	78bb      	ldrb	r3, [r7, #2]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d108      	bne.n	8001562 <LCD_Write+0x4e>
	{
        /* Set bit */
		Data_H |= LCD_RS;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8001558:	7bbb      	ldrb	r3, [r7, #14]
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	73bb      	strb	r3, [r7, #14]
 8001560:	e00a      	b.n	8001578 <LCD_Write+0x64>
	}
	else if(mode == LCD_COMMAND)
 8001562:	78bb      	ldrb	r3, [r7, #2]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d107      	bne.n	8001578 <LCD_Write+0x64>
	{
        /* Clear bit */
		Data_H &= ~LCD_RS;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8001570:	7bbb      	ldrb	r3, [r7, #14]
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	73bb      	strb	r3, [r7, #14]
	}

    /* Assign data to higher bits */
	Data_I2C[0] = Data_H|LCD_EN;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	b2db      	uxtb	r3, r3
 8001580:	723b      	strb	r3, [r7, #8]
	LCD_DelayMs(1);
 8001582:	2001      	movs	r0, #1
 8001584:	f001 f840 	bl	8002608 <HAL_Delay>
	Data_I2C[1] = Data_H;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	727b      	strb	r3, [r7, #9]

    /* Assign data to lower bits */
	Data_I2C[2] = Data_L|LCD_EN;
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	b2db      	uxtb	r3, r3
 8001594:	72bb      	strb	r3, [r7, #10]
	LCD_DelayMs(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f001 f836 	bl	8002608 <HAL_Delay>
	Data_I2C[3] = Data_L;
 800159c:	7bbb      	ldrb	r3, [r7, #14]
 800159e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd->I2c, lcd->Address, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	791b      	ldrb	r3, [r3, #4]
 80015a8:	b299      	uxth	r1, r3
 80015aa:	f107 0208 	add.w	r2, r7, #8
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2304      	movs	r3, #4
 80015b6:	f001 fc23 	bl	8002e00 <HAL_I2C_Master_Transmit>
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <LCD_Init>:

void LCD_Init(LCD_I2C_Name* lcd, I2C_HandleTypeDef* i2c, uint8_t address, uint8_t columns, uint8_t rows)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	4611      	mov	r1, r2
 80015ce:	461a      	mov	r2, r3
 80015d0:	460b      	mov	r3, r1
 80015d2:	71fb      	strb	r3, [r7, #7]
 80015d4:	4613      	mov	r3, r2
 80015d6:	71bb      	strb	r3, [r7, #6]
    lcd->I2c        = i2c;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	601a      	str	r2, [r3, #0]
    lcd->Address    = address;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	79fa      	ldrb	r2, [r7, #7]
 80015e2:	711a      	strb	r2, [r3, #4]
    lcd->Columns    = columns;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	79ba      	ldrb	r2, [r7, #6]
 80015e8:	715a      	strb	r2, [r3, #5]
    lcd->Rows       = rows;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	7e3a      	ldrb	r2, [r7, #24]
 80015ee:	719a      	strb	r2, [r3, #6]

    lcd->FunctionSet    = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2228      	movs	r2, #40	; 0x28
 80015f4:	729a      	strb	r2, [r3, #10]
    lcd->EntryMode      = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2206      	movs	r2, #6
 80015fa:	71da      	strb	r2, [r3, #7]
    lcd->DisplayControl = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	220c      	movs	r2, #12
 8001600:	721a      	strb	r2, [r3, #8]
    lcd->CursorShift    = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2214      	movs	r2, #20
 8001606:	725a      	strb	r2, [r3, #9]
    lcd->BackLight      = LCD_BACKLIGHT;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2208      	movs	r2, #8
 800160c:	72da      	strb	r2, [r3, #11]

    LCD_DelayMs(50);
 800160e:	2032      	movs	r0, #50	; 0x32
 8001610:	f000 fffa 	bl	8002608 <HAL_Delay>
	LCD_Write(lcd, 0x33, LCD_COMMAND);
 8001614:	2200      	movs	r2, #0
 8001616:	2133      	movs	r1, #51	; 0x33
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff ff7b 	bl	8001514 <LCD_Write>

	LCD_Write(lcd, 0x33, LCD_COMMAND);
 800161e:	2200      	movs	r2, #0
 8001620:	2133      	movs	r1, #51	; 0x33
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff ff76 	bl	8001514 <LCD_Write>
	LCD_DelayMs(5);
 8001628:	2005      	movs	r0, #5
 800162a:	f000 ffed 	bl	8002608 <HAL_Delay>
	LCD_Write(lcd, 0x32, LCD_COMMAND);
 800162e:	2200      	movs	r2, #0
 8001630:	2132      	movs	r1, #50	; 0x32
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f7ff ff6e 	bl	8001514 <LCD_Write>
	LCD_DelayMs(5);
 8001638:	2005      	movs	r0, #5
 800163a:	f000 ffe5 	bl	8002608 <HAL_Delay>
	LCD_Write(lcd, 0x20, LCD_COMMAND);
 800163e:	2200      	movs	r2, #0
 8001640:	2120      	movs	r1, #32
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f7ff ff66 	bl	8001514 <LCD_Write>
	LCD_DelayMs(5);
 8001648:	2005      	movs	r0, #5
 800164a:	f000 ffdd 	bl	8002608 <HAL_Delay>

	LCD_Write(lcd, lcd->EntryMode, LCD_COMMAND);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	79db      	ldrb	r3, [r3, #7]
 8001652:	2200      	movs	r2, #0
 8001654:	4619      	mov	r1, r3
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f7ff ff5c 	bl	8001514 <LCD_Write>
	LCD_Write(lcd, lcd->DisplayControl, LCD_COMMAND);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	7a1b      	ldrb	r3, [r3, #8]
 8001660:	2200      	movs	r2, #0
 8001662:	4619      	mov	r1, r3
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff ff55 	bl	8001514 <LCD_Write>
	LCD_Write(lcd, lcd->CursorShift, LCD_COMMAND);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	7a5b      	ldrb	r3, [r3, #9]
 800166e:	2200      	movs	r2, #0
 8001670:	4619      	mov	r1, r3
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f7ff ff4e 	bl	8001514 <LCD_Write>
	LCD_Write(lcd, lcd->FunctionSet, LCD_COMMAND);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	7a9b      	ldrb	r3, [r3, #10]
 800167c:	2200      	movs	r2, #0
 800167e:	4619      	mov	r1, r3
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f7ff ff47 	bl	8001514 <LCD_Write>

	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 8001686:	2200      	movs	r2, #0
 8001688:	2101      	movs	r1, #1
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff ff42 	bl	8001514 <LCD_Write>
	LCD_Write(lcd, LCD_RETURNHOME, LCD_COMMAND);
 8001690:	2200      	movs	r2, #0
 8001692:	2102      	movs	r1, #2
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f7ff ff3d 	bl	8001514 <LCD_Write>
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <LCD_WriteChar>:

static void LCD_WriteChar(LCD_I2C_Name* lcd, char character)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	70fb      	strb	r3, [r7, #3]
	LCD_Write(lcd, character, LCD_DATA);
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	2201      	movs	r2, #1
 80016b2:	4619      	mov	r1, r3
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff2d 	bl	8001514 <LCD_Write>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <LCD_WriteString>:

void LCD_WriteString(LCD_I2C_Name* lcd, char *string)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
	while(*string)
 80016cc:	e007      	b.n	80016de <LCD_WriteString+0x1c>
	{
		LCD_WriteChar(lcd, *string++);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	603a      	str	r2, [r7, #0]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ffe2 	bl	80016a2 <LCD_WriteChar>
	while(*string)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f3      	bne.n	80016ce <LCD_WriteString+0xc>
	}
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <LCD_Clear>:

void LCD_Clear(LCD_I2C_Name* lcd)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2101      	movs	r1, #1
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff09 	bl	8001514 <LCD_Write>
	LCD_DelayMs(5);
 8001702:	2005      	movs	r0, #5
 8001704:	f000 ff80 	bl	8002608 <HAL_Delay>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <LCD_SetCursor>:

void LCD_SetCursor(LCD_I2C_Name* lcd, uint8_t x_pos, uint8_t y_pos)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
 800171c:	4613      	mov	r3, r2
 800171e:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]

	if(x_pos >= lcd->Columns)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	795b      	ldrb	r3, [r3, #5]
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	429a      	cmp	r2, r3
 800172c:	d303      	bcc.n	8001736 <LCD_SetCursor+0x26>
	{
		x_pos = lcd->Columns - 1;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	795b      	ldrb	r3, [r3, #5]
 8001732:	3b01      	subs	r3, #1
 8001734:	70fb      	strb	r3, [r7, #3]
	}

	if(y_pos >= lcd->Rows)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	799b      	ldrb	r3, [r3, #6]
 800173a:	78ba      	ldrb	r2, [r7, #2]
 800173c:	429a      	cmp	r2, r3
 800173e:	d303      	bcc.n	8001748 <LCD_SetCursor+0x38>
	{
		y_pos = lcd->Rows -1;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	799b      	ldrb	r3, [r3, #6]
 8001744:	3b01      	subs	r3, #1
 8001746:	70bb      	strb	r3, [r7, #2]
	}

	switch (y_pos)
 8001748:	78bb      	ldrb	r3, [r7, #2]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d819      	bhi.n	8001782 <LCD_SetCursor+0x72>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <LCD_SetCursor+0x44>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	08001765 	.word	0x08001765
 8001758:	0800176b 	.word	0x0800176b
 800175c:	08001773 	.word	0x08001773
 8001760:	0800177b 	.word	0x0800177b
	{
		case 0:
			DRAM_ADDRESS = 0x00 + x_pos;
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	73fb      	strb	r3, [r7, #15]
			break;
 8001768:	e00b      	b.n	8001782 <LCD_SetCursor+0x72>
		case 1:
			DRAM_ADDRESS = 0x40 + x_pos;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	3340      	adds	r3, #64	; 0x40
 800176e:	73fb      	strb	r3, [r7, #15]
			break;
 8001770:	e007      	b.n	8001782 <LCD_SetCursor+0x72>
		case 2:
			DRAM_ADDRESS = 0x14 + x_pos;
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	3314      	adds	r3, #20
 8001776:	73fb      	strb	r3, [r7, #15]
			break;
 8001778:	e003      	b.n	8001782 <LCD_SetCursor+0x72>
		case 3:
			DRAM_ADDRESS = 0x54 + x_pos;
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	3354      	adds	r3, #84	; 0x54
 800177e:	73fb      	strb	r3, [r7, #15]
			break;
 8001780:	bf00      	nop
	}

	LCD_Write(lcd, LCD_SETDDRAMADDR|DRAM_ADDRESS, LCD_COMMAND);
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2200      	movs	r2, #0
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fec0 	bl	8001514 <LCD_Write>
}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <__io_putchar>:
void Task_InterruptHandler(void *argument);
void Task_LCD(void *argument);

/* USER CODE BEGIN PFP */
int __io_putchar(int a)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&a, 1, HAL_MAX_DELAY);
 80017a4:	1d39      	adds	r1, r7, #4
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	2201      	movs	r2, #1
 80017ac:	4803      	ldr	r0, [pc, #12]	; (80017bc <__io_putchar+0x20>)
 80017ae:	f002 ff57 	bl	8004660 <HAL_UART_Transmit>
	return a;
 80017b2:	687b      	ldr	r3, [r7, #4]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2000029c 	.word	0x2000029c

080017c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c6:	f000 feed 	bl	80025a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ca:	f000 f8af 	bl	800192c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ce:	f000 f98f 	bl	8001af0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80017d2:	f000 f8e7 	bl	80019a4 <MX_I2C2_Init>
  MX_TIM4_Init();
 80017d6:	f000 f913 	bl	8001a00 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80017da:	f000 f95f 	bl	8001a9c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("run\r\n\n");
 80017de:	4835      	ldr	r0, [pc, #212]	; (80018b4 <main+0xf4>)
 80017e0:	f007 fe5c 	bl	800949c <puts>
	DHT11_Init(&dht11, DHT_GPIO_Port, DHT_Pin, &htim4);
 80017e4:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <main+0xf8>)
 80017e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ea:	4934      	ldr	r1, [pc, #208]	; (80018bc <main+0xfc>)
 80017ec:	4834      	ldr	r0, [pc, #208]	; (80018c0 <main+0x100>)
 80017ee:	f7ff fd57 	bl	80012a0 <DHT11_Init>
	LCD_Init(&lcd, &hi2c2, LDC_DEFAULT_ADDRESS, 20, 4);
 80017f2:	2304      	movs	r3, #4
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2314      	movs	r3, #20
 80017f8:	224e      	movs	r2, #78	; 0x4e
 80017fa:	4932      	ldr	r1, [pc, #200]	; (80018c4 <main+0x104>)
 80017fc:	4832      	ldr	r0, [pc, #200]	; (80018c8 <main+0x108>)
 80017fe:	f7ff fee0 	bl	80015c2 <LCD_Init>
	SRF05_Init(&hrf05, ECHO_GPIO_Port, ECHO_Pin, TRIG_GPIO_Port, TRIG_Pin);
 8001802:	2320      	movs	r3, #32
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <main+0xfc>)
 8001808:	2240      	movs	r2, #64	; 0x40
 800180a:	492c      	ldr	r1, [pc, #176]	; (80018bc <main+0xfc>)
 800180c:	482f      	ldr	r0, [pc, #188]	; (80018cc <main+0x10c>)
 800180e:	f7ff fded 	bl	80013ec <SRF05_Init>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxData[rxDataId], 1);
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <main+0x110>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <main+0x114>)
 800181a:	4413      	add	r3, r2
 800181c:	2201      	movs	r2, #1
 800181e:	4619      	mov	r1, r3
 8001820:	482d      	ldr	r0, [pc, #180]	; (80018d8 <main+0x118>)
 8001822:	f002 ffa0 	bl	8004766 <HAL_UART_Receive_IT>
	LCD_SetCursor(&lcd, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	4827      	ldr	r0, [pc, #156]	; (80018c8 <main+0x108>)
 800182c:	f7ff ff70 	bl	8001710 <LCD_SetCursor>
	LCD_WriteString(&lcd, "Watting");
 8001830:	492a      	ldr	r1, [pc, #168]	; (80018dc <main+0x11c>)
 8001832:	4825      	ldr	r0, [pc, #148]	; (80018c8 <main+0x108>)
 8001834:	f7ff ff45 	bl	80016c2 <LCD_WriteString>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001838:	f003 f8f0 	bl	8004a1c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of DataSem */
  DataSemHandle = osSemaphoreNew(1, 0, &DataSem_attributes);
 800183c:	4a28      	ldr	r2, [pc, #160]	; (80018e0 <main+0x120>)
 800183e:	2100      	movs	r1, #0
 8001840:	2001      	movs	r0, #1
 8001842:	f003 faed 	bl	8004e20 <osSemaphoreNew>
 8001846:	4603      	mov	r3, r0
 8001848:	4a26      	ldr	r2, [pc, #152]	; (80018e4 <main+0x124>)
 800184a:	6013      	str	r3, [r2, #0]

  /* creation of IRQSem */
  IRQSemHandle = osSemaphoreNew(1, 0, &IRQSem_attributes);
 800184c:	4a26      	ldr	r2, [pc, #152]	; (80018e8 <main+0x128>)
 800184e:	2100      	movs	r1, #0
 8001850:	2001      	movs	r0, #1
 8001852:	f003 fae5 	bl	8004e20 <osSemaphoreNew>
 8001856:	4603      	mov	r3, r0
 8001858:	4a24      	ldr	r2, [pc, #144]	; (80018ec <main+0x12c>)
 800185a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800185c:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <main+0x130>)
 800185e:	2100      	movs	r1, #0
 8001860:	4824      	ldr	r0, [pc, #144]	; (80018f4 <main+0x134>)
 8001862:	f003 f969 	bl	8004b38 <osThreadNew>
 8001866:	4603      	mov	r3, r0
 8001868:	4a23      	ldr	r2, [pc, #140]	; (80018f8 <main+0x138>)
 800186a:	6013      	str	r3, [r2, #0]

  /* creation of DHT11 */
  DHT11Handle = osThreadNew(Task_DHT, NULL, &DHT11_attributes);
 800186c:	4a23      	ldr	r2, [pc, #140]	; (80018fc <main+0x13c>)
 800186e:	2100      	movs	r1, #0
 8001870:	4823      	ldr	r0, [pc, #140]	; (8001900 <main+0x140>)
 8001872:	f003 f961 	bl	8004b38 <osThreadNew>
 8001876:	4603      	mov	r3, r0
 8001878:	4a22      	ldr	r2, [pc, #136]	; (8001904 <main+0x144>)
 800187a:	6013      	str	r3, [r2, #0]

  /* creation of DIST */
  DISTHandle = osThreadNew(Task_Dist, NULL, &DIST_attributes);
 800187c:	4a22      	ldr	r2, [pc, #136]	; (8001908 <main+0x148>)
 800187e:	2100      	movs	r1, #0
 8001880:	4822      	ldr	r0, [pc, #136]	; (800190c <main+0x14c>)
 8001882:	f003 f959 	bl	8004b38 <osThreadNew>
 8001886:	4603      	mov	r3, r0
 8001888:	4a21      	ldr	r2, [pc, #132]	; (8001910 <main+0x150>)
 800188a:	6013      	str	r3, [r2, #0]

  /* creation of HandleInterrupt */
  HandleInterruptHandle = osThreadNew(Task_InterruptHandler, NULL, &HandleInterrupt_attributes);
 800188c:	4a21      	ldr	r2, [pc, #132]	; (8001914 <main+0x154>)
 800188e:	2100      	movs	r1, #0
 8001890:	4821      	ldr	r0, [pc, #132]	; (8001918 <main+0x158>)
 8001892:	f003 f951 	bl	8004b38 <osThreadNew>
 8001896:	4603      	mov	r3, r0
 8001898:	4a20      	ldr	r2, [pc, #128]	; (800191c <main+0x15c>)
 800189a:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(Task_LCD, NULL, &LCD_attributes);
 800189c:	4a20      	ldr	r2, [pc, #128]	; (8001920 <main+0x160>)
 800189e:	2100      	movs	r1, #0
 80018a0:	4820      	ldr	r0, [pc, #128]	; (8001924 <main+0x164>)
 80018a2:	f003 f949 	bl	8004b38 <osThreadNew>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a1f      	ldr	r2, [pc, #124]	; (8001928 <main+0x168>)
 80018aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018ac:	f003 f8e8 	bl	8004a80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <main+0xf0>
 80018b2:	bf00      	nop
 80018b4:	0800cdd8 	.word	0x0800cdd8
 80018b8:	20000254 	.word	0x20000254
 80018bc:	40010800 	.word	0x40010800
 80018c0:	20000300 	.word	0x20000300
 80018c4:	20000200 	.word	0x20000200
 80018c8:	20000314 	.word	0x20000314
 80018cc:	20000320 	.word	0x20000320
 80018d0:	2000034c 	.word	0x2000034c
 80018d4:	20000338 	.word	0x20000338
 80018d8:	2000029c 	.word	0x2000029c
 80018dc:	0800cde0 	.word	0x0800cde0
 80018e0:	0800d110 	.word	0x0800d110
 80018e4:	200002f8 	.word	0x200002f8
 80018e8:	0800d120 	.word	0x0800d120
 80018ec:	200002fc 	.word	0x200002fc
 80018f0:	0800d05c 	.word	0x0800d05c
 80018f4:	08001ba1 	.word	0x08001ba1
 80018f8:	200002e4 	.word	0x200002e4
 80018fc:	0800d080 	.word	0x0800d080
 8001900:	08001bb1 	.word	0x08001bb1
 8001904:	200002e8 	.word	0x200002e8
 8001908:	0800d0a4 	.word	0x0800d0a4
 800190c:	08001c8d 	.word	0x08001c8d
 8001910:	200002ec 	.word	0x200002ec
 8001914:	0800d0c8 	.word	0x0800d0c8
 8001918:	08001d1d 	.word	0x08001d1d
 800191c:	200002f0 	.word	0x200002f0
 8001920:	0800d0ec 	.word	0x0800d0ec
 8001924:	08001ead 	.word	0x08001ead
 8001928:	200002f4 	.word	0x200002f4

0800192c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b090      	sub	sp, #64	; 0x40
 8001930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001932:	f107 0318 	add.w	r3, r7, #24
 8001936:	2228      	movs	r2, #40	; 0x28
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f007 feae 	bl	800969c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800194e:	2302      	movs	r3, #2
 8001950:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001952:	2301      	movs	r3, #1
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001956:	2310      	movs	r3, #16
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800195a:	2300      	movs	r3, #0
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800195e:	f107 0318 	add.w	r3, r7, #24
 8001962:	4618      	mov	r0, r3
 8001964:	f001 fda4 	bl	80034b0 <HAL_RCC_OscConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800196e:	f000 fbb5 	bl	80020dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001972:	230f      	movs	r3, #15
 8001974:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f002 f812 	bl	80039b4 <HAL_RCC_ClockConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001996:	f000 fba1 	bl	80020dc <Error_Handler>
  }
}
 800199a:	bf00      	nop
 800199c:	3740      	adds	r7, #64	; 0x40
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <MX_I2C2_Init+0x54>)
 80019ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <MX_I2C2_Init+0x58>)
 80019b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019e2:	f001 f8c9 	bl	8002b78 <HAL_I2C_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019ec:	f000 fb76 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000200 	.word	0x20000200
 80019f8:	40005800 	.word	0x40005800
 80019fc:	000186a0 	.word	0x000186a0

08001a00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	463b      	mov	r3, r7
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <MX_TIM4_Init+0x94>)
 8001a1e:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <MX_TIM4_Init+0x98>)
 8001a20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <MX_TIM4_Init+0x94>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <MX_TIM4_Init+0x94>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <MX_TIM4_Init+0x94>)
 8001a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <MX_TIM4_Init+0x94>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_TIM4_Init+0x94>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a42:	4814      	ldr	r0, [pc, #80]	; (8001a94 <MX_TIM4_Init+0x94>)
 8001a44:	f002 f974 	bl	8003d30 <HAL_TIM_Base_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001a4e:	f000 fb45 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a58:	f107 0308 	add.w	r3, r7, #8
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480d      	ldr	r0, [pc, #52]	; (8001a94 <MX_TIM4_Init+0x94>)
 8001a60:	f002 fb5a 	bl	8004118 <HAL_TIM_ConfigClockSource>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001a6a:	f000 fb37 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a76:	463b      	mov	r3, r7
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4806      	ldr	r0, [pc, #24]	; (8001a94 <MX_TIM4_Init+0x94>)
 8001a7c:	f002 fd30 	bl	80044e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001a86:	f000 fb29 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000254 	.word	0x20000254
 8001a98:	40000800 	.word	0x40000800

08001a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <MX_USART2_UART_Init+0x50>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001ad4:	f002 fd74 	bl	80045c0 <HAL_UART_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ade:	f000 fafd 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000029c 	.word	0x2000029c
 8001aec:	40004400 	.word	0x40004400

08001af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <MX_GPIO_Init+0xa8>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <MX_GPIO_Init+0xa8>)
 8001b0a:	f043 0320 	orr.w	r3, r3, #32
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <MX_GPIO_Init+0xa8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <MX_GPIO_Init+0xa8>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <MX_GPIO_Init+0xa8>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <MX_GPIO_Init+0xa8>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <MX_GPIO_Init+0xa8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <MX_GPIO_Init+0xa8>)
 8001b3a:	f043 0308 	orr.w	r3, r3, #8
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <MX_GPIO_Init+0xa8>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|DHT_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001b52:	4812      	ldr	r0, [pc, #72]	; (8001b9c <MX_GPIO_Init+0xac>)
 8001b54:	f000 fff7 	bl	8002b46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIG_Pin DHT_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|DHT_Pin;
 8001b58:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480a      	ldr	r0, [pc, #40]	; (8001b9c <MX_GPIO_Init+0xac>)
 8001b72:	f000 fe4d 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001b76:	2340      	movs	r3, #64	; 0x40
 8001b78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	4619      	mov	r1, r3
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <MX_GPIO_Init+0xac>)
 8001b8a:	f000 fe41 	bl	8002810 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b8e:	bf00      	nop
 8001b90:	3720      	adds	r7, #32
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010800 	.word	0x40010800

08001ba0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f003 f8d7 	bl	8004d5c <osDelay>
 8001bae:	e7fb      	b.n	8001ba8 <StartDefaultTask+0x8>

08001bb0 <Task_DHT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_DHT */
void Task_DHT(void *argument)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	int32_t tick = osKernelGetTickCount();
 8001bb8:	f002 ff96 	bl	8004ae8 <osKernelGetTickCount>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Task_DHT */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreGetCount(DataSemHandle) != 0)
 8001bc0:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <Task_DHT+0xb4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 fa85 	bl	80050d4 <osSemaphoreGetCount>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <Task_DHT+0x2e>
	  		{
	  			osSemaphoreAcquire(DataSemHandle, osWaitForever);
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <Task_DHT+0xb4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 f9bd 	bl	8004f58 <osSemaphoreAcquire>
	  		}
	  		tick = tick + dhtInterval;
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <Task_DHT+0xb8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
	  		printf("TASK_DHT11 I: %ld\r\n", osKernelGetTickCount());
 8001be8:	f002 ff7e 	bl	8004ae8 <osKernelGetTickCount>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	481e      	ldr	r0, [pc, #120]	; (8001c6c <Task_DHT+0xbc>)
 8001bf2:	f007 fbed 	bl	80093d0 <iprintf>
	  		SRF05_Read(&hrf05);
 8001bf6:	481e      	ldr	r0, [pc, #120]	; (8001c70 <Task_DHT+0xc0>)
 8001bf8:	f7ff fc28 	bl	800144c <SRF05_Read>
	  		senseData.dist = hrf05.Distance;
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <Task_DHT+0xc0>)
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <Task_DHT+0xc4>)
 8001c02:	6053      	str	r3, [r2, #4]
	  		printf("TASK_DHT11 O: %ld\r\n\n", osKernelGetTickCount());
 8001c04:	f002 ff70 	bl	8004ae8 <osKernelGetTickCount>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	481a      	ldr	r0, [pc, #104]	; (8001c78 <Task_DHT+0xc8>)
 8001c0e:	f007 fbdf 	bl	80093d0 <iprintf>
	  		dhtStatus = DHT11_GetData(&dht11);
 8001c12:	481a      	ldr	r0, [pc, #104]	; (8001c7c <Task_DHT+0xcc>)
 8001c14:	f7ff fb64 	bl	80012e0 <DHT11_GetData>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <Task_DHT+0xd0>)
 8001c1e:	701a      	strb	r2, [r3, #0]
	  		switch(dhtStatus)
 8001c20:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <Task_DHT+0xd0>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d005      	beq.n	8001c34 <Task_DHT+0x84>
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d107      	bne.n	8001c3c <Task_DHT+0x8c>
	  		{
	  		case DHT11_ERR_CHECKSUM:
	  			printf(" ERROR DHT11 CHECKSUM\r\n");
 8001c2c:	4815      	ldr	r0, [pc, #84]	; (8001c84 <Task_DHT+0xd4>)
 8001c2e:	f007 fc35 	bl	800949c <puts>
	  			break;
 8001c32:	e00c      	b.n	8001c4e <Task_DHT+0x9e>
	  		case DHT11_ERR_RESPONSE:
	  			printf(" ERROR DHT11 RESPONSE\r\n");
 8001c34:	4814      	ldr	r0, [pc, #80]	; (8001c88 <Task_DHT+0xd8>)
 8001c36:	f007 fc31 	bl	800949c <puts>
	  			break;
 8001c3a:	e008      	b.n	8001c4e <Task_DHT+0x9e>
	  		default:
	  			senseData.temp = dht11.Temp;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <Task_DHT+0xcc>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <Task_DHT+0xc4>)
 8001c42:	6093      	str	r3, [r2, #8]
	  			senseData.humi = dht11.Humi;
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <Task_DHT+0xcc>)
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <Task_DHT+0xc4>)
 8001c4a:	6013      	str	r3, [r2, #0]
	  			break;
 8001c4c:	bf00      	nop
	  		}

	  		osSemaphoreRelease(DataSemHandle);
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <Task_DHT+0xb4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 f9e6 	bl	8005024 <osSemaphoreRelease>
	  		osDelayUntil(tick);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 f8ac 	bl	8004db8 <osDelayUntil>
	  if (osSemaphoreGetCount(DataSemHandle) != 0)
 8001c60:	e7ae      	b.n	8001bc0 <Task_DHT+0x10>
 8001c62:	bf00      	nop
 8001c64:	200002f8 	.word	0x200002f8
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	0800cde8 	.word	0x0800cde8
 8001c70:	20000320 	.word	0x20000320
 8001c74:	20000364 	.word	0x20000364
 8001c78:	0800cdfc 	.word	0x0800cdfc
 8001c7c:	20000300 	.word	0x20000300
 8001c80:	20000334 	.word	0x20000334
 8001c84:	0800ce14 	.word	0x0800ce14
 8001c88:	0800ce2c 	.word	0x0800ce2c

08001c8c <Task_Dist>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Dist */
void Task_Dist(void *argument)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	int32_t tk = osKernelGetTickCount();
 8001c94:	f002 ff28 	bl	8004ae8 <osKernelGetTickCount>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Task_Dist */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreGetCount(DataSemHandle) != 0)
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <Task_Dist+0x78>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 fa17 	bl	80050d4 <osSemaphoreGetCount>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <Task_Dist+0x2e>
	  		{
	  			osSemaphoreAcquire(DataSemHandle, osWaitForever);
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <Task_Dist+0x78>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 f94f 	bl	8004f58 <osSemaphoreAcquire>
	  		}
	  		tk = tk + distInterval;
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <Task_Dist+0x7c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
	  		printf("TASK_DIST I: %ld\r\n", osKernelGetTickCount());
 8001cc4:	f002 ff10 	bl	8004ae8 <osKernelGetTickCount>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480f      	ldr	r0, [pc, #60]	; (8001d0c <Task_Dist+0x80>)
 8001cce:	f007 fb7f 	bl	80093d0 <iprintf>
	  		SRF05_Read(&hrf05);
 8001cd2:	480f      	ldr	r0, [pc, #60]	; (8001d10 <Task_Dist+0x84>)
 8001cd4:	f7ff fbba 	bl	800144c <SRF05_Read>
	  		senseData.dist = hrf05.Distance;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <Task_Dist+0x84>)
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <Task_Dist+0x88>)
 8001cde:	6053      	str	r3, [r2, #4]
	  		printf("TASK_DIST O: %ld\r\n\n", osKernelGetTickCount());
 8001ce0:	f002 ff02 	bl	8004ae8 <osKernelGetTickCount>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	480b      	ldr	r0, [pc, #44]	; (8001d18 <Task_Dist+0x8c>)
 8001cea:	f007 fb71 	bl	80093d0 <iprintf>

	  		osSemaphoreRelease(DataSemHandle);
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <Task_Dist+0x78>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 f996 	bl	8005024 <osSemaphoreRelease>

	  		osDelayUntil(tk);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 f85c 	bl	8004db8 <osDelayUntil>
	  if (osSemaphoreGetCount(DataSemHandle) != 0)
 8001d00:	e7cc      	b.n	8001c9c <Task_Dist+0x10>
 8001d02:	bf00      	nop
 8001d04:	200002f8 	.word	0x200002f8
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	0800ce44 	.word	0x0800ce44
 8001d10:	20000320 	.word	0x20000320
 8001d14:	20000364 	.word	0x20000364
 8001d18:	0800ce58 	.word	0x0800ce58

08001d1c <Task_InterruptHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_InterruptHandler */
void Task_InterruptHandler(void *argument)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_InterruptHandler */
  /* Infinite loop */
  for(;;)
  {
	  /* Temporary pause others tasks */
	  		osSemaphoreAcquire(IRQSemHandle, osWaitForever);
 8001d24:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <Task_InterruptHandler+0x134>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 f913 	bl	8004f58 <osSemaphoreAcquire>
	  		osThreadSuspend(DISTHandle);
 8001d32:	4b48      	ldr	r3, [pc, #288]	; (8001e54 <Task_InterruptHandler+0x138>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 ffa8 	bl	8004c8c <osThreadSuspend>
	  		osThreadSuspend(DHT11Handle);
 8001d3c:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <Task_InterruptHandler+0x13c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f002 ffa3 	bl	8004c8c <osThreadSuspend>
	  		osThreadSuspend(LCDHandle);
 8001d46:	4b45      	ldr	r3, [pc, #276]	; (8001e5c <Task_InterruptHandler+0x140>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f002 ff9e 	bl	8004c8c <osThreadSuspend>
	  		/* Interrupt handler */
	  		char *command = strtok((char*)rxData, " ");
 8001d50:	4943      	ldr	r1, [pc, #268]	; (8001e60 <Task_InterruptHandler+0x144>)
 8001d52:	4844      	ldr	r0, [pc, #272]	; (8001e64 <Task_InterruptHandler+0x148>)
 8001d54:	f007 fcaa 	bl	80096ac <strtok>
 8001d58:	6178      	str	r0, [r7, #20]
	  		char *time = strtok(NULL, " ");
 8001d5a:	4941      	ldr	r1, [pc, #260]	; (8001e60 <Task_InterruptHandler+0x144>)
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f007 fca5 	bl	80096ac <strtok>
 8001d62:	6138      	str	r0, [r7, #16]
	  		if (NULL == time){
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d13b      	bne.n	8001de2 <Task_InterruptHandler+0xc6>
	  			if (strcmp((const char*)rxData, "lcdtemp") == 0)
 8001d6a:	493f      	ldr	r1, [pc, #252]	; (8001e68 <Task_InterruptHandler+0x14c>)
 8001d6c:	483d      	ldr	r0, [pc, #244]	; (8001e64 <Task_InterruptHandler+0x148>)
 8001d6e:	f7fe f9ef 	bl	8000150 <strcmp>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d106      	bne.n	8001d86 <Task_InterruptHandler+0x6a>
	  			{
	  				LCDMode = LCD_TEM;
 8001d78:	4b3c      	ldr	r3, [pc, #240]	; (8001e6c <Task_InterruptHandler+0x150>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
	  				printf("Change Mode to LCD_TEM\r\n\n");
 8001d7e:	483c      	ldr	r0, [pc, #240]	; (8001e70 <Task_InterruptHandler+0x154>)
 8001d80:	f007 fb8c 	bl	800949c <puts>
 8001d84:	e053      	b.n	8001e2e <Task_InterruptHandler+0x112>
	  			}
	  			else if (strcmp((const char*)rxData, "lcdhumi") == 0)
 8001d86:	493b      	ldr	r1, [pc, #236]	; (8001e74 <Task_InterruptHandler+0x158>)
 8001d88:	4836      	ldr	r0, [pc, #216]	; (8001e64 <Task_InterruptHandler+0x148>)
 8001d8a:	f7fe f9e1 	bl	8000150 <strcmp>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d106      	bne.n	8001da2 <Task_InterruptHandler+0x86>
	  			{
	  				LCDMode = LCD_HUMI;
 8001d94:	4b35      	ldr	r3, [pc, #212]	; (8001e6c <Task_InterruptHandler+0x150>)
 8001d96:	2202      	movs	r2, #2
 8001d98:	701a      	strb	r2, [r3, #0]
	  				printf("Change Mode to LCD_HUMI\r\n\n");
 8001d9a:	4837      	ldr	r0, [pc, #220]	; (8001e78 <Task_InterruptHandler+0x15c>)
 8001d9c:	f007 fb7e 	bl	800949c <puts>
 8001da0:	e045      	b.n	8001e2e <Task_InterruptHandler+0x112>
	  			}
	  			else if (strcmp((const char*)rxData, "lcddist") == 0)
 8001da2:	4936      	ldr	r1, [pc, #216]	; (8001e7c <Task_InterruptHandler+0x160>)
 8001da4:	482f      	ldr	r0, [pc, #188]	; (8001e64 <Task_InterruptHandler+0x148>)
 8001da6:	f7fe f9d3 	bl	8000150 <strcmp>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d106      	bne.n	8001dbe <Task_InterruptHandler+0xa2>
	  			{
	  				LCDMode = LCD_DISTANCE;
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <Task_InterruptHandler+0x150>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
	  				printf("Change Mode to LCD_DIST\r\n\n");
 8001db6:	4832      	ldr	r0, [pc, #200]	; (8001e80 <Task_InterruptHandler+0x164>)
 8001db8:	f007 fb70 	bl	800949c <puts>
 8001dbc:	e037      	b.n	8001e2e <Task_InterruptHandler+0x112>
	  			}
	  			else if (strcmp((const char*)rxData, "lcdboth") == 0)
 8001dbe:	4931      	ldr	r1, [pc, #196]	; (8001e84 <Task_InterruptHandler+0x168>)
 8001dc0:	4828      	ldr	r0, [pc, #160]	; (8001e64 <Task_InterruptHandler+0x148>)
 8001dc2:	f7fe f9c5 	bl	8000150 <strcmp>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d106      	bne.n	8001dda <Task_InterruptHandler+0xbe>
	  			{
	  				LCDMode = LCD_FULL;
 8001dcc:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <Task_InterruptHandler+0x150>)
 8001dce:	2203      	movs	r2, #3
 8001dd0:	701a      	strb	r2, [r3, #0]
	  				printf("Change Mode to LCD_FUL\r\n\n");
 8001dd2:	482d      	ldr	r0, [pc, #180]	; (8001e88 <Task_InterruptHandler+0x16c>)
 8001dd4:	f007 fb62 	bl	800949c <puts>
 8001dd8:	e029      	b.n	8001e2e <Task_InterruptHandler+0x112>
	  			}
	  			else
	  			{
	  				printf("Error Syntax\r\n\n");
 8001dda:	482c      	ldr	r0, [pc, #176]	; (8001e8c <Task_InterruptHandler+0x170>)
 8001ddc:	f007 fb5e 	bl	800949c <puts>
 8001de0:	e025      	b.n	8001e2e <Task_InterruptHandler+0x112>
	  			}
	  		}
	  		else {
	  			uint32_t T = atoi(time);
 8001de2:	6938      	ldr	r0, [r7, #16]
 8001de4:	f006 fb4a 	bl	800847c <atoi>
 8001de8:	4603      	mov	r3, r0
 8001dea:	60fb      	str	r3, [r7, #12]
	  			if (strcmp((const char*)command, "timedht11") == 0)
 8001dec:	4928      	ldr	r1, [pc, #160]	; (8001e90 <Task_InterruptHandler+0x174>)
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f7fe f9ae 	bl	8000150 <strcmp>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d107      	bne.n	8001e0a <Task_InterruptHandler+0xee>
	  			{
	  				dhtInterval = T;
 8001dfa:	4a26      	ldr	r2, [pc, #152]	; (8001e94 <Task_InterruptHandler+0x178>)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6013      	str	r3, [r2, #0]
	  				printf("Change period of dht11 time to %ld\r\n", T);
 8001e00:	68f9      	ldr	r1, [r7, #12]
 8001e02:	4825      	ldr	r0, [pc, #148]	; (8001e98 <Task_InterruptHandler+0x17c>)
 8001e04:	f007 fae4 	bl	80093d0 <iprintf>
 8001e08:	e011      	b.n	8001e2e <Task_InterruptHandler+0x112>
	  			}
	  			else if (strcmp((const char*)command, "timedist") == 0)
 8001e0a:	4924      	ldr	r1, [pc, #144]	; (8001e9c <Task_InterruptHandler+0x180>)
 8001e0c:	6978      	ldr	r0, [r7, #20]
 8001e0e:	f7fe f99f 	bl	8000150 <strcmp>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <Task_InterruptHandler+0x10c>
	  			{
	  				distInterval = T;
 8001e18:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <Task_InterruptHandler+0x184>)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6013      	str	r3, [r2, #0]
	  				printf("Change period of dist time to %ld\r\n", T);
 8001e1e:	68f9      	ldr	r1, [r7, #12]
 8001e20:	4820      	ldr	r0, [pc, #128]	; (8001ea4 <Task_InterruptHandler+0x188>)
 8001e22:	f007 fad5 	bl	80093d0 <iprintf>
 8001e26:	e002      	b.n	8001e2e <Task_InterruptHandler+0x112>
	  			}
	  			else
	  			{
	  				printf("Error Command Syntax\r\n\n");
 8001e28:	481f      	ldr	r0, [pc, #124]	; (8001ea8 <Task_InterruptHandler+0x18c>)
 8001e2a:	f007 fb37 	bl	800949c <puts>
	  			}
	  		}
	  		/* let continue others */
	  		osThreadResume(DISTHandle);
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <Task_InterruptHandler+0x138>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 ff5e 	bl	8004cf4 <osThreadResume>
	  		osThreadResume(DHT11Handle);
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <Task_InterruptHandler+0x13c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 ff59 	bl	8004cf4 <osThreadResume>
	  		osThreadResume(LCDHandle);
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <Task_InterruptHandler+0x140>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f002 ff54 	bl	8004cf4 <osThreadResume>
  {
 8001e4c:	e76a      	b.n	8001d24 <Task_InterruptHandler+0x8>
 8001e4e:	bf00      	nop
 8001e50:	200002fc 	.word	0x200002fc
 8001e54:	200002ec 	.word	0x200002ec
 8001e58:	200002e8 	.word	0x200002e8
 8001e5c:	200002f4 	.word	0x200002f4
 8001e60:	0800ce6c 	.word	0x0800ce6c
 8001e64:	20000338 	.word	0x20000338
 8001e68:	0800ce70 	.word	0x0800ce70
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	0800ce78 	.word	0x0800ce78
 8001e74:	0800ce94 	.word	0x0800ce94
 8001e78:	0800ce9c 	.word	0x0800ce9c
 8001e7c:	0800ceb8 	.word	0x0800ceb8
 8001e80:	0800cec0 	.word	0x0800cec0
 8001e84:	0800cedc 	.word	0x0800cedc
 8001e88:	0800cee4 	.word	0x0800cee4
 8001e8c:	0800cf00 	.word	0x0800cf00
 8001e90:	0800cf10 	.word	0x0800cf10
 8001e94:	20000004 	.word	0x20000004
 8001e98:	0800cf1c 	.word	0x0800cf1c
 8001e9c:	0800cf44 	.word	0x0800cf44
 8001ea0:	20000008 	.word	0x20000008
 8001ea4:	0800cf50 	.word	0x0800cf50
 8001ea8:	0800cf74 	.word	0x0800cf74

08001eac <Task_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_LCD */
void Task_LCD(void *argument)
{
 8001eac:	b5b0      	push	{r4, r5, r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_LCD */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(DataSemHandle, osWaitForever);
 8001eb4:	4b6e      	ldr	r3, [pc, #440]	; (8002070 <Task_LCD+0x1c4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f84b 	bl	8004f58 <osSemaphoreAcquire>
	  		printf("TASK_LCD IN: %ld\r\n", osKernelGetTickCount());
 8001ec2:	f002 fe11 	bl	8004ae8 <osKernelGetTickCount>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4619      	mov	r1, r3
 8001eca:	486a      	ldr	r0, [pc, #424]	; (8002074 <Task_LCD+0x1c8>)
 8001ecc:	f007 fa80 	bl	80093d0 <iprintf>

	  		if (dhtStatus == DHT11_OK)
 8001ed0:	4b69      	ldr	r3, [pc, #420]	; (8002078 <Task_LCD+0x1cc>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f040 80c2 	bne.w	800205e <Task_LCD+0x1b2>
	  		{
	  			LCD_Clear(&lcd);
 8001eda:	4868      	ldr	r0, [pc, #416]	; (800207c <Task_LCD+0x1d0>)
 8001edc:	f7ff fc08 	bl	80016f0 <LCD_Clear>
	  			switch (LCDMode){
 8001ee0:	4b67      	ldr	r3, [pc, #412]	; (8002080 <Task_LCD+0x1d4>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	f200 80ba 	bhi.w	800205e <Task_LCD+0x1b2>
 8001eea:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <Task_LCD+0x44>)
 8001eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef0:	08001f7d 	.word	0x08001f7d
 8001ef4:	08001f3f 	.word	0x08001f3f
 8001ef8:	08001f01 	.word	0x08001f01
 8001efc:	08001fbb 	.word	0x08001fbb
	  			case LCD_HUMI:
	  				sprintf(temp, "H: %.2f", senseData.humi);
 8001f00:	4b60      	ldr	r3, [pc, #384]	; (8002084 <Task_LCD+0x1d8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fb4d 	bl	80005a4 <__aeabi_f2d>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	495e      	ldr	r1, [pc, #376]	; (8002088 <Task_LCD+0x1dc>)
 8001f10:	485e      	ldr	r0, [pc, #376]	; (800208c <Task_LCD+0x1e0>)
 8001f12:	f007 facb 	bl	80094ac <siprintf>
	  				LCD_SetCursor(&lcd, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4858      	ldr	r0, [pc, #352]	; (800207c <Task_LCD+0x1d0>)
 8001f1c:	f7ff fbf8 	bl	8001710 <LCD_SetCursor>
	  				LCD_WriteString(&lcd, temp);
 8001f20:	495a      	ldr	r1, [pc, #360]	; (800208c <Task_LCD+0x1e0>)
 8001f22:	4856      	ldr	r0, [pc, #344]	; (800207c <Task_LCD+0x1d0>)
 8001f24:	f7ff fbcd 	bl	80016c2 <LCD_WriteString>
	  				printf("Humi: %.2f\r\n", senseData.humi);
 8001f28:	4b56      	ldr	r3, [pc, #344]	; (8002084 <Task_LCD+0x1d8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fb39 	bl	80005a4 <__aeabi_f2d>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4856      	ldr	r0, [pc, #344]	; (8002090 <Task_LCD+0x1e4>)
 8001f38:	f007 fa4a 	bl	80093d0 <iprintf>
	  				break;
 8001f3c:	e08f      	b.n	800205e <Task_LCD+0x1b2>
	  			case LCD_TEM:
	  				sprintf(temp, "T: %.2f", senseData.temp);
 8001f3e:	4b51      	ldr	r3, [pc, #324]	; (8002084 <Task_LCD+0x1d8>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fb2e 	bl	80005a4 <__aeabi_f2d>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4951      	ldr	r1, [pc, #324]	; (8002094 <Task_LCD+0x1e8>)
 8001f4e:	484f      	ldr	r0, [pc, #316]	; (800208c <Task_LCD+0x1e0>)
 8001f50:	f007 faac 	bl	80094ac <siprintf>
	  				LCD_SetCursor(&lcd, 0, 0);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2100      	movs	r1, #0
 8001f58:	4848      	ldr	r0, [pc, #288]	; (800207c <Task_LCD+0x1d0>)
 8001f5a:	f7ff fbd9 	bl	8001710 <LCD_SetCursor>
	  				LCD_WriteString(&lcd, temp);
 8001f5e:	494b      	ldr	r1, [pc, #300]	; (800208c <Task_LCD+0x1e0>)
 8001f60:	4846      	ldr	r0, [pc, #280]	; (800207c <Task_LCD+0x1d0>)
 8001f62:	f7ff fbae 	bl	80016c2 <LCD_WriteString>
	  				printf("Tem: %.2f\r\n", senseData.temp);
 8001f66:	4b47      	ldr	r3, [pc, #284]	; (8002084 <Task_LCD+0x1d8>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fb1a 	bl	80005a4 <__aeabi_f2d>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4848      	ldr	r0, [pc, #288]	; (8002098 <Task_LCD+0x1ec>)
 8001f76:	f007 fa2b 	bl	80093d0 <iprintf>
	  				break;
 8001f7a:	e070      	b.n	800205e <Task_LCD+0x1b2>
	  			case LCD_DISTANCE:
	  				sprintf(temp, "D: %.2f", senseData.dist);
 8001f7c:	4b41      	ldr	r3, [pc, #260]	; (8002084 <Task_LCD+0x1d8>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fb0f 	bl	80005a4 <__aeabi_f2d>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4944      	ldr	r1, [pc, #272]	; (800209c <Task_LCD+0x1f0>)
 8001f8c:	483f      	ldr	r0, [pc, #252]	; (800208c <Task_LCD+0x1e0>)
 8001f8e:	f007 fa8d 	bl	80094ac <siprintf>
	  				LCD_SetCursor(&lcd, 0, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	4839      	ldr	r0, [pc, #228]	; (800207c <Task_LCD+0x1d0>)
 8001f98:	f7ff fbba 	bl	8001710 <LCD_SetCursor>
	  				LCD_WriteString(&lcd, temp);
 8001f9c:	493b      	ldr	r1, [pc, #236]	; (800208c <Task_LCD+0x1e0>)
 8001f9e:	4837      	ldr	r0, [pc, #220]	; (800207c <Task_LCD+0x1d0>)
 8001fa0:	f7ff fb8f 	bl	80016c2 <LCD_WriteString>
	  				printf("Dist: %.2f\r\n", senseData.dist);
 8001fa4:	4b37      	ldr	r3, [pc, #220]	; (8002084 <Task_LCD+0x1d8>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fafb 	bl	80005a4 <__aeabi_f2d>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	483b      	ldr	r0, [pc, #236]	; (80020a0 <Task_LCD+0x1f4>)
 8001fb4:	f007 fa0c 	bl	80093d0 <iprintf>
	  				break;
 8001fb8:	e051      	b.n	800205e <Task_LCD+0x1b2>

	  			case LCD_FULL:
	  				sprintf(temp, "T: %.2f H: %.2f", senseData.temp, senseData.humi);
 8001fba:	4b32      	ldr	r3, [pc, #200]	; (8002084 <Task_LCD+0x1d8>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe faf0 	bl	80005a4 <__aeabi_f2d>
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	460d      	mov	r5, r1
 8001fc8:	4b2e      	ldr	r3, [pc, #184]	; (8002084 <Task_LCD+0x1d8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fae9 	bl	80005a4 <__aeabi_f2d>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	e9cd 2300 	strd	r2, r3, [sp]
 8001fda:	4622      	mov	r2, r4
 8001fdc:	462b      	mov	r3, r5
 8001fde:	4931      	ldr	r1, [pc, #196]	; (80020a4 <Task_LCD+0x1f8>)
 8001fe0:	482a      	ldr	r0, [pc, #168]	; (800208c <Task_LCD+0x1e0>)
 8001fe2:	f007 fa63 	bl	80094ac <siprintf>
	  				LCD_SetCursor(&lcd, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4824      	ldr	r0, [pc, #144]	; (800207c <Task_LCD+0x1d0>)
 8001fec:	f7ff fb90 	bl	8001710 <LCD_SetCursor>
	  				LCD_WriteString(&lcd, temp);
 8001ff0:	4926      	ldr	r1, [pc, #152]	; (800208c <Task_LCD+0x1e0>)
 8001ff2:	4822      	ldr	r0, [pc, #136]	; (800207c <Task_LCD+0x1d0>)
 8001ff4:	f7ff fb65 	bl	80016c2 <LCD_WriteString>
	  				printf("Temperature: %.2f\r\n", senseData.temp);
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <Task_LCD+0x1d8>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fad1 	bl	80005a4 <__aeabi_f2d>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4828      	ldr	r0, [pc, #160]	; (80020a8 <Task_LCD+0x1fc>)
 8002008:	f007 f9e2 	bl	80093d0 <iprintf>
	  				printf("Humidity: %.2f\r\n", senseData.humi);
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <Task_LCD+0x1d8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fac7 	bl	80005a4 <__aeabi_f2d>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4824      	ldr	r0, [pc, #144]	; (80020ac <Task_LCD+0x200>)
 800201c:	f007 f9d8 	bl	80093d0 <iprintf>
	  				sprintf(temp, "D: %.2f", senseData.dist);
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <Task_LCD+0x1d8>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fabd 	bl	80005a4 <__aeabi_f2d>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	491b      	ldr	r1, [pc, #108]	; (800209c <Task_LCD+0x1f0>)
 8002030:	4816      	ldr	r0, [pc, #88]	; (800208c <Task_LCD+0x1e0>)
 8002032:	f007 fa3b 	bl	80094ac <siprintf>
	  				LCD_SetCursor(&lcd, 0, 1);
 8002036:	2201      	movs	r2, #1
 8002038:	2100      	movs	r1, #0
 800203a:	4810      	ldr	r0, [pc, #64]	; (800207c <Task_LCD+0x1d0>)
 800203c:	f7ff fb68 	bl	8001710 <LCD_SetCursor>
	  				LCD_WriteString(&lcd, temp);
 8002040:	4912      	ldr	r1, [pc, #72]	; (800208c <Task_LCD+0x1e0>)
 8002042:	480e      	ldr	r0, [pc, #56]	; (800207c <Task_LCD+0x1d0>)
 8002044:	f7ff fb3d 	bl	80016c2 <LCD_WriteString>
	  				printf("Distance: %.2f\r\n", senseData.dist);
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <Task_LCD+0x1d8>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe faa9 	bl	80005a4 <__aeabi_f2d>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4816      	ldr	r0, [pc, #88]	; (80020b0 <Task_LCD+0x204>)
 8002058:	f007 f9ba 	bl	80093d0 <iprintf>
	  				break;
 800205c:	bf00      	nop
	  			}
	  		}
	  		printf("TASK_LCD O: %ld\r\n\n", osKernelGetTickCount());
 800205e:	f002 fd43 	bl	8004ae8 <osKernelGetTickCount>
 8002062:	4603      	mov	r3, r0
 8002064:	4619      	mov	r1, r3
 8002066:	4813      	ldr	r0, [pc, #76]	; (80020b4 <Task_LCD+0x208>)
 8002068:	f007 f9b2 	bl	80093d0 <iprintf>
	  osSemaphoreAcquire(DataSemHandle, osWaitForever);
 800206c:	e722      	b.n	8001eb4 <Task_LCD+0x8>
 800206e:	bf00      	nop
 8002070:	200002f8 	.word	0x200002f8
 8002074:	0800cf8c 	.word	0x0800cf8c
 8002078:	20000334 	.word	0x20000334
 800207c:	20000314 	.word	0x20000314
 8002080:	20000000 	.word	0x20000000
 8002084:	20000364 	.word	0x20000364
 8002088:	0800cfa0 	.word	0x0800cfa0
 800208c:	20000350 	.word	0x20000350
 8002090:	0800cfa8 	.word	0x0800cfa8
 8002094:	0800cfb8 	.word	0x0800cfb8
 8002098:	0800cfc0 	.word	0x0800cfc0
 800209c:	0800cfcc 	.word	0x0800cfcc
 80020a0:	0800cfd4 	.word	0x0800cfd4
 80020a4:	0800cfe4 	.word	0x0800cfe4
 80020a8:	0800cff4 	.word	0x0800cff4
 80020ac:	0800d008 	.word	0x0800d008
 80020b0:	0800d01c 	.word	0x0800d01c
 80020b4:	0800d030 	.word	0x0800d030

080020b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020ca:	f000 fa81 	bl	80025d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40012c00 	.word	0x40012c00

080020dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e0:	b672      	cpsid	i
}
 80020e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <Error_Handler+0x8>
	...

080020e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_MspInit+0x68>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4a17      	ldr	r2, [pc, #92]	; (8002150 <HAL_MspInit+0x68>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6193      	str	r3, [r2, #24]
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_MspInit+0x68>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_MspInit+0x68>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a11      	ldr	r2, [pc, #68]	; (8002150 <HAL_MspInit+0x68>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	61d3      	str	r3, [r2, #28]
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_MspInit+0x68>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	210f      	movs	r1, #15
 8002122:	f06f 0001 	mvn.w	r0, #1
 8002126:	f000 fb48 	bl	80027ba <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_MspInit+0x6c>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_MspInit+0x6c>)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	40010000 	.word	0x40010000

08002158 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a16      	ldr	r2, [pc, #88]	; (80021cc <HAL_I2C_MspInit+0x74>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d124      	bne.n	80021c2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_I2C_MspInit+0x78>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_I2C_MspInit+0x78>)
 800217e:	f043 0308 	orr.w	r3, r3, #8
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_I2C_MspInit+0x78>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002190:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002194:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002196:	2312      	movs	r3, #18
 8002198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800219a:	2303      	movs	r3, #3
 800219c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219e:	f107 0310 	add.w	r3, r7, #16
 80021a2:	4619      	mov	r1, r3
 80021a4:	480b      	ldr	r0, [pc, #44]	; (80021d4 <HAL_I2C_MspInit+0x7c>)
 80021a6:	f000 fb33 	bl	8002810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_I2C_MspInit+0x78>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <HAL_I2C_MspInit+0x78>)
 80021b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b4:	61d3      	str	r3, [r2, #28]
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_I2C_MspInit+0x78>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021c2:	bf00      	nop
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40005800 	.word	0x40005800
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010c00 	.word	0x40010c00

080021d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_TIM_Base_MspInit+0x34>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10b      	bne.n	8002202 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_TIM_Base_MspInit+0x38>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a08      	ldr	r2, [pc, #32]	; (8002210 <HAL_TIM_Base_MspInit+0x38>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	61d3      	str	r3, [r2, #28]
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_TIM_Base_MspInit+0x38>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	40000800 	.word	0x40000800
 8002210:	40021000 	.word	0x40021000

08002214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1b      	ldr	r2, [pc, #108]	; (800229c <HAL_UART_MspInit+0x88>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d12f      	bne.n	8002294 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002234:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_UART_MspInit+0x8c>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <HAL_UART_MspInit+0x8c>)
 800223a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223e:	61d3      	str	r3, [r2, #28]
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_UART_MspInit+0x8c>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224c:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_UART_MspInit+0x8c>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <HAL_UART_MspInit+0x8c>)
 8002252:	f043 0304 	orr.w	r3, r3, #4
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_UART_MspInit+0x8c>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002264:	2304      	movs	r3, #4
 8002266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	4619      	mov	r1, r3
 8002276:	480b      	ldr	r0, [pc, #44]	; (80022a4 <HAL_UART_MspInit+0x90>)
 8002278:	f000 faca 	bl	8002810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800227c:	2308      	movs	r3, #8
 800227e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	4619      	mov	r1, r3
 800228e:	4805      	ldr	r0, [pc, #20]	; (80022a4 <HAL_UART_MspInit+0x90>)
 8002290:	f000 fabe 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002294:	bf00      	nop
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40004400 	.word	0x40004400
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010800 	.word	0x40010800

080022a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	; 0x30
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022be:	4b2e      	ldr	r3, [pc, #184]	; (8002378 <HAL_InitTick+0xd0>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	4a2d      	ldr	r2, [pc, #180]	; (8002378 <HAL_InitTick+0xd0>)
 80022c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022c8:	6193      	str	r3, [r2, #24]
 80022ca:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <HAL_InitTick+0xd0>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022d6:	f107 020c 	add.w	r2, r7, #12
 80022da:	f107 0310 	add.w	r3, r7, #16
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 fcd7 	bl	8003c94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022e6:	f001 fcc1 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 80022ea:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	4a23      	ldr	r2, [pc, #140]	; (800237c <HAL_InitTick+0xd4>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	0c9b      	lsrs	r3, r3, #18
 80022f6:	3b01      	subs	r3, #1
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_InitTick+0xd8>)
 80022fc:	4a21      	ldr	r2, [pc, #132]	; (8002384 <HAL_InitTick+0xdc>)
 80022fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <HAL_InitTick+0xd8>)
 8002302:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002306:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002308:	4a1d      	ldr	r2, [pc, #116]	; (8002380 <HAL_InitTick+0xd8>)
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_InitTick+0xd8>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_InitTick+0xd8>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_InitTick+0xd8>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002320:	4817      	ldr	r0, [pc, #92]	; (8002380 <HAL_InitTick+0xd8>)
 8002322:	f001 fd05 	bl	8003d30 <HAL_TIM_Base_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800232c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002330:	2b00      	cmp	r3, #0
 8002332:	d11b      	bne.n	800236c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002334:	4812      	ldr	r0, [pc, #72]	; (8002380 <HAL_InitTick+0xd8>)
 8002336:	f001 fd95 	bl	8003e64 <HAL_TIM_Base_Start_IT>
 800233a:	4603      	mov	r3, r0
 800233c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002344:	2b00      	cmp	r3, #0
 8002346:	d111      	bne.n	800236c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002348:	2019      	movs	r0, #25
 800234a:	f000 fa52 	bl	80027f2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b0f      	cmp	r3, #15
 8002352:	d808      	bhi.n	8002366 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002354:	2200      	movs	r2, #0
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	2019      	movs	r0, #25
 800235a:	f000 fa2e 	bl	80027ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_InitTick+0xe0>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	e002      	b.n	800236c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800236c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002370:	4618      	mov	r0, r3
 8002372:	3730      	adds	r7, #48	; 0x30
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	431bde83 	.word	0x431bde83
 8002380:	20000370 	.word	0x20000370
 8002384:	40012c00 	.word	0x40012c00
 8002388:	20000010 	.word	0x20000010

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002390:	e7fe      	b.n	8002390 <NMI_Handler+0x4>

08002392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <HardFault_Handler+0x4>

08002398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <MemManage_Handler+0x4>

0800239e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <BusFault_Handler+0x4>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <UsageFault_Handler+0x4>

080023aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
	...

080023b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <TIM1_UP_IRQHandler+0x10>)
 80023be:	f001 fda3 	bl	8003f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000370 	.word	0x20000370

080023cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return 1;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <_kill>:

int _kill(int pid, int sig)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023e4:	f007 fa08 	bl	80097f8 <__errno>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2216      	movs	r2, #22
 80023ec:	601a      	str	r2, [r3, #0]
  return -1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <_exit>:

void _exit (int status)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002402:	f04f 31ff 	mov.w	r1, #4294967295
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ffe7 	bl	80023da <_kill>
  while (1) {}    /* Make sure we hang here */
 800240c:	e7fe      	b.n	800240c <_exit+0x12>

0800240e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e00a      	b.n	8002436 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002420:	f3af 8000 	nop.w
 8002424:	4601      	mov	r1, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	60ba      	str	r2, [r7, #8]
 800242c:	b2ca      	uxtb	r2, r1
 800242e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3301      	adds	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	dbf0      	blt.n	8002420 <_read+0x12>
  }

  return len;
 800243e:	687b      	ldr	r3, [r7, #4]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	e009      	b.n	800246e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	60ba      	str	r2, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff f99a 	bl	800179c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	429a      	cmp	r2, r3
 8002474:	dbf1      	blt.n	800245a <_write+0x12>
  }
  return len;
 8002476:	687b      	ldr	r3, [r7, #4]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_close>:

int _close(int file)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024a6:	605a      	str	r2, [r3, #4]
  return 0;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <_isatty>:

int _isatty(int file)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024bc:	2301      	movs	r3, #1
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <_sbrk+0x5c>)
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <_sbrk+0x60>)
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <_sbrk+0x64>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <_sbrk+0x64>)
 80024fe:	4a12      	ldr	r2, [pc, #72]	; (8002548 <_sbrk+0x68>)
 8002500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <_sbrk+0x64>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	429a      	cmp	r2, r3
 800250e:	d207      	bcs.n	8002520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002510:	f007 f972 	bl	80097f8 <__errno>
 8002514:	4603      	mov	r3, r0
 8002516:	220c      	movs	r2, #12
 8002518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	e009      	b.n	8002534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <_sbrk+0x64>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <_sbrk+0x64>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <_sbrk+0x64>)
 8002530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20005000 	.word	0x20005000
 8002540:	00000400 	.word	0x00000400
 8002544:	200003b8 	.word	0x200003b8
 8002548:	20002560 	.word	0x20002560

0800254c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002558:	f7ff fff8 	bl	800254c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800255c:	480b      	ldr	r0, [pc, #44]	; (800258c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800255e:	490c      	ldr	r1, [pc, #48]	; (8002590 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002560:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002564:	e002      	b.n	800256c <LoopCopyDataInit>

08002566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800256a:	3304      	adds	r3, #4

0800256c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800256c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800256e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002570:	d3f9      	bcc.n	8002566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002572:	4a09      	ldr	r2, [pc, #36]	; (8002598 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002574:	4c09      	ldr	r4, [pc, #36]	; (800259c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002578:	e001      	b.n	800257e <LoopFillZerobss>

0800257a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800257a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800257c:	3204      	adds	r2, #4

0800257e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800257e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002580:	d3fb      	bcc.n	800257a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002582:	f007 f93f 	bl	8009804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002586:	f7ff f91b 	bl	80017c0 <main>
  bx lr
 800258a:	4770      	bx	lr
  ldr r0, =_sdata
 800258c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002590:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002594:	0800d5e4 	.word	0x0800d5e4
  ldr r2, =_sbss
 8002598:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800259c:	2000255c 	.word	0x2000255c

080025a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025a0:	e7fe      	b.n	80025a0 <ADC1_2_IRQHandler>
	...

080025a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_Init+0x28>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_Init+0x28>)
 80025ae:	f043 0310 	orr.w	r3, r3, #16
 80025b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b4:	2003      	movs	r0, #3
 80025b6:	f000 f8f5 	bl	80027a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ba:	200f      	movs	r0, #15
 80025bc:	f7ff fe74 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c0:	f7ff fd92 	bl	80020e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40022000 	.word	0x40022000

080025d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_IncTick+0x1c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_IncTick+0x20>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	4a03      	ldr	r2, [pc, #12]	; (80025f0 <HAL_IncTick+0x20>)
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	20000014 	.word	0x20000014
 80025f0:	200003bc 	.word	0x200003bc

080025f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b02      	ldr	r3, [pc, #8]	; (8002604 <HAL_GetTick+0x10>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	200003bc 	.word	0x200003bc

08002608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002610:	f7ff fff0 	bl	80025f4 <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d005      	beq.n	800262e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_Delay+0x44>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4413      	add	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800262e:	bf00      	nop
 8002630:	f7ff ffe0 	bl	80025f4 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	429a      	cmp	r2, r3
 800263e:	d8f7      	bhi.n	8002630 <HAL_Delay+0x28>
  {
  }
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000014 	.word	0x20000014

08002650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	60d3      	str	r3, [r2, #12]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <__NVIC_GetPriorityGrouping+0x18>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	f003 0307 	and.w	r3, r3, #7
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	db0b      	blt.n	80026de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	4906      	ldr	r1, [pc, #24]	; (80026e8 <__NVIC_EnableIRQ+0x34>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2001      	movs	r0, #1
 80026d6:	fa00 f202 	lsl.w	r2, r0, r2
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db0a      	blt.n	8002716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	490c      	ldr	r1, [pc, #48]	; (8002738 <__NVIC_SetPriority+0x4c>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	440b      	add	r3, r1
 8002710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002714:	e00a      	b.n	800272c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4908      	ldr	r1, [pc, #32]	; (800273c <__NVIC_SetPriority+0x50>)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3b04      	subs	r3, #4
 8002724:	0112      	lsls	r2, r2, #4
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	440b      	add	r3, r1
 800272a:	761a      	strb	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f1c3 0307 	rsb	r3, r3, #7
 800275a:	2b04      	cmp	r3, #4
 800275c:	bf28      	it	cs
 800275e:	2304      	movcs	r3, #4
 8002760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3304      	adds	r3, #4
 8002766:	2b06      	cmp	r3, #6
 8002768:	d902      	bls.n	8002770 <NVIC_EncodePriority+0x30>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3b03      	subs	r3, #3
 800276e:	e000      	b.n	8002772 <NVIC_EncodePriority+0x32>
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	f04f 32ff 	mov.w	r2, #4294967295
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	401a      	ands	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43d9      	mvns	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	4313      	orrs	r3, r2
         );
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ff4f 	bl	8002650 <__NVIC_SetPriorityGrouping>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027cc:	f7ff ff64 	bl	8002698 <__NVIC_GetPriorityGrouping>
 80027d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	6978      	ldr	r0, [r7, #20]
 80027d8:	f7ff ffb2 	bl	8002740 <NVIC_EncodePriority>
 80027dc:	4602      	mov	r2, r0
 80027de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff81 	bl	80026ec <__NVIC_SetPriority>
}
 80027ea:	bf00      	nop
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff57 	bl	80026b4 <__NVIC_EnableIRQ>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b08b      	sub	sp, #44	; 0x2c
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002822:	e169      	b.n	8002af8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002824:	2201      	movs	r2, #1
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	429a      	cmp	r2, r3
 800283e:	f040 8158 	bne.w	8002af2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a9a      	ldr	r2, [pc, #616]	; (8002ab0 <HAL_GPIO_Init+0x2a0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d05e      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 800284c:	4a98      	ldr	r2, [pc, #608]	; (8002ab0 <HAL_GPIO_Init+0x2a0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d875      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 8002852:	4a98      	ldr	r2, [pc, #608]	; (8002ab4 <HAL_GPIO_Init+0x2a4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d058      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 8002858:	4a96      	ldr	r2, [pc, #600]	; (8002ab4 <HAL_GPIO_Init+0x2a4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d86f      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 800285e:	4a96      	ldr	r2, [pc, #600]	; (8002ab8 <HAL_GPIO_Init+0x2a8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d052      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 8002864:	4a94      	ldr	r2, [pc, #592]	; (8002ab8 <HAL_GPIO_Init+0x2a8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d869      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 800286a:	4a94      	ldr	r2, [pc, #592]	; (8002abc <HAL_GPIO_Init+0x2ac>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d04c      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 8002870:	4a92      	ldr	r2, [pc, #584]	; (8002abc <HAL_GPIO_Init+0x2ac>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d863      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 8002876:	4a92      	ldr	r2, [pc, #584]	; (8002ac0 <HAL_GPIO_Init+0x2b0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d046      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 800287c:	4a90      	ldr	r2, [pc, #576]	; (8002ac0 <HAL_GPIO_Init+0x2b0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d85d      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 8002882:	2b12      	cmp	r3, #18
 8002884:	d82a      	bhi.n	80028dc <HAL_GPIO_Init+0xcc>
 8002886:	2b12      	cmp	r3, #18
 8002888:	d859      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 800288a:	a201      	add	r2, pc, #4	; (adr r2, 8002890 <HAL_GPIO_Init+0x80>)
 800288c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002890:	0800290b 	.word	0x0800290b
 8002894:	080028e5 	.word	0x080028e5
 8002898:	080028f7 	.word	0x080028f7
 800289c:	08002939 	.word	0x08002939
 80028a0:	0800293f 	.word	0x0800293f
 80028a4:	0800293f 	.word	0x0800293f
 80028a8:	0800293f 	.word	0x0800293f
 80028ac:	0800293f 	.word	0x0800293f
 80028b0:	0800293f 	.word	0x0800293f
 80028b4:	0800293f 	.word	0x0800293f
 80028b8:	0800293f 	.word	0x0800293f
 80028bc:	0800293f 	.word	0x0800293f
 80028c0:	0800293f 	.word	0x0800293f
 80028c4:	0800293f 	.word	0x0800293f
 80028c8:	0800293f 	.word	0x0800293f
 80028cc:	0800293f 	.word	0x0800293f
 80028d0:	0800293f 	.word	0x0800293f
 80028d4:	080028ed 	.word	0x080028ed
 80028d8:	08002901 	.word	0x08002901
 80028dc:	4a79      	ldr	r2, [pc, #484]	; (8002ac4 <HAL_GPIO_Init+0x2b4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028e2:	e02c      	b.n	800293e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	623b      	str	r3, [r7, #32]
          break;
 80028ea:	e029      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	3304      	adds	r3, #4
 80028f2:	623b      	str	r3, [r7, #32]
          break;
 80028f4:	e024      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	3308      	adds	r3, #8
 80028fc:	623b      	str	r3, [r7, #32]
          break;
 80028fe:	e01f      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	330c      	adds	r3, #12
 8002906:	623b      	str	r3, [r7, #32]
          break;
 8002908:	e01a      	b.n	8002940 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002912:	2304      	movs	r3, #4
 8002914:	623b      	str	r3, [r7, #32]
          break;
 8002916:	e013      	b.n	8002940 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002920:	2308      	movs	r3, #8
 8002922:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	611a      	str	r2, [r3, #16]
          break;
 800292a:	e009      	b.n	8002940 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800292c:	2308      	movs	r3, #8
 800292e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	615a      	str	r2, [r3, #20]
          break;
 8002936:	e003      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002938:	2300      	movs	r3, #0
 800293a:	623b      	str	r3, [r7, #32]
          break;
 800293c:	e000      	b.n	8002940 <HAL_GPIO_Init+0x130>
          break;
 800293e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2bff      	cmp	r3, #255	; 0xff
 8002944:	d801      	bhi.n	800294a <HAL_GPIO_Init+0x13a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	e001      	b.n	800294e <HAL_GPIO_Init+0x13e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2bff      	cmp	r3, #255	; 0xff
 8002954:	d802      	bhi.n	800295c <HAL_GPIO_Init+0x14c>
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	e002      	b.n	8002962 <HAL_GPIO_Init+0x152>
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	3b08      	subs	r3, #8
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	210f      	movs	r1, #15
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	401a      	ands	r2, r3
 8002974:	6a39      	ldr	r1, [r7, #32]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	431a      	orrs	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80b1 	beq.w	8002af2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002990:	4b4d      	ldr	r3, [pc, #308]	; (8002ac8 <HAL_GPIO_Init+0x2b8>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a4c      	ldr	r2, [pc, #304]	; (8002ac8 <HAL_GPIO_Init+0x2b8>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b4a      	ldr	r3, [pc, #296]	; (8002ac8 <HAL_GPIO_Init+0x2b8>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029a8:	4a48      	ldr	r2, [pc, #288]	; (8002acc <HAL_GPIO_Init+0x2bc>)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	3302      	adds	r3, #2
 80029b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	220f      	movs	r2, #15
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a40      	ldr	r2, [pc, #256]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d013      	beq.n	80029fc <HAL_GPIO_Init+0x1ec>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a3f      	ldr	r2, [pc, #252]	; (8002ad4 <HAL_GPIO_Init+0x2c4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00d      	beq.n	80029f8 <HAL_GPIO_Init+0x1e8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a3e      	ldr	r2, [pc, #248]	; (8002ad8 <HAL_GPIO_Init+0x2c8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <HAL_GPIO_Init+0x1e4>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3d      	ldr	r2, [pc, #244]	; (8002adc <HAL_GPIO_Init+0x2cc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d101      	bne.n	80029f0 <HAL_GPIO_Init+0x1e0>
 80029ec:	2303      	movs	r3, #3
 80029ee:	e006      	b.n	80029fe <HAL_GPIO_Init+0x1ee>
 80029f0:	2304      	movs	r3, #4
 80029f2:	e004      	b.n	80029fe <HAL_GPIO_Init+0x1ee>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e002      	b.n	80029fe <HAL_GPIO_Init+0x1ee>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <HAL_GPIO_Init+0x1ee>
 80029fc:	2300      	movs	r3, #0
 80029fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a00:	f002 0203 	and.w	r2, r2, #3
 8002a04:	0092      	lsls	r2, r2, #2
 8002a06:	4093      	lsls	r3, r2
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a0e:	492f      	ldr	r1, [pc, #188]	; (8002acc <HAL_GPIO_Init+0x2bc>)
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a28:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	492c      	ldr	r1, [pc, #176]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	4928      	ldr	r1, [pc, #160]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a50:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	4922      	ldr	r1, [pc, #136]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60cb      	str	r3, [r1, #12]
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	491e      	ldr	r1, [pc, #120]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d006      	beq.n	8002a86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	4918      	ldr	r1, [pc, #96]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
 8002a84:	e006      	b.n	8002a94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	4914      	ldr	r1, [pc, #80]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d021      	beq.n	8002ae4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]
 8002aac:	e021      	b.n	8002af2 <HAL_GPIO_Init+0x2e2>
 8002aae:	bf00      	nop
 8002ab0:	10320000 	.word	0x10320000
 8002ab4:	10310000 	.word	0x10310000
 8002ab8:	10220000 	.word	0x10220000
 8002abc:	10210000 	.word	0x10210000
 8002ac0:	10120000 	.word	0x10120000
 8002ac4:	10110000 	.word	0x10110000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40010000 	.word	0x40010000
 8002ad0:	40010800 	.word	0x40010800
 8002ad4:	40010c00 	.word	0x40010c00
 8002ad8:	40011000 	.word	0x40011000
 8002adc:	40011400 	.word	0x40011400
 8002ae0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	4909      	ldr	r1, [pc, #36]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	3301      	adds	r3, #1
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f47f ae8e 	bne.w	8002824 <HAL_GPIO_Init+0x14>
  }
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	372c      	adds	r7, #44	; 0x2c
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	40010400 	.word	0x40010400

08002b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e001      	b.n	8002b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	807b      	strh	r3, [r7, #2]
 8002b52:	4613      	mov	r3, r2
 8002b54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b56:	787b      	ldrb	r3, [r7, #1]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5c:	887a      	ldrh	r2, [r7, #2]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b62:	e003      	b.n	8002b6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b64:	887b      	ldrh	r3, [r7, #2]
 8002b66:	041a      	lsls	r2, r3, #16
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	611a      	str	r2, [r3, #16]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e12b      	b.n	8002de2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff fada 	bl	8002158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	; 0x24
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bdc:	f001 f832 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8002be0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4a81      	ldr	r2, [pc, #516]	; (8002dec <HAL_I2C_Init+0x274>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d807      	bhi.n	8002bfc <HAL_I2C_Init+0x84>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a80      	ldr	r2, [pc, #512]	; (8002df0 <HAL_I2C_Init+0x278>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	bf94      	ite	ls
 8002bf4:	2301      	movls	r3, #1
 8002bf6:	2300      	movhi	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e006      	b.n	8002c0a <HAL_I2C_Init+0x92>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a7d      	ldr	r2, [pc, #500]	; (8002df4 <HAL_I2C_Init+0x27c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	bf94      	ite	ls
 8002c04:	2301      	movls	r3, #1
 8002c06:	2300      	movhi	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0e7      	b.n	8002de2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4a78      	ldr	r2, [pc, #480]	; (8002df8 <HAL_I2C_Init+0x280>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	0c9b      	lsrs	r3, r3, #18
 8002c1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a6a      	ldr	r2, [pc, #424]	; (8002dec <HAL_I2C_Init+0x274>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d802      	bhi.n	8002c4c <HAL_I2C_Init+0xd4>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	e009      	b.n	8002c60 <HAL_I2C_Init+0xe8>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	4a69      	ldr	r2, [pc, #420]	; (8002dfc <HAL_I2C_Init+0x284>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	3301      	adds	r3, #1
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	495c      	ldr	r1, [pc, #368]	; (8002dec <HAL_I2C_Init+0x274>)
 8002c7c:	428b      	cmp	r3, r1
 8002c7e:	d819      	bhi.n	8002cb4 <HAL_I2C_Init+0x13c>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1e59      	subs	r1, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c8e:	1c59      	adds	r1, r3, #1
 8002c90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c94:	400b      	ands	r3, r1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_I2C_Init+0x138>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1e59      	subs	r1, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cae:	e051      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	e04f      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d111      	bne.n	8002ce0 <HAL_I2C_Init+0x168>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1e58      	subs	r0, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	440b      	add	r3, r1
 8002cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e012      	b.n	8002d06 <HAL_I2C_Init+0x18e>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1e58      	subs	r0, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	0099      	lsls	r1, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_I2C_Init+0x196>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e022      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10e      	bne.n	8002d34 <HAL_I2C_Init+0x1bc>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1e58      	subs	r0, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	440b      	add	r3, r1
 8002d24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d32:	e00f      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e58      	subs	r0, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	0099      	lsls	r1, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	6809      	ldr	r1, [r1, #0]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6911      	ldr	r1, [r2, #16]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68d2      	ldr	r2, [r2, #12]
 8002d8e:	4311      	orrs	r1, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	430b      	orrs	r3, r1
 8002d96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	000186a0 	.word	0x000186a0
 8002df0:	001e847f 	.word	0x001e847f
 8002df4:	003d08ff 	.word	0x003d08ff
 8002df8:	431bde83 	.word	0x431bde83
 8002dfc:	10624dd3 	.word	0x10624dd3

08002e00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	817b      	strh	r3, [r7, #10]
 8002e10:	4613      	mov	r3, r2
 8002e12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff fbee 	bl	80025f4 <HAL_GetTick>
 8002e18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	f040 80e0 	bne.w	8002fe8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2319      	movs	r3, #25
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4970      	ldr	r1, [pc, #448]	; (8002ff4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f964 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e0d3      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_I2C_Master_Transmit+0x50>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e0cc      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d007      	beq.n	8002e76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2221      	movs	r2, #33	; 0x21
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2210      	movs	r2, #16
 8002e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	893a      	ldrh	r2, [r7, #8]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a50      	ldr	r2, [pc, #320]	; (8002ff8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002eb8:	8979      	ldrh	r1, [r7, #10]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	6a3a      	ldr	r2, [r7, #32]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f89c 	bl	8002ffc <I2C_MasterRequestWrite>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e08d      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ee4:	e066      	b.n	8002fb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	6a39      	ldr	r1, [r7, #32]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fa22 	bl	8003334 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d107      	bne.n	8002f0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e06b      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	781a      	ldrb	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d11b      	bne.n	8002f88 <HAL_I2C_Master_Transmit+0x188>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d017      	beq.n	8002f88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	6a39      	ldr	r1, [r7, #32]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fa19 	bl	80033c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d107      	bne.n	8002fb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e01a      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d194      	bne.n	8002ee6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e000      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
  }
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	00100002 	.word	0x00100002
 8002ff8:	ffff0000 	.word	0xffff0000

08002ffc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	460b      	mov	r3, r1
 800300a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d006      	beq.n	8003026 <I2C_MasterRequestWrite+0x2a>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d003      	beq.n	8003026 <I2C_MasterRequestWrite+0x2a>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003024:	d108      	bne.n	8003038 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e00b      	b.n	8003050 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	2b12      	cmp	r3, #18
 800303e:	d107      	bne.n	8003050 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f84f 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00d      	beq.n	8003084 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003076:	d103      	bne.n	8003080 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e035      	b.n	80030f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308c:	d108      	bne.n	80030a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800309c:	611a      	str	r2, [r3, #16]
 800309e:	e01b      	b.n	80030d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030a0:	897b      	ldrh	r3, [r7, #10]
 80030a2:	11db      	asrs	r3, r3, #7
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 0306 	and.w	r3, r3, #6
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f063 030f 	orn	r3, r3, #15
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	490e      	ldr	r1, [pc, #56]	; (80030f8 <I2C_MasterRequestWrite+0xfc>)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f898 	bl	80031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e010      	b.n	80030f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	4907      	ldr	r1, [pc, #28]	; (80030fc <I2C_MasterRequestWrite+0x100>)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f888 	bl	80031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	00010008 	.word	0x00010008
 80030fc:	00010002 	.word	0x00010002

08003100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003110:	e048      	b.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d044      	beq.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7ff fa6b 	bl	80025f4 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d139      	bne.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	0c1b      	lsrs	r3, r3, #16
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b01      	cmp	r3, #1
 8003138:	d10d      	bne.n	8003156 <I2C_WaitOnFlagUntilTimeout+0x56>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	43da      	mvns	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4013      	ands	r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	e00c      	b.n	8003170 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	43da      	mvns	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	4013      	ands	r3, r2
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	429a      	cmp	r2, r3
 8003174:	d116      	bne.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f043 0220 	orr.w	r2, r3, #32
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e023      	b.n	80031ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	0c1b      	lsrs	r3, r3, #16
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d10d      	bne.n	80031ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	43da      	mvns	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4013      	ands	r3, r2
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	e00c      	b.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	43da      	mvns	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4013      	ands	r3, r2
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d093      	beq.n	8003112 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003202:	e071      	b.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003212:	d123      	bne.n	800325c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003222:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800322c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f043 0204 	orr.w	r2, r3, #4
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e067      	b.n	800332c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003262:	d041      	beq.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003264:	f7ff f9c6 	bl	80025f4 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d302      	bcc.n	800327a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d136      	bne.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d10c      	bne.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	43da      	mvns	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4013      	ands	r3, r2
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf14      	ite	ne
 8003296:	2301      	movne	r3, #1
 8003298:	2300      	moveq	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	e00b      	b.n	80032b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	43da      	mvns	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	4013      	ands	r3, r2
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e021      	b.n	800332c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	0c1b      	lsrs	r3, r3, #16
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d10c      	bne.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	43da      	mvns	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4013      	ands	r3, r2
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e00b      	b.n	8003324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	f47f af6d 	bne.w	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003340:	e034      	b.n	80033ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f886 	bl	8003454 <I2C_IsAcknowledgeFailed>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e034      	b.n	80033bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d028      	beq.n	80033ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335a:	f7ff f94b 	bl	80025f4 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	429a      	cmp	r2, r3
 8003368:	d302      	bcc.n	8003370 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d11d      	bne.n	80033ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337a:	2b80      	cmp	r3, #128	; 0x80
 800337c:	d016      	beq.n	80033ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e007      	b.n	80033bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b6:	2b80      	cmp	r3, #128	; 0x80
 80033b8:	d1c3      	bne.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033d0:	e034      	b.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f83e 	bl	8003454 <I2C_IsAcknowledgeFailed>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e034      	b.n	800344c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d028      	beq.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ea:	f7ff f903 	bl	80025f4 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d302      	bcc.n	8003400 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d11d      	bne.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b04      	cmp	r3, #4
 800340c:	d016      	beq.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e007      	b.n	800344c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b04      	cmp	r3, #4
 8003448:	d1c3      	bne.n	80033d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346a:	d11b      	bne.n	80034a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003474:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f043 0204 	orr.w	r2, r3, #4
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e272      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8087 	beq.w	80035de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d0:	4b92      	ldr	r3, [pc, #584]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d00c      	beq.n	80034f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034dc:	4b8f      	ldr	r3, [pc, #572]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d112      	bne.n	800350e <HAL_RCC_OscConfig+0x5e>
 80034e8:	4b8c      	ldr	r3, [pc, #560]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f4:	d10b      	bne.n	800350e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f6:	4b89      	ldr	r3, [pc, #548]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d06c      	beq.n	80035dc <HAL_RCC_OscConfig+0x12c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d168      	bne.n	80035dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e24c      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003516:	d106      	bne.n	8003526 <HAL_RCC_OscConfig+0x76>
 8003518:	4b80      	ldr	r3, [pc, #512]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a7f      	ldr	r2, [pc, #508]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800351e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	e02e      	b.n	8003584 <HAL_RCC_OscConfig+0xd4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10c      	bne.n	8003548 <HAL_RCC_OscConfig+0x98>
 800352e:	4b7b      	ldr	r3, [pc, #492]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7a      	ldr	r2, [pc, #488]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b78      	ldr	r3, [pc, #480]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a77      	ldr	r2, [pc, #476]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e01d      	b.n	8003584 <HAL_RCC_OscConfig+0xd4>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0xbc>
 8003552:	4b72      	ldr	r3, [pc, #456]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a71      	ldr	r2, [pc, #452]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b6f      	ldr	r3, [pc, #444]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a6e      	ldr	r2, [pc, #440]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e00b      	b.n	8003584 <HAL_RCC_OscConfig+0xd4>
 800356c:	4b6b      	ldr	r3, [pc, #428]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a6a      	ldr	r2, [pc, #424]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b68      	ldr	r3, [pc, #416]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a67      	ldr	r2, [pc, #412]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 800357e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003582:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d013      	beq.n	80035b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7ff f832 	bl	80025f4 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003594:	f7ff f82e 	bl	80025f4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	; 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e200      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b5d      	ldr	r3, [pc, #372]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0xe4>
 80035b2:	e014      	b.n	80035de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7ff f81e 	bl	80025f4 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7ff f81a 	bl	80025f4 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e1ec      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ce:	4b53      	ldr	r3, [pc, #332]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x10c>
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d063      	beq.n	80036b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ea:	4b4c      	ldr	r3, [pc, #304]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035f6:	4b49      	ldr	r3, [pc, #292]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d11c      	bne.n	800363c <HAL_RCC_OscConfig+0x18c>
 8003602:	4b46      	ldr	r3, [pc, #280]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d116      	bne.n	800363c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	4b43      	ldr	r3, [pc, #268]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_RCC_OscConfig+0x176>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e1c0      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003626:	4b3d      	ldr	r3, [pc, #244]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4939      	ldr	r1, [pc, #228]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	e03a      	b.n	80036b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_RCC_OscConfig+0x270>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364a:	f7fe ffd3 	bl	80025f4 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003652:	f7fe ffcf 	bl	80025f4 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e1a1      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	4b2d      	ldr	r3, [pc, #180]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003670:	4b2a      	ldr	r3, [pc, #168]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4927      	ldr	r1, [pc, #156]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
 8003684:	e015      	b.n	80036b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003686:	4b26      	ldr	r3, [pc, #152]	; (8003720 <HAL_RCC_OscConfig+0x270>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fe ffb2 	bl	80025f4 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003694:	f7fe ffae 	bl	80025f4 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e180      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d03a      	beq.n	8003734 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d019      	beq.n	80036fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036cc:	f7fe ff92 	bl	80025f4 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d4:	f7fe ff8e 	bl	80025f4 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e160      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	4b0d      	ldr	r3, [pc, #52]	; (800371c <HAL_RCC_OscConfig+0x26c>)
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036f2:	2001      	movs	r0, #1
 80036f4:	f000 fafe 	bl	8003cf4 <RCC_Delay>
 80036f8:	e01c      	b.n	8003734 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_RCC_OscConfig+0x274>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003700:	f7fe ff78 	bl	80025f4 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003706:	e00f      	b.n	8003728 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003708:	f7fe ff74 	bl	80025f4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d908      	bls.n	8003728 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e146      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	42420000 	.word	0x42420000
 8003724:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	4b92      	ldr	r3, [pc, #584]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e9      	bne.n	8003708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80a6 	beq.w	800388e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b8b      	ldr	r3, [pc, #556]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10d      	bne.n	800376e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	4b88      	ldr	r3, [pc, #544]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	4a87      	ldr	r2, [pc, #540]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	61d3      	str	r3, [r2, #28]
 800375e:	4b85      	ldr	r3, [pc, #532]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b82      	ldr	r3, [pc, #520]	; (8003978 <HAL_RCC_OscConfig+0x4c8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d118      	bne.n	80037ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377a:	4b7f      	ldr	r3, [pc, #508]	; (8003978 <HAL_RCC_OscConfig+0x4c8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a7e      	ldr	r2, [pc, #504]	; (8003978 <HAL_RCC_OscConfig+0x4c8>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003786:	f7fe ff35 	bl	80025f4 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378e:	f7fe ff31 	bl	80025f4 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b64      	cmp	r3, #100	; 0x64
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e103      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	4b75      	ldr	r3, [pc, #468]	; (8003978 <HAL_RCC_OscConfig+0x4c8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x312>
 80037b4:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	4a6e      	ldr	r2, [pc, #440]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6213      	str	r3, [r2, #32]
 80037c0:	e02d      	b.n	800381e <HAL_RCC_OscConfig+0x36e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x334>
 80037ca:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4a69      	ldr	r2, [pc, #420]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	6213      	str	r3, [r2, #32]
 80037d6:	4b67      	ldr	r3, [pc, #412]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4a66      	ldr	r2, [pc, #408]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	f023 0304 	bic.w	r3, r3, #4
 80037e0:	6213      	str	r3, [r2, #32]
 80037e2:	e01c      	b.n	800381e <HAL_RCC_OscConfig+0x36e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b05      	cmp	r3, #5
 80037ea:	d10c      	bne.n	8003806 <HAL_RCC_OscConfig+0x356>
 80037ec:	4b61      	ldr	r3, [pc, #388]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4a60      	ldr	r2, [pc, #384]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	f043 0304 	orr.w	r3, r3, #4
 80037f6:	6213      	str	r3, [r2, #32]
 80037f8:	4b5e      	ldr	r3, [pc, #376]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4a5d      	ldr	r2, [pc, #372]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6213      	str	r3, [r2, #32]
 8003804:	e00b      	b.n	800381e <HAL_RCC_OscConfig+0x36e>
 8003806:	4b5b      	ldr	r3, [pc, #364]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4a5a      	ldr	r2, [pc, #360]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	6213      	str	r3, [r2, #32]
 8003812:	4b58      	ldr	r3, [pc, #352]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4a57      	ldr	r2, [pc, #348]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d015      	beq.n	8003852 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003826:	f7fe fee5 	bl	80025f4 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fe fee1 	bl	80025f4 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0b1      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003844:	4b4b      	ldr	r3, [pc, #300]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ee      	beq.n	800382e <HAL_RCC_OscConfig+0x37e>
 8003850:	e014      	b.n	800387c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003852:	f7fe fecf 	bl	80025f4 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003858:	e00a      	b.n	8003870 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385a:	f7fe fecb 	bl	80025f4 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f241 3288 	movw	r2, #5000	; 0x1388
 8003868:	4293      	cmp	r3, r2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e09b      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003870:	4b40      	ldr	r3, [pc, #256]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ee      	bne.n	800385a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800387c:	7dfb      	ldrb	r3, [r7, #23]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d105      	bne.n	800388e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003882:	4b3c      	ldr	r3, [pc, #240]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4a3b      	ldr	r2, [pc, #236]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 8087 	beq.w	80039a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003898:	4b36      	ldr	r3, [pc, #216]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d061      	beq.n	8003968 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d146      	bne.n	800393a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ac:	4b33      	ldr	r3, [pc, #204]	; (800397c <HAL_RCC_OscConfig+0x4cc>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b2:	f7fe fe9f 	bl	80025f4 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fe fe9b 	bl	80025f4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e06d      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038cc:	4b29      	ldr	r3, [pc, #164]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f0      	bne.n	80038ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e0:	d108      	bne.n	80038f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038e2:	4b24      	ldr	r3, [pc, #144]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	4921      	ldr	r1, [pc, #132]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f4:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a19      	ldr	r1, [r3, #32]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	430b      	orrs	r3, r1
 8003906:	491b      	ldr	r1, [pc, #108]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x4cc>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fe fe6f 	bl	80025f4 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391a:	f7fe fe6b 	bl	80025f4 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e03d      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x46a>
 8003938:	e035      	b.n	80039a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <HAL_RCC_OscConfig+0x4cc>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe fe58 	bl	80025f4 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe fe54 	bl	80025f4 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e026      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x498>
 8003966:	e01e      	b.n	80039a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d107      	bne.n	8003980 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e019      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
 8003974:	40021000 	.word	0x40021000
 8003978:	40007000 	.word	0x40007000
 800397c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_RCC_OscConfig+0x500>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	429a      	cmp	r2, r3
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399e:	429a      	cmp	r2, r3
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000

080039b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0d0      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c8:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d910      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b67      	ldr	r3, [pc, #412]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 0207 	bic.w	r2, r3, #7
 80039de:	4965      	ldr	r1, [pc, #404]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b63      	ldr	r3, [pc, #396]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0b8      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a10:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4a58      	ldr	r2, [pc, #352]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a28:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a52      	ldr	r2, [pc, #328]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a34:	4b50      	ldr	r3, [pc, #320]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	494d      	ldr	r1, [pc, #308]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d040      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b47      	ldr	r3, [pc, #284]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d115      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e07f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a72:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e073      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a82:	4b3d      	ldr	r3, [pc, #244]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e06b      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f023 0203 	bic.w	r2, r3, #3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4936      	ldr	r1, [pc, #216]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa4:	f7fe fda6 	bl	80025f4 <HAL_GetTick>
 8003aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aac:	f7fe fda2 	bl	80025f4 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e053      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 020c 	and.w	r2, r3, #12
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d1eb      	bne.n	8003aac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d210      	bcs.n	8003b04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 0207 	bic.w	r2, r3, #7
 8003aea:	4922      	ldr	r1, [pc, #136]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e032      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4916      	ldr	r1, [pc, #88]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	490e      	ldr	r1, [pc, #56]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b42:	f000 f821 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b46:	4602      	mov	r2, r0
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	490a      	ldr	r1, [pc, #40]	; (8003b7c <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	5ccb      	ldrb	r3, [r1, r3]
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <HAL_RCC_ClockConfig+0x1cc>)
 8003b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1d0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fba0 	bl	80022a8 <HAL_InitTick>

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40022000 	.word	0x40022000
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	0800d130 	.word	0x0800d130
 8003b80:	2000000c 	.word	0x2000000c
 8003b84:	20000010 	.word	0x20000010

08003b88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d002      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x30>
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCC_GetSysClockFreq+0x36>
 8003bb6:	e027      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bba:	613b      	str	r3, [r7, #16]
      break;
 8003bbc:	e027      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	0c9b      	lsrs	r3, r3, #18
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bc8:	5cd3      	ldrb	r3, [r2, r3]
 8003bca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d010      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bd6:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	0c5b      	lsrs	r3, r3, #17
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003be2:	5cd3      	ldrb	r3, [r2, r3]
 8003be4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a0d      	ldr	r2, [pc, #52]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bea:	fb03 f202 	mul.w	r2, r3, r2
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e004      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bfc:	fb02 f303 	mul.w	r3, r2, r3
 8003c00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	613b      	str	r3, [r7, #16]
      break;
 8003c06:	e002      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c0a:	613b      	str	r3, [r7, #16]
      break;
 8003c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0e:	693b      	ldr	r3, [r7, #16]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	007a1200 	.word	0x007a1200
 8003c24:	0800d148 	.word	0x0800d148
 8003c28:	0800d158 	.word	0x0800d158
 8003c2c:	003d0900 	.word	0x003d0900

08003c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c34:	4b02      	ldr	r3, [pc, #8]	; (8003c40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c36:	681b      	ldr	r3, [r3, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	2000000c 	.word	0x2000000c

08003c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c48:	f7ff fff2 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	4903      	ldr	r1, [pc, #12]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	0800d140 	.word	0x0800d140

08003c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c70:	f7ff ffde 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	0adb      	lsrs	r3, r3, #11
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4903      	ldr	r1, [pc, #12]	; (8003c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	0800d140 	.word	0x0800d140

08003c94 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_RCC_GetClockConfig+0x58>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0203 	and.w	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <HAL_RCC_GetClockConfig+0x58>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_RCC_GetClockConfig+0x58>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <HAL_RCC_GetClockConfig+0x58>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0207 	and.w	r2, r3, #7
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40022000 	.word	0x40022000

08003cf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <RCC_Delay+0x34>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <RCC_Delay+0x38>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	0a5b      	lsrs	r3, r3, #9
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d10:	bf00      	nop
  }
  while (Delay --);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1e5a      	subs	r2, r3, #1
 8003d16:	60fa      	str	r2, [r7, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f9      	bne.n	8003d10 <RCC_Delay+0x1c>
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr
 8003d28:	2000000c 	.word	0x2000000c
 8003d2c:	10624dd3 	.word	0x10624dd3

08003d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e041      	b.n	8003dc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe fa3e 	bl	80021d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f000 fabe 	bl	80042f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d001      	beq.n	8003de8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e032      	b.n	8003e4e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <HAL_TIM_Base_Start+0x88>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00e      	beq.n	8003e18 <HAL_TIM_Base_Start+0x48>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e02:	d009      	beq.n	8003e18 <HAL_TIM_Base_Start+0x48>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a14      	ldr	r2, [pc, #80]	; (8003e5c <HAL_TIM_Base_Start+0x8c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d004      	beq.n	8003e18 <HAL_TIM_Base_Start+0x48>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <HAL_TIM_Base_Start+0x90>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d111      	bne.n	8003e3c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b06      	cmp	r3, #6
 8003e28:	d010      	beq.n	8003e4c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3a:	e007      	b.n	8003e4c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40000800 	.word	0x40000800

08003e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d001      	beq.n	8003e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e03a      	b.n	8003ef2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a18      	ldr	r2, [pc, #96]	; (8003efc <HAL_TIM_Base_Start_IT+0x98>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00e      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0x58>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea6:	d009      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0x58>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <HAL_TIM_Base_Start_IT+0x9c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d004      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0x58>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <HAL_TIM_Base_Start_IT+0xa0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d111      	bne.n	8003ee0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b06      	cmp	r3, #6
 8003ecc:	d010      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0201 	orr.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ede:	e007      	b.n	8003ef0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800

08003f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d122      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d11b      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0202 	mvn.w	r2, #2
 8003f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f9b4 	bl	80042b8 <HAL_TIM_IC_CaptureCallback>
 8003f50:	e005      	b.n	8003f5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f9a7 	bl	80042a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f9b6 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d122      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0204 	mvn.w	r2, #4
 8003f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f98a 	bl	80042b8 <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f97d 	bl	80042a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f98c 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d122      	bne.n	800400c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d11b      	bne.n	800400c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0208 	mvn.w	r2, #8
 8003fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f960 	bl	80042b8 <HAL_TIM_IC_CaptureCallback>
 8003ff8:	e005      	b.n	8004006 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f953 	bl	80042a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f962 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b10      	cmp	r3, #16
 8004018:	d122      	bne.n	8004060 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b10      	cmp	r3, #16
 8004026:	d11b      	bne.n	8004060 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0210 	mvn.w	r2, #16
 8004030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2208      	movs	r2, #8
 8004036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f936 	bl	80042b8 <HAL_TIM_IC_CaptureCallback>
 800404c:	e005      	b.n	800405a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f929 	bl	80042a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f938 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d10e      	bne.n	800408c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b01      	cmp	r3, #1
 800407a:	d107      	bne.n	800408c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0201 	mvn.w	r2, #1
 8004084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fe f816 	bl	80020b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004096:	2b80      	cmp	r3, #128	; 0x80
 8004098:	d10e      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a4:	2b80      	cmp	r3, #128	; 0x80
 80040a6:	d107      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa7b 	bl	80045ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	d10e      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d0:	2b40      	cmp	r3, #64	; 0x40
 80040d2:	d107      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f8fc 	bl	80042dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d10e      	bne.n	8004110 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d107      	bne.n	8004110 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0220 	mvn.w	r2, #32
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fa46 	bl	800459c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_TIM_ConfigClockSource+0x1c>
 8004130:	2302      	movs	r3, #2
 8004132:	e0b4      	b.n	800429e <HAL_TIM_ConfigClockSource+0x186>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416c:	d03e      	beq.n	80041ec <HAL_TIM_ConfigClockSource+0xd4>
 800416e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004172:	f200 8087 	bhi.w	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417a:	f000 8086 	beq.w	800428a <HAL_TIM_ConfigClockSource+0x172>
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004182:	d87f      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 8004184:	2b70      	cmp	r3, #112	; 0x70
 8004186:	d01a      	beq.n	80041be <HAL_TIM_ConfigClockSource+0xa6>
 8004188:	2b70      	cmp	r3, #112	; 0x70
 800418a:	d87b      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 800418c:	2b60      	cmp	r3, #96	; 0x60
 800418e:	d050      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x11a>
 8004190:	2b60      	cmp	r3, #96	; 0x60
 8004192:	d877      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 8004194:	2b50      	cmp	r3, #80	; 0x50
 8004196:	d03c      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0xfa>
 8004198:	2b50      	cmp	r3, #80	; 0x50
 800419a:	d873      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d058      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x13a>
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d86f      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 80041a4:	2b30      	cmp	r3, #48	; 0x30
 80041a6:	d064      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x15a>
 80041a8:	2b30      	cmp	r3, #48	; 0x30
 80041aa:	d86b      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d060      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x15a>
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d867      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d05c      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x15a>
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d05a      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x15a>
 80041bc:	e062      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041ce:	f000 f968 	bl	80044a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	609a      	str	r2, [r3, #8]
      break;
 80041ea:	e04f      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041fc:	f000 f951 	bl	80044a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800420e:	609a      	str	r2, [r3, #8]
      break;
 8004210:	e03c      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800421e:	461a      	mov	r2, r3
 8004220:	f000 f8c8 	bl	80043b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2150      	movs	r1, #80	; 0x50
 800422a:	4618      	mov	r0, r3
 800422c:	f000 f91f 	bl	800446e <TIM_ITRx_SetConfig>
      break;
 8004230:	e02c      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800423e:	461a      	mov	r2, r3
 8004240:	f000 f8e6 	bl	8004410 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2160      	movs	r1, #96	; 0x60
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f90f 	bl	800446e <TIM_ITRx_SetConfig>
      break;
 8004250:	e01c      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800425e:	461a      	mov	r2, r3
 8004260:	f000 f8a8 	bl	80043b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2140      	movs	r1, #64	; 0x40
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f8ff 	bl	800446e <TIM_ITRx_SetConfig>
      break;
 8004270:	e00c      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4619      	mov	r1, r3
 800427c:	4610      	mov	r0, r2
 800427e:	f000 f8f6 	bl	800446e <TIM_ITRx_SetConfig>
      break;
 8004282:	e003      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      break;
 8004288:	e000      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800428a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr

080042ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr
	...

080042f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a29      	ldr	r2, [pc, #164]	; (80043a8 <TIM_Base_SetConfig+0xb8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00b      	beq.n	8004320 <TIM_Base_SetConfig+0x30>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430e:	d007      	beq.n	8004320 <TIM_Base_SetConfig+0x30>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a26      	ldr	r2, [pc, #152]	; (80043ac <TIM_Base_SetConfig+0xbc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_Base_SetConfig+0x30>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a25      	ldr	r2, [pc, #148]	; (80043b0 <TIM_Base_SetConfig+0xc0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d108      	bne.n	8004332 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <TIM_Base_SetConfig+0xb8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00b      	beq.n	8004352 <TIM_Base_SetConfig+0x62>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004340:	d007      	beq.n	8004352 <TIM_Base_SetConfig+0x62>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a19      	ldr	r2, [pc, #100]	; (80043ac <TIM_Base_SetConfig+0xbc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_Base_SetConfig+0x62>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a18      	ldr	r2, [pc, #96]	; (80043b0 <TIM_Base_SetConfig+0xc0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d108      	bne.n	8004364 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a07      	ldr	r2, [pc, #28]	; (80043a8 <TIM_Base_SetConfig+0xb8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d103      	bne.n	8004398 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	615a      	str	r2, [r3, #20]
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	40012c00 	.word	0x40012c00
 80043ac:	40000400 	.word	0x40000400
 80043b0:	40000800 	.word	0x40000800

080043b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f023 0201 	bic.w	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f023 030a 	bic.w	r3, r3, #10
 80043f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	621a      	str	r2, [r3, #32]
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800443a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	031b      	lsls	r3, r3, #12
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800444c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	621a      	str	r2, [r3, #32]
}
 8004464:	bf00      	nop
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr

0800446e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800446e:	b480      	push	{r7}
 8004470:	b085      	sub	sp, #20
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	f043 0307 	orr.w	r3, r3, #7
 8004490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	609a      	str	r2, [r3, #8]
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b087      	sub	sp, #28
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	021a      	lsls	r2, r3, #8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	609a      	str	r2, [r3, #8]
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e046      	b.n	8004586 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a16      	ldr	r2, [pc, #88]	; (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00e      	beq.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004544:	d009      	beq.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a12      	ldr	r2, [pc, #72]	; (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a10      	ldr	r2, [pc, #64]	; (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d10c      	bne.n	8004574 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	4313      	orrs	r3, r2
 800456a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr
 8004590:	40012c00 	.word	0x40012c00
 8004594:	40000400 	.word	0x40000400
 8004598:	40000800 	.word	0x40000800

0800459c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr

080045ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e042      	b.n	8004658 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fd fe14 	bl	8002214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2224      	movs	r2, #36	; 0x24
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f97b 	bl	8004900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b20      	cmp	r3, #32
 800467e:	d16d      	bne.n	800475c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_UART_Transmit+0x2c>
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e066      	b.n	800475e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2221      	movs	r2, #33	; 0x21
 800469a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800469e:	f7fd ffa9 	bl	80025f4 <HAL_GetTick>
 80046a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	88fa      	ldrh	r2, [r7, #6]
 80046a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	88fa      	ldrh	r2, [r7, #6]
 80046ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b8:	d108      	bne.n	80046cc <HAL_UART_Transmit+0x6c>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	e003      	b.n	80046d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046d4:	e02a      	b.n	800472c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f865 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e036      	b.n	800475e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004704:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	3302      	adds	r3, #2
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e007      	b.n	800471e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	3301      	adds	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1cf      	bne.n	80046d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2200      	movs	r2, #0
 800473e:	2140      	movs	r1, #64	; 0x40
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f835 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e006      	b.n	800475e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	e000      	b.n	800475e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800475c:	2302      	movs	r3, #2
  }
}
 800475e:	4618      	mov	r0, r3
 8004760:	3720      	adds	r7, #32
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	4613      	mov	r3, r2
 8004772:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b20      	cmp	r3, #32
 800477e:	d112      	bne.n	80047a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_UART_Receive_IT+0x26>
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e00b      	b.n	80047a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	461a      	mov	r2, r3
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f875 	bl	800488c <UART_Start_Receive_IT>
 80047a2:	4603      	mov	r3, r0
 80047a4:	e000      	b.n	80047a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
  }
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b090      	sub	sp, #64	; 0x40
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	4613      	mov	r3, r2
 80047be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c0:	e050      	b.n	8004864 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c8:	d04c      	beq.n	8004864 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d0:	f7fd ff10 	bl	80025f4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047dc:	429a      	cmp	r2, r3
 80047de:	d241      	bcs.n	8004864 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	330c      	adds	r3, #12
 80047fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004800:	637a      	str	r2, [r7, #52]	; 0x34
 8004802:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3314      	adds	r3, #20
 800481a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	613b      	str	r3, [r7, #16]
   return(result);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	63bb      	str	r3, [r7, #56]	; 0x38
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3314      	adds	r3, #20
 8004832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004834:	623a      	str	r2, [r7, #32]
 8004836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	69f9      	ldr	r1, [r7, #28]
 800483a:	6a3a      	ldr	r2, [r7, #32]
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	61bb      	str	r3, [r7, #24]
   return(result);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e5      	bne.n	8004814 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e00f      	b.n	8004884 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4013      	ands	r3, r2
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	429a      	cmp	r2, r3
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	429a      	cmp	r2, r3
 8004880:	d09f      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3740      	adds	r7, #64	; 0x40
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	4613      	mov	r3, r2
 8004898:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	88fa      	ldrh	r2, [r7, #6]
 80048a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2222      	movs	r2, #34	; 0x22
 80048b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0220 	orr.w	r2, r2, #32
 80048f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr
	...

08004900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800493a:	f023 030c 	bic.w	r3, r3, #12
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	68b9      	ldr	r1, [r7, #8]
 8004944:	430b      	orrs	r3, r1
 8004946:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2c      	ldr	r2, [pc, #176]	; (8004a14 <UART_SetConfig+0x114>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d103      	bne.n	8004970 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004968:	f7ff f980 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	e002      	b.n	8004976 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004970:	f7ff f968 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8004974:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	009a      	lsls	r2, r3, #2
 8004980:	441a      	add	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <UART_SetConfig+0x118>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	0119      	lsls	r1, r3, #4
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009a      	lsls	r2, r3, #2
 80049a0:	441a      	add	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049ac:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <UART_SetConfig+0x118>)
 80049ae:	fba3 0302 	umull	r0, r3, r3, r2
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	2064      	movs	r0, #100	; 0x64
 80049b6:	fb00 f303 	mul.w	r3, r0, r3
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	3332      	adds	r3, #50	; 0x32
 80049c0:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <UART_SetConfig+0x118>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049cc:	4419      	add	r1, r3
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <UART_SetConfig+0x118>)
 80049e6:	fba3 0302 	umull	r0, r3, r3, r2
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2064      	movs	r0, #100	; 0x64
 80049ee:	fb00 f303 	mul.w	r3, r0, r3
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	3332      	adds	r3, #50	; 0x32
 80049f8:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <UART_SetConfig+0x118>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	f003 020f 	and.w	r2, r3, #15
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	440a      	add	r2, r1
 8004a0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40013800 	.word	0x40013800
 8004a18:	51eb851f 	.word	0x51eb851f

08004a1c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a22:	f3ef 8305 	mrs	r3, IPSR
 8004a26:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a32:	607b      	str	r3, [r7, #4]
  return(result);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <osKernelInitialize+0x32>
 8004a3a:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <osKernelInitialize+0x60>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d109      	bne.n	8004a56 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a42:	f3ef 8311 	mrs	r3, BASEPRI
 8004a46:	603b      	str	r3, [r7, #0]
  return(result);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004a4e:	f06f 0305 	mvn.w	r3, #5
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e00c      	b.n	8004a70 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <osKernelInitialize+0x60>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d105      	bne.n	8004a6a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004a5e:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <osKernelInitialize+0x60>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	e002      	b.n	8004a70 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a70:	68fb      	ldr	r3, [r7, #12]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr
 8004a7c:	200003c0 	.word	0x200003c0

08004a80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a86:	f3ef 8305 	mrs	r3, IPSR
 8004a8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a92:	f3ef 8310 	mrs	r3, PRIMASK
 8004a96:	607b      	str	r3, [r7, #4]
  return(result);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <osKernelStart+0x32>
 8004a9e:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <osKernelStart+0x64>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d109      	bne.n	8004aba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aa6:	f3ef 8311 	mrs	r3, BASEPRI
 8004aaa:	603b      	str	r3, [r7, #0]
  return(result);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <osKernelStart+0x3a>
    stat = osErrorISR;
 8004ab2:	f06f 0305 	mvn.w	r3, #5
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	e00e      	b.n	8004ad8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004aba:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <osKernelStart+0x64>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d107      	bne.n	8004ad2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004ac2:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <osKernelStart+0x64>)
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004ac8:	f001 ffb4 	bl	8006a34 <vTaskStartScheduler>
      stat = osOK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	e002      	b.n	8004ad8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	200003c0 	.word	0x200003c0

08004ae8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aee:	f3ef 8305 	mrs	r3, IPSR
 8004af2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004af4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10f      	bne.n	8004b1a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004afa:	f3ef 8310 	mrs	r3, PRIMASK
 8004afe:	607b      	str	r3, [r7, #4]
  return(result);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <osKernelGetTickCount+0x32>
 8004b06:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <osKernelGetTickCount+0x4c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d109      	bne.n	8004b22 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b12:	603b      	str	r3, [r7, #0]
  return(result);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004b1a:	f002 f8ab 	bl	8006c74 <xTaskGetTickCountFromISR>
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	e002      	b.n	8004b28 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8004b22:	f002 f899 	bl	8006c58 <xTaskGetTickCount>
 8004b26:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004b28:	68fb      	ldr	r3, [r7, #12]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	200003c0 	.word	0x200003c0

08004b38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b092      	sub	sp, #72	; 0x48
 8004b3c:	af04      	add	r7, sp, #16
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b48:	f3ef 8305 	mrs	r3, IPSR
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f040 8094 	bne.w	8004c7e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b56:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5a:	623b      	str	r3, [r7, #32]
  return(result);
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f040 808d 	bne.w	8004c7e <osThreadNew+0x146>
 8004b64:	4b48      	ldr	r3, [pc, #288]	; (8004c88 <osThreadNew+0x150>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d106      	bne.n	8004b7a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b70:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f040 8082 	bne.w	8004c7e <osThreadNew+0x146>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d07e      	beq.n	8004c7e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004b80:	2380      	movs	r3, #128	; 0x80
 8004b82:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004b84:	2318      	movs	r3, #24
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004b88:	2300      	movs	r3, #0
 8004b8a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004b8c:	f107 031b 	add.w	r3, r7, #27
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004b92:	f04f 33ff 	mov.w	r3, #4294967295
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d045      	beq.n	8004c2a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <osThreadNew+0x74>
        name = attr->name;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <osThreadNew+0x9a>
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	2b38      	cmp	r3, #56	; 0x38
 8004bc4:	d805      	bhi.n	8004bd2 <osThreadNew+0x9a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <osThreadNew+0x9e>
        return (NULL);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e054      	b.n	8004c80 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00e      	beq.n	8004c0c <osThreadNew+0xd4>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	2b5b      	cmp	r3, #91	; 0x5b
 8004bf4:	d90a      	bls.n	8004c0c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d006      	beq.n	8004c0c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <osThreadNew+0xd4>
        mem = 1;
 8004c06:	2301      	movs	r3, #1
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c0a:	e010      	b.n	8004c2e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10c      	bne.n	8004c2e <osThreadNew+0xf6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d108      	bne.n	8004c2e <osThreadNew+0xf6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d104      	bne.n	8004c2e <osThreadNew+0xf6>
          mem = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c28:	e001      	b.n	8004c2e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d110      	bne.n	8004c56 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c3c:	9202      	str	r2, [sp, #8]
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f001 fb9a 	bl	8006384 <xTaskCreateStatic>
 8004c50:	4603      	mov	r3, r0
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	e013      	b.n	8004c7e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d110      	bne.n	8004c7e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	f107 0314 	add.w	r3, r7, #20
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f001 fbe4 	bl	800643c <xTaskCreate>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d001      	beq.n	8004c7e <osThreadNew+0x146>
          hTask = NULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c7e:	697b      	ldr	r3, [r7, #20]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3738      	adds	r7, #56	; 0x38
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	200003c0 	.word	0x200003c0

08004c8c <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c98:	f3ef 8305 	mrs	r3, IPSR
 8004c9c:	617b      	str	r3, [r7, #20]
  return(result);
 8004c9e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10f      	bne.n	8004cc4 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca8:	613b      	str	r3, [r7, #16]
  return(result);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <osThreadSuspend+0x38>
 8004cb0:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <osThreadSuspend+0x64>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d109      	bne.n	8004ccc <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8004cbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <osThreadSuspend+0x40>
    stat = osErrorISR;
 8004cc4:	f06f 0305 	mvn.w	r3, #5
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	e00b      	b.n	8004ce4 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d103      	bne.n	8004cda <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8004cd2:	f06f 0303 	mvn.w	r3, #3
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	e004      	b.n	8004ce4 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8004cde:	69b8      	ldr	r0, [r7, #24]
 8004ce0:	f001 fd9a 	bl	8006818 <vTaskSuspend>
  }

  return (stat);
 8004ce4:	69fb      	ldr	r3, [r7, #28]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3720      	adds	r7, #32
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	200003c0 	.word	0x200003c0

08004cf4 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d00:	f3ef 8305 	mrs	r3, IPSR
 8004d04:	617b      	str	r3, [r7, #20]
  return(result);
 8004d06:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10f      	bne.n	8004d2c <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d10:	613b      	str	r3, [r7, #16]
  return(result);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d109      	bne.n	8004d2c <osThreadResume+0x38>
 8004d18:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <osThreadResume+0x64>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d109      	bne.n	8004d34 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d20:	f3ef 8311 	mrs	r3, BASEPRI
 8004d24:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <osThreadResume+0x40>
    stat = osErrorISR;
 8004d2c:	f06f 0305 	mvn.w	r3, #5
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	e00b      	b.n	8004d4c <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <osThreadResume+0x4e>
    stat = osErrorParameter;
 8004d3a:	f06f 0303 	mvn.w	r3, #3
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	e004      	b.n	8004d4c <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8004d46:	69b8      	ldr	r0, [r7, #24]
 8004d48:	f001 fe16 	bl	8006978 <vTaskResume>
  }

  return (stat);
 8004d4c:	69fb      	ldr	r3, [r7, #28]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	200003c0 	.word	0x200003c0

08004d5c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d64:	f3ef 8305 	mrs	r3, IPSR
 8004d68:	613b      	str	r3, [r7, #16]
  return(result);
 8004d6a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10f      	bne.n	8004d90 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d70:	f3ef 8310 	mrs	r3, PRIMASK
 8004d74:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <osDelay+0x34>
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <osDelay+0x58>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d109      	bne.n	8004d98 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d84:	f3ef 8311 	mrs	r3, BASEPRI
 8004d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <osDelay+0x3c>
    stat = osErrorISR;
 8004d90:	f06f 0305 	mvn.w	r3, #5
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e007      	b.n	8004da8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f001 fd04 	bl	80067b0 <vTaskDelay>
    }
  }

  return (stat);
 8004da8:	697b      	ldr	r3, [r7, #20]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	200003c0 	.word	0x200003c0

08004db8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc0:	f3ef 8305 	mrs	r3, IPSR
 8004dc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dc6:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10f      	bne.n	8004dec <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd0:	617b      	str	r3, [r7, #20]
  return(result);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d109      	bne.n	8004dec <osDelayUntil+0x34>
 8004dd8:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <osDelayUntil+0x64>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d109      	bne.n	8004df4 <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004de0:	f3ef 8311 	mrs	r3, BASEPRI
 8004de4:	613b      	str	r3, [r7, #16]
  return(result);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8004dec:	f06f 0305 	mvn.w	r3, #5
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	e00e      	b.n	8004e12 <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8004df8:	f001 ff2e 	bl	8006c58 <xTaskGetTickCount>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	1ad2      	subs	r2, r2, r3
 8004e06:	f107 030c 	add.w	r3, r7, #12
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 fc51 	bl	80066b4 <vTaskDelayUntil>
  }

  return (stat);
 8004e12:	69fb      	ldr	r3, [r7, #28]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3720      	adds	r7, #32
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	200003c0 	.word	0x200003c0

08004e20 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08c      	sub	sp, #48	; 0x30
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e30:	f3ef 8305 	mrs	r3, IPSR
 8004e34:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e36:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f040 8086 	bne.w	8004f4a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e42:	617b      	str	r3, [r7, #20]
  return(result);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d17f      	bne.n	8004f4a <osSemaphoreNew+0x12a>
 8004e4a:	4b42      	ldr	r3, [pc, #264]	; (8004f54 <osSemaphoreNew+0x134>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d105      	bne.n	8004e5e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e52:	f3ef 8311 	mrs	r3, BASEPRI
 8004e56:	613b      	str	r3, [r7, #16]
  return(result);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d175      	bne.n	8004f4a <osSemaphoreNew+0x12a>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d072      	beq.n	8004f4a <osSemaphoreNew+0x12a>
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d86e      	bhi.n	8004f4a <osSemaphoreNew+0x12a>
    mem = -1;
 8004e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e70:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d015      	beq.n	8004ea4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d006      	beq.n	8004e8e <osSemaphoreNew+0x6e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b4f      	cmp	r3, #79	; 0x4f
 8004e86:	d902      	bls.n	8004e8e <osSemaphoreNew+0x6e>
        mem = 1;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	623b      	str	r3, [r7, #32]
 8004e8c:	e00c      	b.n	8004ea8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d108      	bne.n	8004ea8 <osSemaphoreNew+0x88>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d104      	bne.n	8004ea8 <osSemaphoreNew+0x88>
          mem = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	e001      	b.n	8004ea8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d04c      	beq.n	8004f4a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d128      	bne.n	8004f08 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d10a      	bne.n	8004ed2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	9200      	str	r2, [sp, #0]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	2001      	movs	r0, #1
 8004eca:	f000 fa7f 	bl	80053cc <xQueueGenericCreateStatic>
 8004ece:	6278      	str	r0, [r7, #36]	; 0x24
 8004ed0:	e005      	b.n	8004ede <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	f000 faef 	bl	80054ba <xQueueGenericCreate>
 8004edc:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d022      	beq.n	8004f2a <osSemaphoreNew+0x10a>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01f      	beq.n	8004f2a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004eea:	2300      	movs	r3, #0
 8004eec:	2200      	movs	r2, #0
 8004eee:	2100      	movs	r1, #0
 8004ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ef2:	f000 fbad 	bl	8005650 <xQueueGenericSend>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d016      	beq.n	8004f2a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004efe:	f001 f870 	bl	8005fe2 <vQueueDelete>
            hSemaphore = NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
 8004f06:	e010      	b.n	8004f2a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d108      	bne.n	8004f20 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	461a      	mov	r2, r3
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fb30 	bl	800557c <xQueueCreateCountingSemaphoreStatic>
 8004f1c:	6278      	str	r0, [r7, #36]	; 0x24
 8004f1e:	e004      	b.n	8004f2a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fb61 	bl	80055ea <xQueueCreateCountingSemaphore>
 8004f28:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00c      	beq.n	8004f4a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <osSemaphoreNew+0x11e>
          name = attr->name;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	61fb      	str	r3, [r7, #28]
 8004f3c:	e001      	b.n	8004f42 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004f42:	69f9      	ldr	r1, [r7, #28]
 8004f44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f46:	f001 f997 	bl	8006278 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3728      	adds	r7, #40	; 0x28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	200003c0 	.word	0x200003c0

08004f58 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d103      	bne.n	8004f78 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004f70:	f06f 0303 	mvn.w	r3, #3
 8004f74:	61fb      	str	r3, [r7, #28]
 8004f76:	e04b      	b.n	8005010 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f78:	f3ef 8305 	mrs	r3, IPSR
 8004f7c:	617b      	str	r3, [r7, #20]
  return(result);
 8004f7e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10f      	bne.n	8004fa4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f84:	f3ef 8310 	mrs	r3, PRIMASK
 8004f88:	613b      	str	r3, [r7, #16]
  return(result);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d109      	bne.n	8004fa4 <osSemaphoreAcquire+0x4c>
 8004f90:	4b22      	ldr	r3, [pc, #136]	; (800501c <osSemaphoreAcquire+0xc4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d128      	bne.n	8004fea <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f98:	f3ef 8311 	mrs	r3, BASEPRI
 8004f9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d022      	beq.n	8004fea <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004faa:	f06f 0303 	mvn.w	r3, #3
 8004fae:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004fb0:	e02d      	b.n	800500e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004fb6:	f107 0308 	add.w	r3, r7, #8
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	69b8      	ldr	r0, [r7, #24]
 8004fc0:	f000 ff56 	bl	8005e70 <xQueueReceiveFromISR>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d003      	beq.n	8004fd2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004fca:	f06f 0302 	mvn.w	r3, #2
 8004fce:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004fd0:	e01d      	b.n	800500e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01a      	beq.n	800500e <osSemaphoreAcquire+0xb6>
 8004fd8:	4b11      	ldr	r3, [pc, #68]	; (8005020 <osSemaphoreAcquire+0xc8>)
 8004fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004fe8:	e011      	b.n	800500e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	69b8      	ldr	r0, [r7, #24]
 8004fee:	f000 fe33 	bl	8005c58 <xQueueSemaphoreTake>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d00b      	beq.n	8005010 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004ffe:	f06f 0301 	mvn.w	r3, #1
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	e004      	b.n	8005010 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005006:	f06f 0302 	mvn.w	r3, #2
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	e000      	b.n	8005010 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800500e:	bf00      	nop
      }
    }
  }

  return (stat);
 8005010:	69fb      	ldr	r3, [r7, #28]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	200003c0 	.word	0x200003c0
 8005020:	e000ed04 	.word	0xe000ed04

08005024 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d103      	bne.n	8005042 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800503a:	f06f 0303 	mvn.w	r3, #3
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	e03e      	b.n	80050c0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005042:	f3ef 8305 	mrs	r3, IPSR
 8005046:	617b      	str	r3, [r7, #20]
  return(result);
 8005048:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800504e:	f3ef 8310 	mrs	r3, PRIMASK
 8005052:	613b      	str	r3, [r7, #16]
  return(result);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <osSemaphoreRelease+0x4a>
 800505a:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <osSemaphoreRelease+0xa8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d120      	bne.n	80050a4 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005062:	f3ef 8311 	mrs	r3, BASEPRI
 8005066:	60fb      	str	r3, [r7, #12]
  return(result);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01a      	beq.n	80050a4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800506e:	2300      	movs	r3, #0
 8005070:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005072:	f107 0308 	add.w	r3, r7, #8
 8005076:	4619      	mov	r1, r3
 8005078:	69b8      	ldr	r0, [r7, #24]
 800507a:	f000 fc7f 	bl	800597c <xQueueGiveFromISR>
 800507e:	4603      	mov	r3, r0
 8005080:	2b01      	cmp	r3, #1
 8005082:	d003      	beq.n	800508c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005084:	f06f 0302 	mvn.w	r3, #2
 8005088:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800508a:	e018      	b.n	80050be <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d015      	beq.n	80050be <osSemaphoreRelease+0x9a>
 8005092:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <osSemaphoreRelease+0xac>)
 8005094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80050a2:	e00c      	b.n	80050be <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80050a4:	2300      	movs	r3, #0
 80050a6:	2200      	movs	r2, #0
 80050a8:	2100      	movs	r1, #0
 80050aa:	69b8      	ldr	r0, [r7, #24]
 80050ac:	f000 fad0 	bl	8005650 <xQueueGenericSend>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d004      	beq.n	80050c0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80050b6:	f06f 0302 	mvn.w	r3, #2
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	e000      	b.n	80050c0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80050be:	bf00      	nop
    }
  }

  return (stat);
 80050c0:	69fb      	ldr	r3, [r7, #28]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	200003c0 	.word	0x200003c0
 80050d0:	e000ed04 	.word	0xe000ed04

080050d4 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	61bb      	str	r3, [r7, #24]
  uint32_t count;

  if (hSemaphore == NULL) {
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d102      	bne.n	80050ec <osSemaphoreGetCount+0x18>
    count = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	e01e      	b.n	800512a <osSemaphoreGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050ec:	f3ef 8305 	mrs	r3, IPSR
 80050f0:	617b      	str	r3, [r7, #20]
  return(result);
 80050f2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10f      	bne.n	8005118 <osSemaphoreGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f8:	f3ef 8310 	mrs	r3, PRIMASK
 80050fc:	613b      	str	r3, [r7, #16]
  return(result);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <osSemaphoreGetCount+0x44>
 8005104:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <osSemaphoreGetCount+0x60>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d10a      	bne.n	8005122 <osSemaphoreGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800510c:	f3ef 8311 	mrs	r3, BASEPRI
 8005110:	60fb      	str	r3, [r7, #12]
  return(result);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d004      	beq.n	8005122 <osSemaphoreGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8005118:	69b8      	ldr	r0, [r7, #24]
 800511a:	f000 ff47 	bl	8005fac <uxQueueMessagesWaitingFromISR>
 800511e:	61f8      	str	r0, [r7, #28]
 8005120:	e003      	b.n	800512a <osSemaphoreGetCount+0x56>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8005122:	69b8      	ldr	r0, [r7, #24]
 8005124:	f000 ff24 	bl	8005f70 <uxQueueMessagesWaiting>
 8005128:	61f8      	str	r0, [r7, #28]
  }

  return (count);
 800512a:	69fb      	ldr	r3, [r7, #28]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3720      	adds	r7, #32
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	200003c0 	.word	0x200003c0

08005138 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a06      	ldr	r2, [pc, #24]	; (8005160 <vApplicationGetIdleTaskMemory+0x28>)
 8005148:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4a05      	ldr	r2, [pc, #20]	; (8005164 <vApplicationGetIdleTaskMemory+0x2c>)
 800514e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2280      	movs	r2, #128	; 0x80
 8005154:	601a      	str	r2, [r3, #0]
}
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr
 8005160:	200003c4 	.word	0x200003c4
 8005164:	20000420 	.word	0x20000420

08005168 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4a07      	ldr	r2, [pc, #28]	; (8005194 <vApplicationGetTimerTaskMemory+0x2c>)
 8005178:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4a06      	ldr	r2, [pc, #24]	; (8005198 <vApplicationGetTimerTaskMemory+0x30>)
 800517e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005186:	601a      	str	r2, [r3, #0]
}
 8005188:	bf00      	nop
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20000620 	.word	0x20000620
 8005198:	2000067c 	.word	0x2000067c

0800519c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f103 0208 	add.w	r2, r3, #8
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f04f 32ff 	mov.w	r2, #4294967295
 80051b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f103 0208 	add.w	r2, r3, #8
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f103 0208 	add.w	r2, r3, #8
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr

080051da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr

080051f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	601a      	str	r2, [r3, #0]
}
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d103      	bne.n	8005258 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e00c      	b.n	8005272 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3308      	adds	r3, #8
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e002      	b.n	8005266 <vListInsert+0x2e>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	d2f6      	bcs.n	8005260 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6892      	ldr	r2, [r2, #8]
 80052be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6852      	ldr	r2, [r2, #4]
 80052c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d103      	bne.n	80052dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	1e5a      	subs	r2, r3, #1
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr
	...

080052fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10a      	bne.n	8005326 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005322:	bf00      	nop
 8005324:	e7fe      	b.n	8005324 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005326:	f002 fdd1 	bl	8007ecc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005336:	fb01 f303 	mul.w	r3, r1, r3
 800533a:	441a      	add	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	3b01      	subs	r3, #1
 8005358:	68f9      	ldr	r1, [r7, #12]
 800535a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	441a      	add	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	22ff      	movs	r2, #255	; 0xff
 800536a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	22ff      	movs	r2, #255	; 0xff
 8005372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d114      	bne.n	80053a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01a      	beq.n	80053ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3310      	adds	r3, #16
 8005388:	4618      	mov	r0, r3
 800538a:	f001 fdef 	bl	8006f6c <xTaskRemoveFromEventList>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d012      	beq.n	80053ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <xQueueGenericReset+0xcc>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	e009      	b.n	80053ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3310      	adds	r3, #16
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff fef6 	bl	800519c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3324      	adds	r3, #36	; 0x24
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7ff fef1 	bl	800519c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053ba:	f002 fdb7 	bl	8007f2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053be:	2301      	movs	r3, #1
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08e      	sub	sp, #56	; 0x38
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <xQueueGenericCreateStatic+0x52>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <xQueueGenericCreateStatic+0x56>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <xQueueGenericCreateStatic+0x58>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	623b      	str	r3, [r7, #32]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <xQueueGenericCreateStatic+0x7e>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <xQueueGenericCreateStatic+0x82>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <xQueueGenericCreateStatic+0x84>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	61fb      	str	r3, [r7, #28]
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800546a:	2350      	movs	r3, #80	; 0x50
 800546c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b50      	cmp	r3, #80	; 0x50
 8005472:	d00a      	beq.n	800548a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	61bb      	str	r3, [r7, #24]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800549c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	4613      	mov	r3, r2
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 f843 	bl	8005536 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3730      	adds	r7, #48	; 0x30
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b08a      	sub	sp, #40	; 0x28
 80054be:	af02      	add	r7, sp, #8
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	4613      	mov	r3, r2
 80054c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	613b      	str	r3, [r7, #16]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d102      	bne.n	80054f0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	e004      	b.n	80054fa <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	fb02 f303 	mul.w	r3, r2, r3
 80054f8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	3350      	adds	r3, #80	; 0x50
 80054fe:	4618      	mov	r0, r3
 8005500:	f002 fde4 	bl	80080cc <pvPortMalloc>
 8005504:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00f      	beq.n	800552c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	3350      	adds	r3, #80	; 0x50
 8005510:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800551a:	79fa      	ldrb	r2, [r7, #7]
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f805 	bl	8005536 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800552c:	69bb      	ldr	r3, [r7, #24]
	}
 800552e:	4618      	mov	r0, r3
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
 8005542:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d103      	bne.n	8005552 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	e002      	b.n	8005558 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005564:	2101      	movs	r1, #1
 8005566:	69b8      	ldr	r0, [r7, #24]
 8005568:	f7ff fec8 	bl	80052fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	; 0x28
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	61bb      	str	r3, [r7, #24]
}
 80055a0:	bf00      	nop
 80055a2:	e7fe      	b.n	80055a2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d90a      	bls.n	80055c2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	617b      	str	r3, [r7, #20]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80055c2:	2302      	movs	r3, #2
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	2100      	movs	r1, #0
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7ff fefd 	bl	80053cc <xQueueGenericCreateStatic>
 80055d2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80055e0:	69fb      	ldr	r3, [r7, #28]
	}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3720      	adds	r7, #32
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	613b      	str	r3, [r7, #16]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	d90a      	bls.n	800562e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	60fb      	str	r3, [r7, #12]
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800562e:	2202      	movs	r2, #2
 8005630:	2100      	movs	r1, #0
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff ff41 	bl	80054ba <xQueueGenericCreate>
 8005638:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005646:	697b      	ldr	r3, [r7, #20]
	}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08e      	sub	sp, #56	; 0x38
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800565e:	2300      	movs	r3, #0
 8005660:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10a      	bne.n	8005682 <xQueueGenericSend+0x32>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d103      	bne.n	8005690 <xQueueGenericSend+0x40>
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <xQueueGenericSend+0x44>
 8005690:	2301      	movs	r3, #1
 8005692:	e000      	b.n	8005696 <xQueueGenericSend+0x46>
 8005694:	2300      	movs	r3, #0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <xQueueGenericSend+0x60>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d103      	bne.n	80056be <xQueueGenericSend+0x6e>
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <xQueueGenericSend+0x72>
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <xQueueGenericSend+0x74>
 80056c2:	2300      	movs	r3, #0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10a      	bne.n	80056de <xQueueGenericSend+0x8e>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	623b      	str	r3, [r7, #32]
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056de:	f001 fe07 	bl	80072f0 <xTaskGetSchedulerState>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <xQueueGenericSend+0x9e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <xQueueGenericSend+0xa2>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <xQueueGenericSend+0xa4>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <xQueueGenericSend+0xbe>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	61fb      	str	r3, [r7, #28]
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800570e:	f002 fbdd 	bl	8007ecc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571a:	429a      	cmp	r2, r3
 800571c:	d302      	bcc.n	8005724 <xQueueGenericSend+0xd4>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d129      	bne.n	8005778 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800572a:	f000 fc94 	bl	8006056 <prvCopyDataToQueue>
 800572e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	3324      	adds	r3, #36	; 0x24
 800573c:	4618      	mov	r0, r3
 800573e:	f001 fc15 	bl	8006f6c <xTaskRemoveFromEventList>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d013      	beq.n	8005770 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005748:	4b3f      	ldr	r3, [pc, #252]	; (8005848 <xQueueGenericSend+0x1f8>)
 800574a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	e00a      	b.n	8005770 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005760:	4b39      	ldr	r3, [pc, #228]	; (8005848 <xQueueGenericSend+0x1f8>)
 8005762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005770:	f002 fbdc 	bl	8007f2c <vPortExitCritical>
				return pdPASS;
 8005774:	2301      	movs	r3, #1
 8005776:	e063      	b.n	8005840 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d103      	bne.n	8005786 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800577e:	f002 fbd5 	bl	8007f2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005782:	2300      	movs	r3, #0
 8005784:	e05c      	b.n	8005840 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	4618      	mov	r0, r3
 8005792:	f001 fc4f 	bl	8007034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005796:	2301      	movs	r3, #1
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800579a:	f002 fbc7 	bl	8007f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800579e:	f001 f9af 	bl	8006b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057a2:	f002 fb93 	bl	8007ecc <vPortEnterCritical>
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057ac:	b25b      	sxtb	r3, r3
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d103      	bne.n	80057bc <xQueueGenericSend+0x16c>
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057c2:	b25b      	sxtb	r3, r3
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c8:	d103      	bne.n	80057d2 <xQueueGenericSend+0x182>
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057d2:	f002 fbab 	bl	8007f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057d6:	1d3a      	adds	r2, r7, #4
 80057d8:	f107 0314 	add.w	r3, r7, #20
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 fc3e 	bl	8007060 <xTaskCheckForTimeOut>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d124      	bne.n	8005834 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ec:	f000 fd2b 	bl	8006246 <prvIsQueueFull>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d018      	beq.n	8005828 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	3310      	adds	r3, #16
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	4611      	mov	r1, r2
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 fb64 	bl	8006ecc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005806:	f000 fcb6 	bl	8006176 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800580a:	f001 f987 	bl	8006b1c <xTaskResumeAll>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	f47f af7c 	bne.w	800570e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005816:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <xQueueGenericSend+0x1f8>)
 8005818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	e772      	b.n	800570e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800582a:	f000 fca4 	bl	8006176 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800582e:	f001 f975 	bl	8006b1c <xTaskResumeAll>
 8005832:	e76c      	b.n	800570e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005836:	f000 fc9e 	bl	8006176 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800583a:	f001 f96f 	bl	8006b1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800583e:	2300      	movs	r3, #0
		}
	}
}
 8005840:	4618      	mov	r0, r3
 8005842:	3738      	adds	r7, #56	; 0x38
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08e      	sub	sp, #56	; 0x38
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d103      	bne.n	8005888 <xQueueGenericSendFromISR+0x3c>
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <xQueueGenericSendFromISR+0x40>
 8005888:	2301      	movs	r3, #1
 800588a:	e000      	b.n	800588e <xQueueGenericSendFromISR+0x42>
 800588c:	2300      	movs	r3, #0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	623b      	str	r3, [r7, #32]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d103      	bne.n	80058b6 <xQueueGenericSendFromISR+0x6a>
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <xQueueGenericSendFromISR+0x6e>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <xQueueGenericSendFromISR+0x70>
 80058ba:	2300      	movs	r3, #0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	61fb      	str	r3, [r7, #28]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058d6:	f002 fbbb 	bl	8008050 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058da:	f3ef 8211 	mrs	r2, BASEPRI
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	61ba      	str	r2, [r7, #24]
 80058f0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	429a      	cmp	r2, r3
 8005900:	d302      	bcc.n	8005908 <xQueueGenericSendFromISR+0xbc>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d12c      	bne.n	8005962 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005918:	f000 fb9d 	bl	8006056 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800591c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005924:	d112      	bne.n	800594c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d016      	beq.n	800595c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	3324      	adds	r3, #36	; 0x24
 8005932:	4618      	mov	r0, r3
 8005934:	f001 fb1a 	bl	8006f6c <xTaskRemoveFromEventList>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00e      	beq.n	800595c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00b      	beq.n	800595c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e007      	b.n	800595c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800594c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005950:	3301      	adds	r3, #1
 8005952:	b2db      	uxtb	r3, r3
 8005954:	b25a      	sxtb	r2, r3
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800595c:	2301      	movs	r3, #1
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005960:	e001      	b.n	8005966 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005962:	2300      	movs	r3, #0
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005970:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005974:	4618      	mov	r0, r3
 8005976:	3738      	adds	r7, #56	; 0x38
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08e      	sub	sp, #56	; 0x38
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	623b      	str	r3, [r7, #32]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <xQueueGiveFromISR+0x48>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	61fb      	str	r3, [r7, #28]
}
 80059c0:	bf00      	nop
 80059c2:	e7fe      	b.n	80059c2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d103      	bne.n	80059d4 <xQueueGiveFromISR+0x58>
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <xQueueGiveFromISR+0x5c>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <xQueueGiveFromISR+0x5e>
 80059d8:	2300      	movs	r3, #0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <xQueueGiveFromISR+0x78>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	61bb      	str	r3, [r7, #24]
}
 80059f0:	bf00      	nop
 80059f2:	e7fe      	b.n	80059f2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059f4:	f002 fb2c 	bl	8008050 <vPortValidateInterruptPriority>
	__asm volatile
 80059f8:	f3ef 8211 	mrs	r2, BASEPRI
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	617a      	str	r2, [r7, #20]
 8005a0e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005a10:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a12:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d22b      	bcs.n	8005a7c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d112      	bne.n	8005a66 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d016      	beq.n	8005a76 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	3324      	adds	r3, #36	; 0x24
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f001 fa8d 	bl	8006f6c <xTaskRemoveFromEventList>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00e      	beq.n	8005a76 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00b      	beq.n	8005a76 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2201      	movs	r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	e007      	b.n	8005a76 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	b25a      	sxtb	r2, r3
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a76:	2301      	movs	r3, #1
 8005a78:	637b      	str	r3, [r7, #52]	; 0x34
 8005a7a:	e001      	b.n	8005a80 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a82:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f383 8811 	msr	BASEPRI, r3
}
 8005a8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3738      	adds	r7, #56	; 0x38
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08c      	sub	sp, #48	; 0x30
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <xQueueReceive+0x30>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	623b      	str	r3, [r7, #32]
}
 8005ac4:	bf00      	nop
 8005ac6:	e7fe      	b.n	8005ac6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d103      	bne.n	8005ad6 <xQueueReceive+0x3e>
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <xQueueReceive+0x42>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <xQueueReceive+0x44>
 8005ada:	2300      	movs	r3, #0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <xQueueReceive+0x5e>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	61fb      	str	r3, [r7, #28]
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005af6:	f001 fbfb 	bl	80072f0 <xTaskGetSchedulerState>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d102      	bne.n	8005b06 <xQueueReceive+0x6e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <xQueueReceive+0x72>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <xQueueReceive+0x74>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xQueueReceive+0x8e>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	61bb      	str	r3, [r7, #24]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b26:	f002 f9d1 	bl	8007ecc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01f      	beq.n	8005b76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b3a:	f000 faf6 	bl	800612a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	1e5a      	subs	r2, r3, #1
 8005b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00f      	beq.n	8005b6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	3310      	adds	r3, #16
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 fa0a 	bl	8006f6c <xTaskRemoveFromEventList>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b5e:	4b3d      	ldr	r3, [pc, #244]	; (8005c54 <xQueueReceive+0x1bc>)
 8005b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b6e:	f002 f9dd 	bl	8007f2c <vPortExitCritical>
				return pdPASS;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e069      	b.n	8005c4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d103      	bne.n	8005b84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b7c:	f002 f9d6 	bl	8007f2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e062      	b.n	8005c4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b8a:	f107 0310 	add.w	r3, r7, #16
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f001 fa50 	bl	8007034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b94:	2301      	movs	r3, #1
 8005b96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b98:	f002 f9c8 	bl	8007f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b9c:	f000 ffb0 	bl	8006b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ba0:	f002 f994 	bl	8007ecc <vPortEnterCritical>
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005baa:	b25b      	sxtb	r3, r3
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d103      	bne.n	8005bba <xQueueReceive+0x122>
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bc0:	b25b      	sxtb	r3, r3
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d103      	bne.n	8005bd0 <xQueueReceive+0x138>
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd0:	f002 f9ac 	bl	8007f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bd4:	1d3a      	adds	r2, r7, #4
 8005bd6:	f107 0310 	add.w	r3, r7, #16
 8005bda:	4611      	mov	r1, r2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 fa3f 	bl	8007060 <xTaskCheckForTimeOut>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d123      	bne.n	8005c30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bea:	f000 fb16 	bl	800621a <prvIsQueueEmpty>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d017      	beq.n	8005c24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	3324      	adds	r3, #36	; 0x24
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 f965 	bl	8006ecc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c04:	f000 fab7 	bl	8006176 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c08:	f000 ff88 	bl	8006b1c <xTaskResumeAll>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d189      	bne.n	8005b26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c12:	4b10      	ldr	r3, [pc, #64]	; (8005c54 <xQueueReceive+0x1bc>)
 8005c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	e780      	b.n	8005b26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c26:	f000 faa6 	bl	8006176 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c2a:	f000 ff77 	bl	8006b1c <xTaskResumeAll>
 8005c2e:	e77a      	b.n	8005b26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c32:	f000 faa0 	bl	8006176 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c36:	f000 ff71 	bl	8006b1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c3c:	f000 faed 	bl	800621a <prvIsQueueEmpty>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f43f af6f 	beq.w	8005b26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3730      	adds	r7, #48	; 0x30
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	e000ed04 	.word	0xe000ed04

08005c58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08e      	sub	sp, #56	; 0x38
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	623b      	str	r3, [r7, #32]
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	61fb      	str	r3, [r7, #28]
}
 8005ca4:	bf00      	nop
 8005ca6:	e7fe      	b.n	8005ca6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ca8:	f001 fb22 	bl	80072f0 <xTaskGetSchedulerState>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d102      	bne.n	8005cb8 <xQueueSemaphoreTake+0x60>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <xQueueSemaphoreTake+0x64>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e000      	b.n	8005cbe <xQueueSemaphoreTake+0x66>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	61bb      	str	r3, [r7, #24]
}
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cd8:	f002 f8f8 	bl	8007ecc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d024      	beq.n	8005d32 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	1e5a      	subs	r2, r3, #1
 8005cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005cf8:	f001 fc7a 	bl	80075f0 <pvTaskIncrementMutexHeldCount>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00f      	beq.n	8005d2a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	3310      	adds	r3, #16
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 f92c 	bl	8006f6c <xTaskRemoveFromEventList>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d007      	beq.n	8005d2a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d1a:	4b54      	ldr	r3, [pc, #336]	; (8005e6c <xQueueSemaphoreTake+0x214>)
 8005d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d2a:	f002 f8ff 	bl	8007f2c <vPortExitCritical>
				return pdPASS;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e097      	b.n	8005e62 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d111      	bne.n	8005d5c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	617b      	str	r3, [r7, #20]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005d54:	f002 f8ea 	bl	8007f2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e082      	b.n	8005e62 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d62:	f107 030c 	add.w	r3, r7, #12
 8005d66:	4618      	mov	r0, r3
 8005d68:	f001 f964 	bl	8007034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d70:	f002 f8dc 	bl	8007f2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d74:	f000 fec4 	bl	8006b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d78:	f002 f8a8 	bl	8007ecc <vPortEnterCritical>
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d82:	b25b      	sxtb	r3, r3
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d88:	d103      	bne.n	8005d92 <xQueueSemaphoreTake+0x13a>
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d98:	b25b      	sxtb	r3, r3
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9e:	d103      	bne.n	8005da8 <xQueueSemaphoreTake+0x150>
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005da8:	f002 f8c0 	bl	8007f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dac:	463a      	mov	r2, r7
 8005dae:	f107 030c 	add.w	r3, r7, #12
 8005db2:	4611      	mov	r1, r2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 f953 	bl	8007060 <xTaskCheckForTimeOut>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d132      	bne.n	8005e26 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dc2:	f000 fa2a 	bl	800621a <prvIsQueueEmpty>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d026      	beq.n	8005e1a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d109      	bne.n	8005de8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005dd4:	f002 f87a 	bl	8007ecc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 faa5 	bl	800732c <xTaskPriorityInherit>
 8005de2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005de4:	f002 f8a2 	bl	8007f2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	3324      	adds	r3, #36	; 0x24
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	4611      	mov	r1, r2
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 f86b 	bl	8006ecc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005df8:	f000 f9bd 	bl	8006176 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dfc:	f000 fe8e 	bl	8006b1c <xTaskResumeAll>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f47f af68 	bne.w	8005cd8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005e08:	4b18      	ldr	r3, [pc, #96]	; (8005e6c <xQueueSemaphoreTake+0x214>)
 8005e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	e75e      	b.n	8005cd8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e1c:	f000 f9ab 	bl	8006176 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e20:	f000 fe7c 	bl	8006b1c <xTaskResumeAll>
 8005e24:	e758      	b.n	8005cd8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e28:	f000 f9a5 	bl	8006176 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e2c:	f000 fe76 	bl	8006b1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e32:	f000 f9f2 	bl	800621a <prvIsQueueEmpty>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f43f af4d 	beq.w	8005cd8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00d      	beq.n	8005e60 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005e44:	f002 f842 	bl	8007ecc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005e48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e4a:	f000 f8ed 	bl	8006028 <prvGetDisinheritPriorityAfterTimeout>
 8005e4e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e56:	4618      	mov	r0, r3
 8005e58:	f001 fb44 	bl	80074e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005e5c:	f002 f866 	bl	8007f2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3738      	adds	r7, #56	; 0x38
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	e000ed04 	.word	0xe000ed04

08005e70 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08e      	sub	sp, #56	; 0x38
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	623b      	str	r3, [r7, #32]
}
 8005e98:	bf00      	nop
 8005e9a:	e7fe      	b.n	8005e9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d103      	bne.n	8005eaa <xQueueReceiveFromISR+0x3a>
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <xQueueReceiveFromISR+0x3e>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e000      	b.n	8005eb0 <xQueueReceiveFromISR+0x40>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	61fb      	str	r3, [r7, #28]
}
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eca:	f002 f8c1 	bl	8008050 <vPortValidateInterruptPriority>
	__asm volatile
 8005ece:	f3ef 8211 	mrs	r2, BASEPRI
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	61ba      	str	r2, [r7, #24]
 8005ee4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005ee6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d02f      	beq.n	8005f56 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f00:	68b9      	ldr	r1, [r7, #8]
 8005f02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f04:	f000 f911 	bl	800612a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	1e5a      	subs	r2, r3, #1
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f18:	d112      	bne.n	8005f40 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d016      	beq.n	8005f50 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	3310      	adds	r3, #16
 8005f26:	4618      	mov	r0, r3
 8005f28:	f001 f820 	bl	8006f6c <xTaskRemoveFromEventList>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	e007      	b.n	8005f50 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f44:	3301      	adds	r3, #1
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	b25a      	sxtb	r2, r3
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005f50:	2301      	movs	r3, #1
 8005f52:	637b      	str	r3, [r7, #52]	; 0x34
 8005f54:	e001      	b.n	8005f5a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f383 8811 	msr	BASEPRI, r3
}
 8005f64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3738      	adds	r7, #56	; 0x38
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	60bb      	str	r3, [r7, #8]
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005f94:	f001 ff9a 	bl	8007ecc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005f9e:	f001 ffc5 	bl	8007f2c <vPortExitCritical>

	return uxReturn;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60bb      	str	r3, [r7, #8]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bc80      	pop	{r7}
 8005fe0:	4770      	bx	lr

08005fe2 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10a      	bne.n	800600a <vQueueDelete+0x28>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	60bb      	str	r3, [r7, #8]
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f95c 	bl	80062c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f002 f91a 	bl	8008254 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	d006      	beq.n	8006046 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	e001      	b.n	800604a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800604a:	68fb      	ldr	r3, [r7, #12]
	}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr

08006056 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006062:	2300      	movs	r3, #0
 8006064:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10d      	bne.n	8006090 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d14d      	bne.n	8006118 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	4618      	mov	r0, r3
 8006082:	f001 f9c1 	bl	8007408 <xTaskPriorityDisinherit>
 8006086:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	605a      	str	r2, [r3, #4]
 800608e:	e043      	b.n	8006118 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d119      	bne.n	80060ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6898      	ldr	r0, [r3, #8]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	461a      	mov	r2, r3
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	f003 fbe3 	bl	800986c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	441a      	add	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d32b      	bcc.n	8006118 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	609a      	str	r2, [r3, #8]
 80060c8:	e026      	b.n	8006118 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	68d8      	ldr	r0, [r3, #12]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	461a      	mov	r2, r3
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	f003 fbc9 	bl	800986c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	425b      	negs	r3, r3
 80060e4:	441a      	add	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d207      	bcs.n	8006106 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fe:	425b      	negs	r3, r3
 8006100:	441a      	add	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d105      	bne.n	8006118 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	3b01      	subs	r3, #1
 8006116:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006120:	697b      	ldr	r3, [r7, #20]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	d018      	beq.n	800616e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	441a      	add	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	429a      	cmp	r2, r3
 8006154:	d303      	bcc.n	800615e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68d9      	ldr	r1, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	461a      	mov	r2, r3
 8006168:	6838      	ldr	r0, [r7, #0]
 800616a:	f003 fb7f 	bl	800986c <memcpy>
	}
}
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800617e:	f001 fea5 	bl	8007ecc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006188:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800618a:	e011      	b.n	80061b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	2b00      	cmp	r3, #0
 8006192:	d012      	beq.n	80061ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3324      	adds	r3, #36	; 0x24
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fee7 	bl	8006f6c <xTaskRemoveFromEventList>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061a4:	f000 ffbe 	bl	8007124 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dce9      	bgt.n	800618c <prvUnlockQueue+0x16>
 80061b8:	e000      	b.n	80061bc <prvUnlockQueue+0x46>
					break;
 80061ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	22ff      	movs	r2, #255	; 0xff
 80061c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061c4:	f001 feb2 	bl	8007f2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061c8:	f001 fe80 	bl	8007ecc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061d4:	e011      	b.n	80061fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d012      	beq.n	8006204 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3310      	adds	r3, #16
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fec2 	bl	8006f6c <xTaskRemoveFromEventList>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061ee:	f000 ff99 	bl	8007124 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061f2:	7bbb      	ldrb	r3, [r7, #14]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	dce9      	bgt.n	80061d6 <prvUnlockQueue+0x60>
 8006202:	e000      	b.n	8006206 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006204:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	22ff      	movs	r2, #255	; 0xff
 800620a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800620e:	f001 fe8d 	bl	8007f2c <vPortExitCritical>
}
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006222:	f001 fe53 	bl	8007ecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	2b00      	cmp	r3, #0
 800622c:	d102      	bne.n	8006234 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800622e:	2301      	movs	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	e001      	b.n	8006238 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006234:	2300      	movs	r3, #0
 8006236:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006238:	f001 fe78 	bl	8007f2c <vPortExitCritical>

	return xReturn;
 800623c:	68fb      	ldr	r3, [r7, #12]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800624e:	f001 fe3d 	bl	8007ecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625a:	429a      	cmp	r2, r3
 800625c:	d102      	bne.n	8006264 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800625e:	2301      	movs	r3, #1
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e001      	b.n	8006268 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006268:	f001 fe60 	bl	8007f2c <vPortExitCritical>

	return xReturn;
 800626c:	68fb      	ldr	r3, [r7, #12]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e014      	b.n	80062b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006288:	4a0e      	ldr	r2, [pc, #56]	; (80062c4 <vQueueAddToRegistry+0x4c>)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10b      	bne.n	80062ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006294:	490b      	ldr	r1, [pc, #44]	; (80062c4 <vQueueAddToRegistry+0x4c>)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800629e:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <vQueueAddToRegistry+0x4c>)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	4413      	add	r3, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062aa:	e006      	b.n	80062ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3301      	adds	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b07      	cmp	r3, #7
 80062b6:	d9e7      	bls.n	8006288 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr
 80062c4:	20000a7c 	.word	0x20000a7c

080062c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062d0:	2300      	movs	r3, #0
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	e016      	b.n	8006304 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80062d6:	4a10      	ldr	r2, [pc, #64]	; (8006318 <vQueueUnregisterQueue+0x50>)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	4413      	add	r3, r2
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d10b      	bne.n	80062fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80062e6:	4a0c      	ldr	r2, [pc, #48]	; (8006318 <vQueueUnregisterQueue+0x50>)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2100      	movs	r1, #0
 80062ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80062f0:	4a09      	ldr	r2, [pc, #36]	; (8006318 <vQueueUnregisterQueue+0x50>)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	4413      	add	r3, r2
 80062f8:	2200      	movs	r2, #0
 80062fa:	605a      	str	r2, [r3, #4]
				break;
 80062fc:	e006      	b.n	800630c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	3301      	adds	r3, #1
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b07      	cmp	r3, #7
 8006308:	d9e5      	bls.n	80062d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800630a:	bf00      	nop
 800630c:	bf00      	nop
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	bc80      	pop	{r7}
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	20000a7c 	.word	0x20000a7c

0800631c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800632c:	f001 fdce 	bl	8007ecc <vPortEnterCritical>
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006336:	b25b      	sxtb	r3, r3
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d103      	bne.n	8006346 <vQueueWaitForMessageRestricted+0x2a>
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800634c:	b25b      	sxtb	r3, r3
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006352:	d103      	bne.n	800635c <vQueueWaitForMessageRestricted+0x40>
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800635c:	f001 fde6 	bl	8007f2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	2b00      	cmp	r3, #0
 8006366:	d106      	bne.n	8006376 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	3324      	adds	r3, #36	; 0x24
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	68b9      	ldr	r1, [r7, #8]
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fdcf 	bl	8006f14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006376:	6978      	ldr	r0, [r7, #20]
 8006378:	f7ff fefd 	bl	8006176 <prvUnlockQueue>
	}
 800637c:	bf00      	nop
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08e      	sub	sp, #56	; 0x38
 8006388:	af04      	add	r7, sp, #16
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10a      	bne.n	80063ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	623b      	str	r3, [r7, #32]
}
 80063aa:	bf00      	nop
 80063ac:	e7fe      	b.n	80063ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <xTaskCreateStatic+0x46>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	61fb      	str	r3, [r7, #28]
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063ca:	235c      	movs	r3, #92	; 0x5c
 80063cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b5c      	cmp	r3, #92	; 0x5c
 80063d2:	d00a      	beq.n	80063ea <xTaskCreateStatic+0x66>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	61bb      	str	r3, [r7, #24]
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01e      	beq.n	800642e <xTaskCreateStatic+0xaa>
 80063f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d01b      	beq.n	800642e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	2202      	movs	r2, #2
 8006404:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006408:	2300      	movs	r3, #0
 800640a:	9303      	str	r3, [sp, #12]
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	9302      	str	r3, [sp, #8]
 8006410:	f107 0314 	add.w	r3, r7, #20
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 f850 	bl	80064c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006426:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006428:	f000 f8d4 	bl	80065d4 <prvAddNewTaskToReadyList>
 800642c:	e001      	b.n	8006432 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006432:	697b      	ldr	r3, [r7, #20]
	}
 8006434:	4618      	mov	r0, r3
 8006436:	3728      	adds	r7, #40	; 0x28
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08c      	sub	sp, #48	; 0x30
 8006440:	af04      	add	r7, sp, #16
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	4613      	mov	r3, r2
 800644a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800644c:	88fb      	ldrh	r3, [r7, #6]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4618      	mov	r0, r3
 8006452:	f001 fe3b 	bl	80080cc <pvPortMalloc>
 8006456:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00e      	beq.n	800647c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800645e:	205c      	movs	r0, #92	; 0x5c
 8006460:	f001 fe34 	bl	80080cc <pvPortMalloc>
 8006464:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	631a      	str	r2, [r3, #48]	; 0x30
 8006472:	e005      	b.n	8006480 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006474:	6978      	ldr	r0, [r7, #20]
 8006476:	f001 feed 	bl	8008254 <vPortFree>
 800647a:	e001      	b.n	8006480 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800647c:	2300      	movs	r3, #0
 800647e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d017      	beq.n	80064b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800648e:	88fa      	ldrh	r2, [r7, #6]
 8006490:	2300      	movs	r3, #0
 8006492:	9303      	str	r3, [sp, #12]
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	9302      	str	r3, [sp, #8]
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649a:	9301      	str	r3, [sp, #4]
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f80e 	bl	80064c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064aa:	69f8      	ldr	r0, [r7, #28]
 80064ac:	f000 f892 	bl	80065d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064b0:	2301      	movs	r3, #1
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	e002      	b.n	80064bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064b6:	f04f 33ff 	mov.w	r3, #4294967295
 80064ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064bc:	69bb      	ldr	r3, [r7, #24]
	}
 80064be:	4618      	mov	r0, r3
 80064c0:	3720      	adds	r7, #32
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b088      	sub	sp, #32
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	461a      	mov	r2, r3
 80064de:	21a5      	movs	r1, #165	; 0xa5
 80064e0:	f003 f8dc 	bl	800969c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064ee:	3b01      	subs	r3, #1
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	f023 0307 	bic.w	r3, r3, #7
 80064fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <prvInitialiseNewTask+0x58>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	617b      	str	r3, [r7, #20]
}
 800651a:	bf00      	nop
 800651c:	e7fe      	b.n	800651c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	e012      	b.n	800654a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	4413      	add	r3, r2
 800652a:	7819      	ldrb	r1, [r3, #0]
 800652c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	4413      	add	r3, r2
 8006532:	3334      	adds	r3, #52	; 0x34
 8006534:	460a      	mov	r2, r1
 8006536:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	4413      	add	r3, r2
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d006      	beq.n	8006552 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	3301      	adds	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	2b0f      	cmp	r3, #15
 800654e:	d9e9      	bls.n	8006524 <prvInitialiseNewTask+0x5e>
 8006550:	e000      	b.n	8006554 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006552:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	2b37      	cmp	r3, #55	; 0x37
 8006560:	d901      	bls.n	8006566 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006562:	2337      	movs	r3, #55	; 0x37
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800656a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006570:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	2200      	movs	r2, #0
 8006576:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	3304      	adds	r3, #4
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe fe2c 	bl	80051da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	3318      	adds	r3, #24
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe fe27 	bl	80051da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006590:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	2200      	movs	r2, #0
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	68f9      	ldr	r1, [r7, #12]
 80065b4:	69b8      	ldr	r0, [r7, #24]
 80065b6:	f001 fb95 	bl	8007ce4 <pxPortInitialiseStack>
 80065ba:	4602      	mov	r2, r0
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065cc:	bf00      	nop
 80065ce:	3720      	adds	r7, #32
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065dc:	f001 fc76 	bl	8007ecc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065e0:	4b2d      	ldr	r3, [pc, #180]	; (8006698 <prvAddNewTaskToReadyList+0xc4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	4a2c      	ldr	r2, [pc, #176]	; (8006698 <prvAddNewTaskToReadyList+0xc4>)
 80065e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065ea:	4b2c      	ldr	r3, [pc, #176]	; (800669c <prvAddNewTaskToReadyList+0xc8>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065f2:	4a2a      	ldr	r2, [pc, #168]	; (800669c <prvAddNewTaskToReadyList+0xc8>)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065f8:	4b27      	ldr	r3, [pc, #156]	; (8006698 <prvAddNewTaskToReadyList+0xc4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d110      	bne.n	8006622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006600:	f000 fdb4 	bl	800716c <prvInitialiseTaskLists>
 8006604:	e00d      	b.n	8006622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006606:	4b26      	ldr	r3, [pc, #152]	; (80066a0 <prvAddNewTaskToReadyList+0xcc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800660e:	4b23      	ldr	r3, [pc, #140]	; (800669c <prvAddNewTaskToReadyList+0xc8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	429a      	cmp	r2, r3
 800661a:	d802      	bhi.n	8006622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800661c:	4a1f      	ldr	r2, [pc, #124]	; (800669c <prvAddNewTaskToReadyList+0xc8>)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006622:	4b20      	ldr	r3, [pc, #128]	; (80066a4 <prvAddNewTaskToReadyList+0xd0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3301      	adds	r3, #1
 8006628:	4a1e      	ldr	r2, [pc, #120]	; (80066a4 <prvAddNewTaskToReadyList+0xd0>)
 800662a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800662c:	4b1d      	ldr	r3, [pc, #116]	; (80066a4 <prvAddNewTaskToReadyList+0xd0>)
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006638:	4b1b      	ldr	r3, [pc, #108]	; (80066a8 <prvAddNewTaskToReadyList+0xd4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d903      	bls.n	8006648 <prvAddNewTaskToReadyList+0x74>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <prvAddNewTaskToReadyList+0xd4>)
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	4613      	mov	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4a15      	ldr	r2, [pc, #84]	; (80066ac <prvAddNewTaskToReadyList+0xd8>)
 8006656:	441a      	add	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3304      	adds	r3, #4
 800665c:	4619      	mov	r1, r3
 800665e:	4610      	mov	r0, r2
 8006660:	f7fe fdc7 	bl	80051f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006664:	f001 fc62 	bl	8007f2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006668:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <prvAddNewTaskToReadyList+0xcc>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00e      	beq.n	800668e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006670:	4b0a      	ldr	r3, [pc, #40]	; (800669c <prvAddNewTaskToReadyList+0xc8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	429a      	cmp	r2, r3
 800667c:	d207      	bcs.n	800668e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800667e:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <prvAddNewTaskToReadyList+0xdc>)
 8006680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	20000f90 	.word	0x20000f90
 800669c:	20000abc 	.word	0x20000abc
 80066a0:	20000f9c 	.word	0x20000f9c
 80066a4:	20000fac 	.word	0x20000fac
 80066a8:	20000f98 	.word	0x20000f98
 80066ac:	20000ac0 	.word	0x20000ac0
 80066b0:	e000ed04 	.word	0xe000ed04

080066b4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08a      	sub	sp, #40	; 0x28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80066be:	2300      	movs	r3, #0
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <vTaskDelayUntil+0x2a>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	617b      	str	r3, [r7, #20]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <vTaskDelayUntil+0x46>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	613b      	str	r3, [r7, #16]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80066fa:	4b2a      	ldr	r3, [pc, #168]	; (80067a4 <vTaskDelayUntil+0xf0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <vTaskDelayUntil+0x64>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	60fb      	str	r3, [r7, #12]
}
 8006714:	bf00      	nop
 8006716:	e7fe      	b.n	8006716 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006718:	f000 f9f2 	bl	8006b00 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800671c:	4b22      	ldr	r3, [pc, #136]	; (80067a8 <vTaskDelayUntil+0xf4>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	4413      	add	r3, r2
 800672a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6a3a      	ldr	r2, [r7, #32]
 8006732:	429a      	cmp	r2, r3
 8006734:	d20b      	bcs.n	800674e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	429a      	cmp	r2, r3
 800673e:	d211      	bcs.n	8006764 <vTaskDelayUntil+0xb0>
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	429a      	cmp	r2, r3
 8006746:	d90d      	bls.n	8006764 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006748:	2301      	movs	r3, #1
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
 800674c:	e00a      	b.n	8006764 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	429a      	cmp	r2, r3
 8006756:	d303      	bcc.n	8006760 <vTaskDelayUntil+0xac>
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	429a      	cmp	r2, r3
 800675e:	d901      	bls.n	8006764 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006760:	2301      	movs	r3, #1
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	69fa      	ldr	r2, [r7, #28]
 8006768:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d006      	beq.n	800677e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2100      	movs	r1, #0
 8006778:	4618      	mov	r0, r3
 800677a:	f000 ff4d 	bl	8007618 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800677e:	f000 f9cd 	bl	8006b1c <xTaskResumeAll>
 8006782:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d107      	bne.n	800679a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800678a:	4b08      	ldr	r3, [pc, #32]	; (80067ac <vTaskDelayUntil+0xf8>)
 800678c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800679a:	bf00      	nop
 800679c:	3728      	adds	r7, #40	; 0x28
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000fb8 	.word	0x20000fb8
 80067a8:	20000f94 	.word	0x20000f94
 80067ac:	e000ed04 	.word	0xe000ed04

080067b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d017      	beq.n	80067f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067c2:	4b13      	ldr	r3, [pc, #76]	; (8006810 <vTaskDelay+0x60>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <vTaskDelay+0x30>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	60bb      	str	r3, [r7, #8]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067e0:	f000 f98e 	bl	8006b00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067e4:	2100      	movs	r1, #0
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 ff16 	bl	8007618 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067ec:	f000 f996 	bl	8006b1c <xTaskResumeAll>
 80067f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d107      	bne.n	8006808 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067f8:	4b06      	ldr	r3, [pc, #24]	; (8006814 <vTaskDelay+0x64>)
 80067fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20000fb8 	.word	0x20000fb8
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006820:	f001 fb54 	bl	8007ecc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d102      	bne.n	8006830 <vTaskSuspend+0x18>
 800682a:	4b30      	ldr	r3, [pc, #192]	; (80068ec <vTaskSuspend+0xd4>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	e000      	b.n	8006832 <vTaskSuspend+0x1a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3304      	adds	r3, #4
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe fd35 	bl	80052a8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	2b00      	cmp	r3, #0
 8006844:	d004      	beq.n	8006850 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3318      	adds	r3, #24
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fd2c 	bl	80052a8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3304      	adds	r3, #4
 8006854:	4619      	mov	r1, r3
 8006856:	4826      	ldr	r0, [pc, #152]	; (80068f0 <vTaskSuspend+0xd8>)
 8006858:	f7fe fccb 	bl	80051f2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b01      	cmp	r3, #1
 8006866:	d103      	bne.n	8006870 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006870:	f001 fb5c 	bl	8007f2c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006874:	4b1f      	ldr	r3, [pc, #124]	; (80068f4 <vTaskSuspend+0xdc>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800687c:	f001 fb26 	bl	8007ecc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006880:	f000 fd12 	bl	80072a8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006884:	f001 fb52 	bl	8007f2c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006888:	4b18      	ldr	r3, [pc, #96]	; (80068ec <vTaskSuspend+0xd4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	429a      	cmp	r2, r3
 8006890:	d127      	bne.n	80068e2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8006892:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <vTaskSuspend+0xdc>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d017      	beq.n	80068ca <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800689a:	4b17      	ldr	r3, [pc, #92]	; (80068f8 <vTaskSuspend+0xe0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <vTaskSuspend+0xa0>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	60bb      	str	r3, [r7, #8]
}
 80068b4:	bf00      	nop
 80068b6:	e7fe      	b.n	80068b6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80068b8:	4b10      	ldr	r3, [pc, #64]	; (80068fc <vTaskSuspend+0xe4>)
 80068ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068c8:	e00b      	b.n	80068e2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80068ca:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <vTaskSuspend+0xd8>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <vTaskSuspend+0xe8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d103      	bne.n	80068de <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <vTaskSuspend+0xd4>)
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
	}
 80068dc:	e001      	b.n	80068e2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80068de:	f000 fa99 	bl	8006e14 <vTaskSwitchContext>
	}
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000abc 	.word	0x20000abc
 80068f0:	20000f7c 	.word	0x20000f7c
 80068f4:	20000f9c 	.word	0x20000f9c
 80068f8:	20000fb8 	.word	0x20000fb8
 80068fc:	e000ed04 	.word	0xe000ed04
 8006900:	20000f90 	.word	0x20000f90

08006904 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800690c:	2300      	movs	r3, #0
 800690e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10a      	bne.n	8006930 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	60fb      	str	r3, [r7, #12]
}
 800692c:	bf00      	nop
 800692e:	e7fe      	b.n	800692e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	4a0e      	ldr	r2, [pc, #56]	; (8006970 <prvTaskIsTaskSuspended+0x6c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d101      	bne.n	800693e <prvTaskIsTaskSuspended+0x3a>
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <prvTaskIsTaskSuspended+0x3c>
 800693e:	2300      	movs	r3, #0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00f      	beq.n	8006964 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	4a0a      	ldr	r2, [pc, #40]	; (8006974 <prvTaskIsTaskSuspended+0x70>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00a      	beq.n	8006964 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <prvTaskIsTaskSuspended+0x56>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <prvTaskIsTaskSuspended+0x58>
 800695a:	2300      	movs	r3, #0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8006960:	2301      	movs	r3, #1
 8006962:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006964:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006966:	4618      	mov	r0, r3
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr
 8006970:	20000f7c 	.word	0x20000f7c
 8006974:	20000f50 	.word	0x20000f50

08006978 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <vTaskResume+0x28>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	60bb      	str	r3, [r7, #8]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d03a      	beq.n	8006a1c <vTaskResume+0xa4>
 80069a6:	4b1f      	ldr	r3, [pc, #124]	; (8006a24 <vTaskResume+0xac>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d035      	beq.n	8006a1c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80069b0:	f001 fa8c 	bl	8007ecc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7ff ffa5 	bl	8006904 <prvTaskIsTaskSuspended>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d02b      	beq.n	8006a18 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3304      	adds	r3, #4
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fe fc6f 	bl	80052a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ce:	4b16      	ldr	r3, [pc, #88]	; (8006a28 <vTaskResume+0xb0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d903      	bls.n	80069de <vTaskResume+0x66>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	4a13      	ldr	r2, [pc, #76]	; (8006a28 <vTaskResume+0xb0>)
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4a10      	ldr	r2, [pc, #64]	; (8006a2c <vTaskResume+0xb4>)
 80069ec:	441a      	add	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4619      	mov	r1, r3
 80069f4:	4610      	mov	r0, r2
 80069f6:	f7fe fbfc 	bl	80051f2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fe:	4b09      	ldr	r3, [pc, #36]	; (8006a24 <vTaskResume+0xac>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d307      	bcc.n	8006a18 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <vTaskResume+0xb8>)
 8006a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006a18:	f001 fa88 	bl	8007f2c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a1c:	bf00      	nop
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20000abc 	.word	0x20000abc
 8006a28:	20000f98 	.word	0x20000f98
 8006a2c:	20000ac0 	.word	0x20000ac0
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	; 0x28
 8006a38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a42:	463a      	mov	r2, r7
 8006a44:	1d39      	adds	r1, r7, #4
 8006a46:	f107 0308 	add.w	r3, r7, #8
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fe fb74 	bl	8005138 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	9202      	str	r2, [sp, #8]
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	460a      	mov	r2, r1
 8006a62:	4921      	ldr	r1, [pc, #132]	; (8006ae8 <vTaskStartScheduler+0xb4>)
 8006a64:	4821      	ldr	r0, [pc, #132]	; (8006aec <vTaskStartScheduler+0xb8>)
 8006a66:	f7ff fc8d 	bl	8006384 <xTaskCreateStatic>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	4a20      	ldr	r2, [pc, #128]	; (8006af0 <vTaskStartScheduler+0xbc>)
 8006a6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a70:	4b1f      	ldr	r3, [pc, #124]	; (8006af0 <vTaskStartScheduler+0xbc>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	e001      	b.n	8006a82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d102      	bne.n	8006a8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a88:	f000 fe1a 	bl	80076c0 <xTimerCreateTimerTask>
 8006a8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d116      	bne.n	8006ac2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	613b      	str	r3, [r7, #16]
}
 8006aa6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006aa8:	4b12      	ldr	r3, [pc, #72]	; (8006af4 <vTaskStartScheduler+0xc0>)
 8006aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8006aae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ab0:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <vTaskStartScheduler+0xc4>)
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006ab6:	4b11      	ldr	r3, [pc, #68]	; (8006afc <vTaskStartScheduler+0xc8>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006abc:	f001 f994 	bl	8007de8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ac0:	e00e      	b.n	8006ae0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac8:	d10a      	bne.n	8006ae0 <vTaskStartScheduler+0xac>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	60fb      	str	r3, [r7, #12]
}
 8006adc:	bf00      	nop
 8006ade:	e7fe      	b.n	8006ade <vTaskStartScheduler+0xaa>
}
 8006ae0:	bf00      	nop
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	0800d044 	.word	0x0800d044
 8006aec:	0800713d 	.word	0x0800713d
 8006af0:	20000fb4 	.word	0x20000fb4
 8006af4:	20000fb0 	.word	0x20000fb0
 8006af8:	20000f9c 	.word	0x20000f9c
 8006afc:	20000f94 	.word	0x20000f94

08006b00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006b04:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <vTaskSuspendAll+0x18>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	4a03      	ldr	r2, [pc, #12]	; (8006b18 <vTaskSuspendAll+0x18>)
 8006b0c:	6013      	str	r3, [r2, #0]
}
 8006b0e:	bf00      	nop
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	20000fb8 	.word	0x20000fb8

08006b1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b2a:	4b42      	ldr	r3, [pc, #264]	; (8006c34 <xTaskResumeAll+0x118>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	603b      	str	r3, [r7, #0]
}
 8006b44:	bf00      	nop
 8006b46:	e7fe      	b.n	8006b46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b48:	f001 f9c0 	bl	8007ecc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b4c:	4b39      	ldr	r3, [pc, #228]	; (8006c34 <xTaskResumeAll+0x118>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	4a38      	ldr	r2, [pc, #224]	; (8006c34 <xTaskResumeAll+0x118>)
 8006b54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b56:	4b37      	ldr	r3, [pc, #220]	; (8006c34 <xTaskResumeAll+0x118>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d162      	bne.n	8006c24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b5e:	4b36      	ldr	r3, [pc, #216]	; (8006c38 <xTaskResumeAll+0x11c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d05e      	beq.n	8006c24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b66:	e02f      	b.n	8006bc8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006b68:	4b34      	ldr	r3, [pc, #208]	; (8006c3c <xTaskResumeAll+0x120>)
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3318      	adds	r3, #24
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fe fb97 	bl	80052a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe fb92 	bl	80052a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b88:	4b2d      	ldr	r3, [pc, #180]	; (8006c40 <xTaskResumeAll+0x124>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d903      	bls.n	8006b98 <xTaskResumeAll+0x7c>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	4a2a      	ldr	r2, [pc, #168]	; (8006c40 <xTaskResumeAll+0x124>)
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4a27      	ldr	r2, [pc, #156]	; (8006c44 <xTaskResumeAll+0x128>)
 8006ba6:	441a      	add	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f7fe fb1f 	bl	80051f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb8:	4b23      	ldr	r3, [pc, #140]	; (8006c48 <xTaskResumeAll+0x12c>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d302      	bcc.n	8006bc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006bc2:	4b22      	ldr	r3, [pc, #136]	; (8006c4c <xTaskResumeAll+0x130>)
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bc8:	4b1c      	ldr	r3, [pc, #112]	; (8006c3c <xTaskResumeAll+0x120>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1cb      	bne.n	8006b68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bd6:	f000 fb67 	bl	80072a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006bda:	4b1d      	ldr	r3, [pc, #116]	; (8006c50 <xTaskResumeAll+0x134>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d010      	beq.n	8006c08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006be6:	f000 f857 	bl	8006c98 <xTaskIncrementTick>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006bf0:	4b16      	ldr	r3, [pc, #88]	; (8006c4c <xTaskResumeAll+0x130>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f1      	bne.n	8006be6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006c02:	4b13      	ldr	r3, [pc, #76]	; (8006c50 <xTaskResumeAll+0x134>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c08:	4b10      	ldr	r3, [pc, #64]	; (8006c4c <xTaskResumeAll+0x130>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d009      	beq.n	8006c24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c10:	2301      	movs	r3, #1
 8006c12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c14:	4b0f      	ldr	r3, [pc, #60]	; (8006c54 <xTaskResumeAll+0x138>)
 8006c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c24:	f001 f982 	bl	8007f2c <vPortExitCritical>

	return xAlreadyYielded;
 8006c28:	68bb      	ldr	r3, [r7, #8]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000fb8 	.word	0x20000fb8
 8006c38:	20000f90 	.word	0x20000f90
 8006c3c:	20000f50 	.word	0x20000f50
 8006c40:	20000f98 	.word	0x20000f98
 8006c44:	20000ac0 	.word	0x20000ac0
 8006c48:	20000abc 	.word	0x20000abc
 8006c4c:	20000fa4 	.word	0x20000fa4
 8006c50:	20000fa0 	.word	0x20000fa0
 8006c54:	e000ed04 	.word	0xe000ed04

08006c58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c5e:	4b04      	ldr	r3, [pc, #16]	; (8006c70 <xTaskGetTickCount+0x18>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c64:	687b      	ldr	r3, [r7, #4]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bc80      	pop	{r7}
 8006c6e:	4770      	bx	lr
 8006c70:	20000f94 	.word	0x20000f94

08006c74 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c7a:	f001 f9e9 	bl	8008050 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006c7e:	2300      	movs	r3, #0
 8006c80:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006c82:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <xTaskGetTickCountFromISR+0x20>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c88:	683b      	ldr	r3, [r7, #0]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000f94 	.word	0x20000f94

08006c98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ca2:	4b51      	ldr	r3, [pc, #324]	; (8006de8 <xTaskIncrementTick+0x150>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f040 808e 	bne.w	8006dc8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cac:	4b4f      	ldr	r3, [pc, #316]	; (8006dec <xTaskIncrementTick+0x154>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006cb4:	4a4d      	ldr	r2, [pc, #308]	; (8006dec <xTaskIncrementTick+0x154>)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d120      	bne.n	8006d02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cc0:	4b4b      	ldr	r3, [pc, #300]	; (8006df0 <xTaskIncrementTick+0x158>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	603b      	str	r3, [r7, #0]
}
 8006cdc:	bf00      	nop
 8006cde:	e7fe      	b.n	8006cde <xTaskIncrementTick+0x46>
 8006ce0:	4b43      	ldr	r3, [pc, #268]	; (8006df0 <xTaskIncrementTick+0x158>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	4b43      	ldr	r3, [pc, #268]	; (8006df4 <xTaskIncrementTick+0x15c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a41      	ldr	r2, [pc, #260]	; (8006df0 <xTaskIncrementTick+0x158>)
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	4a41      	ldr	r2, [pc, #260]	; (8006df4 <xTaskIncrementTick+0x15c>)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	4b40      	ldr	r3, [pc, #256]	; (8006df8 <xTaskIncrementTick+0x160>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	4a3f      	ldr	r2, [pc, #252]	; (8006df8 <xTaskIncrementTick+0x160>)
 8006cfc:	6013      	str	r3, [r2, #0]
 8006cfe:	f000 fad3 	bl	80072a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d02:	4b3e      	ldr	r3, [pc, #248]	; (8006dfc <xTaskIncrementTick+0x164>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d34e      	bcc.n	8006daa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d0c:	4b38      	ldr	r3, [pc, #224]	; (8006df0 <xTaskIncrementTick+0x158>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <xTaskIncrementTick+0x82>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e000      	b.n	8006d1c <xTaskIncrementTick+0x84>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d004      	beq.n	8006d2a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d20:	4b36      	ldr	r3, [pc, #216]	; (8006dfc <xTaskIncrementTick+0x164>)
 8006d22:	f04f 32ff 	mov.w	r2, #4294967295
 8006d26:	601a      	str	r2, [r3, #0]
					break;
 8006d28:	e03f      	b.n	8006daa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d2a:	4b31      	ldr	r3, [pc, #196]	; (8006df0 <xTaskIncrementTick+0x158>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d203      	bcs.n	8006d4a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d42:	4a2e      	ldr	r2, [pc, #184]	; (8006dfc <xTaskIncrementTick+0x164>)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6013      	str	r3, [r2, #0]
						break;
 8006d48:	e02f      	b.n	8006daa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe faaa 	bl	80052a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	3318      	adds	r3, #24
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe faa1 	bl	80052a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6a:	4b25      	ldr	r3, [pc, #148]	; (8006e00 <xTaskIncrementTick+0x168>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d903      	bls.n	8006d7a <xTaskIncrementTick+0xe2>
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d76:	4a22      	ldr	r2, [pc, #136]	; (8006e00 <xTaskIncrementTick+0x168>)
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4a1f      	ldr	r2, [pc, #124]	; (8006e04 <xTaskIncrementTick+0x16c>)
 8006d88:	441a      	add	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4610      	mov	r0, r2
 8006d92:	f7fe fa2e 	bl	80051f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9a:	4b1b      	ldr	r3, [pc, #108]	; (8006e08 <xTaskIncrementTick+0x170>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d3b3      	bcc.n	8006d0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006da4:	2301      	movs	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006da8:	e7b0      	b.n	8006d0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006daa:	4b17      	ldr	r3, [pc, #92]	; (8006e08 <xTaskIncrementTick+0x170>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db0:	4914      	ldr	r1, [pc, #80]	; (8006e04 <xTaskIncrementTick+0x16c>)
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	440b      	add	r3, r1
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d907      	bls.n	8006dd2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	e004      	b.n	8006dd2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006dc8:	4b10      	ldr	r3, [pc, #64]	; (8006e0c <xTaskIncrementTick+0x174>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	4a0f      	ldr	r2, [pc, #60]	; (8006e0c <xTaskIncrementTick+0x174>)
 8006dd0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <xTaskIncrementTick+0x178>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006dde:	697b      	ldr	r3, [r7, #20]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20000fb8 	.word	0x20000fb8
 8006dec:	20000f94 	.word	0x20000f94
 8006df0:	20000f48 	.word	0x20000f48
 8006df4:	20000f4c 	.word	0x20000f4c
 8006df8:	20000fa8 	.word	0x20000fa8
 8006dfc:	20000fb0 	.word	0x20000fb0
 8006e00:	20000f98 	.word	0x20000f98
 8006e04:	20000ac0 	.word	0x20000ac0
 8006e08:	20000abc 	.word	0x20000abc
 8006e0c:	20000fa0 	.word	0x20000fa0
 8006e10:	20000fa4 	.word	0x20000fa4

08006e14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e1a:	4b27      	ldr	r3, [pc, #156]	; (8006eb8 <vTaskSwitchContext+0xa4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e22:	4b26      	ldr	r3, [pc, #152]	; (8006ebc <vTaskSwitchContext+0xa8>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e28:	e041      	b.n	8006eae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006e2a:	4b24      	ldr	r3, [pc, #144]	; (8006ebc <vTaskSwitchContext+0xa8>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006e30:	4b23      	ldr	r3, [pc, #140]	; (8006ec0 <vTaskSwitchContext+0xac>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	e010      	b.n	8006e5a <vTaskSwitchContext+0x46>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	607b      	str	r3, [r7, #4]
}
 8006e50:	bf00      	nop
 8006e52:	e7fe      	b.n	8006e52 <vTaskSwitchContext+0x3e>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	491a      	ldr	r1, [pc, #104]	; (8006ec4 <vTaskSwitchContext+0xb0>)
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0e4      	beq.n	8006e38 <vTaskSwitchContext+0x24>
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4a12      	ldr	r2, [pc, #72]	; (8006ec4 <vTaskSwitchContext+0xb0>)
 8006e7a:	4413      	add	r3, r2
 8006e7c:	60bb      	str	r3, [r7, #8]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	605a      	str	r2, [r3, #4]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	3308      	adds	r3, #8
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d104      	bne.n	8006e9e <vTaskSwitchContext+0x8a>
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	605a      	str	r2, [r3, #4]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	4a08      	ldr	r2, [pc, #32]	; (8006ec8 <vTaskSwitchContext+0xb4>)
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	4a05      	ldr	r2, [pc, #20]	; (8006ec0 <vTaskSwitchContext+0xac>)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6013      	str	r3, [r2, #0]
}
 8006eae:	bf00      	nop
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bc80      	pop	{r7}
 8006eb6:	4770      	bx	lr
 8006eb8:	20000fb8 	.word	0x20000fb8
 8006ebc:	20000fa4 	.word	0x20000fa4
 8006ec0:	20000f98 	.word	0x20000f98
 8006ec4:	20000ac0 	.word	0x20000ac0
 8006ec8:	20000abc 	.word	0x20000abc

08006ecc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10a      	bne.n	8006ef2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	60fb      	str	r3, [r7, #12]
}
 8006eee:	bf00      	nop
 8006ef0:	e7fe      	b.n	8006ef0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ef2:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <vTaskPlaceOnEventList+0x44>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3318      	adds	r3, #24
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fe f99c 	bl	8005238 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f00:	2101      	movs	r1, #1
 8006f02:	6838      	ldr	r0, [r7, #0]
 8006f04:	f000 fb88 	bl	8007618 <prvAddCurrentTaskToDelayedList>
}
 8006f08:	bf00      	nop
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20000abc 	.word	0x20000abc

08006f14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	617b      	str	r3, [r7, #20]
}
 8006f38:	bf00      	nop
 8006f3a:	e7fe      	b.n	8006f3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3318      	adds	r3, #24
 8006f42:	4619      	mov	r1, r3
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7fe f954 	bl	80051f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f50:	f04f 33ff 	mov.w	r3, #4294967295
 8006f54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	68b8      	ldr	r0, [r7, #8]
 8006f5a:	f000 fb5d 	bl	8007618 <prvAddCurrentTaskToDelayedList>
	}
 8006f5e:	bf00      	nop
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000abc 	.word	0x20000abc

08006f6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	60fb      	str	r3, [r7, #12]
}
 8006f94:	bf00      	nop
 8006f96:	e7fe      	b.n	8006f96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	3318      	adds	r3, #24
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe f983 	bl	80052a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fa2:	4b1e      	ldr	r3, [pc, #120]	; (800701c <xTaskRemoveFromEventList+0xb0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d11d      	bne.n	8006fe6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe f97a 	bl	80052a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	4b19      	ldr	r3, [pc, #100]	; (8007020 <xTaskRemoveFromEventList+0xb4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d903      	bls.n	8006fc8 <xTaskRemoveFromEventList+0x5c>
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	4a16      	ldr	r2, [pc, #88]	; (8007020 <xTaskRemoveFromEventList+0xb4>)
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4a13      	ldr	r2, [pc, #76]	; (8007024 <xTaskRemoveFromEventList+0xb8>)
 8006fd6:	441a      	add	r2, r3
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4610      	mov	r0, r2
 8006fe0:	f7fe f907 	bl	80051f2 <vListInsertEnd>
 8006fe4:	e005      	b.n	8006ff2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	3318      	adds	r3, #24
 8006fea:	4619      	mov	r1, r3
 8006fec:	480e      	ldr	r0, [pc, #56]	; (8007028 <xTaskRemoveFromEventList+0xbc>)
 8006fee:	f7fe f900 	bl	80051f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff6:	4b0d      	ldr	r3, [pc, #52]	; (800702c <xTaskRemoveFromEventList+0xc0>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d905      	bls.n	800700c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007000:	2301      	movs	r3, #1
 8007002:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007004:	4b0a      	ldr	r3, [pc, #40]	; (8007030 <xTaskRemoveFromEventList+0xc4>)
 8007006:	2201      	movs	r2, #1
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	e001      	b.n	8007010 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800700c:	2300      	movs	r3, #0
 800700e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007010:	697b      	ldr	r3, [r7, #20]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000fb8 	.word	0x20000fb8
 8007020:	20000f98 	.word	0x20000f98
 8007024:	20000ac0 	.word	0x20000ac0
 8007028:	20000f50 	.word	0x20000f50
 800702c:	20000abc 	.word	0x20000abc
 8007030:	20000fa4 	.word	0x20000fa4

08007034 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800703c:	4b06      	ldr	r3, [pc, #24]	; (8007058 <vTaskInternalSetTimeOutState+0x24>)
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007044:	4b05      	ldr	r3, [pc, #20]	; (800705c <vTaskInternalSetTimeOutState+0x28>)
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	605a      	str	r2, [r3, #4]
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	20000fa8 	.word	0x20000fa8
 800705c:	20000f94 	.word	0x20000f94

08007060 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10a      	bne.n	8007086 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	613b      	str	r3, [r7, #16]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	60fb      	str	r3, [r7, #12]
}
 800709e:	bf00      	nop
 80070a0:	e7fe      	b.n	80070a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80070a2:	f000 ff13 	bl	8007ecc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070a6:	4b1d      	ldr	r3, [pc, #116]	; (800711c <xTaskCheckForTimeOut+0xbc>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070be:	d102      	bne.n	80070c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61fb      	str	r3, [r7, #28]
 80070c4:	e023      	b.n	800710e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	4b15      	ldr	r3, [pc, #84]	; (8007120 <xTaskCheckForTimeOut+0xc0>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d007      	beq.n	80070e2 <xTaskCheckForTimeOut+0x82>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d302      	bcc.n	80070e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070dc:	2301      	movs	r3, #1
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	e015      	b.n	800710e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d20b      	bcs.n	8007104 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	1ad2      	subs	r2, r2, r3
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff ff9b 	bl	8007034 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070fe:	2300      	movs	r3, #0
 8007100:	61fb      	str	r3, [r7, #28]
 8007102:	e004      	b.n	800710e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2200      	movs	r2, #0
 8007108:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800710a:	2301      	movs	r3, #1
 800710c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800710e:	f000 ff0d 	bl	8007f2c <vPortExitCritical>

	return xReturn;
 8007112:	69fb      	ldr	r3, [r7, #28]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3720      	adds	r7, #32
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20000f94 	.word	0x20000f94
 8007120:	20000fa8 	.word	0x20000fa8

08007124 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007128:	4b03      	ldr	r3, [pc, #12]	; (8007138 <vTaskMissedYield+0x14>)
 800712a:	2201      	movs	r2, #1
 800712c:	601a      	str	r2, [r3, #0]
}
 800712e:	bf00      	nop
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	20000fa4 	.word	0x20000fa4

0800713c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007144:	f000 f852 	bl	80071ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007148:	4b06      	ldr	r3, [pc, #24]	; (8007164 <prvIdleTask+0x28>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d9f9      	bls.n	8007144 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007150:	4b05      	ldr	r3, [pc, #20]	; (8007168 <prvIdleTask+0x2c>)
 8007152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007160:	e7f0      	b.n	8007144 <prvIdleTask+0x8>
 8007162:	bf00      	nop
 8007164:	20000ac0 	.word	0x20000ac0
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007172:	2300      	movs	r3, #0
 8007174:	607b      	str	r3, [r7, #4]
 8007176:	e00c      	b.n	8007192 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4a12      	ldr	r2, [pc, #72]	; (80071cc <prvInitialiseTaskLists+0x60>)
 8007184:	4413      	add	r3, r2
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe f808 	bl	800519c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3301      	adds	r3, #1
 8007190:	607b      	str	r3, [r7, #4]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b37      	cmp	r3, #55	; 0x37
 8007196:	d9ef      	bls.n	8007178 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007198:	480d      	ldr	r0, [pc, #52]	; (80071d0 <prvInitialiseTaskLists+0x64>)
 800719a:	f7fd ffff 	bl	800519c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800719e:	480d      	ldr	r0, [pc, #52]	; (80071d4 <prvInitialiseTaskLists+0x68>)
 80071a0:	f7fd fffc 	bl	800519c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071a4:	480c      	ldr	r0, [pc, #48]	; (80071d8 <prvInitialiseTaskLists+0x6c>)
 80071a6:	f7fd fff9 	bl	800519c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071aa:	480c      	ldr	r0, [pc, #48]	; (80071dc <prvInitialiseTaskLists+0x70>)
 80071ac:	f7fd fff6 	bl	800519c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071b0:	480b      	ldr	r0, [pc, #44]	; (80071e0 <prvInitialiseTaskLists+0x74>)
 80071b2:	f7fd fff3 	bl	800519c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071b6:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <prvInitialiseTaskLists+0x78>)
 80071b8:	4a05      	ldr	r2, [pc, #20]	; (80071d0 <prvInitialiseTaskLists+0x64>)
 80071ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071bc:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <prvInitialiseTaskLists+0x7c>)
 80071be:	4a05      	ldr	r2, [pc, #20]	; (80071d4 <prvInitialiseTaskLists+0x68>)
 80071c0:	601a      	str	r2, [r3, #0]
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000ac0 	.word	0x20000ac0
 80071d0:	20000f20 	.word	0x20000f20
 80071d4:	20000f34 	.word	0x20000f34
 80071d8:	20000f50 	.word	0x20000f50
 80071dc:	20000f64 	.word	0x20000f64
 80071e0:	20000f7c 	.word	0x20000f7c
 80071e4:	20000f48 	.word	0x20000f48
 80071e8:	20000f4c 	.word	0x20000f4c

080071ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071f2:	e019      	b.n	8007228 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071f4:	f000 fe6a 	bl	8007ecc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80071f8:	4b10      	ldr	r3, [pc, #64]	; (800723c <prvCheckTasksWaitingTermination+0x50>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3304      	adds	r3, #4
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe f84f 	bl	80052a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800720a:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <prvCheckTasksWaitingTermination+0x54>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3b01      	subs	r3, #1
 8007210:	4a0b      	ldr	r2, [pc, #44]	; (8007240 <prvCheckTasksWaitingTermination+0x54>)
 8007212:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007214:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <prvCheckTasksWaitingTermination+0x58>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3b01      	subs	r3, #1
 800721a:	4a0a      	ldr	r2, [pc, #40]	; (8007244 <prvCheckTasksWaitingTermination+0x58>)
 800721c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800721e:	f000 fe85 	bl	8007f2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f810 	bl	8007248 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <prvCheckTasksWaitingTermination+0x58>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e1      	bne.n	80071f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007230:	bf00      	nop
 8007232:	bf00      	nop
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20000f64 	.word	0x20000f64
 8007240:	20000f90 	.word	0x20000f90
 8007244:	20000f78 	.word	0x20000f78

08007248 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007256:	2b00      	cmp	r3, #0
 8007258:	d108      	bne.n	800726c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fff8 	bl	8008254 <vPortFree>
				vPortFree( pxTCB );
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fff5 	bl	8008254 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800726a:	e018      	b.n	800729e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007272:	2b01      	cmp	r3, #1
 8007274:	d103      	bne.n	800727e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 ffec 	bl	8008254 <vPortFree>
	}
 800727c:	e00f      	b.n	800729e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007284:	2b02      	cmp	r3, #2
 8007286:	d00a      	beq.n	800729e <prvDeleteTCB+0x56>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	60fb      	str	r3, [r7, #12]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <prvDeleteTCB+0x54>
	}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072ae:	4b0e      	ldr	r3, [pc, #56]	; (80072e8 <prvResetNextTaskUnblockTime+0x40>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <prvResetNextTaskUnblockTime+0x14>
 80072b8:	2301      	movs	r3, #1
 80072ba:	e000      	b.n	80072be <prvResetNextTaskUnblockTime+0x16>
 80072bc:	2300      	movs	r3, #0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d004      	beq.n	80072cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072c2:	4b0a      	ldr	r3, [pc, #40]	; (80072ec <prvResetNextTaskUnblockTime+0x44>)
 80072c4:	f04f 32ff 	mov.w	r2, #4294967295
 80072c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072ca:	e008      	b.n	80072de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80072cc:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <prvResetNextTaskUnblockTime+0x40>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	4a04      	ldr	r2, [pc, #16]	; (80072ec <prvResetNextTaskUnblockTime+0x44>)
 80072dc:	6013      	str	r3, [r2, #0]
}
 80072de:	bf00      	nop
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bc80      	pop	{r7}
 80072e6:	4770      	bx	lr
 80072e8:	20000f48 	.word	0x20000f48
 80072ec:	20000fb0 	.word	0x20000fb0

080072f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072f6:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <xTaskGetSchedulerState+0x34>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d102      	bne.n	8007304 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072fe:	2301      	movs	r3, #1
 8007300:	607b      	str	r3, [r7, #4]
 8007302:	e008      	b.n	8007316 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007304:	4b08      	ldr	r3, [pc, #32]	; (8007328 <xTaskGetSchedulerState+0x38>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d102      	bne.n	8007312 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800730c:	2302      	movs	r3, #2
 800730e:	607b      	str	r3, [r7, #4]
 8007310:	e001      	b.n	8007316 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007312:	2300      	movs	r3, #0
 8007314:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007316:	687b      	ldr	r3, [r7, #4]
	}
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	bc80      	pop	{r7}
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20000f9c 	.word	0x20000f9c
 8007328:	20000fb8 	.word	0x20000fb8

0800732c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d056      	beq.n	80073f0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007346:	4b2d      	ldr	r3, [pc, #180]	; (80073fc <xTaskPriorityInherit+0xd0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	429a      	cmp	r2, r3
 800734e:	d246      	bcs.n	80073de <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	2b00      	cmp	r3, #0
 8007356:	db06      	blt.n	8007366 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007358:	4b28      	ldr	r3, [pc, #160]	; (80073fc <xTaskPriorityInherit+0xd0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6959      	ldr	r1, [r3, #20]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4a22      	ldr	r2, [pc, #136]	; (8007400 <xTaskPriorityInherit+0xd4>)
 8007378:	4413      	add	r3, r2
 800737a:	4299      	cmp	r1, r3
 800737c:	d101      	bne.n	8007382 <xTaskPriorityInherit+0x56>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <xTaskPriorityInherit+0x58>
 8007382:	2300      	movs	r3, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d022      	beq.n	80073ce <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	3304      	adds	r3, #4
 800738c:	4618      	mov	r0, r3
 800738e:	f7fd ff8b 	bl	80052a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007392:	4b1a      	ldr	r3, [pc, #104]	; (80073fc <xTaskPriorityInherit+0xd0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a0:	4b18      	ldr	r3, [pc, #96]	; (8007404 <xTaskPriorityInherit+0xd8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d903      	bls.n	80073b0 <xTaskPriorityInherit+0x84>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	4a15      	ldr	r2, [pc, #84]	; (8007404 <xTaskPriorityInherit+0xd8>)
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4a10      	ldr	r2, [pc, #64]	; (8007400 <xTaskPriorityInherit+0xd4>)
 80073be:	441a      	add	r2, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	3304      	adds	r3, #4
 80073c4:	4619      	mov	r1, r3
 80073c6:	4610      	mov	r0, r2
 80073c8:	f7fd ff13 	bl	80051f2 <vListInsertEnd>
 80073cc:	e004      	b.n	80073d8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073ce:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <xTaskPriorityInherit+0xd0>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80073d8:	2301      	movs	r3, #1
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	e008      	b.n	80073f0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073e2:	4b06      	ldr	r3, [pc, #24]	; (80073fc <xTaskPriorityInherit+0xd0>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d201      	bcs.n	80073f0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80073ec:	2301      	movs	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073f0:	68fb      	ldr	r3, [r7, #12]
	}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20000abc 	.word	0x20000abc
 8007400:	20000ac0 	.word	0x20000ac0
 8007404:	20000f98 	.word	0x20000f98

08007408 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007414:	2300      	movs	r3, #0
 8007416:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d056      	beq.n	80074cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800741e:	4b2e      	ldr	r3, [pc, #184]	; (80074d8 <xTaskPriorityDisinherit+0xd0>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	429a      	cmp	r2, r3
 8007426:	d00a      	beq.n	800743e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	60fb      	str	r3, [r7, #12]
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	60bb      	str	r3, [r7, #8]
}
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007460:	1e5a      	subs	r2, r3, #1
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746e:	429a      	cmp	r2, r3
 8007470:	d02c      	beq.n	80074cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007476:	2b00      	cmp	r3, #0
 8007478:	d128      	bne.n	80074cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	3304      	adds	r3, #4
 800747e:	4618      	mov	r0, r3
 8007480:	f7fd ff12 	bl	80052a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749c:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <xTaskPriorityDisinherit+0xd4>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d903      	bls.n	80074ac <xTaskPriorityDisinherit+0xa4>
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	4a0c      	ldr	r2, [pc, #48]	; (80074dc <xTaskPriorityDisinherit+0xd4>)
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b0:	4613      	mov	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4a09      	ldr	r2, [pc, #36]	; (80074e0 <xTaskPriorityDisinherit+0xd8>)
 80074ba:	441a      	add	r2, r3
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	3304      	adds	r3, #4
 80074c0:	4619      	mov	r1, r3
 80074c2:	4610      	mov	r0, r2
 80074c4:	f7fd fe95 	bl	80051f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074c8:	2301      	movs	r3, #1
 80074ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074cc:	697b      	ldr	r3, [r7, #20]
	}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20000abc 	.word	0x20000abc
 80074dc:	20000f98 	.word	0x20000f98
 80074e0:	20000ac0 	.word	0x20000ac0

080074e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074f2:	2301      	movs	r3, #1
 80074f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d06f      	beq.n	80075dc <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10a      	bne.n	800751a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	60fb      	str	r3, [r7, #12]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	429a      	cmp	r2, r3
 8007522:	d902      	bls.n	800752a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	61fb      	str	r3, [r7, #28]
 8007528:	e002      	b.n	8007530 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	69fa      	ldr	r2, [r7, #28]
 8007536:	429a      	cmp	r2, r3
 8007538:	d050      	beq.n	80075dc <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	429a      	cmp	r2, r3
 8007542:	d14b      	bne.n	80075dc <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007544:	4b27      	ldr	r3, [pc, #156]	; (80075e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	429a      	cmp	r2, r3
 800754c:	d10a      	bne.n	8007564 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	60bb      	str	r3, [r7, #8]
}
 8007560:	bf00      	nop
 8007562:	e7fe      	b.n	8007562 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	2b00      	cmp	r3, #0
 8007576:	db04      	blt.n	8007582 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	6959      	ldr	r1, [r3, #20]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4a15      	ldr	r2, [pc, #84]	; (80075e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007592:	4413      	add	r3, r2
 8007594:	4299      	cmp	r1, r3
 8007596:	d101      	bne.n	800759c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007598:	2301      	movs	r3, #1
 800759a:	e000      	b.n	800759e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800759c:	2300      	movs	r3, #0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01c      	beq.n	80075dc <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	3304      	adds	r3, #4
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fd fe7e 	bl	80052a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b0:	4b0e      	ldr	r3, [pc, #56]	; (80075ec <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d903      	bls.n	80075c0 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	4a0b      	ldr	r2, [pc, #44]	; (80075ec <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4a06      	ldr	r2, [pc, #24]	; (80075e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80075ce:	441a      	add	r2, r3
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	3304      	adds	r3, #4
 80075d4:	4619      	mov	r1, r3
 80075d6:	4610      	mov	r0, r2
 80075d8:	f7fd fe0b 	bl	80051f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075dc:	bf00      	nop
 80075de:	3720      	adds	r7, #32
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	20000abc 	.word	0x20000abc
 80075e8:	20000ac0 	.word	0x20000ac0
 80075ec:	20000f98 	.word	0x20000f98

080075f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075f4:	4b07      	ldr	r3, [pc, #28]	; (8007614 <pvTaskIncrementMutexHeldCount+0x24>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d004      	beq.n	8007606 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80075fc:	4b05      	ldr	r3, [pc, #20]	; (8007614 <pvTaskIncrementMutexHeldCount+0x24>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007602:	3201      	adds	r2, #1
 8007604:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007606:	4b03      	ldr	r3, [pc, #12]	; (8007614 <pvTaskIncrementMutexHeldCount+0x24>)
 8007608:	681b      	ldr	r3, [r3, #0]
	}
 800760a:	4618      	mov	r0, r3
 800760c:	46bd      	mov	sp, r7
 800760e:	bc80      	pop	{r7}
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	20000abc 	.word	0x20000abc

08007618 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007622:	4b21      	ldr	r3, [pc, #132]	; (80076a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007628:	4b20      	ldr	r3, [pc, #128]	; (80076ac <prvAddCurrentTaskToDelayedList+0x94>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3304      	adds	r3, #4
 800762e:	4618      	mov	r0, r3
 8007630:	f7fd fe3a 	bl	80052a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763a:	d10a      	bne.n	8007652 <prvAddCurrentTaskToDelayedList+0x3a>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007642:	4b1a      	ldr	r3, [pc, #104]	; (80076ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3304      	adds	r3, #4
 8007648:	4619      	mov	r1, r3
 800764a:	4819      	ldr	r0, [pc, #100]	; (80076b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800764c:	f7fd fdd1 	bl	80051f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007650:	e026      	b.n	80076a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4413      	add	r3, r2
 8007658:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800765a:	4b14      	ldr	r3, [pc, #80]	; (80076ac <prvAddCurrentTaskToDelayedList+0x94>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	429a      	cmp	r2, r3
 8007668:	d209      	bcs.n	800767e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800766a:	4b12      	ldr	r3, [pc, #72]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3304      	adds	r3, #4
 8007674:	4619      	mov	r1, r3
 8007676:	4610      	mov	r0, r2
 8007678:	f7fd fdde 	bl	8005238 <vListInsert>
}
 800767c:	e010      	b.n	80076a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800767e:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3304      	adds	r3, #4
 8007688:	4619      	mov	r1, r3
 800768a:	4610      	mov	r0, r2
 800768c:	f7fd fdd4 	bl	8005238 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	429a      	cmp	r2, r3
 8007698:	d202      	bcs.n	80076a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800769a:	4a08      	ldr	r2, [pc, #32]	; (80076bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6013      	str	r3, [r2, #0]
}
 80076a0:	bf00      	nop
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000f94 	.word	0x20000f94
 80076ac:	20000abc 	.word	0x20000abc
 80076b0:	20000f7c 	.word	0x20000f7c
 80076b4:	20000f4c 	.word	0x20000f4c
 80076b8:	20000f48 	.word	0x20000f48
 80076bc:	20000fb0 	.word	0x20000fb0

080076c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08a      	sub	sp, #40	; 0x28
 80076c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076ca:	f000 facb 	bl	8007c64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076ce:	4b1c      	ldr	r3, [pc, #112]	; (8007740 <xTimerCreateTimerTask+0x80>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d021      	beq.n	800771a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076da:	2300      	movs	r3, #0
 80076dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076de:	1d3a      	adds	r2, r7, #4
 80076e0:	f107 0108 	add.w	r1, r7, #8
 80076e4:	f107 030c 	add.w	r3, r7, #12
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fd fd3d 	bl	8005168 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	9202      	str	r2, [sp, #8]
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	2302      	movs	r3, #2
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	2300      	movs	r3, #0
 80076fe:	460a      	mov	r2, r1
 8007700:	4910      	ldr	r1, [pc, #64]	; (8007744 <xTimerCreateTimerTask+0x84>)
 8007702:	4811      	ldr	r0, [pc, #68]	; (8007748 <xTimerCreateTimerTask+0x88>)
 8007704:	f7fe fe3e 	bl	8006384 <xTaskCreateStatic>
 8007708:	4603      	mov	r3, r0
 800770a:	4a10      	ldr	r2, [pc, #64]	; (800774c <xTimerCreateTimerTask+0x8c>)
 800770c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800770e:	4b0f      	ldr	r3, [pc, #60]	; (800774c <xTimerCreateTimerTask+0x8c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007716:	2301      	movs	r3, #1
 8007718:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	613b      	str	r3, [r7, #16]
}
 8007732:	bf00      	nop
 8007734:	e7fe      	b.n	8007734 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007736:	697b      	ldr	r3, [r7, #20]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20000fec 	.word	0x20000fec
 8007744:	0800d04c 	.word	0x0800d04c
 8007748:	0800786d 	.word	0x0800786d
 800774c:	20000ff0 	.word	0x20000ff0

08007750 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08a      	sub	sp, #40	; 0x28
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800775e:	2300      	movs	r3, #0
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	623b      	str	r3, [r7, #32]
}
 800777a:	bf00      	nop
 800777c:	e7fe      	b.n	800777c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800777e:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <xTimerGenericCommand+0x98>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d02a      	beq.n	80077dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b05      	cmp	r3, #5
 8007796:	dc18      	bgt.n	80077ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007798:	f7ff fdaa 	bl	80072f0 <xTaskGetSchedulerState>
 800779c:	4603      	mov	r3, r0
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d109      	bne.n	80077b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077a2:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <xTimerGenericCommand+0x98>)
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	f107 0110 	add.w	r1, r7, #16
 80077aa:	2300      	movs	r3, #0
 80077ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ae:	f7fd ff4f 	bl	8005650 <xQueueGenericSend>
 80077b2:	6278      	str	r0, [r7, #36]	; 0x24
 80077b4:	e012      	b.n	80077dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077b6:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <xTimerGenericCommand+0x98>)
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	f107 0110 	add.w	r1, r7, #16
 80077be:	2300      	movs	r3, #0
 80077c0:	2200      	movs	r2, #0
 80077c2:	f7fd ff45 	bl	8005650 <xQueueGenericSend>
 80077c6:	6278      	str	r0, [r7, #36]	; 0x24
 80077c8:	e008      	b.n	80077dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077ca:	4b07      	ldr	r3, [pc, #28]	; (80077e8 <xTimerGenericCommand+0x98>)
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	f107 0110 	add.w	r1, r7, #16
 80077d2:	2300      	movs	r3, #0
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	f7fe f839 	bl	800584c <xQueueGenericSendFromISR>
 80077da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3728      	adds	r7, #40	; 0x28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000fec 	.word	0x20000fec

080077ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077f6:	4b1c      	ldr	r3, [pc, #112]	; (8007868 <prvProcessExpiredTimer+0x7c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	3304      	adds	r3, #4
 8007804:	4618      	mov	r0, r3
 8007806:	f7fd fd4f 	bl	80052a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d122      	bne.n	8007858 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	699a      	ldr	r2, [r3, #24]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	18d1      	adds	r1, r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	6978      	ldr	r0, [r7, #20]
 8007820:	f000 f8c8 	bl	80079b4 <prvInsertTimerInActiveList>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d016      	beq.n	8007858 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800782a:	2300      	movs	r3, #0
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	2300      	movs	r3, #0
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	2100      	movs	r1, #0
 8007834:	6978      	ldr	r0, [r7, #20]
 8007836:	f7ff ff8b 	bl	8007750 <xTimerGenericCommand>
 800783a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10a      	bne.n	8007858 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	60fb      	str	r3, [r7, #12]
}
 8007854:	bf00      	nop
 8007856:	e7fe      	b.n	8007856 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	6978      	ldr	r0, [r7, #20]
 800785e:	4798      	blx	r3
}
 8007860:	bf00      	nop
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20000fe4 	.word	0x20000fe4

0800786c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007874:	f107 0308 	add.w	r3, r7, #8
 8007878:	4618      	mov	r0, r3
 800787a:	f000 f857 	bl	800792c <prvGetNextExpireTime>
 800787e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	4619      	mov	r1, r3
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 f803 	bl	8007890 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800788a:	f000 f8d5 	bl	8007a38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800788e:	e7f1      	b.n	8007874 <prvTimerTask+0x8>

08007890 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800789a:	f7ff f931 	bl	8006b00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800789e:	f107 0308 	add.w	r3, r7, #8
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 f866 	bl	8007974 <prvSampleTimeNow>
 80078a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d130      	bne.n	8007912 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10a      	bne.n	80078cc <prvProcessTimerOrBlockTask+0x3c>
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d806      	bhi.n	80078cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078be:	f7ff f92d 	bl	8006b1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078c2:	68f9      	ldr	r1, [r7, #12]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff ff91 	bl	80077ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078ca:	e024      	b.n	8007916 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078d2:	4b13      	ldr	r3, [pc, #76]	; (8007920 <prvProcessTimerOrBlockTask+0x90>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	bf0c      	ite	eq
 80078dc:	2301      	moveq	r3, #1
 80078de:	2300      	movne	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078e4:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <prvProcessTimerOrBlockTask+0x94>)
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	4619      	mov	r1, r3
 80078f2:	f7fe fd13 	bl	800631c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078f6:	f7ff f911 	bl	8006b1c <xTaskResumeAll>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10a      	bne.n	8007916 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007900:	4b09      	ldr	r3, [pc, #36]	; (8007928 <prvProcessTimerOrBlockTask+0x98>)
 8007902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	f3bf 8f6f 	isb	sy
}
 8007910:	e001      	b.n	8007916 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007912:	f7ff f903 	bl	8006b1c <xTaskResumeAll>
}
 8007916:	bf00      	nop
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20000fe8 	.word	0x20000fe8
 8007924:	20000fec 	.word	0x20000fec
 8007928:	e000ed04 	.word	0xe000ed04

0800792c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007934:	4b0e      	ldr	r3, [pc, #56]	; (8007970 <prvGetNextExpireTime+0x44>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	bf0c      	ite	eq
 800793e:	2301      	moveq	r3, #1
 8007940:	2300      	movne	r3, #0
 8007942:	b2db      	uxtb	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d105      	bne.n	800795e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007952:	4b07      	ldr	r3, [pc, #28]	; (8007970 <prvGetNextExpireTime+0x44>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	e001      	b.n	8007962 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007962:	68fb      	ldr	r3, [r7, #12]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	bc80      	pop	{r7}
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	20000fe4 	.word	0x20000fe4

08007974 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800797c:	f7ff f96c 	bl	8006c58 <xTaskGetTickCount>
 8007980:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007982:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <prvSampleTimeNow+0x3c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	429a      	cmp	r2, r3
 800798a:	d205      	bcs.n	8007998 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800798c:	f000 f908 	bl	8007ba0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	e002      	b.n	800799e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800799e:	4a04      	ldr	r2, [pc, #16]	; (80079b0 <prvSampleTimeNow+0x3c>)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079a4:	68fb      	ldr	r3, [r7, #12]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000ff4 	.word	0x20000ff4

080079b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079c2:	2300      	movs	r3, #0
 80079c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d812      	bhi.n	8007a00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	1ad2      	subs	r2, r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d302      	bcc.n	80079ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079e8:	2301      	movs	r3, #1
 80079ea:	617b      	str	r3, [r7, #20]
 80079ec:	e01b      	b.n	8007a26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079ee:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <prvInsertTimerInActiveList+0x7c>)
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3304      	adds	r3, #4
 80079f6:	4619      	mov	r1, r3
 80079f8:	4610      	mov	r0, r2
 80079fa:	f7fd fc1d 	bl	8005238 <vListInsert>
 80079fe:	e012      	b.n	8007a26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d206      	bcs.n	8007a16 <prvInsertTimerInActiveList+0x62>
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d302      	bcc.n	8007a16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a10:	2301      	movs	r3, #1
 8007a12:	617b      	str	r3, [r7, #20]
 8007a14:	e007      	b.n	8007a26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a16:	4b07      	ldr	r3, [pc, #28]	; (8007a34 <prvInsertTimerInActiveList+0x80>)
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f7fd fc09 	bl	8005238 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a26:	697b      	ldr	r3, [r7, #20]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20000fe8 	.word	0x20000fe8
 8007a34:	20000fe4 	.word	0x20000fe4

08007a38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08e      	sub	sp, #56	; 0x38
 8007a3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a3e:	e09d      	b.n	8007b7c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	da18      	bge.n	8007a78 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a46:	1d3b      	adds	r3, r7, #4
 8007a48:	3304      	adds	r3, #4
 8007a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	61fb      	str	r3, [r7, #28]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a6e:	6850      	ldr	r0, [r2, #4]
 8007a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a72:	6892      	ldr	r2, [r2, #8]
 8007a74:	4611      	mov	r1, r2
 8007a76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	db7e      	blt.n	8007b7c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d004      	beq.n	8007a94 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fd fc0a 	bl	80052a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a94:	463b      	mov	r3, r7
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff ff6c 	bl	8007974 <prvSampleTimeNow>
 8007a9c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b09      	cmp	r3, #9
 8007aa2:	d86a      	bhi.n	8007b7a <prvProcessReceivedCommands+0x142>
 8007aa4:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <prvProcessReceivedCommands+0x74>)
 8007aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aaa:	bf00      	nop
 8007aac:	08007ad5 	.word	0x08007ad5
 8007ab0:	08007ad5 	.word	0x08007ad5
 8007ab4:	08007ad5 	.word	0x08007ad5
 8007ab8:	08007b7d 	.word	0x08007b7d
 8007abc:	08007b31 	.word	0x08007b31
 8007ac0:	08007b69 	.word	0x08007b69
 8007ac4:	08007ad5 	.word	0x08007ad5
 8007ac8:	08007ad5 	.word	0x08007ad5
 8007acc:	08007b7d 	.word	0x08007b7d
 8007ad0:	08007b31 	.word	0x08007b31
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	18d1      	adds	r1, r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ae2:	f7ff ff67 	bl	80079b4 <prvInsertTimerInActiveList>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d047      	beq.n	8007b7c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007af2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d13f      	bne.n	8007b7c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	441a      	add	r2, r3
 8007b04:	2300      	movs	r3, #0
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b0e:	f7ff fe1f 	bl	8007750 <xTimerGenericCommand>
 8007b12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d130      	bne.n	8007b7c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	61bb      	str	r3, [r7, #24]
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10a      	bne.n	8007b54 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	617b      	str	r3, [r7, #20]
}
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	18d1      	adds	r1, r2, r3
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b62:	f7ff ff27 	bl	80079b4 <prvInsertTimerInActiveList>
					break;
 8007b66:	e009      	b.n	8007b7c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d104      	bne.n	8007b7c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b74:	f000 fb6e 	bl	8008254 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b78:	e000      	b.n	8007b7c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007b7a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b7c:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <prvProcessReceivedCommands+0x164>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	1d39      	adds	r1, r7, #4
 8007b82:	2200      	movs	r2, #0
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fd ff87 	bl	8005a98 <xQueueReceive>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f47f af57 	bne.w	8007a40 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007b92:	bf00      	nop
 8007b94:	bf00      	nop
 8007b96:	3730      	adds	r7, #48	; 0x30
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	20000fec 	.word	0x20000fec

08007ba0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ba6:	e045      	b.n	8007c34 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ba8:	4b2c      	ldr	r3, [pc, #176]	; (8007c5c <prvSwitchTimerLists+0xbc>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bb2:	4b2a      	ldr	r3, [pc, #168]	; (8007c5c <prvSwitchTimerLists+0xbc>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fd fb71 	bl	80052a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d12e      	bne.n	8007c34 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	4413      	add	r3, r2
 8007bde:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d90e      	bls.n	8007c06 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bf4:	4b19      	ldr	r3, [pc, #100]	; (8007c5c <prvSwitchTimerLists+0xbc>)
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f7fd fb1a 	bl	8005238 <vListInsert>
 8007c04:	e016      	b.n	8007c34 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c06:	2300      	movs	r3, #0
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	2100      	movs	r1, #0
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff fd9d 	bl	8007750 <xTimerGenericCommand>
 8007c16:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	603b      	str	r3, [r7, #0]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c34:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <prvSwitchTimerLists+0xbc>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1b4      	bne.n	8007ba8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c3e:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <prvSwitchTimerLists+0xbc>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c44:	4b06      	ldr	r3, [pc, #24]	; (8007c60 <prvSwitchTimerLists+0xc0>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a04      	ldr	r2, [pc, #16]	; (8007c5c <prvSwitchTimerLists+0xbc>)
 8007c4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c4c:	4a04      	ldr	r2, [pc, #16]	; (8007c60 <prvSwitchTimerLists+0xc0>)
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	6013      	str	r3, [r2, #0]
}
 8007c52:	bf00      	nop
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000fe4 	.word	0x20000fe4
 8007c60:	20000fe8 	.word	0x20000fe8

08007c64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c6a:	f000 f92f 	bl	8007ecc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c6e:	4b15      	ldr	r3, [pc, #84]	; (8007cc4 <prvCheckForValidListAndQueue+0x60>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d120      	bne.n	8007cb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c76:	4814      	ldr	r0, [pc, #80]	; (8007cc8 <prvCheckForValidListAndQueue+0x64>)
 8007c78:	f7fd fa90 	bl	800519c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c7c:	4813      	ldr	r0, [pc, #76]	; (8007ccc <prvCheckForValidListAndQueue+0x68>)
 8007c7e:	f7fd fa8d 	bl	800519c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c82:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <prvCheckForValidListAndQueue+0x6c>)
 8007c84:	4a10      	ldr	r2, [pc, #64]	; (8007cc8 <prvCheckForValidListAndQueue+0x64>)
 8007c86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c88:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <prvCheckForValidListAndQueue+0x70>)
 8007c8a:	4a10      	ldr	r2, [pc, #64]	; (8007ccc <prvCheckForValidListAndQueue+0x68>)
 8007c8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <prvCheckForValidListAndQueue+0x74>)
 8007c94:	4a11      	ldr	r2, [pc, #68]	; (8007cdc <prvCheckForValidListAndQueue+0x78>)
 8007c96:	2110      	movs	r1, #16
 8007c98:	200a      	movs	r0, #10
 8007c9a:	f7fd fb97 	bl	80053cc <xQueueGenericCreateStatic>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	4a08      	ldr	r2, [pc, #32]	; (8007cc4 <prvCheckForValidListAndQueue+0x60>)
 8007ca2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ca4:	4b07      	ldr	r3, [pc, #28]	; (8007cc4 <prvCheckForValidListAndQueue+0x60>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <prvCheckForValidListAndQueue+0x60>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	490b      	ldr	r1, [pc, #44]	; (8007ce0 <prvCheckForValidListAndQueue+0x7c>)
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe fae0 	bl	8006278 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cb8:	f000 f938 	bl	8007f2c <vPortExitCritical>
}
 8007cbc:	bf00      	nop
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20000fec 	.word	0x20000fec
 8007cc8:	20000fbc 	.word	0x20000fbc
 8007ccc:	20000fd0 	.word	0x20000fd0
 8007cd0:	20000fe4 	.word	0x20000fe4
 8007cd4:	20000fe8 	.word	0x20000fe8
 8007cd8:	20001098 	.word	0x20001098
 8007cdc:	20000ff8 	.word	0x20000ff8
 8007ce0:	0800d054 	.word	0x0800d054

08007ce4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3b04      	subs	r3, #4
 8007cf4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3b04      	subs	r3, #4
 8007d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f023 0201 	bic.w	r2, r3, #1
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3b04      	subs	r3, #4
 8007d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d14:	4a08      	ldr	r2, [pc, #32]	; (8007d38 <pxPortInitialiseStack+0x54>)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3b14      	subs	r3, #20
 8007d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3b20      	subs	r3, #32
 8007d2a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bc80      	pop	{r7}
 8007d36:	4770      	bx	lr
 8007d38:	08007d3d 	.word	0x08007d3d

08007d3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d46:	4b12      	ldr	r3, [pc, #72]	; (8007d90 <prvTaskExitError+0x54>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4e:	d00a      	beq.n	8007d66 <prvTaskExitError+0x2a>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	60fb      	str	r3, [r7, #12]
}
 8007d62:	bf00      	nop
 8007d64:	e7fe      	b.n	8007d64 <prvTaskExitError+0x28>
	__asm volatile
 8007d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	60bb      	str	r3, [r7, #8]
}
 8007d78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d7a:	bf00      	nop
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0fc      	beq.n	8007d7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d82:	bf00      	nop
 8007d84:	bf00      	nop
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc80      	pop	{r7}
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	20000018 	.word	0x20000018
	...

08007da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <pxCurrentTCBConst2>)
 8007da2:	6819      	ldr	r1, [r3, #0]
 8007da4:	6808      	ldr	r0, [r1, #0]
 8007da6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007daa:	f380 8809 	msr	PSP, r0
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f04f 0000 	mov.w	r0, #0
 8007db6:	f380 8811 	msr	BASEPRI, r0
 8007dba:	f04e 0e0d 	orr.w	lr, lr, #13
 8007dbe:	4770      	bx	lr

08007dc0 <pxCurrentTCBConst2>:
 8007dc0:	20000abc 	.word	0x20000abc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop

08007dc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007dc8:	4806      	ldr	r0, [pc, #24]	; (8007de4 <prvPortStartFirstTask+0x1c>)
 8007dca:	6800      	ldr	r0, [r0, #0]
 8007dcc:	6800      	ldr	r0, [r0, #0]
 8007dce:	f380 8808 	msr	MSP, r0
 8007dd2:	b662      	cpsie	i
 8007dd4:	b661      	cpsie	f
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	df00      	svc	0
 8007de0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007de2:	bf00      	nop
 8007de4:	e000ed08 	.word	0xe000ed08

08007de8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dee:	4b32      	ldr	r3, [pc, #200]	; (8007eb8 <xPortStartScheduler+0xd0>)
 8007df0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	22ff      	movs	r2, #255	; 0xff
 8007dfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	4b2a      	ldr	r3, [pc, #168]	; (8007ebc <xPortStartScheduler+0xd4>)
 8007e14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e16:	4b2a      	ldr	r3, [pc, #168]	; (8007ec0 <xPortStartScheduler+0xd8>)
 8007e18:	2207      	movs	r2, #7
 8007e1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e1c:	e009      	b.n	8007e32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e1e:	4b28      	ldr	r3, [pc, #160]	; (8007ec0 <xPortStartScheduler+0xd8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	4a26      	ldr	r2, [pc, #152]	; (8007ec0 <xPortStartScheduler+0xd8>)
 8007e26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3a:	2b80      	cmp	r3, #128	; 0x80
 8007e3c:	d0ef      	beq.n	8007e1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e3e:	4b20      	ldr	r3, [pc, #128]	; (8007ec0 <xPortStartScheduler+0xd8>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f1c3 0307 	rsb	r3, r3, #7
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d00a      	beq.n	8007e60 <xPortStartScheduler+0x78>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	60bb      	str	r3, [r7, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e60:	4b17      	ldr	r3, [pc, #92]	; (8007ec0 <xPortStartScheduler+0xd8>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	4a16      	ldr	r2, [pc, #88]	; (8007ec0 <xPortStartScheduler+0xd8>)
 8007e68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e6a:	4b15      	ldr	r3, [pc, #84]	; (8007ec0 <xPortStartScheduler+0xd8>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e72:	4a13      	ldr	r2, [pc, #76]	; (8007ec0 <xPortStartScheduler+0xd8>)
 8007e74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e7e:	4b11      	ldr	r3, [pc, #68]	; (8007ec4 <xPortStartScheduler+0xdc>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a10      	ldr	r2, [pc, #64]	; (8007ec4 <xPortStartScheduler+0xdc>)
 8007e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e8a:	4b0e      	ldr	r3, [pc, #56]	; (8007ec4 <xPortStartScheduler+0xdc>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a0d      	ldr	r2, [pc, #52]	; (8007ec4 <xPortStartScheduler+0xdc>)
 8007e90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e96:	f000 f8b9 	bl	800800c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <xPortStartScheduler+0xe0>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ea0:	f7ff ff92 	bl	8007dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ea4:	f7fe ffb6 	bl	8006e14 <vTaskSwitchContext>
	prvTaskExitError();
 8007ea8:	f7ff ff48 	bl	8007d3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	e000e400 	.word	0xe000e400
 8007ebc:	200010e8 	.word	0x200010e8
 8007ec0:	200010ec 	.word	0x200010ec
 8007ec4:	e000ed20 	.word	0xe000ed20
 8007ec8:	20000018 	.word	0x20000018

08007ecc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	607b      	str	r3, [r7, #4]
}
 8007ee4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ee6:	4b0f      	ldr	r3, [pc, #60]	; (8007f24 <vPortEnterCritical+0x58>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3301      	adds	r3, #1
 8007eec:	4a0d      	ldr	r2, [pc, #52]	; (8007f24 <vPortEnterCritical+0x58>)
 8007eee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ef0:	4b0c      	ldr	r3, [pc, #48]	; (8007f24 <vPortEnterCritical+0x58>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d10f      	bne.n	8007f18 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <vPortEnterCritical+0x5c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	603b      	str	r3, [r7, #0]
}
 8007f14:	bf00      	nop
 8007f16:	e7fe      	b.n	8007f16 <vPortEnterCritical+0x4a>
	}
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	20000018 	.word	0x20000018
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f32:	4b11      	ldr	r3, [pc, #68]	; (8007f78 <vPortExitCritical+0x4c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10a      	bne.n	8007f50 <vPortExitCritical+0x24>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	607b      	str	r3, [r7, #4]
}
 8007f4c:	bf00      	nop
 8007f4e:	e7fe      	b.n	8007f4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f50:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <vPortExitCritical+0x4c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	4a08      	ldr	r2, [pc, #32]	; (8007f78 <vPortExitCritical+0x4c>)
 8007f58:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f5a:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <vPortExitCritical+0x4c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d105      	bne.n	8007f6e <vPortExitCritical+0x42>
 8007f62:	2300      	movs	r3, #0
 8007f64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	f383 8811 	msr	BASEPRI, r3
}
 8007f6c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f6e:	bf00      	nop
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bc80      	pop	{r7}
 8007f76:	4770      	bx	lr
 8007f78:	20000018 	.word	0x20000018
 8007f7c:	00000000 	.word	0x00000000

08007f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f80:	f3ef 8009 	mrs	r0, PSP
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	4b0d      	ldr	r3, [pc, #52]	; (8007fc0 <pxCurrentTCBConst>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f90:	6010      	str	r0, [r2, #0]
 8007f92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007f96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f9a:	f380 8811 	msr	BASEPRI, r0
 8007f9e:	f7fe ff39 	bl	8006e14 <vTaskSwitchContext>
 8007fa2:	f04f 0000 	mov.w	r0, #0
 8007fa6:	f380 8811 	msr	BASEPRI, r0
 8007faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007fae:	6819      	ldr	r1, [r3, #0]
 8007fb0:	6808      	ldr	r0, [r1, #0]
 8007fb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007fb6:	f380 8809 	msr	PSP, r0
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	4770      	bx	lr

08007fc0 <pxCurrentTCBConst>:
 8007fc0:	20000abc 	.word	0x20000abc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop

08007fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	607b      	str	r3, [r7, #4]
}
 8007fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fe2:	f7fe fe59 	bl	8006c98 <xTaskIncrementTick>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fec:	4b06      	ldr	r3, [pc, #24]	; (8008008 <SysTick_Handler+0x40>)
 8007fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f383 8811 	msr	BASEPRI, r3
}
 8007ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	e000ed04 	.word	0xe000ed04

0800800c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008010:	4b0a      	ldr	r3, [pc, #40]	; (800803c <vPortSetupTimerInterrupt+0x30>)
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008016:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <vPortSetupTimerInterrupt+0x34>)
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800801c:	4b09      	ldr	r3, [pc, #36]	; (8008044 <vPortSetupTimerInterrupt+0x38>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a09      	ldr	r2, [pc, #36]	; (8008048 <vPortSetupTimerInterrupt+0x3c>)
 8008022:	fba2 2303 	umull	r2, r3, r2, r3
 8008026:	099b      	lsrs	r3, r3, #6
 8008028:	4a08      	ldr	r2, [pc, #32]	; (800804c <vPortSetupTimerInterrupt+0x40>)
 800802a:	3b01      	subs	r3, #1
 800802c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800802e:	4b03      	ldr	r3, [pc, #12]	; (800803c <vPortSetupTimerInterrupt+0x30>)
 8008030:	2207      	movs	r2, #7
 8008032:	601a      	str	r2, [r3, #0]
}
 8008034:	bf00      	nop
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr
 800803c:	e000e010 	.word	0xe000e010
 8008040:	e000e018 	.word	0xe000e018
 8008044:	2000000c 	.word	0x2000000c
 8008048:	10624dd3 	.word	0x10624dd3
 800804c:	e000e014 	.word	0xe000e014

08008050 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008056:	f3ef 8305 	mrs	r3, IPSR
 800805a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b0f      	cmp	r3, #15
 8008060:	d914      	bls.n	800808c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008062:	4a16      	ldr	r2, [pc, #88]	; (80080bc <vPortValidateInterruptPriority+0x6c>)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4413      	add	r3, r2
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800806c:	4b14      	ldr	r3, [pc, #80]	; (80080c0 <vPortValidateInterruptPriority+0x70>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	7afa      	ldrb	r2, [r7, #11]
 8008072:	429a      	cmp	r2, r3
 8008074:	d20a      	bcs.n	800808c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	607b      	str	r3, [r7, #4]
}
 8008088:	bf00      	nop
 800808a:	e7fe      	b.n	800808a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800808c:	4b0d      	ldr	r3, [pc, #52]	; (80080c4 <vPortValidateInterruptPriority+0x74>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008094:	4b0c      	ldr	r3, [pc, #48]	; (80080c8 <vPortValidateInterruptPriority+0x78>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	429a      	cmp	r2, r3
 800809a:	d90a      	bls.n	80080b2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	603b      	str	r3, [r7, #0]
}
 80080ae:	bf00      	nop
 80080b0:	e7fe      	b.n	80080b0 <vPortValidateInterruptPriority+0x60>
	}
 80080b2:	bf00      	nop
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bc80      	pop	{r7}
 80080ba:	4770      	bx	lr
 80080bc:	e000e3f0 	.word	0xe000e3f0
 80080c0:	200010e8 	.word	0x200010e8
 80080c4:	e000ed0c 	.word	0xe000ed0c
 80080c8:	200010ec 	.word	0x200010ec

080080cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b08a      	sub	sp, #40	; 0x28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080d4:	2300      	movs	r3, #0
 80080d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080d8:	f7fe fd12 	bl	8006b00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080dc:	4b58      	ldr	r3, [pc, #352]	; (8008240 <pvPortMalloc+0x174>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080e4:	f000 f910 	bl	8008308 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080e8:	4b56      	ldr	r3, [pc, #344]	; (8008244 <pvPortMalloc+0x178>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4013      	ands	r3, r2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f040 808e 	bne.w	8008212 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d01d      	beq.n	8008138 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80080fc:	2208      	movs	r2, #8
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	2b00      	cmp	r3, #0
 800810c:	d014      	beq.n	8008138 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f023 0307 	bic.w	r3, r3, #7
 8008114:	3308      	adds	r3, #8
 8008116:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <pvPortMalloc+0x6c>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	617b      	str	r3, [r7, #20]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d069      	beq.n	8008212 <pvPortMalloc+0x146>
 800813e:	4b42      	ldr	r3, [pc, #264]	; (8008248 <pvPortMalloc+0x17c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	429a      	cmp	r2, r3
 8008146:	d864      	bhi.n	8008212 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008148:	4b40      	ldr	r3, [pc, #256]	; (800824c <pvPortMalloc+0x180>)
 800814a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800814c:	4b3f      	ldr	r3, [pc, #252]	; (800824c <pvPortMalloc+0x180>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008152:	e004      	b.n	800815e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	429a      	cmp	r2, r3
 8008166:	d903      	bls.n	8008170 <pvPortMalloc+0xa4>
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1f1      	bne.n	8008154 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008170:	4b33      	ldr	r3, [pc, #204]	; (8008240 <pvPortMalloc+0x174>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008176:	429a      	cmp	r2, r3
 8008178:	d04b      	beq.n	8008212 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2208      	movs	r2, #8
 8008180:	4413      	add	r3, r2
 8008182:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	1ad2      	subs	r2, r2, r3
 8008194:	2308      	movs	r3, #8
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	429a      	cmp	r2, r3
 800819a:	d91f      	bls.n	80081dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800819c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4413      	add	r3, r2
 80081a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00a      	beq.n	80081c4 <pvPortMalloc+0xf8>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	613b      	str	r3, [r7, #16]
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	1ad2      	subs	r2, r2, r3
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081d6:	69b8      	ldr	r0, [r7, #24]
 80081d8:	f000 f8f8 	bl	80083cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081dc:	4b1a      	ldr	r3, [pc, #104]	; (8008248 <pvPortMalloc+0x17c>)
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	4a18      	ldr	r2, [pc, #96]	; (8008248 <pvPortMalloc+0x17c>)
 80081e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081ea:	4b17      	ldr	r3, [pc, #92]	; (8008248 <pvPortMalloc+0x17c>)
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	4b18      	ldr	r3, [pc, #96]	; (8008250 <pvPortMalloc+0x184>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d203      	bcs.n	80081fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081f6:	4b14      	ldr	r3, [pc, #80]	; (8008248 <pvPortMalloc+0x17c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a15      	ldr	r2, [pc, #84]	; (8008250 <pvPortMalloc+0x184>)
 80081fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	4b10      	ldr	r3, [pc, #64]	; (8008244 <pvPortMalloc+0x178>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	431a      	orrs	r2, r3
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008212:	f7fe fc83 	bl	8006b1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <pvPortMalloc+0x16a>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	60fb      	str	r3, [r7, #12]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <pvPortMalloc+0x168>
	return pvReturn;
 8008236:	69fb      	ldr	r3, [r7, #28]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3728      	adds	r7, #40	; 0x28
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	20002400 	.word	0x20002400
 8008244:	2000240c 	.word	0x2000240c
 8008248:	20002404 	.word	0x20002404
 800824c:	200023f8 	.word	0x200023f8
 8008250:	20002408 	.word	0x20002408

08008254 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d048      	beq.n	80082f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008266:	2308      	movs	r3, #8
 8008268:	425b      	negs	r3, r3
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	4413      	add	r3, r2
 800826e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	4b21      	ldr	r3, [pc, #132]	; (8008300 <vPortFree+0xac>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4013      	ands	r3, r2
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10a      	bne.n	8008298 <vPortFree+0x44>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	60fb      	str	r3, [r7, #12]
}
 8008294:	bf00      	nop
 8008296:	e7fe      	b.n	8008296 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00a      	beq.n	80082b6 <vPortFree+0x62>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	60bb      	str	r3, [r7, #8]
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	4b11      	ldr	r3, [pc, #68]	; (8008300 <vPortFree+0xac>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4013      	ands	r3, r2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d019      	beq.n	80082f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d115      	bne.n	80082f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <vPortFree+0xac>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	43db      	mvns	r3, r3
 80082d6:	401a      	ands	r2, r3
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082dc:	f7fe fc10 	bl	8006b00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	4b07      	ldr	r3, [pc, #28]	; (8008304 <vPortFree+0xb0>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4413      	add	r3, r2
 80082ea:	4a06      	ldr	r2, [pc, #24]	; (8008304 <vPortFree+0xb0>)
 80082ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082ee:	6938      	ldr	r0, [r7, #16]
 80082f0:	f000 f86c 	bl	80083cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80082f4:	f7fe fc12 	bl	8006b1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082f8:	bf00      	nop
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	2000240c 	.word	0x2000240c
 8008304:	20002404 	.word	0x20002404

08008308 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800830e:	f241 3308 	movw	r3, #4872	; 0x1308
 8008312:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008314:	4b27      	ldr	r3, [pc, #156]	; (80083b4 <prvHeapInit+0xac>)
 8008316:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00c      	beq.n	800833c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3307      	adds	r3, #7
 8008326:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f023 0307 	bic.w	r3, r3, #7
 800832e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	4a1f      	ldr	r2, [pc, #124]	; (80083b4 <prvHeapInit+0xac>)
 8008338:	4413      	add	r3, r2
 800833a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008340:	4a1d      	ldr	r2, [pc, #116]	; (80083b8 <prvHeapInit+0xb0>)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008346:	4b1c      	ldr	r3, [pc, #112]	; (80083b8 <prvHeapInit+0xb0>)
 8008348:	2200      	movs	r2, #0
 800834a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	4413      	add	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008354:	2208      	movs	r2, #8
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	1a9b      	subs	r3, r3, r2
 800835a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 0307 	bic.w	r3, r3, #7
 8008362:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4a15      	ldr	r2, [pc, #84]	; (80083bc <prvHeapInit+0xb4>)
 8008368:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800836a:	4b14      	ldr	r3, [pc, #80]	; (80083bc <prvHeapInit+0xb4>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2200      	movs	r2, #0
 8008370:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008372:	4b12      	ldr	r3, [pc, #72]	; (80083bc <prvHeapInit+0xb4>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	1ad2      	subs	r2, r2, r3
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008388:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <prvHeapInit+0xb4>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	4a0a      	ldr	r2, [pc, #40]	; (80083c0 <prvHeapInit+0xb8>)
 8008396:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	4a09      	ldr	r2, [pc, #36]	; (80083c4 <prvHeapInit+0xbc>)
 800839e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083a0:	4b09      	ldr	r3, [pc, #36]	; (80083c8 <prvHeapInit+0xc0>)
 80083a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083a6:	601a      	str	r2, [r3, #0]
}
 80083a8:	bf00      	nop
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bc80      	pop	{r7}
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	200010f0 	.word	0x200010f0
 80083b8:	200023f8 	.word	0x200023f8
 80083bc:	20002400 	.word	0x20002400
 80083c0:	20002408 	.word	0x20002408
 80083c4:	20002404 	.word	0x20002404
 80083c8:	2000240c 	.word	0x2000240c

080083cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083d4:	4b27      	ldr	r3, [pc, #156]	; (8008474 <prvInsertBlockIntoFreeList+0xa8>)
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	e002      	b.n	80083e0 <prvInsertBlockIntoFreeList+0x14>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d8f7      	bhi.n	80083da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	4413      	add	r3, r2
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d108      	bne.n	800840e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	441a      	add	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	441a      	add	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	429a      	cmp	r2, r3
 8008420:	d118      	bne.n	8008454 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	4b14      	ldr	r3, [pc, #80]	; (8008478 <prvInsertBlockIntoFreeList+0xac>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	429a      	cmp	r2, r3
 800842c:	d00d      	beq.n	800844a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	441a      	add	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	e008      	b.n	800845c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800844a:	4b0b      	ldr	r3, [pc, #44]	; (8008478 <prvInsertBlockIntoFreeList+0xac>)
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	e003      	b.n	800845c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	429a      	cmp	r2, r3
 8008462:	d002      	beq.n	800846a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800846a:	bf00      	nop
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	bc80      	pop	{r7}
 8008472:	4770      	bx	lr
 8008474:	200023f8 	.word	0x200023f8
 8008478:	20002400 	.word	0x20002400

0800847c <atoi>:
 800847c:	220a      	movs	r2, #10
 800847e:	2100      	movs	r1, #0
 8008480:	f000 b880 	b.w	8008584 <strtol>

08008484 <_strtol_l.constprop.0>:
 8008484:	2b01      	cmp	r3, #1
 8008486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800848a:	4686      	mov	lr, r0
 800848c:	4690      	mov	r8, r2
 800848e:	d001      	beq.n	8008494 <_strtol_l.constprop.0+0x10>
 8008490:	2b24      	cmp	r3, #36	; 0x24
 8008492:	d906      	bls.n	80084a2 <_strtol_l.constprop.0+0x1e>
 8008494:	f001 f9b0 	bl	80097f8 <__errno>
 8008498:	2316      	movs	r3, #22
 800849a:	6003      	str	r3, [r0, #0]
 800849c:	2000      	movs	r0, #0
 800849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a2:	460d      	mov	r5, r1
 80084a4:	4835      	ldr	r0, [pc, #212]	; (800857c <_strtol_l.constprop.0+0xf8>)
 80084a6:	462a      	mov	r2, r5
 80084a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084ac:	5d06      	ldrb	r6, [r0, r4]
 80084ae:	f016 0608 	ands.w	r6, r6, #8
 80084b2:	d1f8      	bne.n	80084a6 <_strtol_l.constprop.0+0x22>
 80084b4:	2c2d      	cmp	r4, #45	; 0x2d
 80084b6:	d12e      	bne.n	8008516 <_strtol_l.constprop.0+0x92>
 80084b8:	2601      	movs	r6, #1
 80084ba:	782c      	ldrb	r4, [r5, #0]
 80084bc:	1c95      	adds	r5, r2, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d057      	beq.n	8008572 <_strtol_l.constprop.0+0xee>
 80084c2:	2b10      	cmp	r3, #16
 80084c4:	d109      	bne.n	80084da <_strtol_l.constprop.0+0x56>
 80084c6:	2c30      	cmp	r4, #48	; 0x30
 80084c8:	d107      	bne.n	80084da <_strtol_l.constprop.0+0x56>
 80084ca:	782a      	ldrb	r2, [r5, #0]
 80084cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80084d0:	2a58      	cmp	r2, #88	; 0x58
 80084d2:	d149      	bne.n	8008568 <_strtol_l.constprop.0+0xe4>
 80084d4:	2310      	movs	r3, #16
 80084d6:	786c      	ldrb	r4, [r5, #1]
 80084d8:	3502      	adds	r5, #2
 80084da:	2200      	movs	r2, #0
 80084dc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80084e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084e4:	fbbc f9f3 	udiv	r9, ip, r3
 80084e8:	4610      	mov	r0, r2
 80084ea:	fb03 ca19 	mls	sl, r3, r9, ip
 80084ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80084f2:	2f09      	cmp	r7, #9
 80084f4:	d814      	bhi.n	8008520 <_strtol_l.constprop.0+0x9c>
 80084f6:	463c      	mov	r4, r7
 80084f8:	42a3      	cmp	r3, r4
 80084fa:	dd20      	ble.n	800853e <_strtol_l.constprop.0+0xba>
 80084fc:	1c57      	adds	r7, r2, #1
 80084fe:	d007      	beq.n	8008510 <_strtol_l.constprop.0+0x8c>
 8008500:	4581      	cmp	r9, r0
 8008502:	d319      	bcc.n	8008538 <_strtol_l.constprop.0+0xb4>
 8008504:	d101      	bne.n	800850a <_strtol_l.constprop.0+0x86>
 8008506:	45a2      	cmp	sl, r4
 8008508:	db16      	blt.n	8008538 <_strtol_l.constprop.0+0xb4>
 800850a:	2201      	movs	r2, #1
 800850c:	fb00 4003 	mla	r0, r0, r3, r4
 8008510:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008514:	e7eb      	b.n	80084ee <_strtol_l.constprop.0+0x6a>
 8008516:	2c2b      	cmp	r4, #43	; 0x2b
 8008518:	bf04      	itt	eq
 800851a:	782c      	ldrbeq	r4, [r5, #0]
 800851c:	1c95      	addeq	r5, r2, #2
 800851e:	e7ce      	b.n	80084be <_strtol_l.constprop.0+0x3a>
 8008520:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008524:	2f19      	cmp	r7, #25
 8008526:	d801      	bhi.n	800852c <_strtol_l.constprop.0+0xa8>
 8008528:	3c37      	subs	r4, #55	; 0x37
 800852a:	e7e5      	b.n	80084f8 <_strtol_l.constprop.0+0x74>
 800852c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008530:	2f19      	cmp	r7, #25
 8008532:	d804      	bhi.n	800853e <_strtol_l.constprop.0+0xba>
 8008534:	3c57      	subs	r4, #87	; 0x57
 8008536:	e7df      	b.n	80084f8 <_strtol_l.constprop.0+0x74>
 8008538:	f04f 32ff 	mov.w	r2, #4294967295
 800853c:	e7e8      	b.n	8008510 <_strtol_l.constprop.0+0x8c>
 800853e:	1c53      	adds	r3, r2, #1
 8008540:	d108      	bne.n	8008554 <_strtol_l.constprop.0+0xd0>
 8008542:	2322      	movs	r3, #34	; 0x22
 8008544:	4660      	mov	r0, ip
 8008546:	f8ce 3000 	str.w	r3, [lr]
 800854a:	f1b8 0f00 	cmp.w	r8, #0
 800854e:	d0a6      	beq.n	800849e <_strtol_l.constprop.0+0x1a>
 8008550:	1e69      	subs	r1, r5, #1
 8008552:	e006      	b.n	8008562 <_strtol_l.constprop.0+0xde>
 8008554:	b106      	cbz	r6, 8008558 <_strtol_l.constprop.0+0xd4>
 8008556:	4240      	negs	r0, r0
 8008558:	f1b8 0f00 	cmp.w	r8, #0
 800855c:	d09f      	beq.n	800849e <_strtol_l.constprop.0+0x1a>
 800855e:	2a00      	cmp	r2, #0
 8008560:	d1f6      	bne.n	8008550 <_strtol_l.constprop.0+0xcc>
 8008562:	f8c8 1000 	str.w	r1, [r8]
 8008566:	e79a      	b.n	800849e <_strtol_l.constprop.0+0x1a>
 8008568:	2430      	movs	r4, #48	; 0x30
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1b5      	bne.n	80084da <_strtol_l.constprop.0+0x56>
 800856e:	2308      	movs	r3, #8
 8008570:	e7b3      	b.n	80084da <_strtol_l.constprop.0+0x56>
 8008572:	2c30      	cmp	r4, #48	; 0x30
 8008574:	d0a9      	beq.n	80084ca <_strtol_l.constprop.0+0x46>
 8008576:	230a      	movs	r3, #10
 8008578:	e7af      	b.n	80084da <_strtol_l.constprop.0+0x56>
 800857a:	bf00      	nop
 800857c:	0800d15b 	.word	0x0800d15b

08008580 <_strtol_r>:
 8008580:	f7ff bf80 	b.w	8008484 <_strtol_l.constprop.0>

08008584 <strtol>:
 8008584:	4613      	mov	r3, r2
 8008586:	460a      	mov	r2, r1
 8008588:	4601      	mov	r1, r0
 800858a:	4802      	ldr	r0, [pc, #8]	; (8008594 <strtol+0x10>)
 800858c:	6800      	ldr	r0, [r0, #0]
 800858e:	f7ff bf79 	b.w	8008484 <_strtol_l.constprop.0>
 8008592:	bf00      	nop
 8008594:	20000074 	.word	0x20000074

08008598 <__cvt>:
 8008598:	2b00      	cmp	r3, #0
 800859a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800859e:	461f      	mov	r7, r3
 80085a0:	bfbb      	ittet	lt
 80085a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80085a6:	461f      	movlt	r7, r3
 80085a8:	2300      	movge	r3, #0
 80085aa:	232d      	movlt	r3, #45	; 0x2d
 80085ac:	b088      	sub	sp, #32
 80085ae:	4614      	mov	r4, r2
 80085b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80085b4:	7013      	strb	r3, [r2, #0]
 80085b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80085bc:	f023 0820 	bic.w	r8, r3, #32
 80085c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085c4:	d005      	beq.n	80085d2 <__cvt+0x3a>
 80085c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085ca:	d100      	bne.n	80085ce <__cvt+0x36>
 80085cc:	3501      	adds	r5, #1
 80085ce:	2302      	movs	r3, #2
 80085d0:	e000      	b.n	80085d4 <__cvt+0x3c>
 80085d2:	2303      	movs	r3, #3
 80085d4:	aa07      	add	r2, sp, #28
 80085d6:	9204      	str	r2, [sp, #16]
 80085d8:	aa06      	add	r2, sp, #24
 80085da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80085de:	e9cd 3500 	strd	r3, r5, [sp]
 80085e2:	4622      	mov	r2, r4
 80085e4:	463b      	mov	r3, r7
 80085e6:	f001 f9fb 	bl	80099e0 <_dtoa_r>
 80085ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085ee:	4606      	mov	r6, r0
 80085f0:	d102      	bne.n	80085f8 <__cvt+0x60>
 80085f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085f4:	07db      	lsls	r3, r3, #31
 80085f6:	d522      	bpl.n	800863e <__cvt+0xa6>
 80085f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085fc:	eb06 0905 	add.w	r9, r6, r5
 8008600:	d110      	bne.n	8008624 <__cvt+0x8c>
 8008602:	7833      	ldrb	r3, [r6, #0]
 8008604:	2b30      	cmp	r3, #48	; 0x30
 8008606:	d10a      	bne.n	800861e <__cvt+0x86>
 8008608:	2200      	movs	r2, #0
 800860a:	2300      	movs	r3, #0
 800860c:	4620      	mov	r0, r4
 800860e:	4639      	mov	r1, r7
 8008610:	f7f8 fa88 	bl	8000b24 <__aeabi_dcmpeq>
 8008614:	b918      	cbnz	r0, 800861e <__cvt+0x86>
 8008616:	f1c5 0501 	rsb	r5, r5, #1
 800861a:	f8ca 5000 	str.w	r5, [sl]
 800861e:	f8da 3000 	ldr.w	r3, [sl]
 8008622:	4499      	add	r9, r3
 8008624:	2200      	movs	r2, #0
 8008626:	2300      	movs	r3, #0
 8008628:	4620      	mov	r0, r4
 800862a:	4639      	mov	r1, r7
 800862c:	f7f8 fa7a 	bl	8000b24 <__aeabi_dcmpeq>
 8008630:	b108      	cbz	r0, 8008636 <__cvt+0x9e>
 8008632:	f8cd 901c 	str.w	r9, [sp, #28]
 8008636:	2230      	movs	r2, #48	; 0x30
 8008638:	9b07      	ldr	r3, [sp, #28]
 800863a:	454b      	cmp	r3, r9
 800863c:	d307      	bcc.n	800864e <__cvt+0xb6>
 800863e:	4630      	mov	r0, r6
 8008640:	9b07      	ldr	r3, [sp, #28]
 8008642:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008644:	1b9b      	subs	r3, r3, r6
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	b008      	add	sp, #32
 800864a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864e:	1c59      	adds	r1, r3, #1
 8008650:	9107      	str	r1, [sp, #28]
 8008652:	701a      	strb	r2, [r3, #0]
 8008654:	e7f0      	b.n	8008638 <__cvt+0xa0>

08008656 <__exponent>:
 8008656:	4603      	mov	r3, r0
 8008658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800865a:	2900      	cmp	r1, #0
 800865c:	f803 2b02 	strb.w	r2, [r3], #2
 8008660:	bfb6      	itet	lt
 8008662:	222d      	movlt	r2, #45	; 0x2d
 8008664:	222b      	movge	r2, #43	; 0x2b
 8008666:	4249      	neglt	r1, r1
 8008668:	2909      	cmp	r1, #9
 800866a:	7042      	strb	r2, [r0, #1]
 800866c:	dd2a      	ble.n	80086c4 <__exponent+0x6e>
 800866e:	f10d 0207 	add.w	r2, sp, #7
 8008672:	4617      	mov	r7, r2
 8008674:	260a      	movs	r6, #10
 8008676:	fb91 f5f6 	sdiv	r5, r1, r6
 800867a:	4694      	mov	ip, r2
 800867c:	fb06 1415 	mls	r4, r6, r5, r1
 8008680:	3430      	adds	r4, #48	; 0x30
 8008682:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008686:	460c      	mov	r4, r1
 8008688:	2c63      	cmp	r4, #99	; 0x63
 800868a:	4629      	mov	r1, r5
 800868c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008690:	dcf1      	bgt.n	8008676 <__exponent+0x20>
 8008692:	3130      	adds	r1, #48	; 0x30
 8008694:	f1ac 0402 	sub.w	r4, ip, #2
 8008698:	f802 1c01 	strb.w	r1, [r2, #-1]
 800869c:	4622      	mov	r2, r4
 800869e:	1c41      	adds	r1, r0, #1
 80086a0:	42ba      	cmp	r2, r7
 80086a2:	d30a      	bcc.n	80086ba <__exponent+0x64>
 80086a4:	f10d 0209 	add.w	r2, sp, #9
 80086a8:	eba2 020c 	sub.w	r2, r2, ip
 80086ac:	42bc      	cmp	r4, r7
 80086ae:	bf88      	it	hi
 80086b0:	2200      	movhi	r2, #0
 80086b2:	4413      	add	r3, r2
 80086b4:	1a18      	subs	r0, r3, r0
 80086b6:	b003      	add	sp, #12
 80086b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80086be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80086c2:	e7ed      	b.n	80086a0 <__exponent+0x4a>
 80086c4:	2330      	movs	r3, #48	; 0x30
 80086c6:	3130      	adds	r1, #48	; 0x30
 80086c8:	7083      	strb	r3, [r0, #2]
 80086ca:	70c1      	strb	r1, [r0, #3]
 80086cc:	1d03      	adds	r3, r0, #4
 80086ce:	e7f1      	b.n	80086b4 <__exponent+0x5e>

080086d0 <_printf_float>:
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	b091      	sub	sp, #68	; 0x44
 80086d6:	460c      	mov	r4, r1
 80086d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80086dc:	4616      	mov	r6, r2
 80086de:	461f      	mov	r7, r3
 80086e0:	4605      	mov	r5, r0
 80086e2:	f001 f83f 	bl	8009764 <_localeconv_r>
 80086e6:	6803      	ldr	r3, [r0, #0]
 80086e8:	4618      	mov	r0, r3
 80086ea:	9309      	str	r3, [sp, #36]	; 0x24
 80086ec:	f7f7 fd3a 	bl	8000164 <strlen>
 80086f0:	2300      	movs	r3, #0
 80086f2:	930e      	str	r3, [sp, #56]	; 0x38
 80086f4:	f8d8 3000 	ldr.w	r3, [r8]
 80086f8:	900a      	str	r0, [sp, #40]	; 0x28
 80086fa:	3307      	adds	r3, #7
 80086fc:	f023 0307 	bic.w	r3, r3, #7
 8008700:	f103 0208 	add.w	r2, r3, #8
 8008704:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008708:	f8d4 b000 	ldr.w	fp, [r4]
 800870c:	f8c8 2000 	str.w	r2, [r8]
 8008710:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008714:	4652      	mov	r2, sl
 8008716:	4643      	mov	r3, r8
 8008718:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800871c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008720:	930b      	str	r3, [sp, #44]	; 0x2c
 8008722:	f04f 32ff 	mov.w	r2, #4294967295
 8008726:	4650      	mov	r0, sl
 8008728:	4b9c      	ldr	r3, [pc, #624]	; (800899c <_printf_float+0x2cc>)
 800872a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800872c:	f7f8 fa2c 	bl	8000b88 <__aeabi_dcmpun>
 8008730:	bb70      	cbnz	r0, 8008790 <_printf_float+0xc0>
 8008732:	f04f 32ff 	mov.w	r2, #4294967295
 8008736:	4650      	mov	r0, sl
 8008738:	4b98      	ldr	r3, [pc, #608]	; (800899c <_printf_float+0x2cc>)
 800873a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800873c:	f7f8 fa06 	bl	8000b4c <__aeabi_dcmple>
 8008740:	bb30      	cbnz	r0, 8008790 <_printf_float+0xc0>
 8008742:	2200      	movs	r2, #0
 8008744:	2300      	movs	r3, #0
 8008746:	4650      	mov	r0, sl
 8008748:	4641      	mov	r1, r8
 800874a:	f7f8 f9f5 	bl	8000b38 <__aeabi_dcmplt>
 800874e:	b110      	cbz	r0, 8008756 <_printf_float+0x86>
 8008750:	232d      	movs	r3, #45	; 0x2d
 8008752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008756:	4a92      	ldr	r2, [pc, #584]	; (80089a0 <_printf_float+0x2d0>)
 8008758:	4b92      	ldr	r3, [pc, #584]	; (80089a4 <_printf_float+0x2d4>)
 800875a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800875e:	bf94      	ite	ls
 8008760:	4690      	movls	r8, r2
 8008762:	4698      	movhi	r8, r3
 8008764:	2303      	movs	r3, #3
 8008766:	f04f 0a00 	mov.w	sl, #0
 800876a:	6123      	str	r3, [r4, #16]
 800876c:	f02b 0304 	bic.w	r3, fp, #4
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	4633      	mov	r3, r6
 8008774:	4621      	mov	r1, r4
 8008776:	4628      	mov	r0, r5
 8008778:	9700      	str	r7, [sp, #0]
 800877a:	aa0f      	add	r2, sp, #60	; 0x3c
 800877c:	f000 f9d6 	bl	8008b2c <_printf_common>
 8008780:	3001      	adds	r0, #1
 8008782:	f040 8090 	bne.w	80088a6 <_printf_float+0x1d6>
 8008786:	f04f 30ff 	mov.w	r0, #4294967295
 800878a:	b011      	add	sp, #68	; 0x44
 800878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008790:	4652      	mov	r2, sl
 8008792:	4643      	mov	r3, r8
 8008794:	4650      	mov	r0, sl
 8008796:	4641      	mov	r1, r8
 8008798:	f7f8 f9f6 	bl	8000b88 <__aeabi_dcmpun>
 800879c:	b148      	cbz	r0, 80087b2 <_printf_float+0xe2>
 800879e:	f1b8 0f00 	cmp.w	r8, #0
 80087a2:	bfb8      	it	lt
 80087a4:	232d      	movlt	r3, #45	; 0x2d
 80087a6:	4a80      	ldr	r2, [pc, #512]	; (80089a8 <_printf_float+0x2d8>)
 80087a8:	bfb8      	it	lt
 80087aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087ae:	4b7f      	ldr	r3, [pc, #508]	; (80089ac <_printf_float+0x2dc>)
 80087b0:	e7d3      	b.n	800875a <_printf_float+0x8a>
 80087b2:	6863      	ldr	r3, [r4, #4]
 80087b4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	d142      	bne.n	8008842 <_printf_float+0x172>
 80087bc:	2306      	movs	r3, #6
 80087be:	6063      	str	r3, [r4, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	9206      	str	r2, [sp, #24]
 80087c4:	aa0e      	add	r2, sp, #56	; 0x38
 80087c6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80087ca:	aa0d      	add	r2, sp, #52	; 0x34
 80087cc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80087d0:	9203      	str	r2, [sp, #12]
 80087d2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80087d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80087da:	6023      	str	r3, [r4, #0]
 80087dc:	6863      	ldr	r3, [r4, #4]
 80087de:	4652      	mov	r2, sl
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	4628      	mov	r0, r5
 80087e4:	4643      	mov	r3, r8
 80087e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80087e8:	f7ff fed6 	bl	8008598 <__cvt>
 80087ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087ee:	4680      	mov	r8, r0
 80087f0:	2947      	cmp	r1, #71	; 0x47
 80087f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80087f4:	d108      	bne.n	8008808 <_printf_float+0x138>
 80087f6:	1cc8      	adds	r0, r1, #3
 80087f8:	db02      	blt.n	8008800 <_printf_float+0x130>
 80087fa:	6863      	ldr	r3, [r4, #4]
 80087fc:	4299      	cmp	r1, r3
 80087fe:	dd40      	ble.n	8008882 <_printf_float+0x1b2>
 8008800:	f1a9 0902 	sub.w	r9, r9, #2
 8008804:	fa5f f989 	uxtb.w	r9, r9
 8008808:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800880c:	d81f      	bhi.n	800884e <_printf_float+0x17e>
 800880e:	464a      	mov	r2, r9
 8008810:	3901      	subs	r1, #1
 8008812:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008816:	910d      	str	r1, [sp, #52]	; 0x34
 8008818:	f7ff ff1d 	bl	8008656 <__exponent>
 800881c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800881e:	4682      	mov	sl, r0
 8008820:	1813      	adds	r3, r2, r0
 8008822:	2a01      	cmp	r2, #1
 8008824:	6123      	str	r3, [r4, #16]
 8008826:	dc02      	bgt.n	800882e <_printf_float+0x15e>
 8008828:	6822      	ldr	r2, [r4, #0]
 800882a:	07d2      	lsls	r2, r2, #31
 800882c:	d501      	bpl.n	8008832 <_printf_float+0x162>
 800882e:	3301      	adds	r3, #1
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008836:	2b00      	cmp	r3, #0
 8008838:	d09b      	beq.n	8008772 <_printf_float+0xa2>
 800883a:	232d      	movs	r3, #45	; 0x2d
 800883c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008840:	e797      	b.n	8008772 <_printf_float+0xa2>
 8008842:	2947      	cmp	r1, #71	; 0x47
 8008844:	d1bc      	bne.n	80087c0 <_printf_float+0xf0>
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1ba      	bne.n	80087c0 <_printf_float+0xf0>
 800884a:	2301      	movs	r3, #1
 800884c:	e7b7      	b.n	80087be <_printf_float+0xee>
 800884e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008852:	d118      	bne.n	8008886 <_printf_float+0x1b6>
 8008854:	2900      	cmp	r1, #0
 8008856:	6863      	ldr	r3, [r4, #4]
 8008858:	dd0b      	ble.n	8008872 <_printf_float+0x1a2>
 800885a:	6121      	str	r1, [r4, #16]
 800885c:	b913      	cbnz	r3, 8008864 <_printf_float+0x194>
 800885e:	6822      	ldr	r2, [r4, #0]
 8008860:	07d0      	lsls	r0, r2, #31
 8008862:	d502      	bpl.n	800886a <_printf_float+0x19a>
 8008864:	3301      	adds	r3, #1
 8008866:	440b      	add	r3, r1
 8008868:	6123      	str	r3, [r4, #16]
 800886a:	f04f 0a00 	mov.w	sl, #0
 800886e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008870:	e7df      	b.n	8008832 <_printf_float+0x162>
 8008872:	b913      	cbnz	r3, 800887a <_printf_float+0x1aa>
 8008874:	6822      	ldr	r2, [r4, #0]
 8008876:	07d2      	lsls	r2, r2, #31
 8008878:	d501      	bpl.n	800887e <_printf_float+0x1ae>
 800887a:	3302      	adds	r3, #2
 800887c:	e7f4      	b.n	8008868 <_printf_float+0x198>
 800887e:	2301      	movs	r3, #1
 8008880:	e7f2      	b.n	8008868 <_printf_float+0x198>
 8008882:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008888:	4299      	cmp	r1, r3
 800888a:	db05      	blt.n	8008898 <_printf_float+0x1c8>
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	6121      	str	r1, [r4, #16]
 8008890:	07d8      	lsls	r0, r3, #31
 8008892:	d5ea      	bpl.n	800886a <_printf_float+0x19a>
 8008894:	1c4b      	adds	r3, r1, #1
 8008896:	e7e7      	b.n	8008868 <_printf_float+0x198>
 8008898:	2900      	cmp	r1, #0
 800889a:	bfcc      	ite	gt
 800889c:	2201      	movgt	r2, #1
 800889e:	f1c1 0202 	rsble	r2, r1, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	e7e0      	b.n	8008868 <_printf_float+0x198>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	055a      	lsls	r2, r3, #21
 80088aa:	d407      	bmi.n	80088bc <_printf_float+0x1ec>
 80088ac:	6923      	ldr	r3, [r4, #16]
 80088ae:	4642      	mov	r2, r8
 80088b0:	4631      	mov	r1, r6
 80088b2:	4628      	mov	r0, r5
 80088b4:	47b8      	blx	r7
 80088b6:	3001      	adds	r0, #1
 80088b8:	d12b      	bne.n	8008912 <_printf_float+0x242>
 80088ba:	e764      	b.n	8008786 <_printf_float+0xb6>
 80088bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80088c0:	f240 80dd 	bls.w	8008a7e <_printf_float+0x3ae>
 80088c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088c8:	2200      	movs	r2, #0
 80088ca:	2300      	movs	r3, #0
 80088cc:	f7f8 f92a 	bl	8000b24 <__aeabi_dcmpeq>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d033      	beq.n	800893c <_printf_float+0x26c>
 80088d4:	2301      	movs	r3, #1
 80088d6:	4631      	mov	r1, r6
 80088d8:	4628      	mov	r0, r5
 80088da:	4a35      	ldr	r2, [pc, #212]	; (80089b0 <_printf_float+0x2e0>)
 80088dc:	47b8      	blx	r7
 80088de:	3001      	adds	r0, #1
 80088e0:	f43f af51 	beq.w	8008786 <_printf_float+0xb6>
 80088e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80088e8:	429a      	cmp	r2, r3
 80088ea:	db02      	blt.n	80088f2 <_printf_float+0x222>
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	07d8      	lsls	r0, r3, #31
 80088f0:	d50f      	bpl.n	8008912 <_printf_float+0x242>
 80088f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088f6:	4631      	mov	r1, r6
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b8      	blx	r7
 80088fc:	3001      	adds	r0, #1
 80088fe:	f43f af42 	beq.w	8008786 <_printf_float+0xb6>
 8008902:	f04f 0800 	mov.w	r8, #0
 8008906:	f104 091a 	add.w	r9, r4, #26
 800890a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800890c:	3b01      	subs	r3, #1
 800890e:	4543      	cmp	r3, r8
 8008910:	dc09      	bgt.n	8008926 <_printf_float+0x256>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	079b      	lsls	r3, r3, #30
 8008916:	f100 8104 	bmi.w	8008b22 <_printf_float+0x452>
 800891a:	68e0      	ldr	r0, [r4, #12]
 800891c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800891e:	4298      	cmp	r0, r3
 8008920:	bfb8      	it	lt
 8008922:	4618      	movlt	r0, r3
 8008924:	e731      	b.n	800878a <_printf_float+0xba>
 8008926:	2301      	movs	r3, #1
 8008928:	464a      	mov	r2, r9
 800892a:	4631      	mov	r1, r6
 800892c:	4628      	mov	r0, r5
 800892e:	47b8      	blx	r7
 8008930:	3001      	adds	r0, #1
 8008932:	f43f af28 	beq.w	8008786 <_printf_float+0xb6>
 8008936:	f108 0801 	add.w	r8, r8, #1
 800893a:	e7e6      	b.n	800890a <_printf_float+0x23a>
 800893c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800893e:	2b00      	cmp	r3, #0
 8008940:	dc38      	bgt.n	80089b4 <_printf_float+0x2e4>
 8008942:	2301      	movs	r3, #1
 8008944:	4631      	mov	r1, r6
 8008946:	4628      	mov	r0, r5
 8008948:	4a19      	ldr	r2, [pc, #100]	; (80089b0 <_printf_float+0x2e0>)
 800894a:	47b8      	blx	r7
 800894c:	3001      	adds	r0, #1
 800894e:	f43f af1a 	beq.w	8008786 <_printf_float+0xb6>
 8008952:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008956:	4313      	orrs	r3, r2
 8008958:	d102      	bne.n	8008960 <_printf_float+0x290>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	07d9      	lsls	r1, r3, #31
 800895e:	d5d8      	bpl.n	8008912 <_printf_float+0x242>
 8008960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	f43f af0b 	beq.w	8008786 <_printf_float+0xb6>
 8008970:	f04f 0900 	mov.w	r9, #0
 8008974:	f104 0a1a 	add.w	sl, r4, #26
 8008978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800897a:	425b      	negs	r3, r3
 800897c:	454b      	cmp	r3, r9
 800897e:	dc01      	bgt.n	8008984 <_printf_float+0x2b4>
 8008980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008982:	e794      	b.n	80088ae <_printf_float+0x1de>
 8008984:	2301      	movs	r3, #1
 8008986:	4652      	mov	r2, sl
 8008988:	4631      	mov	r1, r6
 800898a:	4628      	mov	r0, r5
 800898c:	47b8      	blx	r7
 800898e:	3001      	adds	r0, #1
 8008990:	f43f aef9 	beq.w	8008786 <_printf_float+0xb6>
 8008994:	f109 0901 	add.w	r9, r9, #1
 8008998:	e7ee      	b.n	8008978 <_printf_float+0x2a8>
 800899a:	bf00      	nop
 800899c:	7fefffff 	.word	0x7fefffff
 80089a0:	0800d25b 	.word	0x0800d25b
 80089a4:	0800d25f 	.word	0x0800d25f
 80089a8:	0800d263 	.word	0x0800d263
 80089ac:	0800d267 	.word	0x0800d267
 80089b0:	0800d26b 	.word	0x0800d26b
 80089b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089b8:	429a      	cmp	r2, r3
 80089ba:	bfa8      	it	ge
 80089bc:	461a      	movge	r2, r3
 80089be:	2a00      	cmp	r2, #0
 80089c0:	4691      	mov	r9, r2
 80089c2:	dc37      	bgt.n	8008a34 <_printf_float+0x364>
 80089c4:	f04f 0b00 	mov.w	fp, #0
 80089c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089cc:	f104 021a 	add.w	r2, r4, #26
 80089d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80089d4:	ebaa 0309 	sub.w	r3, sl, r9
 80089d8:	455b      	cmp	r3, fp
 80089da:	dc33      	bgt.n	8008a44 <_printf_float+0x374>
 80089dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80089e0:	429a      	cmp	r2, r3
 80089e2:	db3b      	blt.n	8008a5c <_printf_float+0x38c>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	07da      	lsls	r2, r3, #31
 80089e8:	d438      	bmi.n	8008a5c <_printf_float+0x38c>
 80089ea:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80089ee:	eba2 0903 	sub.w	r9, r2, r3
 80089f2:	eba2 020a 	sub.w	r2, r2, sl
 80089f6:	4591      	cmp	r9, r2
 80089f8:	bfa8      	it	ge
 80089fa:	4691      	movge	r9, r2
 80089fc:	f1b9 0f00 	cmp.w	r9, #0
 8008a00:	dc34      	bgt.n	8008a6c <_printf_float+0x39c>
 8008a02:	f04f 0800 	mov.w	r8, #0
 8008a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a0a:	f104 0a1a 	add.w	sl, r4, #26
 8008a0e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008a12:	1a9b      	subs	r3, r3, r2
 8008a14:	eba3 0309 	sub.w	r3, r3, r9
 8008a18:	4543      	cmp	r3, r8
 8008a1a:	f77f af7a 	ble.w	8008912 <_printf_float+0x242>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4652      	mov	r2, sl
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f aeac 	beq.w	8008786 <_printf_float+0xb6>
 8008a2e:	f108 0801 	add.w	r8, r8, #1
 8008a32:	e7ec      	b.n	8008a0e <_printf_float+0x33e>
 8008a34:	4613      	mov	r3, r2
 8008a36:	4631      	mov	r1, r6
 8008a38:	4642      	mov	r2, r8
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d1c0      	bne.n	80089c4 <_printf_float+0x2f4>
 8008a42:	e6a0      	b.n	8008786 <_printf_float+0xb6>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4631      	mov	r1, r6
 8008a48:	4628      	mov	r0, r5
 8008a4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a4c:	47b8      	blx	r7
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f43f ae99 	beq.w	8008786 <_printf_float+0xb6>
 8008a54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a56:	f10b 0b01 	add.w	fp, fp, #1
 8008a5a:	e7b9      	b.n	80089d0 <_printf_float+0x300>
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a62:	4628      	mov	r0, r5
 8008a64:	47b8      	blx	r7
 8008a66:	3001      	adds	r0, #1
 8008a68:	d1bf      	bne.n	80089ea <_printf_float+0x31a>
 8008a6a:	e68c      	b.n	8008786 <_printf_float+0xb6>
 8008a6c:	464b      	mov	r3, r9
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4628      	mov	r0, r5
 8008a72:	eb08 020a 	add.w	r2, r8, sl
 8008a76:	47b8      	blx	r7
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d1c2      	bne.n	8008a02 <_printf_float+0x332>
 8008a7c:	e683      	b.n	8008786 <_printf_float+0xb6>
 8008a7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a80:	2a01      	cmp	r2, #1
 8008a82:	dc01      	bgt.n	8008a88 <_printf_float+0x3b8>
 8008a84:	07db      	lsls	r3, r3, #31
 8008a86:	d539      	bpl.n	8008afc <_printf_float+0x42c>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	4642      	mov	r2, r8
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4628      	mov	r0, r5
 8008a90:	47b8      	blx	r7
 8008a92:	3001      	adds	r0, #1
 8008a94:	f43f ae77 	beq.w	8008786 <_printf_float+0xb6>
 8008a98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	47b8      	blx	r7
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	f43f ae6f 	beq.w	8008786 <_printf_float+0xb6>
 8008aa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008aac:	2200      	movs	r2, #0
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008ab4:	f7f8 f836 	bl	8000b24 <__aeabi_dcmpeq>
 8008ab8:	b9d8      	cbnz	r0, 8008af2 <_printf_float+0x422>
 8008aba:	f109 33ff 	add.w	r3, r9, #4294967295
 8008abe:	f108 0201 	add.w	r2, r8, #1
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d10e      	bne.n	8008aea <_printf_float+0x41a>
 8008acc:	e65b      	b.n	8008786 <_printf_float+0xb6>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	464a      	mov	r2, r9
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	f43f ae54 	beq.w	8008786 <_printf_float+0xb6>
 8008ade:	f108 0801 	add.w	r8, r8, #1
 8008ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	4543      	cmp	r3, r8
 8008ae8:	dcf1      	bgt.n	8008ace <_printf_float+0x3fe>
 8008aea:	4653      	mov	r3, sl
 8008aec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008af0:	e6de      	b.n	80088b0 <_printf_float+0x1e0>
 8008af2:	f04f 0800 	mov.w	r8, #0
 8008af6:	f104 091a 	add.w	r9, r4, #26
 8008afa:	e7f2      	b.n	8008ae2 <_printf_float+0x412>
 8008afc:	2301      	movs	r3, #1
 8008afe:	4642      	mov	r2, r8
 8008b00:	e7df      	b.n	8008ac2 <_printf_float+0x3f2>
 8008b02:	2301      	movs	r3, #1
 8008b04:	464a      	mov	r2, r9
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f43f ae3a 	beq.w	8008786 <_printf_float+0xb6>
 8008b12:	f108 0801 	add.w	r8, r8, #1
 8008b16:	68e3      	ldr	r3, [r4, #12]
 8008b18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008b1a:	1a5b      	subs	r3, r3, r1
 8008b1c:	4543      	cmp	r3, r8
 8008b1e:	dcf0      	bgt.n	8008b02 <_printf_float+0x432>
 8008b20:	e6fb      	b.n	800891a <_printf_float+0x24a>
 8008b22:	f04f 0800 	mov.w	r8, #0
 8008b26:	f104 0919 	add.w	r9, r4, #25
 8008b2a:	e7f4      	b.n	8008b16 <_printf_float+0x446>

08008b2c <_printf_common>:
 8008b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b30:	4616      	mov	r6, r2
 8008b32:	4699      	mov	r9, r3
 8008b34:	688a      	ldr	r2, [r1, #8]
 8008b36:	690b      	ldr	r3, [r1, #16]
 8008b38:	4607      	mov	r7, r0
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	bfb8      	it	lt
 8008b3e:	4613      	movlt	r3, r2
 8008b40:	6033      	str	r3, [r6, #0]
 8008b42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b46:	460c      	mov	r4, r1
 8008b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b4c:	b10a      	cbz	r2, 8008b52 <_printf_common+0x26>
 8008b4e:	3301      	adds	r3, #1
 8008b50:	6033      	str	r3, [r6, #0]
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	0699      	lsls	r1, r3, #26
 8008b56:	bf42      	ittt	mi
 8008b58:	6833      	ldrmi	r3, [r6, #0]
 8008b5a:	3302      	addmi	r3, #2
 8008b5c:	6033      	strmi	r3, [r6, #0]
 8008b5e:	6825      	ldr	r5, [r4, #0]
 8008b60:	f015 0506 	ands.w	r5, r5, #6
 8008b64:	d106      	bne.n	8008b74 <_printf_common+0x48>
 8008b66:	f104 0a19 	add.w	sl, r4, #25
 8008b6a:	68e3      	ldr	r3, [r4, #12]
 8008b6c:	6832      	ldr	r2, [r6, #0]
 8008b6e:	1a9b      	subs	r3, r3, r2
 8008b70:	42ab      	cmp	r3, r5
 8008b72:	dc2b      	bgt.n	8008bcc <_printf_common+0xa0>
 8008b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b78:	1e13      	subs	r3, r2, #0
 8008b7a:	6822      	ldr	r2, [r4, #0]
 8008b7c:	bf18      	it	ne
 8008b7e:	2301      	movne	r3, #1
 8008b80:	0692      	lsls	r2, r2, #26
 8008b82:	d430      	bmi.n	8008be6 <_printf_common+0xba>
 8008b84:	4649      	mov	r1, r9
 8008b86:	4638      	mov	r0, r7
 8008b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b8c:	47c0      	blx	r8
 8008b8e:	3001      	adds	r0, #1
 8008b90:	d023      	beq.n	8008bda <_printf_common+0xae>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	6922      	ldr	r2, [r4, #16]
 8008b96:	f003 0306 	and.w	r3, r3, #6
 8008b9a:	2b04      	cmp	r3, #4
 8008b9c:	bf14      	ite	ne
 8008b9e:	2500      	movne	r5, #0
 8008ba0:	6833      	ldreq	r3, [r6, #0]
 8008ba2:	f04f 0600 	mov.w	r6, #0
 8008ba6:	bf08      	it	eq
 8008ba8:	68e5      	ldreq	r5, [r4, #12]
 8008baa:	f104 041a 	add.w	r4, r4, #26
 8008bae:	bf08      	it	eq
 8008bb0:	1aed      	subeq	r5, r5, r3
 8008bb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008bb6:	bf08      	it	eq
 8008bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	bfc4      	itt	gt
 8008bc0:	1a9b      	subgt	r3, r3, r2
 8008bc2:	18ed      	addgt	r5, r5, r3
 8008bc4:	42b5      	cmp	r5, r6
 8008bc6:	d11a      	bne.n	8008bfe <_printf_common+0xd2>
 8008bc8:	2000      	movs	r0, #0
 8008bca:	e008      	b.n	8008bde <_printf_common+0xb2>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	4652      	mov	r2, sl
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	47c0      	blx	r8
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	d103      	bne.n	8008be2 <_printf_common+0xb6>
 8008bda:	f04f 30ff 	mov.w	r0, #4294967295
 8008bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be2:	3501      	adds	r5, #1
 8008be4:	e7c1      	b.n	8008b6a <_printf_common+0x3e>
 8008be6:	2030      	movs	r0, #48	; 0x30
 8008be8:	18e1      	adds	r1, r4, r3
 8008bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bf4:	4422      	add	r2, r4
 8008bf6:	3302      	adds	r3, #2
 8008bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bfc:	e7c2      	b.n	8008b84 <_printf_common+0x58>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	4622      	mov	r2, r4
 8008c02:	4649      	mov	r1, r9
 8008c04:	4638      	mov	r0, r7
 8008c06:	47c0      	blx	r8
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d0e6      	beq.n	8008bda <_printf_common+0xae>
 8008c0c:	3601      	adds	r6, #1
 8008c0e:	e7d9      	b.n	8008bc4 <_printf_common+0x98>

08008c10 <_printf_i>:
 8008c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c14:	7e0f      	ldrb	r7, [r1, #24]
 8008c16:	4691      	mov	r9, r2
 8008c18:	2f78      	cmp	r7, #120	; 0x78
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	469a      	mov	sl, r3
 8008c20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c26:	d807      	bhi.n	8008c38 <_printf_i+0x28>
 8008c28:	2f62      	cmp	r7, #98	; 0x62
 8008c2a:	d80a      	bhi.n	8008c42 <_printf_i+0x32>
 8008c2c:	2f00      	cmp	r7, #0
 8008c2e:	f000 80d5 	beq.w	8008ddc <_printf_i+0x1cc>
 8008c32:	2f58      	cmp	r7, #88	; 0x58
 8008c34:	f000 80c1 	beq.w	8008dba <_printf_i+0x1aa>
 8008c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c40:	e03a      	b.n	8008cb8 <_printf_i+0xa8>
 8008c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c46:	2b15      	cmp	r3, #21
 8008c48:	d8f6      	bhi.n	8008c38 <_printf_i+0x28>
 8008c4a:	a101      	add	r1, pc, #4	; (adr r1, 8008c50 <_printf_i+0x40>)
 8008c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c50:	08008ca9 	.word	0x08008ca9
 8008c54:	08008cbd 	.word	0x08008cbd
 8008c58:	08008c39 	.word	0x08008c39
 8008c5c:	08008c39 	.word	0x08008c39
 8008c60:	08008c39 	.word	0x08008c39
 8008c64:	08008c39 	.word	0x08008c39
 8008c68:	08008cbd 	.word	0x08008cbd
 8008c6c:	08008c39 	.word	0x08008c39
 8008c70:	08008c39 	.word	0x08008c39
 8008c74:	08008c39 	.word	0x08008c39
 8008c78:	08008c39 	.word	0x08008c39
 8008c7c:	08008dc3 	.word	0x08008dc3
 8008c80:	08008ce9 	.word	0x08008ce9
 8008c84:	08008d7d 	.word	0x08008d7d
 8008c88:	08008c39 	.word	0x08008c39
 8008c8c:	08008c39 	.word	0x08008c39
 8008c90:	08008de5 	.word	0x08008de5
 8008c94:	08008c39 	.word	0x08008c39
 8008c98:	08008ce9 	.word	0x08008ce9
 8008c9c:	08008c39 	.word	0x08008c39
 8008ca0:	08008c39 	.word	0x08008c39
 8008ca4:	08008d85 	.word	0x08008d85
 8008ca8:	682b      	ldr	r3, [r5, #0]
 8008caa:	1d1a      	adds	r2, r3, #4
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	602a      	str	r2, [r5, #0]
 8008cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e0a0      	b.n	8008dfe <_printf_i+0x1ee>
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	682b      	ldr	r3, [r5, #0]
 8008cc0:	0607      	lsls	r7, r0, #24
 8008cc2:	f103 0104 	add.w	r1, r3, #4
 8008cc6:	6029      	str	r1, [r5, #0]
 8008cc8:	d501      	bpl.n	8008cce <_printf_i+0xbe>
 8008cca:	681e      	ldr	r6, [r3, #0]
 8008ccc:	e003      	b.n	8008cd6 <_printf_i+0xc6>
 8008cce:	0646      	lsls	r6, r0, #25
 8008cd0:	d5fb      	bpl.n	8008cca <_printf_i+0xba>
 8008cd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008cd6:	2e00      	cmp	r6, #0
 8008cd8:	da03      	bge.n	8008ce2 <_printf_i+0xd2>
 8008cda:	232d      	movs	r3, #45	; 0x2d
 8008cdc:	4276      	negs	r6, r6
 8008cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ce2:	230a      	movs	r3, #10
 8008ce4:	4859      	ldr	r0, [pc, #356]	; (8008e4c <_printf_i+0x23c>)
 8008ce6:	e012      	b.n	8008d0e <_printf_i+0xfe>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	6820      	ldr	r0, [r4, #0]
 8008cec:	1d19      	adds	r1, r3, #4
 8008cee:	6029      	str	r1, [r5, #0]
 8008cf0:	0605      	lsls	r5, r0, #24
 8008cf2:	d501      	bpl.n	8008cf8 <_printf_i+0xe8>
 8008cf4:	681e      	ldr	r6, [r3, #0]
 8008cf6:	e002      	b.n	8008cfe <_printf_i+0xee>
 8008cf8:	0641      	lsls	r1, r0, #25
 8008cfa:	d5fb      	bpl.n	8008cf4 <_printf_i+0xe4>
 8008cfc:	881e      	ldrh	r6, [r3, #0]
 8008cfe:	2f6f      	cmp	r7, #111	; 0x6f
 8008d00:	bf0c      	ite	eq
 8008d02:	2308      	moveq	r3, #8
 8008d04:	230a      	movne	r3, #10
 8008d06:	4851      	ldr	r0, [pc, #324]	; (8008e4c <_printf_i+0x23c>)
 8008d08:	2100      	movs	r1, #0
 8008d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d0e:	6865      	ldr	r5, [r4, #4]
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	bfa8      	it	ge
 8008d14:	6821      	ldrge	r1, [r4, #0]
 8008d16:	60a5      	str	r5, [r4, #8]
 8008d18:	bfa4      	itt	ge
 8008d1a:	f021 0104 	bicge.w	r1, r1, #4
 8008d1e:	6021      	strge	r1, [r4, #0]
 8008d20:	b90e      	cbnz	r6, 8008d26 <_printf_i+0x116>
 8008d22:	2d00      	cmp	r5, #0
 8008d24:	d04b      	beq.n	8008dbe <_printf_i+0x1ae>
 8008d26:	4615      	mov	r5, r2
 8008d28:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d2c:	fb03 6711 	mls	r7, r3, r1, r6
 8008d30:	5dc7      	ldrb	r7, [r0, r7]
 8008d32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d36:	4637      	mov	r7, r6
 8008d38:	42bb      	cmp	r3, r7
 8008d3a:	460e      	mov	r6, r1
 8008d3c:	d9f4      	bls.n	8008d28 <_printf_i+0x118>
 8008d3e:	2b08      	cmp	r3, #8
 8008d40:	d10b      	bne.n	8008d5a <_printf_i+0x14a>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	07de      	lsls	r6, r3, #31
 8008d46:	d508      	bpl.n	8008d5a <_printf_i+0x14a>
 8008d48:	6923      	ldr	r3, [r4, #16]
 8008d4a:	6861      	ldr	r1, [r4, #4]
 8008d4c:	4299      	cmp	r1, r3
 8008d4e:	bfde      	ittt	le
 8008d50:	2330      	movle	r3, #48	; 0x30
 8008d52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d5a:	1b52      	subs	r2, r2, r5
 8008d5c:	6122      	str	r2, [r4, #16]
 8008d5e:	464b      	mov	r3, r9
 8008d60:	4621      	mov	r1, r4
 8008d62:	4640      	mov	r0, r8
 8008d64:	f8cd a000 	str.w	sl, [sp]
 8008d68:	aa03      	add	r2, sp, #12
 8008d6a:	f7ff fedf 	bl	8008b2c <_printf_common>
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d14a      	bne.n	8008e08 <_printf_i+0x1f8>
 8008d72:	f04f 30ff 	mov.w	r0, #4294967295
 8008d76:	b004      	add	sp, #16
 8008d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	f043 0320 	orr.w	r3, r3, #32
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	2778      	movs	r7, #120	; 0x78
 8008d86:	4832      	ldr	r0, [pc, #200]	; (8008e50 <_printf_i+0x240>)
 8008d88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	6829      	ldr	r1, [r5, #0]
 8008d90:	061f      	lsls	r7, r3, #24
 8008d92:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d96:	d402      	bmi.n	8008d9e <_printf_i+0x18e>
 8008d98:	065f      	lsls	r7, r3, #25
 8008d9a:	bf48      	it	mi
 8008d9c:	b2b6      	uxthmi	r6, r6
 8008d9e:	07df      	lsls	r7, r3, #31
 8008da0:	bf48      	it	mi
 8008da2:	f043 0320 	orrmi.w	r3, r3, #32
 8008da6:	6029      	str	r1, [r5, #0]
 8008da8:	bf48      	it	mi
 8008daa:	6023      	strmi	r3, [r4, #0]
 8008dac:	b91e      	cbnz	r6, 8008db6 <_printf_i+0x1a6>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	f023 0320 	bic.w	r3, r3, #32
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	2310      	movs	r3, #16
 8008db8:	e7a6      	b.n	8008d08 <_printf_i+0xf8>
 8008dba:	4824      	ldr	r0, [pc, #144]	; (8008e4c <_printf_i+0x23c>)
 8008dbc:	e7e4      	b.n	8008d88 <_printf_i+0x178>
 8008dbe:	4615      	mov	r5, r2
 8008dc0:	e7bd      	b.n	8008d3e <_printf_i+0x12e>
 8008dc2:	682b      	ldr	r3, [r5, #0]
 8008dc4:	6826      	ldr	r6, [r4, #0]
 8008dc6:	1d18      	adds	r0, r3, #4
 8008dc8:	6961      	ldr	r1, [r4, #20]
 8008dca:	6028      	str	r0, [r5, #0]
 8008dcc:	0635      	lsls	r5, r6, #24
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	d501      	bpl.n	8008dd6 <_printf_i+0x1c6>
 8008dd2:	6019      	str	r1, [r3, #0]
 8008dd4:	e002      	b.n	8008ddc <_printf_i+0x1cc>
 8008dd6:	0670      	lsls	r0, r6, #25
 8008dd8:	d5fb      	bpl.n	8008dd2 <_printf_i+0x1c2>
 8008dda:	8019      	strh	r1, [r3, #0]
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4615      	mov	r5, r2
 8008de0:	6123      	str	r3, [r4, #16]
 8008de2:	e7bc      	b.n	8008d5e <_printf_i+0x14e>
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	2100      	movs	r1, #0
 8008de8:	1d1a      	adds	r2, r3, #4
 8008dea:	602a      	str	r2, [r5, #0]
 8008dec:	681d      	ldr	r5, [r3, #0]
 8008dee:	6862      	ldr	r2, [r4, #4]
 8008df0:	4628      	mov	r0, r5
 8008df2:	f000 fd2d 	bl	8009850 <memchr>
 8008df6:	b108      	cbz	r0, 8008dfc <_printf_i+0x1ec>
 8008df8:	1b40      	subs	r0, r0, r5
 8008dfa:	6060      	str	r0, [r4, #4]
 8008dfc:	6863      	ldr	r3, [r4, #4]
 8008dfe:	6123      	str	r3, [r4, #16]
 8008e00:	2300      	movs	r3, #0
 8008e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e06:	e7aa      	b.n	8008d5e <_printf_i+0x14e>
 8008e08:	462a      	mov	r2, r5
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	47d0      	blx	sl
 8008e12:	3001      	adds	r0, #1
 8008e14:	d0ad      	beq.n	8008d72 <_printf_i+0x162>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	079b      	lsls	r3, r3, #30
 8008e1a:	d413      	bmi.n	8008e44 <_printf_i+0x234>
 8008e1c:	68e0      	ldr	r0, [r4, #12]
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	4298      	cmp	r0, r3
 8008e22:	bfb8      	it	lt
 8008e24:	4618      	movlt	r0, r3
 8008e26:	e7a6      	b.n	8008d76 <_printf_i+0x166>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	4632      	mov	r2, r6
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	4640      	mov	r0, r8
 8008e30:	47d0      	blx	sl
 8008e32:	3001      	adds	r0, #1
 8008e34:	d09d      	beq.n	8008d72 <_printf_i+0x162>
 8008e36:	3501      	adds	r5, #1
 8008e38:	68e3      	ldr	r3, [r4, #12]
 8008e3a:	9903      	ldr	r1, [sp, #12]
 8008e3c:	1a5b      	subs	r3, r3, r1
 8008e3e:	42ab      	cmp	r3, r5
 8008e40:	dcf2      	bgt.n	8008e28 <_printf_i+0x218>
 8008e42:	e7eb      	b.n	8008e1c <_printf_i+0x20c>
 8008e44:	2500      	movs	r5, #0
 8008e46:	f104 0619 	add.w	r6, r4, #25
 8008e4a:	e7f5      	b.n	8008e38 <_printf_i+0x228>
 8008e4c:	0800d26d 	.word	0x0800d26d
 8008e50:	0800d27e 	.word	0x0800d27e

08008e54 <_scanf_float>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	b087      	sub	sp, #28
 8008e5a:	9303      	str	r3, [sp, #12]
 8008e5c:	688b      	ldr	r3, [r1, #8]
 8008e5e:	4617      	mov	r7, r2
 8008e60:	1e5a      	subs	r2, r3, #1
 8008e62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e66:	bf85      	ittet	hi
 8008e68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e6c:	195b      	addhi	r3, r3, r5
 8008e6e:	2300      	movls	r3, #0
 8008e70:	9302      	strhi	r3, [sp, #8]
 8008e72:	bf88      	it	hi
 8008e74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e78:	468b      	mov	fp, r1
 8008e7a:	f04f 0500 	mov.w	r5, #0
 8008e7e:	bf8c      	ite	hi
 8008e80:	608b      	strhi	r3, [r1, #8]
 8008e82:	9302      	strls	r3, [sp, #8]
 8008e84:	680b      	ldr	r3, [r1, #0]
 8008e86:	4680      	mov	r8, r0
 8008e88:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e8c:	f84b 3b1c 	str.w	r3, [fp], #28
 8008e90:	460c      	mov	r4, r1
 8008e92:	465e      	mov	r6, fp
 8008e94:	46aa      	mov	sl, r5
 8008e96:	46a9      	mov	r9, r5
 8008e98:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e9c:	9501      	str	r5, [sp, #4]
 8008e9e:	68a2      	ldr	r2, [r4, #8]
 8008ea0:	b152      	cbz	r2, 8008eb8 <_scanf_float+0x64>
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b4e      	cmp	r3, #78	; 0x4e
 8008ea8:	d864      	bhi.n	8008f74 <_scanf_float+0x120>
 8008eaa:	2b40      	cmp	r3, #64	; 0x40
 8008eac:	d83c      	bhi.n	8008f28 <_scanf_float+0xd4>
 8008eae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008eb2:	b2c8      	uxtb	r0, r1
 8008eb4:	280e      	cmp	r0, #14
 8008eb6:	d93a      	bls.n	8008f2e <_scanf_float+0xda>
 8008eb8:	f1b9 0f00 	cmp.w	r9, #0
 8008ebc:	d003      	beq.n	8008ec6 <_scanf_float+0x72>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eca:	f1ba 0f01 	cmp.w	sl, #1
 8008ece:	f200 8113 	bhi.w	80090f8 <_scanf_float+0x2a4>
 8008ed2:	455e      	cmp	r6, fp
 8008ed4:	f200 8105 	bhi.w	80090e2 <_scanf_float+0x28e>
 8008ed8:	2501      	movs	r5, #1
 8008eda:	4628      	mov	r0, r5
 8008edc:	b007      	add	sp, #28
 8008ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008ee6:	2a0d      	cmp	r2, #13
 8008ee8:	d8e6      	bhi.n	8008eb8 <_scanf_float+0x64>
 8008eea:	a101      	add	r1, pc, #4	; (adr r1, 8008ef0 <_scanf_float+0x9c>)
 8008eec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ef0:	0800902f 	.word	0x0800902f
 8008ef4:	08008eb9 	.word	0x08008eb9
 8008ef8:	08008eb9 	.word	0x08008eb9
 8008efc:	08008eb9 	.word	0x08008eb9
 8008f00:	0800908f 	.word	0x0800908f
 8008f04:	08009067 	.word	0x08009067
 8008f08:	08008eb9 	.word	0x08008eb9
 8008f0c:	08008eb9 	.word	0x08008eb9
 8008f10:	0800903d 	.word	0x0800903d
 8008f14:	08008eb9 	.word	0x08008eb9
 8008f18:	08008eb9 	.word	0x08008eb9
 8008f1c:	08008eb9 	.word	0x08008eb9
 8008f20:	08008eb9 	.word	0x08008eb9
 8008f24:	08008ff5 	.word	0x08008ff5
 8008f28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008f2c:	e7db      	b.n	8008ee6 <_scanf_float+0x92>
 8008f2e:	290e      	cmp	r1, #14
 8008f30:	d8c2      	bhi.n	8008eb8 <_scanf_float+0x64>
 8008f32:	a001      	add	r0, pc, #4	; (adr r0, 8008f38 <_scanf_float+0xe4>)
 8008f34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008f38:	08008fe7 	.word	0x08008fe7
 8008f3c:	08008eb9 	.word	0x08008eb9
 8008f40:	08008fe7 	.word	0x08008fe7
 8008f44:	0800907b 	.word	0x0800907b
 8008f48:	08008eb9 	.word	0x08008eb9
 8008f4c:	08008f95 	.word	0x08008f95
 8008f50:	08008fd1 	.word	0x08008fd1
 8008f54:	08008fd1 	.word	0x08008fd1
 8008f58:	08008fd1 	.word	0x08008fd1
 8008f5c:	08008fd1 	.word	0x08008fd1
 8008f60:	08008fd1 	.word	0x08008fd1
 8008f64:	08008fd1 	.word	0x08008fd1
 8008f68:	08008fd1 	.word	0x08008fd1
 8008f6c:	08008fd1 	.word	0x08008fd1
 8008f70:	08008fd1 	.word	0x08008fd1
 8008f74:	2b6e      	cmp	r3, #110	; 0x6e
 8008f76:	d809      	bhi.n	8008f8c <_scanf_float+0x138>
 8008f78:	2b60      	cmp	r3, #96	; 0x60
 8008f7a:	d8b2      	bhi.n	8008ee2 <_scanf_float+0x8e>
 8008f7c:	2b54      	cmp	r3, #84	; 0x54
 8008f7e:	d077      	beq.n	8009070 <_scanf_float+0x21c>
 8008f80:	2b59      	cmp	r3, #89	; 0x59
 8008f82:	d199      	bne.n	8008eb8 <_scanf_float+0x64>
 8008f84:	2d07      	cmp	r5, #7
 8008f86:	d197      	bne.n	8008eb8 <_scanf_float+0x64>
 8008f88:	2508      	movs	r5, #8
 8008f8a:	e029      	b.n	8008fe0 <_scanf_float+0x18c>
 8008f8c:	2b74      	cmp	r3, #116	; 0x74
 8008f8e:	d06f      	beq.n	8009070 <_scanf_float+0x21c>
 8008f90:	2b79      	cmp	r3, #121	; 0x79
 8008f92:	e7f6      	b.n	8008f82 <_scanf_float+0x12e>
 8008f94:	6821      	ldr	r1, [r4, #0]
 8008f96:	05c8      	lsls	r0, r1, #23
 8008f98:	d51a      	bpl.n	8008fd0 <_scanf_float+0x17c>
 8008f9a:	9b02      	ldr	r3, [sp, #8]
 8008f9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008fa0:	6021      	str	r1, [r4, #0]
 8008fa2:	f109 0901 	add.w	r9, r9, #1
 8008fa6:	b11b      	cbz	r3, 8008fb0 <_scanf_float+0x15c>
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	3201      	adds	r2, #1
 8008fac:	9302      	str	r3, [sp, #8]
 8008fae:	60a2      	str	r2, [r4, #8]
 8008fb0:	68a3      	ldr	r3, [r4, #8]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	60a3      	str	r3, [r4, #8]
 8008fb6:	6923      	ldr	r3, [r4, #16]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	6123      	str	r3, [r4, #16]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	607b      	str	r3, [r7, #4]
 8008fc4:	f340 8084 	ble.w	80090d0 <_scanf_float+0x27c>
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	603b      	str	r3, [r7, #0]
 8008fce:	e766      	b.n	8008e9e <_scanf_float+0x4a>
 8008fd0:	eb1a 0f05 	cmn.w	sl, r5
 8008fd4:	f47f af70 	bne.w	8008eb8 <_scanf_float+0x64>
 8008fd8:	6822      	ldr	r2, [r4, #0]
 8008fda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008fde:	6022      	str	r2, [r4, #0]
 8008fe0:	f806 3b01 	strb.w	r3, [r6], #1
 8008fe4:	e7e4      	b.n	8008fb0 <_scanf_float+0x15c>
 8008fe6:	6822      	ldr	r2, [r4, #0]
 8008fe8:	0610      	lsls	r0, r2, #24
 8008fea:	f57f af65 	bpl.w	8008eb8 <_scanf_float+0x64>
 8008fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ff2:	e7f4      	b.n	8008fde <_scanf_float+0x18a>
 8008ff4:	f1ba 0f00 	cmp.w	sl, #0
 8008ff8:	d10e      	bne.n	8009018 <_scanf_float+0x1c4>
 8008ffa:	f1b9 0f00 	cmp.w	r9, #0
 8008ffe:	d10e      	bne.n	800901e <_scanf_float+0x1ca>
 8009000:	6822      	ldr	r2, [r4, #0]
 8009002:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009006:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800900a:	d108      	bne.n	800901e <_scanf_float+0x1ca>
 800900c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009010:	f04f 0a01 	mov.w	sl, #1
 8009014:	6022      	str	r2, [r4, #0]
 8009016:	e7e3      	b.n	8008fe0 <_scanf_float+0x18c>
 8009018:	f1ba 0f02 	cmp.w	sl, #2
 800901c:	d055      	beq.n	80090ca <_scanf_float+0x276>
 800901e:	2d01      	cmp	r5, #1
 8009020:	d002      	beq.n	8009028 <_scanf_float+0x1d4>
 8009022:	2d04      	cmp	r5, #4
 8009024:	f47f af48 	bne.w	8008eb8 <_scanf_float+0x64>
 8009028:	3501      	adds	r5, #1
 800902a:	b2ed      	uxtb	r5, r5
 800902c:	e7d8      	b.n	8008fe0 <_scanf_float+0x18c>
 800902e:	f1ba 0f01 	cmp.w	sl, #1
 8009032:	f47f af41 	bne.w	8008eb8 <_scanf_float+0x64>
 8009036:	f04f 0a02 	mov.w	sl, #2
 800903a:	e7d1      	b.n	8008fe0 <_scanf_float+0x18c>
 800903c:	b97d      	cbnz	r5, 800905e <_scanf_float+0x20a>
 800903e:	f1b9 0f00 	cmp.w	r9, #0
 8009042:	f47f af3c 	bne.w	8008ebe <_scanf_float+0x6a>
 8009046:	6822      	ldr	r2, [r4, #0]
 8009048:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800904c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009050:	f47f af39 	bne.w	8008ec6 <_scanf_float+0x72>
 8009054:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009058:	2501      	movs	r5, #1
 800905a:	6022      	str	r2, [r4, #0]
 800905c:	e7c0      	b.n	8008fe0 <_scanf_float+0x18c>
 800905e:	2d03      	cmp	r5, #3
 8009060:	d0e2      	beq.n	8009028 <_scanf_float+0x1d4>
 8009062:	2d05      	cmp	r5, #5
 8009064:	e7de      	b.n	8009024 <_scanf_float+0x1d0>
 8009066:	2d02      	cmp	r5, #2
 8009068:	f47f af26 	bne.w	8008eb8 <_scanf_float+0x64>
 800906c:	2503      	movs	r5, #3
 800906e:	e7b7      	b.n	8008fe0 <_scanf_float+0x18c>
 8009070:	2d06      	cmp	r5, #6
 8009072:	f47f af21 	bne.w	8008eb8 <_scanf_float+0x64>
 8009076:	2507      	movs	r5, #7
 8009078:	e7b2      	b.n	8008fe0 <_scanf_float+0x18c>
 800907a:	6822      	ldr	r2, [r4, #0]
 800907c:	0591      	lsls	r1, r2, #22
 800907e:	f57f af1b 	bpl.w	8008eb8 <_scanf_float+0x64>
 8009082:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009086:	6022      	str	r2, [r4, #0]
 8009088:	f8cd 9004 	str.w	r9, [sp, #4]
 800908c:	e7a8      	b.n	8008fe0 <_scanf_float+0x18c>
 800908e:	6822      	ldr	r2, [r4, #0]
 8009090:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009094:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009098:	d006      	beq.n	80090a8 <_scanf_float+0x254>
 800909a:	0550      	lsls	r0, r2, #21
 800909c:	f57f af0c 	bpl.w	8008eb8 <_scanf_float+0x64>
 80090a0:	f1b9 0f00 	cmp.w	r9, #0
 80090a4:	f43f af0f 	beq.w	8008ec6 <_scanf_float+0x72>
 80090a8:	0591      	lsls	r1, r2, #22
 80090aa:	bf58      	it	pl
 80090ac:	9901      	ldrpl	r1, [sp, #4]
 80090ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090b2:	bf58      	it	pl
 80090b4:	eba9 0101 	subpl.w	r1, r9, r1
 80090b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80090bc:	f04f 0900 	mov.w	r9, #0
 80090c0:	bf58      	it	pl
 80090c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80090c6:	6022      	str	r2, [r4, #0]
 80090c8:	e78a      	b.n	8008fe0 <_scanf_float+0x18c>
 80090ca:	f04f 0a03 	mov.w	sl, #3
 80090ce:	e787      	b.n	8008fe0 <_scanf_float+0x18c>
 80090d0:	4639      	mov	r1, r7
 80090d2:	4640      	mov	r0, r8
 80090d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090d8:	4798      	blx	r3
 80090da:	2800      	cmp	r0, #0
 80090dc:	f43f aedf 	beq.w	8008e9e <_scanf_float+0x4a>
 80090e0:	e6ea      	b.n	8008eb8 <_scanf_float+0x64>
 80090e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090e6:	463a      	mov	r2, r7
 80090e8:	4640      	mov	r0, r8
 80090ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090ee:	4798      	blx	r3
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	6123      	str	r3, [r4, #16]
 80090f6:	e6ec      	b.n	8008ed2 <_scanf_float+0x7e>
 80090f8:	1e6b      	subs	r3, r5, #1
 80090fa:	2b06      	cmp	r3, #6
 80090fc:	d825      	bhi.n	800914a <_scanf_float+0x2f6>
 80090fe:	2d02      	cmp	r5, #2
 8009100:	d836      	bhi.n	8009170 <_scanf_float+0x31c>
 8009102:	455e      	cmp	r6, fp
 8009104:	f67f aee8 	bls.w	8008ed8 <_scanf_float+0x84>
 8009108:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800910c:	463a      	mov	r2, r7
 800910e:	4640      	mov	r0, r8
 8009110:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009114:	4798      	blx	r3
 8009116:	6923      	ldr	r3, [r4, #16]
 8009118:	3b01      	subs	r3, #1
 800911a:	6123      	str	r3, [r4, #16]
 800911c:	e7f1      	b.n	8009102 <_scanf_float+0x2ae>
 800911e:	9802      	ldr	r0, [sp, #8]
 8009120:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009124:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009128:	463a      	mov	r2, r7
 800912a:	9002      	str	r0, [sp, #8]
 800912c:	4640      	mov	r0, r8
 800912e:	4798      	blx	r3
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	3b01      	subs	r3, #1
 8009134:	6123      	str	r3, [r4, #16]
 8009136:	f10a 3aff 	add.w	sl, sl, #4294967295
 800913a:	fa5f fa8a 	uxtb.w	sl, sl
 800913e:	f1ba 0f02 	cmp.w	sl, #2
 8009142:	d1ec      	bne.n	800911e <_scanf_float+0x2ca>
 8009144:	3d03      	subs	r5, #3
 8009146:	b2ed      	uxtb	r5, r5
 8009148:	1b76      	subs	r6, r6, r5
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	05da      	lsls	r2, r3, #23
 800914e:	d52f      	bpl.n	80091b0 <_scanf_float+0x35c>
 8009150:	055b      	lsls	r3, r3, #21
 8009152:	d510      	bpl.n	8009176 <_scanf_float+0x322>
 8009154:	455e      	cmp	r6, fp
 8009156:	f67f aebf 	bls.w	8008ed8 <_scanf_float+0x84>
 800915a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800915e:	463a      	mov	r2, r7
 8009160:	4640      	mov	r0, r8
 8009162:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009166:	4798      	blx	r3
 8009168:	6923      	ldr	r3, [r4, #16]
 800916a:	3b01      	subs	r3, #1
 800916c:	6123      	str	r3, [r4, #16]
 800916e:	e7f1      	b.n	8009154 <_scanf_float+0x300>
 8009170:	46aa      	mov	sl, r5
 8009172:	9602      	str	r6, [sp, #8]
 8009174:	e7df      	b.n	8009136 <_scanf_float+0x2e2>
 8009176:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800917a:	6923      	ldr	r3, [r4, #16]
 800917c:	2965      	cmp	r1, #101	; 0x65
 800917e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009182:	f106 35ff 	add.w	r5, r6, #4294967295
 8009186:	6123      	str	r3, [r4, #16]
 8009188:	d00c      	beq.n	80091a4 <_scanf_float+0x350>
 800918a:	2945      	cmp	r1, #69	; 0x45
 800918c:	d00a      	beq.n	80091a4 <_scanf_float+0x350>
 800918e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009192:	463a      	mov	r2, r7
 8009194:	4640      	mov	r0, r8
 8009196:	4798      	blx	r3
 8009198:	6923      	ldr	r3, [r4, #16]
 800919a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800919e:	3b01      	subs	r3, #1
 80091a0:	1eb5      	subs	r5, r6, #2
 80091a2:	6123      	str	r3, [r4, #16]
 80091a4:	463a      	mov	r2, r7
 80091a6:	4640      	mov	r0, r8
 80091a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091ac:	4798      	blx	r3
 80091ae:	462e      	mov	r6, r5
 80091b0:	6825      	ldr	r5, [r4, #0]
 80091b2:	f015 0510 	ands.w	r5, r5, #16
 80091b6:	d155      	bne.n	8009264 <_scanf_float+0x410>
 80091b8:	7035      	strb	r5, [r6, #0]
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80091c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091c4:	d11d      	bne.n	8009202 <_scanf_float+0x3ae>
 80091c6:	9b01      	ldr	r3, [sp, #4]
 80091c8:	454b      	cmp	r3, r9
 80091ca:	eba3 0209 	sub.w	r2, r3, r9
 80091ce:	d125      	bne.n	800921c <_scanf_float+0x3c8>
 80091d0:	2200      	movs	r2, #0
 80091d2:	4659      	mov	r1, fp
 80091d4:	4640      	mov	r0, r8
 80091d6:	f002 fd97 	bl	800bd08 <_strtod_r>
 80091da:	9b03      	ldr	r3, [sp, #12]
 80091dc:	f8d4 c000 	ldr.w	ip, [r4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f01c 0f02 	tst.w	ip, #2
 80091e6:	4606      	mov	r6, r0
 80091e8:	460f      	mov	r7, r1
 80091ea:	f103 0204 	add.w	r2, r3, #4
 80091ee:	d020      	beq.n	8009232 <_scanf_float+0x3de>
 80091f0:	9903      	ldr	r1, [sp, #12]
 80091f2:	600a      	str	r2, [r1, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	e9c3 6700 	strd	r6, r7, [r3]
 80091fa:	68e3      	ldr	r3, [r4, #12]
 80091fc:	3301      	adds	r3, #1
 80091fe:	60e3      	str	r3, [r4, #12]
 8009200:	e66b      	b.n	8008eda <_scanf_float+0x86>
 8009202:	9b04      	ldr	r3, [sp, #16]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d0e3      	beq.n	80091d0 <_scanf_float+0x37c>
 8009208:	9905      	ldr	r1, [sp, #20]
 800920a:	230a      	movs	r3, #10
 800920c:	462a      	mov	r2, r5
 800920e:	4640      	mov	r0, r8
 8009210:	3101      	adds	r1, #1
 8009212:	f7ff f9b5 	bl	8008580 <_strtol_r>
 8009216:	9b04      	ldr	r3, [sp, #16]
 8009218:	9e05      	ldr	r6, [sp, #20]
 800921a:	1ac2      	subs	r2, r0, r3
 800921c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009220:	429e      	cmp	r6, r3
 8009222:	bf28      	it	cs
 8009224:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009228:	4630      	mov	r0, r6
 800922a:	490f      	ldr	r1, [pc, #60]	; (8009268 <_scanf_float+0x414>)
 800922c:	f000 f93e 	bl	80094ac <siprintf>
 8009230:	e7ce      	b.n	80091d0 <_scanf_float+0x37c>
 8009232:	f01c 0f04 	tst.w	ip, #4
 8009236:	d1db      	bne.n	80091f0 <_scanf_float+0x39c>
 8009238:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800923c:	f8cc 2000 	str.w	r2, [ip]
 8009240:	f8d3 8000 	ldr.w	r8, [r3]
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	f7f7 fc9e 	bl	8000b88 <__aeabi_dcmpun>
 800924c:	b128      	cbz	r0, 800925a <_scanf_float+0x406>
 800924e:	4807      	ldr	r0, [pc, #28]	; (800926c <_scanf_float+0x418>)
 8009250:	f000 fb1a 	bl	8009888 <nanf>
 8009254:	f8c8 0000 	str.w	r0, [r8]
 8009258:	e7cf      	b.n	80091fa <_scanf_float+0x3a6>
 800925a:	4630      	mov	r0, r6
 800925c:	4639      	mov	r1, r7
 800925e:	f7f7 fcf1 	bl	8000c44 <__aeabi_d2f>
 8009262:	e7f7      	b.n	8009254 <_scanf_float+0x400>
 8009264:	2500      	movs	r5, #0
 8009266:	e638      	b.n	8008eda <_scanf_float+0x86>
 8009268:	0800d28f 	.word	0x0800d28f
 800926c:	0800d340 	.word	0x0800d340

08009270 <std>:
 8009270:	2300      	movs	r3, #0
 8009272:	b510      	push	{r4, lr}
 8009274:	4604      	mov	r4, r0
 8009276:	e9c0 3300 	strd	r3, r3, [r0]
 800927a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800927e:	6083      	str	r3, [r0, #8]
 8009280:	8181      	strh	r1, [r0, #12]
 8009282:	6643      	str	r3, [r0, #100]	; 0x64
 8009284:	81c2      	strh	r2, [r0, #14]
 8009286:	6183      	str	r3, [r0, #24]
 8009288:	4619      	mov	r1, r3
 800928a:	2208      	movs	r2, #8
 800928c:	305c      	adds	r0, #92	; 0x5c
 800928e:	f000 fa05 	bl	800969c <memset>
 8009292:	4b05      	ldr	r3, [pc, #20]	; (80092a8 <std+0x38>)
 8009294:	6224      	str	r4, [r4, #32]
 8009296:	6263      	str	r3, [r4, #36]	; 0x24
 8009298:	4b04      	ldr	r3, [pc, #16]	; (80092ac <std+0x3c>)
 800929a:	62a3      	str	r3, [r4, #40]	; 0x28
 800929c:	4b04      	ldr	r3, [pc, #16]	; (80092b0 <std+0x40>)
 800929e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092a0:	4b04      	ldr	r3, [pc, #16]	; (80092b4 <std+0x44>)
 80092a2:	6323      	str	r3, [r4, #48]	; 0x30
 80092a4:	bd10      	pop	{r4, pc}
 80092a6:	bf00      	nop
 80092a8:	080094ed 	.word	0x080094ed
 80092ac:	0800950f 	.word	0x0800950f
 80092b0:	08009547 	.word	0x08009547
 80092b4:	0800956b 	.word	0x0800956b

080092b8 <stdio_exit_handler>:
 80092b8:	4a02      	ldr	r2, [pc, #8]	; (80092c4 <stdio_exit_handler+0xc>)
 80092ba:	4903      	ldr	r1, [pc, #12]	; (80092c8 <stdio_exit_handler+0x10>)
 80092bc:	4803      	ldr	r0, [pc, #12]	; (80092cc <stdio_exit_handler+0x14>)
 80092be:	f000 b869 	b.w	8009394 <_fwalk_sglue>
 80092c2:	bf00      	nop
 80092c4:	2000001c 	.word	0x2000001c
 80092c8:	0800c34d 	.word	0x0800c34d
 80092cc:	20000028 	.word	0x20000028

080092d0 <cleanup_stdio>:
 80092d0:	6841      	ldr	r1, [r0, #4]
 80092d2:	4b0c      	ldr	r3, [pc, #48]	; (8009304 <cleanup_stdio+0x34>)
 80092d4:	b510      	push	{r4, lr}
 80092d6:	4299      	cmp	r1, r3
 80092d8:	4604      	mov	r4, r0
 80092da:	d001      	beq.n	80092e0 <cleanup_stdio+0x10>
 80092dc:	f003 f836 	bl	800c34c <_fflush_r>
 80092e0:	68a1      	ldr	r1, [r4, #8]
 80092e2:	4b09      	ldr	r3, [pc, #36]	; (8009308 <cleanup_stdio+0x38>)
 80092e4:	4299      	cmp	r1, r3
 80092e6:	d002      	beq.n	80092ee <cleanup_stdio+0x1e>
 80092e8:	4620      	mov	r0, r4
 80092ea:	f003 f82f 	bl	800c34c <_fflush_r>
 80092ee:	68e1      	ldr	r1, [r4, #12]
 80092f0:	4b06      	ldr	r3, [pc, #24]	; (800930c <cleanup_stdio+0x3c>)
 80092f2:	4299      	cmp	r1, r3
 80092f4:	d004      	beq.n	8009300 <cleanup_stdio+0x30>
 80092f6:	4620      	mov	r0, r4
 80092f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092fc:	f003 b826 	b.w	800c34c <_fflush_r>
 8009300:	bd10      	pop	{r4, pc}
 8009302:	bf00      	nop
 8009304:	20002410 	.word	0x20002410
 8009308:	20002478 	.word	0x20002478
 800930c:	200024e0 	.word	0x200024e0

08009310 <global_stdio_init.part.0>:
 8009310:	b510      	push	{r4, lr}
 8009312:	4b0b      	ldr	r3, [pc, #44]	; (8009340 <global_stdio_init.part.0+0x30>)
 8009314:	4c0b      	ldr	r4, [pc, #44]	; (8009344 <global_stdio_init.part.0+0x34>)
 8009316:	4a0c      	ldr	r2, [pc, #48]	; (8009348 <global_stdio_init.part.0+0x38>)
 8009318:	4620      	mov	r0, r4
 800931a:	601a      	str	r2, [r3, #0]
 800931c:	2104      	movs	r1, #4
 800931e:	2200      	movs	r2, #0
 8009320:	f7ff ffa6 	bl	8009270 <std>
 8009324:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009328:	2201      	movs	r2, #1
 800932a:	2109      	movs	r1, #9
 800932c:	f7ff ffa0 	bl	8009270 <std>
 8009330:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009334:	2202      	movs	r2, #2
 8009336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800933a:	2112      	movs	r1, #18
 800933c:	f7ff bf98 	b.w	8009270 <std>
 8009340:	20002548 	.word	0x20002548
 8009344:	20002410 	.word	0x20002410
 8009348:	080092b9 	.word	0x080092b9

0800934c <__sfp_lock_acquire>:
 800934c:	4801      	ldr	r0, [pc, #4]	; (8009354 <__sfp_lock_acquire+0x8>)
 800934e:	f000 ba7d 	b.w	800984c <__retarget_lock_acquire_recursive>
 8009352:	bf00      	nop
 8009354:	20002551 	.word	0x20002551

08009358 <__sfp_lock_release>:
 8009358:	4801      	ldr	r0, [pc, #4]	; (8009360 <__sfp_lock_release+0x8>)
 800935a:	f000 ba78 	b.w	800984e <__retarget_lock_release_recursive>
 800935e:	bf00      	nop
 8009360:	20002551 	.word	0x20002551

08009364 <__sinit>:
 8009364:	b510      	push	{r4, lr}
 8009366:	4604      	mov	r4, r0
 8009368:	f7ff fff0 	bl	800934c <__sfp_lock_acquire>
 800936c:	6a23      	ldr	r3, [r4, #32]
 800936e:	b11b      	cbz	r3, 8009378 <__sinit+0x14>
 8009370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009374:	f7ff bff0 	b.w	8009358 <__sfp_lock_release>
 8009378:	4b04      	ldr	r3, [pc, #16]	; (800938c <__sinit+0x28>)
 800937a:	6223      	str	r3, [r4, #32]
 800937c:	4b04      	ldr	r3, [pc, #16]	; (8009390 <__sinit+0x2c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1f5      	bne.n	8009370 <__sinit+0xc>
 8009384:	f7ff ffc4 	bl	8009310 <global_stdio_init.part.0>
 8009388:	e7f2      	b.n	8009370 <__sinit+0xc>
 800938a:	bf00      	nop
 800938c:	080092d1 	.word	0x080092d1
 8009390:	20002548 	.word	0x20002548

08009394 <_fwalk_sglue>:
 8009394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009398:	4607      	mov	r7, r0
 800939a:	4688      	mov	r8, r1
 800939c:	4614      	mov	r4, r2
 800939e:	2600      	movs	r6, #0
 80093a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093a4:	f1b9 0901 	subs.w	r9, r9, #1
 80093a8:	d505      	bpl.n	80093b6 <_fwalk_sglue+0x22>
 80093aa:	6824      	ldr	r4, [r4, #0]
 80093ac:	2c00      	cmp	r4, #0
 80093ae:	d1f7      	bne.n	80093a0 <_fwalk_sglue+0xc>
 80093b0:	4630      	mov	r0, r6
 80093b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093b6:	89ab      	ldrh	r3, [r5, #12]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d907      	bls.n	80093cc <_fwalk_sglue+0x38>
 80093bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093c0:	3301      	adds	r3, #1
 80093c2:	d003      	beq.n	80093cc <_fwalk_sglue+0x38>
 80093c4:	4629      	mov	r1, r5
 80093c6:	4638      	mov	r0, r7
 80093c8:	47c0      	blx	r8
 80093ca:	4306      	orrs	r6, r0
 80093cc:	3568      	adds	r5, #104	; 0x68
 80093ce:	e7e9      	b.n	80093a4 <_fwalk_sglue+0x10>

080093d0 <iprintf>:
 80093d0:	b40f      	push	{r0, r1, r2, r3}
 80093d2:	b507      	push	{r0, r1, r2, lr}
 80093d4:	4906      	ldr	r1, [pc, #24]	; (80093f0 <iprintf+0x20>)
 80093d6:	ab04      	add	r3, sp, #16
 80093d8:	6808      	ldr	r0, [r1, #0]
 80093da:	f853 2b04 	ldr.w	r2, [r3], #4
 80093de:	6881      	ldr	r1, [r0, #8]
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	f002 fe17 	bl	800c014 <_vfiprintf_r>
 80093e6:	b003      	add	sp, #12
 80093e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093ec:	b004      	add	sp, #16
 80093ee:	4770      	bx	lr
 80093f0:	20000074 	.word	0x20000074

080093f4 <_puts_r>:
 80093f4:	6a03      	ldr	r3, [r0, #32]
 80093f6:	b570      	push	{r4, r5, r6, lr}
 80093f8:	4605      	mov	r5, r0
 80093fa:	460e      	mov	r6, r1
 80093fc:	6884      	ldr	r4, [r0, #8]
 80093fe:	b90b      	cbnz	r3, 8009404 <_puts_r+0x10>
 8009400:	f7ff ffb0 	bl	8009364 <__sinit>
 8009404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009406:	07db      	lsls	r3, r3, #31
 8009408:	d405      	bmi.n	8009416 <_puts_r+0x22>
 800940a:	89a3      	ldrh	r3, [r4, #12]
 800940c:	0598      	lsls	r0, r3, #22
 800940e:	d402      	bmi.n	8009416 <_puts_r+0x22>
 8009410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009412:	f000 fa1b 	bl	800984c <__retarget_lock_acquire_recursive>
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	0719      	lsls	r1, r3, #28
 800941a:	d513      	bpl.n	8009444 <_puts_r+0x50>
 800941c:	6923      	ldr	r3, [r4, #16]
 800941e:	b18b      	cbz	r3, 8009444 <_puts_r+0x50>
 8009420:	3e01      	subs	r6, #1
 8009422:	68a3      	ldr	r3, [r4, #8]
 8009424:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009428:	3b01      	subs	r3, #1
 800942a:	60a3      	str	r3, [r4, #8]
 800942c:	b9e9      	cbnz	r1, 800946a <_puts_r+0x76>
 800942e:	2b00      	cmp	r3, #0
 8009430:	da2e      	bge.n	8009490 <_puts_r+0x9c>
 8009432:	4622      	mov	r2, r4
 8009434:	210a      	movs	r1, #10
 8009436:	4628      	mov	r0, r5
 8009438:	f000 f89b 	bl	8009572 <__swbuf_r>
 800943c:	3001      	adds	r0, #1
 800943e:	d007      	beq.n	8009450 <_puts_r+0x5c>
 8009440:	250a      	movs	r5, #10
 8009442:	e007      	b.n	8009454 <_puts_r+0x60>
 8009444:	4621      	mov	r1, r4
 8009446:	4628      	mov	r0, r5
 8009448:	f000 f8d0 	bl	80095ec <__swsetup_r>
 800944c:	2800      	cmp	r0, #0
 800944e:	d0e7      	beq.n	8009420 <_puts_r+0x2c>
 8009450:	f04f 35ff 	mov.w	r5, #4294967295
 8009454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009456:	07da      	lsls	r2, r3, #31
 8009458:	d405      	bmi.n	8009466 <_puts_r+0x72>
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	059b      	lsls	r3, r3, #22
 800945e:	d402      	bmi.n	8009466 <_puts_r+0x72>
 8009460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009462:	f000 f9f4 	bl	800984e <__retarget_lock_release_recursive>
 8009466:	4628      	mov	r0, r5
 8009468:	bd70      	pop	{r4, r5, r6, pc}
 800946a:	2b00      	cmp	r3, #0
 800946c:	da04      	bge.n	8009478 <_puts_r+0x84>
 800946e:	69a2      	ldr	r2, [r4, #24]
 8009470:	429a      	cmp	r2, r3
 8009472:	dc06      	bgt.n	8009482 <_puts_r+0x8e>
 8009474:	290a      	cmp	r1, #10
 8009476:	d004      	beq.n	8009482 <_puts_r+0x8e>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	6022      	str	r2, [r4, #0]
 800947e:	7019      	strb	r1, [r3, #0]
 8009480:	e7cf      	b.n	8009422 <_puts_r+0x2e>
 8009482:	4622      	mov	r2, r4
 8009484:	4628      	mov	r0, r5
 8009486:	f000 f874 	bl	8009572 <__swbuf_r>
 800948a:	3001      	adds	r0, #1
 800948c:	d1c9      	bne.n	8009422 <_puts_r+0x2e>
 800948e:	e7df      	b.n	8009450 <_puts_r+0x5c>
 8009490:	250a      	movs	r5, #10
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	1c5a      	adds	r2, r3, #1
 8009496:	6022      	str	r2, [r4, #0]
 8009498:	701d      	strb	r5, [r3, #0]
 800949a:	e7db      	b.n	8009454 <_puts_r+0x60>

0800949c <puts>:
 800949c:	4b02      	ldr	r3, [pc, #8]	; (80094a8 <puts+0xc>)
 800949e:	4601      	mov	r1, r0
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	f7ff bfa7 	b.w	80093f4 <_puts_r>
 80094a6:	bf00      	nop
 80094a8:	20000074 	.word	0x20000074

080094ac <siprintf>:
 80094ac:	b40e      	push	{r1, r2, r3}
 80094ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094b2:	b500      	push	{lr}
 80094b4:	b09c      	sub	sp, #112	; 0x70
 80094b6:	ab1d      	add	r3, sp, #116	; 0x74
 80094b8:	9002      	str	r0, [sp, #8]
 80094ba:	9006      	str	r0, [sp, #24]
 80094bc:	9107      	str	r1, [sp, #28]
 80094be:	9104      	str	r1, [sp, #16]
 80094c0:	4808      	ldr	r0, [pc, #32]	; (80094e4 <siprintf+0x38>)
 80094c2:	4909      	ldr	r1, [pc, #36]	; (80094e8 <siprintf+0x3c>)
 80094c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80094c8:	9105      	str	r1, [sp, #20]
 80094ca:	6800      	ldr	r0, [r0, #0]
 80094cc:	a902      	add	r1, sp, #8
 80094ce:	9301      	str	r3, [sp, #4]
 80094d0:	f002 fc7a 	bl	800bdc8 <_svfiprintf_r>
 80094d4:	2200      	movs	r2, #0
 80094d6:	9b02      	ldr	r3, [sp, #8]
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	b01c      	add	sp, #112	; 0x70
 80094dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80094e0:	b003      	add	sp, #12
 80094e2:	4770      	bx	lr
 80094e4:	20000074 	.word	0x20000074
 80094e8:	ffff0208 	.word	0xffff0208

080094ec <__sread>:
 80094ec:	b510      	push	{r4, lr}
 80094ee:	460c      	mov	r4, r1
 80094f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f4:	f000 f95c 	bl	80097b0 <_read_r>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	bfab      	itete	ge
 80094fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009500:	181b      	addge	r3, r3, r0
 8009502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009506:	bfac      	ite	ge
 8009508:	6563      	strge	r3, [r4, #84]	; 0x54
 800950a:	81a3      	strhlt	r3, [r4, #12]
 800950c:	bd10      	pop	{r4, pc}

0800950e <__swrite>:
 800950e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009512:	461f      	mov	r7, r3
 8009514:	898b      	ldrh	r3, [r1, #12]
 8009516:	4605      	mov	r5, r0
 8009518:	05db      	lsls	r3, r3, #23
 800951a:	460c      	mov	r4, r1
 800951c:	4616      	mov	r6, r2
 800951e:	d505      	bpl.n	800952c <__swrite+0x1e>
 8009520:	2302      	movs	r3, #2
 8009522:	2200      	movs	r2, #0
 8009524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009528:	f000 f930 	bl	800978c <_lseek_r>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	4632      	mov	r2, r6
 8009530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009534:	81a3      	strh	r3, [r4, #12]
 8009536:	4628      	mov	r0, r5
 8009538:	463b      	mov	r3, r7
 800953a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800953e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009542:	f000 b947 	b.w	80097d4 <_write_r>

08009546 <__sseek>:
 8009546:	b510      	push	{r4, lr}
 8009548:	460c      	mov	r4, r1
 800954a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954e:	f000 f91d 	bl	800978c <_lseek_r>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	bf15      	itete	ne
 8009558:	6560      	strne	r0, [r4, #84]	; 0x54
 800955a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800955e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009562:	81a3      	strheq	r3, [r4, #12]
 8009564:	bf18      	it	ne
 8009566:	81a3      	strhne	r3, [r4, #12]
 8009568:	bd10      	pop	{r4, pc}

0800956a <__sclose>:
 800956a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800956e:	f000 b8fd 	b.w	800976c <_close_r>

08009572 <__swbuf_r>:
 8009572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009574:	460e      	mov	r6, r1
 8009576:	4614      	mov	r4, r2
 8009578:	4605      	mov	r5, r0
 800957a:	b118      	cbz	r0, 8009584 <__swbuf_r+0x12>
 800957c:	6a03      	ldr	r3, [r0, #32]
 800957e:	b90b      	cbnz	r3, 8009584 <__swbuf_r+0x12>
 8009580:	f7ff fef0 	bl	8009364 <__sinit>
 8009584:	69a3      	ldr	r3, [r4, #24]
 8009586:	60a3      	str	r3, [r4, #8]
 8009588:	89a3      	ldrh	r3, [r4, #12]
 800958a:	071a      	lsls	r2, r3, #28
 800958c:	d525      	bpl.n	80095da <__swbuf_r+0x68>
 800958e:	6923      	ldr	r3, [r4, #16]
 8009590:	b31b      	cbz	r3, 80095da <__swbuf_r+0x68>
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	6922      	ldr	r2, [r4, #16]
 8009596:	b2f6      	uxtb	r6, r6
 8009598:	1a98      	subs	r0, r3, r2
 800959a:	6963      	ldr	r3, [r4, #20]
 800959c:	4637      	mov	r7, r6
 800959e:	4283      	cmp	r3, r0
 80095a0:	dc04      	bgt.n	80095ac <__swbuf_r+0x3a>
 80095a2:	4621      	mov	r1, r4
 80095a4:	4628      	mov	r0, r5
 80095a6:	f002 fed1 	bl	800c34c <_fflush_r>
 80095aa:	b9e0      	cbnz	r0, 80095e6 <__swbuf_r+0x74>
 80095ac:	68a3      	ldr	r3, [r4, #8]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	60a3      	str	r3, [r4, #8]
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	6022      	str	r2, [r4, #0]
 80095b8:	701e      	strb	r6, [r3, #0]
 80095ba:	6962      	ldr	r2, [r4, #20]
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	429a      	cmp	r2, r3
 80095c0:	d004      	beq.n	80095cc <__swbuf_r+0x5a>
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	07db      	lsls	r3, r3, #31
 80095c6:	d506      	bpl.n	80095d6 <__swbuf_r+0x64>
 80095c8:	2e0a      	cmp	r6, #10
 80095ca:	d104      	bne.n	80095d6 <__swbuf_r+0x64>
 80095cc:	4621      	mov	r1, r4
 80095ce:	4628      	mov	r0, r5
 80095d0:	f002 febc 	bl	800c34c <_fflush_r>
 80095d4:	b938      	cbnz	r0, 80095e6 <__swbuf_r+0x74>
 80095d6:	4638      	mov	r0, r7
 80095d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095da:	4621      	mov	r1, r4
 80095dc:	4628      	mov	r0, r5
 80095de:	f000 f805 	bl	80095ec <__swsetup_r>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d0d5      	beq.n	8009592 <__swbuf_r+0x20>
 80095e6:	f04f 37ff 	mov.w	r7, #4294967295
 80095ea:	e7f4      	b.n	80095d6 <__swbuf_r+0x64>

080095ec <__swsetup_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4b2a      	ldr	r3, [pc, #168]	; (8009698 <__swsetup_r+0xac>)
 80095f0:	4605      	mov	r5, r0
 80095f2:	6818      	ldr	r0, [r3, #0]
 80095f4:	460c      	mov	r4, r1
 80095f6:	b118      	cbz	r0, 8009600 <__swsetup_r+0x14>
 80095f8:	6a03      	ldr	r3, [r0, #32]
 80095fa:	b90b      	cbnz	r3, 8009600 <__swsetup_r+0x14>
 80095fc:	f7ff feb2 	bl	8009364 <__sinit>
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009606:	0718      	lsls	r0, r3, #28
 8009608:	d422      	bmi.n	8009650 <__swsetup_r+0x64>
 800960a:	06d9      	lsls	r1, r3, #27
 800960c:	d407      	bmi.n	800961e <__swsetup_r+0x32>
 800960e:	2309      	movs	r3, #9
 8009610:	602b      	str	r3, [r5, #0]
 8009612:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009616:	f04f 30ff 	mov.w	r0, #4294967295
 800961a:	81a3      	strh	r3, [r4, #12]
 800961c:	e034      	b.n	8009688 <__swsetup_r+0x9c>
 800961e:	0758      	lsls	r0, r3, #29
 8009620:	d512      	bpl.n	8009648 <__swsetup_r+0x5c>
 8009622:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009624:	b141      	cbz	r1, 8009638 <__swsetup_r+0x4c>
 8009626:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800962a:	4299      	cmp	r1, r3
 800962c:	d002      	beq.n	8009634 <__swsetup_r+0x48>
 800962e:	4628      	mov	r0, r5
 8009630:	f000 ffba 	bl	800a5a8 <_free_r>
 8009634:	2300      	movs	r3, #0
 8009636:	6363      	str	r3, [r4, #52]	; 0x34
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800963e:	81a3      	strh	r3, [r4, #12]
 8009640:	2300      	movs	r3, #0
 8009642:	6063      	str	r3, [r4, #4]
 8009644:	6923      	ldr	r3, [r4, #16]
 8009646:	6023      	str	r3, [r4, #0]
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	f043 0308 	orr.w	r3, r3, #8
 800964e:	81a3      	strh	r3, [r4, #12]
 8009650:	6923      	ldr	r3, [r4, #16]
 8009652:	b94b      	cbnz	r3, 8009668 <__swsetup_r+0x7c>
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800965a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800965e:	d003      	beq.n	8009668 <__swsetup_r+0x7c>
 8009660:	4621      	mov	r1, r4
 8009662:	4628      	mov	r0, r5
 8009664:	f002 fed1 	bl	800c40a <__smakebuf_r>
 8009668:	89a0      	ldrh	r0, [r4, #12]
 800966a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800966e:	f010 0301 	ands.w	r3, r0, #1
 8009672:	d00a      	beq.n	800968a <__swsetup_r+0x9e>
 8009674:	2300      	movs	r3, #0
 8009676:	60a3      	str	r3, [r4, #8]
 8009678:	6963      	ldr	r3, [r4, #20]
 800967a:	425b      	negs	r3, r3
 800967c:	61a3      	str	r3, [r4, #24]
 800967e:	6923      	ldr	r3, [r4, #16]
 8009680:	b943      	cbnz	r3, 8009694 <__swsetup_r+0xa8>
 8009682:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009686:	d1c4      	bne.n	8009612 <__swsetup_r+0x26>
 8009688:	bd38      	pop	{r3, r4, r5, pc}
 800968a:	0781      	lsls	r1, r0, #30
 800968c:	bf58      	it	pl
 800968e:	6963      	ldrpl	r3, [r4, #20]
 8009690:	60a3      	str	r3, [r4, #8]
 8009692:	e7f4      	b.n	800967e <__swsetup_r+0x92>
 8009694:	2000      	movs	r0, #0
 8009696:	e7f7      	b.n	8009688 <__swsetup_r+0x9c>
 8009698:	20000074 	.word	0x20000074

0800969c <memset>:
 800969c:	4603      	mov	r3, r0
 800969e:	4402      	add	r2, r0
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d100      	bne.n	80096a6 <memset+0xa>
 80096a4:	4770      	bx	lr
 80096a6:	f803 1b01 	strb.w	r1, [r3], #1
 80096aa:	e7f9      	b.n	80096a0 <memset+0x4>

080096ac <strtok>:
 80096ac:	4b16      	ldr	r3, [pc, #88]	; (8009708 <strtok+0x5c>)
 80096ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b2:	681f      	ldr	r7, [r3, #0]
 80096b4:	4605      	mov	r5, r0
 80096b6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80096b8:	460e      	mov	r6, r1
 80096ba:	b9ec      	cbnz	r4, 80096f8 <strtok+0x4c>
 80096bc:	2050      	movs	r0, #80	; 0x50
 80096be:	f000 ffbb 	bl	800a638 <malloc>
 80096c2:	4602      	mov	r2, r0
 80096c4:	6478      	str	r0, [r7, #68]	; 0x44
 80096c6:	b920      	cbnz	r0, 80096d2 <strtok+0x26>
 80096c8:	215b      	movs	r1, #91	; 0x5b
 80096ca:	4b10      	ldr	r3, [pc, #64]	; (800970c <strtok+0x60>)
 80096cc:	4810      	ldr	r0, [pc, #64]	; (8009710 <strtok+0x64>)
 80096ce:	f000 f8df 	bl	8009890 <__assert_func>
 80096d2:	e9c0 4400 	strd	r4, r4, [r0]
 80096d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80096da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80096de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80096e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80096e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80096ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80096ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80096f2:	6184      	str	r4, [r0, #24]
 80096f4:	7704      	strb	r4, [r0, #28]
 80096f6:	6244      	str	r4, [r0, #36]	; 0x24
 80096f8:	4631      	mov	r1, r6
 80096fa:	4628      	mov	r0, r5
 80096fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096fe:	2301      	movs	r3, #1
 8009700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009704:	f000 b806 	b.w	8009714 <__strtok_r>
 8009708:	20000074 	.word	0x20000074
 800970c:	0800d294 	.word	0x0800d294
 8009710:	0800d2ab 	.word	0x0800d2ab

08009714 <__strtok_r>:
 8009714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009716:	b908      	cbnz	r0, 800971c <__strtok_r+0x8>
 8009718:	6810      	ldr	r0, [r2, #0]
 800971a:	b188      	cbz	r0, 8009740 <__strtok_r+0x2c>
 800971c:	4604      	mov	r4, r0
 800971e:	460f      	mov	r7, r1
 8009720:	4620      	mov	r0, r4
 8009722:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009726:	f817 6b01 	ldrb.w	r6, [r7], #1
 800972a:	b91e      	cbnz	r6, 8009734 <__strtok_r+0x20>
 800972c:	b965      	cbnz	r5, 8009748 <__strtok_r+0x34>
 800972e:	4628      	mov	r0, r5
 8009730:	6015      	str	r5, [r2, #0]
 8009732:	e005      	b.n	8009740 <__strtok_r+0x2c>
 8009734:	42b5      	cmp	r5, r6
 8009736:	d1f6      	bne.n	8009726 <__strtok_r+0x12>
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1f0      	bne.n	800971e <__strtok_r+0xa>
 800973c:	6014      	str	r4, [r2, #0]
 800973e:	7003      	strb	r3, [r0, #0]
 8009740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009742:	461c      	mov	r4, r3
 8009744:	e00c      	b.n	8009760 <__strtok_r+0x4c>
 8009746:	b915      	cbnz	r5, 800974e <__strtok_r+0x3a>
 8009748:	460e      	mov	r6, r1
 800974a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800974e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009752:	42ab      	cmp	r3, r5
 8009754:	d1f7      	bne.n	8009746 <__strtok_r+0x32>
 8009756:	2b00      	cmp	r3, #0
 8009758:	d0f3      	beq.n	8009742 <__strtok_r+0x2e>
 800975a:	2300      	movs	r3, #0
 800975c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009760:	6014      	str	r4, [r2, #0]
 8009762:	e7ed      	b.n	8009740 <__strtok_r+0x2c>

08009764 <_localeconv_r>:
 8009764:	4800      	ldr	r0, [pc, #0]	; (8009768 <_localeconv_r+0x4>)
 8009766:	4770      	bx	lr
 8009768:	20000168 	.word	0x20000168

0800976c <_close_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	2300      	movs	r3, #0
 8009770:	4d05      	ldr	r5, [pc, #20]	; (8009788 <_close_r+0x1c>)
 8009772:	4604      	mov	r4, r0
 8009774:	4608      	mov	r0, r1
 8009776:	602b      	str	r3, [r5, #0]
 8009778:	f7f8 fe82 	bl	8002480 <_close>
 800977c:	1c43      	adds	r3, r0, #1
 800977e:	d102      	bne.n	8009786 <_close_r+0x1a>
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	b103      	cbz	r3, 8009786 <_close_r+0x1a>
 8009784:	6023      	str	r3, [r4, #0]
 8009786:	bd38      	pop	{r3, r4, r5, pc}
 8009788:	2000254c 	.word	0x2000254c

0800978c <_lseek_r>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	4604      	mov	r4, r0
 8009790:	4608      	mov	r0, r1
 8009792:	4611      	mov	r1, r2
 8009794:	2200      	movs	r2, #0
 8009796:	4d05      	ldr	r5, [pc, #20]	; (80097ac <_lseek_r+0x20>)
 8009798:	602a      	str	r2, [r5, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	f7f8 fe94 	bl	80024c8 <_lseek>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d102      	bne.n	80097aa <_lseek_r+0x1e>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	b103      	cbz	r3, 80097aa <_lseek_r+0x1e>
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	2000254c 	.word	0x2000254c

080097b0 <_read_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	4611      	mov	r1, r2
 80097b8:	2200      	movs	r2, #0
 80097ba:	4d05      	ldr	r5, [pc, #20]	; (80097d0 <_read_r+0x20>)
 80097bc:	602a      	str	r2, [r5, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	f7f8 fe25 	bl	800240e <_read>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d102      	bne.n	80097ce <_read_r+0x1e>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	b103      	cbz	r3, 80097ce <_read_r+0x1e>
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	bd38      	pop	{r3, r4, r5, pc}
 80097d0:	2000254c 	.word	0x2000254c

080097d4 <_write_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4604      	mov	r4, r0
 80097d8:	4608      	mov	r0, r1
 80097da:	4611      	mov	r1, r2
 80097dc:	2200      	movs	r2, #0
 80097de:	4d05      	ldr	r5, [pc, #20]	; (80097f4 <_write_r+0x20>)
 80097e0:	602a      	str	r2, [r5, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f7f8 fe30 	bl	8002448 <_write>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_write_r+0x1e>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_write_r+0x1e>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	2000254c 	.word	0x2000254c

080097f8 <__errno>:
 80097f8:	4b01      	ldr	r3, [pc, #4]	; (8009800 <__errno+0x8>)
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	20000074 	.word	0x20000074

08009804 <__libc_init_array>:
 8009804:	b570      	push	{r4, r5, r6, lr}
 8009806:	2600      	movs	r6, #0
 8009808:	4d0c      	ldr	r5, [pc, #48]	; (800983c <__libc_init_array+0x38>)
 800980a:	4c0d      	ldr	r4, [pc, #52]	; (8009840 <__libc_init_array+0x3c>)
 800980c:	1b64      	subs	r4, r4, r5
 800980e:	10a4      	asrs	r4, r4, #2
 8009810:	42a6      	cmp	r6, r4
 8009812:	d109      	bne.n	8009828 <__libc_init_array+0x24>
 8009814:	f003 faaa 	bl	800cd6c <_init>
 8009818:	2600      	movs	r6, #0
 800981a:	4d0a      	ldr	r5, [pc, #40]	; (8009844 <__libc_init_array+0x40>)
 800981c:	4c0a      	ldr	r4, [pc, #40]	; (8009848 <__libc_init_array+0x44>)
 800981e:	1b64      	subs	r4, r4, r5
 8009820:	10a4      	asrs	r4, r4, #2
 8009822:	42a6      	cmp	r6, r4
 8009824:	d105      	bne.n	8009832 <__libc_init_array+0x2e>
 8009826:	bd70      	pop	{r4, r5, r6, pc}
 8009828:	f855 3b04 	ldr.w	r3, [r5], #4
 800982c:	4798      	blx	r3
 800982e:	3601      	adds	r6, #1
 8009830:	e7ee      	b.n	8009810 <__libc_init_array+0xc>
 8009832:	f855 3b04 	ldr.w	r3, [r5], #4
 8009836:	4798      	blx	r3
 8009838:	3601      	adds	r6, #1
 800983a:	e7f2      	b.n	8009822 <__libc_init_array+0x1e>
 800983c:	0800d5dc 	.word	0x0800d5dc
 8009840:	0800d5dc 	.word	0x0800d5dc
 8009844:	0800d5dc 	.word	0x0800d5dc
 8009848:	0800d5e0 	.word	0x0800d5e0

0800984c <__retarget_lock_acquire_recursive>:
 800984c:	4770      	bx	lr

0800984e <__retarget_lock_release_recursive>:
 800984e:	4770      	bx	lr

08009850 <memchr>:
 8009850:	4603      	mov	r3, r0
 8009852:	b510      	push	{r4, lr}
 8009854:	b2c9      	uxtb	r1, r1
 8009856:	4402      	add	r2, r0
 8009858:	4293      	cmp	r3, r2
 800985a:	4618      	mov	r0, r3
 800985c:	d101      	bne.n	8009862 <memchr+0x12>
 800985e:	2000      	movs	r0, #0
 8009860:	e003      	b.n	800986a <memchr+0x1a>
 8009862:	7804      	ldrb	r4, [r0, #0]
 8009864:	3301      	adds	r3, #1
 8009866:	428c      	cmp	r4, r1
 8009868:	d1f6      	bne.n	8009858 <memchr+0x8>
 800986a:	bd10      	pop	{r4, pc}

0800986c <memcpy>:
 800986c:	440a      	add	r2, r1
 800986e:	4291      	cmp	r1, r2
 8009870:	f100 33ff 	add.w	r3, r0, #4294967295
 8009874:	d100      	bne.n	8009878 <memcpy+0xc>
 8009876:	4770      	bx	lr
 8009878:	b510      	push	{r4, lr}
 800987a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800987e:	4291      	cmp	r1, r2
 8009880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009884:	d1f9      	bne.n	800987a <memcpy+0xe>
 8009886:	bd10      	pop	{r4, pc}

08009888 <nanf>:
 8009888:	4800      	ldr	r0, [pc, #0]	; (800988c <nanf+0x4>)
 800988a:	4770      	bx	lr
 800988c:	7fc00000 	.word	0x7fc00000

08009890 <__assert_func>:
 8009890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009892:	4614      	mov	r4, r2
 8009894:	461a      	mov	r2, r3
 8009896:	4b09      	ldr	r3, [pc, #36]	; (80098bc <__assert_func+0x2c>)
 8009898:	4605      	mov	r5, r0
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68d8      	ldr	r0, [r3, #12]
 800989e:	b14c      	cbz	r4, 80098b4 <__assert_func+0x24>
 80098a0:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <__assert_func+0x30>)
 80098a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098a6:	9100      	str	r1, [sp, #0]
 80098a8:	462b      	mov	r3, r5
 80098aa:	4906      	ldr	r1, [pc, #24]	; (80098c4 <__assert_func+0x34>)
 80098ac:	f002 fd76 	bl	800c39c <fiprintf>
 80098b0:	f002 fe4c 	bl	800c54c <abort>
 80098b4:	4b04      	ldr	r3, [pc, #16]	; (80098c8 <__assert_func+0x38>)
 80098b6:	461c      	mov	r4, r3
 80098b8:	e7f3      	b.n	80098a2 <__assert_func+0x12>
 80098ba:	bf00      	nop
 80098bc:	20000074 	.word	0x20000074
 80098c0:	0800d305 	.word	0x0800d305
 80098c4:	0800d312 	.word	0x0800d312
 80098c8:	0800d340 	.word	0x0800d340

080098cc <quorem>:
 80098cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d0:	6903      	ldr	r3, [r0, #16]
 80098d2:	690c      	ldr	r4, [r1, #16]
 80098d4:	4607      	mov	r7, r0
 80098d6:	42a3      	cmp	r3, r4
 80098d8:	db7f      	blt.n	80099da <quorem+0x10e>
 80098da:	3c01      	subs	r4, #1
 80098dc:	f100 0514 	add.w	r5, r0, #20
 80098e0:	f101 0814 	add.w	r8, r1, #20
 80098e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098e8:	9301      	str	r3, [sp, #4]
 80098ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098f2:	3301      	adds	r3, #1
 80098f4:	429a      	cmp	r2, r3
 80098f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80098fa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009902:	d331      	bcc.n	8009968 <quorem+0x9c>
 8009904:	f04f 0e00 	mov.w	lr, #0
 8009908:	4640      	mov	r0, r8
 800990a:	46ac      	mov	ip, r5
 800990c:	46f2      	mov	sl, lr
 800990e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009912:	b293      	uxth	r3, r2
 8009914:	fb06 e303 	mla	r3, r6, r3, lr
 8009918:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800991c:	0c1a      	lsrs	r2, r3, #16
 800991e:	b29b      	uxth	r3, r3
 8009920:	fb06 220e 	mla	r2, r6, lr, r2
 8009924:	ebaa 0303 	sub.w	r3, sl, r3
 8009928:	f8dc a000 	ldr.w	sl, [ip]
 800992c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009930:	fa1f fa8a 	uxth.w	sl, sl
 8009934:	4453      	add	r3, sl
 8009936:	f8dc a000 	ldr.w	sl, [ip]
 800993a:	b292      	uxth	r2, r2
 800993c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009940:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009944:	b29b      	uxth	r3, r3
 8009946:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800994a:	4581      	cmp	r9, r0
 800994c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009950:	f84c 3b04 	str.w	r3, [ip], #4
 8009954:	d2db      	bcs.n	800990e <quorem+0x42>
 8009956:	f855 300b 	ldr.w	r3, [r5, fp]
 800995a:	b92b      	cbnz	r3, 8009968 <quorem+0x9c>
 800995c:	9b01      	ldr	r3, [sp, #4]
 800995e:	3b04      	subs	r3, #4
 8009960:	429d      	cmp	r5, r3
 8009962:	461a      	mov	r2, r3
 8009964:	d32d      	bcc.n	80099c2 <quorem+0xf6>
 8009966:	613c      	str	r4, [r7, #16]
 8009968:	4638      	mov	r0, r7
 800996a:	f001 f9dd 	bl	800ad28 <__mcmp>
 800996e:	2800      	cmp	r0, #0
 8009970:	db23      	blt.n	80099ba <quorem+0xee>
 8009972:	4629      	mov	r1, r5
 8009974:	2000      	movs	r0, #0
 8009976:	3601      	adds	r6, #1
 8009978:	f858 2b04 	ldr.w	r2, [r8], #4
 800997c:	f8d1 c000 	ldr.w	ip, [r1]
 8009980:	b293      	uxth	r3, r2
 8009982:	1ac3      	subs	r3, r0, r3
 8009984:	0c12      	lsrs	r2, r2, #16
 8009986:	fa1f f08c 	uxth.w	r0, ip
 800998a:	4403      	add	r3, r0
 800998c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009994:	b29b      	uxth	r3, r3
 8009996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800999a:	45c1      	cmp	r9, r8
 800999c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099a0:	f841 3b04 	str.w	r3, [r1], #4
 80099a4:	d2e8      	bcs.n	8009978 <quorem+0xac>
 80099a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099ae:	b922      	cbnz	r2, 80099ba <quorem+0xee>
 80099b0:	3b04      	subs	r3, #4
 80099b2:	429d      	cmp	r5, r3
 80099b4:	461a      	mov	r2, r3
 80099b6:	d30a      	bcc.n	80099ce <quorem+0x102>
 80099b8:	613c      	str	r4, [r7, #16]
 80099ba:	4630      	mov	r0, r6
 80099bc:	b003      	add	sp, #12
 80099be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c2:	6812      	ldr	r2, [r2, #0]
 80099c4:	3b04      	subs	r3, #4
 80099c6:	2a00      	cmp	r2, #0
 80099c8:	d1cd      	bne.n	8009966 <quorem+0x9a>
 80099ca:	3c01      	subs	r4, #1
 80099cc:	e7c8      	b.n	8009960 <quorem+0x94>
 80099ce:	6812      	ldr	r2, [r2, #0]
 80099d0:	3b04      	subs	r3, #4
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	d1f0      	bne.n	80099b8 <quorem+0xec>
 80099d6:	3c01      	subs	r4, #1
 80099d8:	e7eb      	b.n	80099b2 <quorem+0xe6>
 80099da:	2000      	movs	r0, #0
 80099dc:	e7ee      	b.n	80099bc <quorem+0xf0>
	...

080099e0 <_dtoa_r>:
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	4616      	mov	r6, r2
 80099e6:	461f      	mov	r7, r3
 80099e8:	69c4      	ldr	r4, [r0, #28]
 80099ea:	b099      	sub	sp, #100	; 0x64
 80099ec:	4605      	mov	r5, r0
 80099ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80099f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80099f6:	b974      	cbnz	r4, 8009a16 <_dtoa_r+0x36>
 80099f8:	2010      	movs	r0, #16
 80099fa:	f000 fe1d 	bl	800a638 <malloc>
 80099fe:	4602      	mov	r2, r0
 8009a00:	61e8      	str	r0, [r5, #28]
 8009a02:	b920      	cbnz	r0, 8009a0e <_dtoa_r+0x2e>
 8009a04:	21ef      	movs	r1, #239	; 0xef
 8009a06:	4bac      	ldr	r3, [pc, #688]	; (8009cb8 <_dtoa_r+0x2d8>)
 8009a08:	48ac      	ldr	r0, [pc, #688]	; (8009cbc <_dtoa_r+0x2dc>)
 8009a0a:	f7ff ff41 	bl	8009890 <__assert_func>
 8009a0e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a12:	6004      	str	r4, [r0, #0]
 8009a14:	60c4      	str	r4, [r0, #12]
 8009a16:	69eb      	ldr	r3, [r5, #28]
 8009a18:	6819      	ldr	r1, [r3, #0]
 8009a1a:	b151      	cbz	r1, 8009a32 <_dtoa_r+0x52>
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	2301      	movs	r3, #1
 8009a20:	4093      	lsls	r3, r2
 8009a22:	604a      	str	r2, [r1, #4]
 8009a24:	608b      	str	r3, [r1, #8]
 8009a26:	4628      	mov	r0, r5
 8009a28:	f000 fefa 	bl	800a820 <_Bfree>
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	69eb      	ldr	r3, [r5, #28]
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	1e3b      	subs	r3, r7, #0
 8009a34:	bfaf      	iteee	ge
 8009a36:	2300      	movge	r3, #0
 8009a38:	2201      	movlt	r2, #1
 8009a3a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a3e:	9305      	strlt	r3, [sp, #20]
 8009a40:	bfa8      	it	ge
 8009a42:	f8c8 3000 	strge.w	r3, [r8]
 8009a46:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009a4a:	4b9d      	ldr	r3, [pc, #628]	; (8009cc0 <_dtoa_r+0x2e0>)
 8009a4c:	bfb8      	it	lt
 8009a4e:	f8c8 2000 	strlt.w	r2, [r8]
 8009a52:	ea33 0309 	bics.w	r3, r3, r9
 8009a56:	d119      	bne.n	8009a8c <_dtoa_r+0xac>
 8009a58:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a64:	4333      	orrs	r3, r6
 8009a66:	f000 8589 	beq.w	800a57c <_dtoa_r+0xb9c>
 8009a6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a6c:	b953      	cbnz	r3, 8009a84 <_dtoa_r+0xa4>
 8009a6e:	4b95      	ldr	r3, [pc, #596]	; (8009cc4 <_dtoa_r+0x2e4>)
 8009a70:	e023      	b.n	8009aba <_dtoa_r+0xda>
 8009a72:	4b95      	ldr	r3, [pc, #596]	; (8009cc8 <_dtoa_r+0x2e8>)
 8009a74:	9303      	str	r3, [sp, #12]
 8009a76:	3308      	adds	r3, #8
 8009a78:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a7a:	6013      	str	r3, [r2, #0]
 8009a7c:	9803      	ldr	r0, [sp, #12]
 8009a7e:	b019      	add	sp, #100	; 0x64
 8009a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a84:	4b8f      	ldr	r3, [pc, #572]	; (8009cc4 <_dtoa_r+0x2e4>)
 8009a86:	9303      	str	r3, [sp, #12]
 8009a88:	3303      	adds	r3, #3
 8009a8a:	e7f5      	b.n	8009a78 <_dtoa_r+0x98>
 8009a8c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009a90:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009a94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a98:	2200      	movs	r2, #0
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f7f7 f842 	bl	8000b24 <__aeabi_dcmpeq>
 8009aa0:	4680      	mov	r8, r0
 8009aa2:	b160      	cbz	r0, 8009abe <_dtoa_r+0xde>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009aa8:	6013      	str	r3, [r2, #0]
 8009aaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 8562 	beq.w	800a576 <_dtoa_r+0xb96>
 8009ab2:	4b86      	ldr	r3, [pc, #536]	; (8009ccc <_dtoa_r+0x2ec>)
 8009ab4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009ab6:	6013      	str	r3, [r2, #0]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	9303      	str	r3, [sp, #12]
 8009abc:	e7de      	b.n	8009a7c <_dtoa_r+0x9c>
 8009abe:	ab16      	add	r3, sp, #88	; 0x58
 8009ac0:	9301      	str	r3, [sp, #4]
 8009ac2:	ab17      	add	r3, sp, #92	; 0x5c
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009acc:	f001 fa3c 	bl	800af48 <__d2b>
 8009ad0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009ad4:	4682      	mov	sl, r0
 8009ad6:	2c00      	cmp	r4, #0
 8009ad8:	d07e      	beq.n	8009bd8 <_dtoa_r+0x1f8>
 8009ada:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ae0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009aec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009af0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009af4:	4619      	mov	r1, r3
 8009af6:	2200      	movs	r2, #0
 8009af8:	4b75      	ldr	r3, [pc, #468]	; (8009cd0 <_dtoa_r+0x2f0>)
 8009afa:	f7f6 fbf3 	bl	80002e4 <__aeabi_dsub>
 8009afe:	a368      	add	r3, pc, #416	; (adr r3, 8009ca0 <_dtoa_r+0x2c0>)
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	f7f6 fda6 	bl	8000654 <__aeabi_dmul>
 8009b08:	a367      	add	r3, pc, #412	; (adr r3, 8009ca8 <_dtoa_r+0x2c8>)
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	f7f6 fbeb 	bl	80002e8 <__adddf3>
 8009b12:	4606      	mov	r6, r0
 8009b14:	4620      	mov	r0, r4
 8009b16:	460f      	mov	r7, r1
 8009b18:	f7f6 fd32 	bl	8000580 <__aeabi_i2d>
 8009b1c:	a364      	add	r3, pc, #400	; (adr r3, 8009cb0 <_dtoa_r+0x2d0>)
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	f7f6 fd97 	bl	8000654 <__aeabi_dmul>
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	f7f6 fbdb 	bl	80002e8 <__adddf3>
 8009b32:	4606      	mov	r6, r0
 8009b34:	460f      	mov	r7, r1
 8009b36:	f7f7 f83d 	bl	8000bb4 <__aeabi_d2iz>
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	4683      	mov	fp, r0
 8009b3e:	2300      	movs	r3, #0
 8009b40:	4630      	mov	r0, r6
 8009b42:	4639      	mov	r1, r7
 8009b44:	f7f6 fff8 	bl	8000b38 <__aeabi_dcmplt>
 8009b48:	b148      	cbz	r0, 8009b5e <_dtoa_r+0x17e>
 8009b4a:	4658      	mov	r0, fp
 8009b4c:	f7f6 fd18 	bl	8000580 <__aeabi_i2d>
 8009b50:	4632      	mov	r2, r6
 8009b52:	463b      	mov	r3, r7
 8009b54:	f7f6 ffe6 	bl	8000b24 <__aeabi_dcmpeq>
 8009b58:	b908      	cbnz	r0, 8009b5e <_dtoa_r+0x17e>
 8009b5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b5e:	f1bb 0f16 	cmp.w	fp, #22
 8009b62:	d857      	bhi.n	8009c14 <_dtoa_r+0x234>
 8009b64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b68:	4b5a      	ldr	r3, [pc, #360]	; (8009cd4 <_dtoa_r+0x2f4>)
 8009b6a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	f7f6 ffe1 	bl	8000b38 <__aeabi_dcmplt>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d04e      	beq.n	8009c18 <_dtoa_r+0x238>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009b84:	1b1b      	subs	r3, r3, r4
 8009b86:	1e5a      	subs	r2, r3, #1
 8009b88:	bf46      	itte	mi
 8009b8a:	f1c3 0901 	rsbmi	r9, r3, #1
 8009b8e:	2300      	movmi	r3, #0
 8009b90:	f04f 0900 	movpl.w	r9, #0
 8009b94:	9209      	str	r2, [sp, #36]	; 0x24
 8009b96:	bf48      	it	mi
 8009b98:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009b9a:	f1bb 0f00 	cmp.w	fp, #0
 8009b9e:	db3d      	blt.n	8009c1c <_dtoa_r+0x23c>
 8009ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009ba6:	445b      	add	r3, fp
 8009ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8009baa:	2300      	movs	r3, #0
 8009bac:	930a      	str	r3, [sp, #40]	; 0x28
 8009bae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bb0:	2b09      	cmp	r3, #9
 8009bb2:	d867      	bhi.n	8009c84 <_dtoa_r+0x2a4>
 8009bb4:	2b05      	cmp	r3, #5
 8009bb6:	bfc4      	itt	gt
 8009bb8:	3b04      	subgt	r3, #4
 8009bba:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bbe:	bfc8      	it	gt
 8009bc0:	2400      	movgt	r4, #0
 8009bc2:	f1a3 0302 	sub.w	r3, r3, #2
 8009bc6:	bfd8      	it	le
 8009bc8:	2401      	movle	r4, #1
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	f200 8086 	bhi.w	8009cdc <_dtoa_r+0x2fc>
 8009bd0:	e8df f003 	tbb	[pc, r3]
 8009bd4:	5637392c 	.word	0x5637392c
 8009bd8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009bdc:	441c      	add	r4, r3
 8009bde:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009be2:	2b20      	cmp	r3, #32
 8009be4:	bfc1      	itttt	gt
 8009be6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009bea:	fa09 f903 	lslgt.w	r9, r9, r3
 8009bee:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009bf2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009bf6:	bfd6      	itet	le
 8009bf8:	f1c3 0320 	rsble	r3, r3, #32
 8009bfc:	ea49 0003 	orrgt.w	r0, r9, r3
 8009c00:	fa06 f003 	lslle.w	r0, r6, r3
 8009c04:	f7f6 fcac 	bl	8000560 <__aeabi_ui2d>
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009c0e:	3c01      	subs	r4, #1
 8009c10:	9213      	str	r2, [sp, #76]	; 0x4c
 8009c12:	e76f      	b.n	8009af4 <_dtoa_r+0x114>
 8009c14:	2301      	movs	r3, #1
 8009c16:	e7b3      	b.n	8009b80 <_dtoa_r+0x1a0>
 8009c18:	900f      	str	r0, [sp, #60]	; 0x3c
 8009c1a:	e7b2      	b.n	8009b82 <_dtoa_r+0x1a2>
 8009c1c:	f1cb 0300 	rsb	r3, fp, #0
 8009c20:	930a      	str	r3, [sp, #40]	; 0x28
 8009c22:	2300      	movs	r3, #0
 8009c24:	eba9 090b 	sub.w	r9, r9, fp
 8009c28:	930e      	str	r3, [sp, #56]	; 0x38
 8009c2a:	e7c0      	b.n	8009bae <_dtoa_r+0x1ce>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	dc55      	bgt.n	8009ce2 <_dtoa_r+0x302>
 8009c36:	2301      	movs	r3, #1
 8009c38:	461a      	mov	r2, r3
 8009c3a:	9306      	str	r3, [sp, #24]
 8009c3c:	9308      	str	r3, [sp, #32]
 8009c3e:	9223      	str	r2, [sp, #140]	; 0x8c
 8009c40:	e00b      	b.n	8009c5a <_dtoa_r+0x27a>
 8009c42:	2301      	movs	r3, #1
 8009c44:	e7f3      	b.n	8009c2e <_dtoa_r+0x24e>
 8009c46:	2300      	movs	r3, #0
 8009c48:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c4c:	445b      	add	r3, fp
 8009c4e:	9306      	str	r3, [sp, #24]
 8009c50:	3301      	adds	r3, #1
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	9308      	str	r3, [sp, #32]
 8009c56:	bfb8      	it	lt
 8009c58:	2301      	movlt	r3, #1
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	2204      	movs	r2, #4
 8009c5e:	69e8      	ldr	r0, [r5, #28]
 8009c60:	f102 0614 	add.w	r6, r2, #20
 8009c64:	429e      	cmp	r6, r3
 8009c66:	d940      	bls.n	8009cea <_dtoa_r+0x30a>
 8009c68:	6041      	str	r1, [r0, #4]
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f000 fd98 	bl	800a7a0 <_Balloc>
 8009c70:	9003      	str	r0, [sp, #12]
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d13c      	bne.n	8009cf0 <_dtoa_r+0x310>
 8009c76:	4602      	mov	r2, r0
 8009c78:	f240 11af 	movw	r1, #431	; 0x1af
 8009c7c:	4b16      	ldr	r3, [pc, #88]	; (8009cd8 <_dtoa_r+0x2f8>)
 8009c7e:	e6c3      	b.n	8009a08 <_dtoa_r+0x28>
 8009c80:	2301      	movs	r3, #1
 8009c82:	e7e1      	b.n	8009c48 <_dtoa_r+0x268>
 8009c84:	2401      	movs	r4, #1
 8009c86:	2300      	movs	r3, #0
 8009c88:	940b      	str	r4, [sp, #44]	; 0x2c
 8009c8a:	9322      	str	r3, [sp, #136]	; 0x88
 8009c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c90:	2200      	movs	r2, #0
 8009c92:	9306      	str	r3, [sp, #24]
 8009c94:	9308      	str	r3, [sp, #32]
 8009c96:	2312      	movs	r3, #18
 8009c98:	e7d1      	b.n	8009c3e <_dtoa_r+0x25e>
 8009c9a:	bf00      	nop
 8009c9c:	f3af 8000 	nop.w
 8009ca0:	636f4361 	.word	0x636f4361
 8009ca4:	3fd287a7 	.word	0x3fd287a7
 8009ca8:	8b60c8b3 	.word	0x8b60c8b3
 8009cac:	3fc68a28 	.word	0x3fc68a28
 8009cb0:	509f79fb 	.word	0x509f79fb
 8009cb4:	3fd34413 	.word	0x3fd34413
 8009cb8:	0800d294 	.word	0x0800d294
 8009cbc:	0800d34e 	.word	0x0800d34e
 8009cc0:	7ff00000 	.word	0x7ff00000
 8009cc4:	0800d34a 	.word	0x0800d34a
 8009cc8:	0800d341 	.word	0x0800d341
 8009ccc:	0800d26c 	.word	0x0800d26c
 8009cd0:	3ff80000 	.word	0x3ff80000
 8009cd4:	0800d438 	.word	0x0800d438
 8009cd8:	0800d3a6 	.word	0x0800d3a6
 8009cdc:	2301      	movs	r3, #1
 8009cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ce0:	e7d4      	b.n	8009c8c <_dtoa_r+0x2ac>
 8009ce2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ce4:	9306      	str	r3, [sp, #24]
 8009ce6:	9308      	str	r3, [sp, #32]
 8009ce8:	e7b7      	b.n	8009c5a <_dtoa_r+0x27a>
 8009cea:	3101      	adds	r1, #1
 8009cec:	0052      	lsls	r2, r2, #1
 8009cee:	e7b7      	b.n	8009c60 <_dtoa_r+0x280>
 8009cf0:	69eb      	ldr	r3, [r5, #28]
 8009cf2:	9a03      	ldr	r2, [sp, #12]
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	9b08      	ldr	r3, [sp, #32]
 8009cf8:	2b0e      	cmp	r3, #14
 8009cfa:	f200 80a8 	bhi.w	8009e4e <_dtoa_r+0x46e>
 8009cfe:	2c00      	cmp	r4, #0
 8009d00:	f000 80a5 	beq.w	8009e4e <_dtoa_r+0x46e>
 8009d04:	f1bb 0f00 	cmp.w	fp, #0
 8009d08:	dd34      	ble.n	8009d74 <_dtoa_r+0x394>
 8009d0a:	4b9a      	ldr	r3, [pc, #616]	; (8009f74 <_dtoa_r+0x594>)
 8009d0c:	f00b 020f 	and.w	r2, fp, #15
 8009d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009d18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d1c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009d20:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009d24:	d016      	beq.n	8009d54 <_dtoa_r+0x374>
 8009d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d2a:	4b93      	ldr	r3, [pc, #588]	; (8009f78 <_dtoa_r+0x598>)
 8009d2c:	2703      	movs	r7, #3
 8009d2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d32:	f7f6 fdb9 	bl	80008a8 <__aeabi_ddiv>
 8009d36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d3a:	f004 040f 	and.w	r4, r4, #15
 8009d3e:	4e8e      	ldr	r6, [pc, #568]	; (8009f78 <_dtoa_r+0x598>)
 8009d40:	b954      	cbnz	r4, 8009d58 <_dtoa_r+0x378>
 8009d42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d4a:	f7f6 fdad 	bl	80008a8 <__aeabi_ddiv>
 8009d4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d52:	e029      	b.n	8009da8 <_dtoa_r+0x3c8>
 8009d54:	2702      	movs	r7, #2
 8009d56:	e7f2      	b.n	8009d3e <_dtoa_r+0x35e>
 8009d58:	07e1      	lsls	r1, r4, #31
 8009d5a:	d508      	bpl.n	8009d6e <_dtoa_r+0x38e>
 8009d5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d64:	f7f6 fc76 	bl	8000654 <__aeabi_dmul>
 8009d68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d6c:	3701      	adds	r7, #1
 8009d6e:	1064      	asrs	r4, r4, #1
 8009d70:	3608      	adds	r6, #8
 8009d72:	e7e5      	b.n	8009d40 <_dtoa_r+0x360>
 8009d74:	f000 80a5 	beq.w	8009ec2 <_dtoa_r+0x4e2>
 8009d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d7c:	f1cb 0400 	rsb	r4, fp, #0
 8009d80:	4b7c      	ldr	r3, [pc, #496]	; (8009f74 <_dtoa_r+0x594>)
 8009d82:	f004 020f 	and.w	r2, r4, #15
 8009d86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	f7f6 fc61 	bl	8000654 <__aeabi_dmul>
 8009d92:	2702      	movs	r7, #2
 8009d94:	2300      	movs	r3, #0
 8009d96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d9a:	4e77      	ldr	r6, [pc, #476]	; (8009f78 <_dtoa_r+0x598>)
 8009d9c:	1124      	asrs	r4, r4, #4
 8009d9e:	2c00      	cmp	r4, #0
 8009da0:	f040 8084 	bne.w	8009eac <_dtoa_r+0x4cc>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1d2      	bne.n	8009d4e <_dtoa_r+0x36e>
 8009da8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009dac:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009db0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 8087 	beq.w	8009ec6 <_dtoa_r+0x4e6>
 8009db8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	4b6f      	ldr	r3, [pc, #444]	; (8009f7c <_dtoa_r+0x59c>)
 8009dc0:	f7f6 feba 	bl	8000b38 <__aeabi_dcmplt>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d07e      	beq.n	8009ec6 <_dtoa_r+0x4e6>
 8009dc8:	9b08      	ldr	r3, [sp, #32]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d07b      	beq.n	8009ec6 <_dtoa_r+0x4e6>
 8009dce:	9b06      	ldr	r3, [sp, #24]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	dd38      	ble.n	8009e46 <_dtoa_r+0x466>
 8009dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dd8:	2200      	movs	r2, #0
 8009dda:	4b69      	ldr	r3, [pc, #420]	; (8009f80 <_dtoa_r+0x5a0>)
 8009ddc:	f7f6 fc3a 	bl	8000654 <__aeabi_dmul>
 8009de0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009de4:	9c06      	ldr	r4, [sp, #24]
 8009de6:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009dea:	3701      	adds	r7, #1
 8009dec:	4638      	mov	r0, r7
 8009dee:	f7f6 fbc7 	bl	8000580 <__aeabi_i2d>
 8009df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009df6:	f7f6 fc2d 	bl	8000654 <__aeabi_dmul>
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4b61      	ldr	r3, [pc, #388]	; (8009f84 <_dtoa_r+0x5a4>)
 8009dfe:	f7f6 fa73 	bl	80002e8 <__adddf3>
 8009e02:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009e06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e0a:	9611      	str	r6, [sp, #68]	; 0x44
 8009e0c:	2c00      	cmp	r4, #0
 8009e0e:	d15d      	bne.n	8009ecc <_dtoa_r+0x4ec>
 8009e10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e14:	2200      	movs	r2, #0
 8009e16:	4b5c      	ldr	r3, [pc, #368]	; (8009f88 <_dtoa_r+0x5a8>)
 8009e18:	f7f6 fa64 	bl	80002e4 <__aeabi_dsub>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e24:	4633      	mov	r3, r6
 8009e26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e28:	f7f6 fea4 	bl	8000b74 <__aeabi_dcmpgt>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	f040 8295 	bne.w	800a35c <_dtoa_r+0x97c>
 8009e32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e38:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009e3c:	f7f6 fe7c 	bl	8000b38 <__aeabi_dcmplt>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	f040 8289 	bne.w	800a358 <_dtoa_r+0x978>
 8009e46:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009e4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009e4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f2c0 8151 	blt.w	800a0f8 <_dtoa_r+0x718>
 8009e56:	f1bb 0f0e 	cmp.w	fp, #14
 8009e5a:	f300 814d 	bgt.w	800a0f8 <_dtoa_r+0x718>
 8009e5e:	4b45      	ldr	r3, [pc, #276]	; (8009f74 <_dtoa_r+0x594>)
 8009e60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e68:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009e6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f280 80da 	bge.w	800a028 <_dtoa_r+0x648>
 8009e74:	9b08      	ldr	r3, [sp, #32]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f300 80d6 	bgt.w	800a028 <_dtoa_r+0x648>
 8009e7c:	f040 826b 	bne.w	800a356 <_dtoa_r+0x976>
 8009e80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e84:	2200      	movs	r2, #0
 8009e86:	4b40      	ldr	r3, [pc, #256]	; (8009f88 <_dtoa_r+0x5a8>)
 8009e88:	f7f6 fbe4 	bl	8000654 <__aeabi_dmul>
 8009e8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e90:	f7f6 fe66 	bl	8000b60 <__aeabi_dcmpge>
 8009e94:	9c08      	ldr	r4, [sp, #32]
 8009e96:	4626      	mov	r6, r4
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	f040 8241 	bne.w	800a320 <_dtoa_r+0x940>
 8009e9e:	2331      	movs	r3, #49	; 0x31
 8009ea0:	9f03      	ldr	r7, [sp, #12]
 8009ea2:	f10b 0b01 	add.w	fp, fp, #1
 8009ea6:	f807 3b01 	strb.w	r3, [r7], #1
 8009eaa:	e23d      	b.n	800a328 <_dtoa_r+0x948>
 8009eac:	07e2      	lsls	r2, r4, #31
 8009eae:	d505      	bpl.n	8009ebc <_dtoa_r+0x4dc>
 8009eb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009eb4:	f7f6 fbce 	bl	8000654 <__aeabi_dmul>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	3701      	adds	r7, #1
 8009ebc:	1064      	asrs	r4, r4, #1
 8009ebe:	3608      	adds	r6, #8
 8009ec0:	e76d      	b.n	8009d9e <_dtoa_r+0x3be>
 8009ec2:	2702      	movs	r7, #2
 8009ec4:	e770      	b.n	8009da8 <_dtoa_r+0x3c8>
 8009ec6:	46d8      	mov	r8, fp
 8009ec8:	9c08      	ldr	r4, [sp, #32]
 8009eca:	e78f      	b.n	8009dec <_dtoa_r+0x40c>
 8009ecc:	9903      	ldr	r1, [sp, #12]
 8009ece:	4b29      	ldr	r3, [pc, #164]	; (8009f74 <_dtoa_r+0x594>)
 8009ed0:	4421      	add	r1, r4
 8009ed2:	9112      	str	r1, [sp, #72]	; 0x48
 8009ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ed6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009eda:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009ede:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ee2:	2900      	cmp	r1, #0
 8009ee4:	d054      	beq.n	8009f90 <_dtoa_r+0x5b0>
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	4928      	ldr	r1, [pc, #160]	; (8009f8c <_dtoa_r+0x5ac>)
 8009eea:	f7f6 fcdd 	bl	80008a8 <__aeabi_ddiv>
 8009eee:	463b      	mov	r3, r7
 8009ef0:	4632      	mov	r2, r6
 8009ef2:	f7f6 f9f7 	bl	80002e4 <__aeabi_dsub>
 8009ef6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009efa:	9f03      	ldr	r7, [sp, #12]
 8009efc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f00:	f7f6 fe58 	bl	8000bb4 <__aeabi_d2iz>
 8009f04:	4604      	mov	r4, r0
 8009f06:	f7f6 fb3b 	bl	8000580 <__aeabi_i2d>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f12:	f7f6 f9e7 	bl	80002e4 <__aeabi_dsub>
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	3430      	adds	r4, #48	; 0x30
 8009f1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f24:	f807 4b01 	strb.w	r4, [r7], #1
 8009f28:	f7f6 fe06 	bl	8000b38 <__aeabi_dcmplt>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d173      	bne.n	800a018 <_dtoa_r+0x638>
 8009f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f34:	2000      	movs	r0, #0
 8009f36:	4911      	ldr	r1, [pc, #68]	; (8009f7c <_dtoa_r+0x59c>)
 8009f38:	f7f6 f9d4 	bl	80002e4 <__aeabi_dsub>
 8009f3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f40:	f7f6 fdfa 	bl	8000b38 <__aeabi_dcmplt>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	f040 80b6 	bne.w	800a0b6 <_dtoa_r+0x6d6>
 8009f4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f4c:	429f      	cmp	r7, r3
 8009f4e:	f43f af7a 	beq.w	8009e46 <_dtoa_r+0x466>
 8009f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f56:	2200      	movs	r2, #0
 8009f58:	4b09      	ldr	r3, [pc, #36]	; (8009f80 <_dtoa_r+0x5a0>)
 8009f5a:	f7f6 fb7b 	bl	8000654 <__aeabi_dmul>
 8009f5e:	2200      	movs	r2, #0
 8009f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f68:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <_dtoa_r+0x5a0>)
 8009f6a:	f7f6 fb73 	bl	8000654 <__aeabi_dmul>
 8009f6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f72:	e7c3      	b.n	8009efc <_dtoa_r+0x51c>
 8009f74:	0800d438 	.word	0x0800d438
 8009f78:	0800d410 	.word	0x0800d410
 8009f7c:	3ff00000 	.word	0x3ff00000
 8009f80:	40240000 	.word	0x40240000
 8009f84:	401c0000 	.word	0x401c0000
 8009f88:	40140000 	.word	0x40140000
 8009f8c:	3fe00000 	.word	0x3fe00000
 8009f90:	4630      	mov	r0, r6
 8009f92:	4639      	mov	r1, r7
 8009f94:	f7f6 fb5e 	bl	8000654 <__aeabi_dmul>
 8009f98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f9e:	9c03      	ldr	r4, [sp, #12]
 8009fa0:	9314      	str	r3, [sp, #80]	; 0x50
 8009fa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fa6:	f7f6 fe05 	bl	8000bb4 <__aeabi_d2iz>
 8009faa:	9015      	str	r0, [sp, #84]	; 0x54
 8009fac:	f7f6 fae8 	bl	8000580 <__aeabi_i2d>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fb8:	f7f6 f994 	bl	80002e4 <__aeabi_dsub>
 8009fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	3330      	adds	r3, #48	; 0x30
 8009fc2:	f804 3b01 	strb.w	r3, [r4], #1
 8009fc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fc8:	460f      	mov	r7, r1
 8009fca:	429c      	cmp	r4, r3
 8009fcc:	f04f 0200 	mov.w	r2, #0
 8009fd0:	d124      	bne.n	800a01c <_dtoa_r+0x63c>
 8009fd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009fd6:	4baf      	ldr	r3, [pc, #700]	; (800a294 <_dtoa_r+0x8b4>)
 8009fd8:	f7f6 f986 	bl	80002e8 <__adddf3>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	f7f6 fdc6 	bl	8000b74 <__aeabi_dcmpgt>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d163      	bne.n	800a0b4 <_dtoa_r+0x6d4>
 8009fec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	49a8      	ldr	r1, [pc, #672]	; (800a294 <_dtoa_r+0x8b4>)
 8009ff4:	f7f6 f976 	bl	80002e4 <__aeabi_dsub>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	4639      	mov	r1, r7
 800a000:	f7f6 fd9a 	bl	8000b38 <__aeabi_dcmplt>
 800a004:	2800      	cmp	r0, #0
 800a006:	f43f af1e 	beq.w	8009e46 <_dtoa_r+0x466>
 800a00a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a00c:	1e7b      	subs	r3, r7, #1
 800a00e:	9314      	str	r3, [sp, #80]	; 0x50
 800a010:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a014:	2b30      	cmp	r3, #48	; 0x30
 800a016:	d0f8      	beq.n	800a00a <_dtoa_r+0x62a>
 800a018:	46c3      	mov	fp, r8
 800a01a:	e03b      	b.n	800a094 <_dtoa_r+0x6b4>
 800a01c:	4b9e      	ldr	r3, [pc, #632]	; (800a298 <_dtoa_r+0x8b8>)
 800a01e:	f7f6 fb19 	bl	8000654 <__aeabi_dmul>
 800a022:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a026:	e7bc      	b.n	8009fa2 <_dtoa_r+0x5c2>
 800a028:	9f03      	ldr	r7, [sp, #12]
 800a02a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a02e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a032:	4640      	mov	r0, r8
 800a034:	4649      	mov	r1, r9
 800a036:	f7f6 fc37 	bl	80008a8 <__aeabi_ddiv>
 800a03a:	f7f6 fdbb 	bl	8000bb4 <__aeabi_d2iz>
 800a03e:	4604      	mov	r4, r0
 800a040:	f7f6 fa9e 	bl	8000580 <__aeabi_i2d>
 800a044:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a048:	f7f6 fb04 	bl	8000654 <__aeabi_dmul>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4640      	mov	r0, r8
 800a052:	4649      	mov	r1, r9
 800a054:	f7f6 f946 	bl	80002e4 <__aeabi_dsub>
 800a058:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a05c:	f807 6b01 	strb.w	r6, [r7], #1
 800a060:	9e03      	ldr	r6, [sp, #12]
 800a062:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a066:	1bbe      	subs	r6, r7, r6
 800a068:	45b4      	cmp	ip, r6
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	d136      	bne.n	800a0de <_dtoa_r+0x6fe>
 800a070:	f7f6 f93a 	bl	80002e8 <__adddf3>
 800a074:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a078:	4680      	mov	r8, r0
 800a07a:	4689      	mov	r9, r1
 800a07c:	f7f6 fd7a 	bl	8000b74 <__aeabi_dcmpgt>
 800a080:	bb58      	cbnz	r0, 800a0da <_dtoa_r+0x6fa>
 800a082:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a086:	4640      	mov	r0, r8
 800a088:	4649      	mov	r1, r9
 800a08a:	f7f6 fd4b 	bl	8000b24 <__aeabi_dcmpeq>
 800a08e:	b108      	cbz	r0, 800a094 <_dtoa_r+0x6b4>
 800a090:	07e3      	lsls	r3, r4, #31
 800a092:	d422      	bmi.n	800a0da <_dtoa_r+0x6fa>
 800a094:	4651      	mov	r1, sl
 800a096:	4628      	mov	r0, r5
 800a098:	f000 fbc2 	bl	800a820 <_Bfree>
 800a09c:	2300      	movs	r3, #0
 800a09e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a0a0:	703b      	strb	r3, [r7, #0]
 800a0a2:	f10b 0301 	add.w	r3, fp, #1
 800a0a6:	6013      	str	r3, [r2, #0]
 800a0a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f43f ace6 	beq.w	8009a7c <_dtoa_r+0x9c>
 800a0b0:	601f      	str	r7, [r3, #0]
 800a0b2:	e4e3      	b.n	8009a7c <_dtoa_r+0x9c>
 800a0b4:	4627      	mov	r7, r4
 800a0b6:	463b      	mov	r3, r7
 800a0b8:	461f      	mov	r7, r3
 800a0ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0be:	2a39      	cmp	r2, #57	; 0x39
 800a0c0:	d107      	bne.n	800a0d2 <_dtoa_r+0x6f2>
 800a0c2:	9a03      	ldr	r2, [sp, #12]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d1f7      	bne.n	800a0b8 <_dtoa_r+0x6d8>
 800a0c8:	2230      	movs	r2, #48	; 0x30
 800a0ca:	9903      	ldr	r1, [sp, #12]
 800a0cc:	f108 0801 	add.w	r8, r8, #1
 800a0d0:	700a      	strb	r2, [r1, #0]
 800a0d2:	781a      	ldrb	r2, [r3, #0]
 800a0d4:	3201      	adds	r2, #1
 800a0d6:	701a      	strb	r2, [r3, #0]
 800a0d8:	e79e      	b.n	800a018 <_dtoa_r+0x638>
 800a0da:	46d8      	mov	r8, fp
 800a0dc:	e7eb      	b.n	800a0b6 <_dtoa_r+0x6d6>
 800a0de:	2200      	movs	r2, #0
 800a0e0:	4b6d      	ldr	r3, [pc, #436]	; (800a298 <_dtoa_r+0x8b8>)
 800a0e2:	f7f6 fab7 	bl	8000654 <__aeabi_dmul>
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	4680      	mov	r8, r0
 800a0ec:	4689      	mov	r9, r1
 800a0ee:	f7f6 fd19 	bl	8000b24 <__aeabi_dcmpeq>
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d09b      	beq.n	800a02e <_dtoa_r+0x64e>
 800a0f6:	e7cd      	b.n	800a094 <_dtoa_r+0x6b4>
 800a0f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0fa:	2a00      	cmp	r2, #0
 800a0fc:	f000 80c4 	beq.w	800a288 <_dtoa_r+0x8a8>
 800a100:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a102:	2a01      	cmp	r2, #1
 800a104:	f300 80a8 	bgt.w	800a258 <_dtoa_r+0x878>
 800a108:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a10a:	2a00      	cmp	r2, #0
 800a10c:	f000 80a0 	beq.w	800a250 <_dtoa_r+0x870>
 800a110:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a114:	464f      	mov	r7, r9
 800a116:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a11a:	2101      	movs	r1, #1
 800a11c:	441a      	add	r2, r3
 800a11e:	4628      	mov	r0, r5
 800a120:	4499      	add	r9, r3
 800a122:	9209      	str	r2, [sp, #36]	; 0x24
 800a124:	f000 fc7c 	bl	800aa20 <__i2b>
 800a128:	4606      	mov	r6, r0
 800a12a:	b15f      	cbz	r7, 800a144 <_dtoa_r+0x764>
 800a12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	dd08      	ble.n	800a144 <_dtoa_r+0x764>
 800a132:	42bb      	cmp	r3, r7
 800a134:	bfa8      	it	ge
 800a136:	463b      	movge	r3, r7
 800a138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a13a:	eba9 0903 	sub.w	r9, r9, r3
 800a13e:	1aff      	subs	r7, r7, r3
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	9309      	str	r3, [sp, #36]	; 0x24
 800a144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a146:	b1f3      	cbz	r3, 800a186 <_dtoa_r+0x7a6>
 800a148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f000 80a0 	beq.w	800a290 <_dtoa_r+0x8b0>
 800a150:	2c00      	cmp	r4, #0
 800a152:	dd10      	ble.n	800a176 <_dtoa_r+0x796>
 800a154:	4631      	mov	r1, r6
 800a156:	4622      	mov	r2, r4
 800a158:	4628      	mov	r0, r5
 800a15a:	f000 fd1f 	bl	800ab9c <__pow5mult>
 800a15e:	4652      	mov	r2, sl
 800a160:	4601      	mov	r1, r0
 800a162:	4606      	mov	r6, r0
 800a164:	4628      	mov	r0, r5
 800a166:	f000 fc71 	bl	800aa4c <__multiply>
 800a16a:	4680      	mov	r8, r0
 800a16c:	4651      	mov	r1, sl
 800a16e:	4628      	mov	r0, r5
 800a170:	f000 fb56 	bl	800a820 <_Bfree>
 800a174:	46c2      	mov	sl, r8
 800a176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a178:	1b1a      	subs	r2, r3, r4
 800a17a:	d004      	beq.n	800a186 <_dtoa_r+0x7a6>
 800a17c:	4651      	mov	r1, sl
 800a17e:	4628      	mov	r0, r5
 800a180:	f000 fd0c 	bl	800ab9c <__pow5mult>
 800a184:	4682      	mov	sl, r0
 800a186:	2101      	movs	r1, #1
 800a188:	4628      	mov	r0, r5
 800a18a:	f000 fc49 	bl	800aa20 <__i2b>
 800a18e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a190:	4604      	mov	r4, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	f340 8082 	ble.w	800a29c <_dtoa_r+0x8bc>
 800a198:	461a      	mov	r2, r3
 800a19a:	4601      	mov	r1, r0
 800a19c:	4628      	mov	r0, r5
 800a19e:	f000 fcfd 	bl	800ab9c <__pow5mult>
 800a1a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	dd7b      	ble.n	800a2a2 <_dtoa_r+0x8c2>
 800a1aa:	f04f 0800 	mov.w	r8, #0
 800a1ae:	6923      	ldr	r3, [r4, #16]
 800a1b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1b4:	6918      	ldr	r0, [r3, #16]
 800a1b6:	f000 fbe5 	bl	800a984 <__hi0bits>
 800a1ba:	f1c0 0020 	rsb	r0, r0, #32
 800a1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c0:	4418      	add	r0, r3
 800a1c2:	f010 001f 	ands.w	r0, r0, #31
 800a1c6:	f000 8092 	beq.w	800a2ee <_dtoa_r+0x90e>
 800a1ca:	f1c0 0320 	rsb	r3, r0, #32
 800a1ce:	2b04      	cmp	r3, #4
 800a1d0:	f340 8085 	ble.w	800a2de <_dtoa_r+0x8fe>
 800a1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d6:	f1c0 001c 	rsb	r0, r0, #28
 800a1da:	4403      	add	r3, r0
 800a1dc:	4481      	add	r9, r0
 800a1de:	4407      	add	r7, r0
 800a1e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e2:	f1b9 0f00 	cmp.w	r9, #0
 800a1e6:	dd05      	ble.n	800a1f4 <_dtoa_r+0x814>
 800a1e8:	4651      	mov	r1, sl
 800a1ea:	464a      	mov	r2, r9
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	f000 fd2f 	bl	800ac50 <__lshift>
 800a1f2:	4682      	mov	sl, r0
 800a1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	dd05      	ble.n	800a206 <_dtoa_r+0x826>
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	4628      	mov	r0, r5
 800a200:	f000 fd26 	bl	800ac50 <__lshift>
 800a204:	4604      	mov	r4, r0
 800a206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d072      	beq.n	800a2f2 <_dtoa_r+0x912>
 800a20c:	4621      	mov	r1, r4
 800a20e:	4650      	mov	r0, sl
 800a210:	f000 fd8a 	bl	800ad28 <__mcmp>
 800a214:	2800      	cmp	r0, #0
 800a216:	da6c      	bge.n	800a2f2 <_dtoa_r+0x912>
 800a218:	2300      	movs	r3, #0
 800a21a:	4651      	mov	r1, sl
 800a21c:	220a      	movs	r2, #10
 800a21e:	4628      	mov	r0, r5
 800a220:	f000 fb20 	bl	800a864 <__multadd>
 800a224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a226:	4682      	mov	sl, r0
 800a228:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f000 81ac 	beq.w	800a58a <_dtoa_r+0xbaa>
 800a232:	2300      	movs	r3, #0
 800a234:	4631      	mov	r1, r6
 800a236:	220a      	movs	r2, #10
 800a238:	4628      	mov	r0, r5
 800a23a:	f000 fb13 	bl	800a864 <__multadd>
 800a23e:	9b06      	ldr	r3, [sp, #24]
 800a240:	4606      	mov	r6, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	f300 8093 	bgt.w	800a36e <_dtoa_r+0x98e>
 800a248:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	dc59      	bgt.n	800a302 <_dtoa_r+0x922>
 800a24e:	e08e      	b.n	800a36e <_dtoa_r+0x98e>
 800a250:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a252:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a256:	e75d      	b.n	800a114 <_dtoa_r+0x734>
 800a258:	9b08      	ldr	r3, [sp, #32]
 800a25a:	1e5c      	subs	r4, r3, #1
 800a25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a25e:	42a3      	cmp	r3, r4
 800a260:	bfbf      	itttt	lt
 800a262:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a264:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a266:	1ae3      	sublt	r3, r4, r3
 800a268:	18d2      	addlt	r2, r2, r3
 800a26a:	bfa8      	it	ge
 800a26c:	1b1c      	subge	r4, r3, r4
 800a26e:	9b08      	ldr	r3, [sp, #32]
 800a270:	bfbe      	ittt	lt
 800a272:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a274:	920e      	strlt	r2, [sp, #56]	; 0x38
 800a276:	2400      	movlt	r4, #0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	bfb5      	itete	lt
 800a27c:	eba9 0703 	sublt.w	r7, r9, r3
 800a280:	464f      	movge	r7, r9
 800a282:	2300      	movlt	r3, #0
 800a284:	9b08      	ldrge	r3, [sp, #32]
 800a286:	e747      	b.n	800a118 <_dtoa_r+0x738>
 800a288:	464f      	mov	r7, r9
 800a28a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a28c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a28e:	e74c      	b.n	800a12a <_dtoa_r+0x74a>
 800a290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a292:	e773      	b.n	800a17c <_dtoa_r+0x79c>
 800a294:	3fe00000 	.word	0x3fe00000
 800a298:	40240000 	.word	0x40240000
 800a29c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	dc18      	bgt.n	800a2d4 <_dtoa_r+0x8f4>
 800a2a2:	9b04      	ldr	r3, [sp, #16]
 800a2a4:	b9b3      	cbnz	r3, 800a2d4 <_dtoa_r+0x8f4>
 800a2a6:	9b05      	ldr	r3, [sp, #20]
 800a2a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2ac:	b993      	cbnz	r3, 800a2d4 <_dtoa_r+0x8f4>
 800a2ae:	9b05      	ldr	r3, [sp, #20]
 800a2b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2b4:	0d1b      	lsrs	r3, r3, #20
 800a2b6:	051b      	lsls	r3, r3, #20
 800a2b8:	b17b      	cbz	r3, 800a2da <_dtoa_r+0x8fa>
 800a2ba:	f04f 0801 	mov.w	r8, #1
 800a2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c0:	f109 0901 	add.w	r9, r9, #1
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f47f af6f 	bne.w	800a1ae <_dtoa_r+0x7ce>
 800a2d0:	2001      	movs	r0, #1
 800a2d2:	e774      	b.n	800a1be <_dtoa_r+0x7de>
 800a2d4:	f04f 0800 	mov.w	r8, #0
 800a2d8:	e7f6      	b.n	800a2c8 <_dtoa_r+0x8e8>
 800a2da:	4698      	mov	r8, r3
 800a2dc:	e7f4      	b.n	800a2c8 <_dtoa_r+0x8e8>
 800a2de:	d080      	beq.n	800a1e2 <_dtoa_r+0x802>
 800a2e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e2:	331c      	adds	r3, #28
 800a2e4:	441a      	add	r2, r3
 800a2e6:	4499      	add	r9, r3
 800a2e8:	441f      	add	r7, r3
 800a2ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ec:	e779      	b.n	800a1e2 <_dtoa_r+0x802>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	e7f6      	b.n	800a2e0 <_dtoa_r+0x900>
 800a2f2:	9b08      	ldr	r3, [sp, #32]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	dc34      	bgt.n	800a362 <_dtoa_r+0x982>
 800a2f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	dd31      	ble.n	800a362 <_dtoa_r+0x982>
 800a2fe:	9b08      	ldr	r3, [sp, #32]
 800a300:	9306      	str	r3, [sp, #24]
 800a302:	9b06      	ldr	r3, [sp, #24]
 800a304:	b963      	cbnz	r3, 800a320 <_dtoa_r+0x940>
 800a306:	4621      	mov	r1, r4
 800a308:	2205      	movs	r2, #5
 800a30a:	4628      	mov	r0, r5
 800a30c:	f000 faaa 	bl	800a864 <__multadd>
 800a310:	4601      	mov	r1, r0
 800a312:	4604      	mov	r4, r0
 800a314:	4650      	mov	r0, sl
 800a316:	f000 fd07 	bl	800ad28 <__mcmp>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	f73f adbf 	bgt.w	8009e9e <_dtoa_r+0x4be>
 800a320:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a322:	9f03      	ldr	r7, [sp, #12]
 800a324:	ea6f 0b03 	mvn.w	fp, r3
 800a328:	f04f 0800 	mov.w	r8, #0
 800a32c:	4621      	mov	r1, r4
 800a32e:	4628      	mov	r0, r5
 800a330:	f000 fa76 	bl	800a820 <_Bfree>
 800a334:	2e00      	cmp	r6, #0
 800a336:	f43f aead 	beq.w	800a094 <_dtoa_r+0x6b4>
 800a33a:	f1b8 0f00 	cmp.w	r8, #0
 800a33e:	d005      	beq.n	800a34c <_dtoa_r+0x96c>
 800a340:	45b0      	cmp	r8, r6
 800a342:	d003      	beq.n	800a34c <_dtoa_r+0x96c>
 800a344:	4641      	mov	r1, r8
 800a346:	4628      	mov	r0, r5
 800a348:	f000 fa6a 	bl	800a820 <_Bfree>
 800a34c:	4631      	mov	r1, r6
 800a34e:	4628      	mov	r0, r5
 800a350:	f000 fa66 	bl	800a820 <_Bfree>
 800a354:	e69e      	b.n	800a094 <_dtoa_r+0x6b4>
 800a356:	2400      	movs	r4, #0
 800a358:	4626      	mov	r6, r4
 800a35a:	e7e1      	b.n	800a320 <_dtoa_r+0x940>
 800a35c:	46c3      	mov	fp, r8
 800a35e:	4626      	mov	r6, r4
 800a360:	e59d      	b.n	8009e9e <_dtoa_r+0x4be>
 800a362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 80c8 	beq.w	800a4fa <_dtoa_r+0xb1a>
 800a36a:	9b08      	ldr	r3, [sp, #32]
 800a36c:	9306      	str	r3, [sp, #24]
 800a36e:	2f00      	cmp	r7, #0
 800a370:	dd05      	ble.n	800a37e <_dtoa_r+0x99e>
 800a372:	4631      	mov	r1, r6
 800a374:	463a      	mov	r2, r7
 800a376:	4628      	mov	r0, r5
 800a378:	f000 fc6a 	bl	800ac50 <__lshift>
 800a37c:	4606      	mov	r6, r0
 800a37e:	f1b8 0f00 	cmp.w	r8, #0
 800a382:	d05b      	beq.n	800a43c <_dtoa_r+0xa5c>
 800a384:	4628      	mov	r0, r5
 800a386:	6871      	ldr	r1, [r6, #4]
 800a388:	f000 fa0a 	bl	800a7a0 <_Balloc>
 800a38c:	4607      	mov	r7, r0
 800a38e:	b928      	cbnz	r0, 800a39c <_dtoa_r+0x9bc>
 800a390:	4602      	mov	r2, r0
 800a392:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a396:	4b81      	ldr	r3, [pc, #516]	; (800a59c <_dtoa_r+0xbbc>)
 800a398:	f7ff bb36 	b.w	8009a08 <_dtoa_r+0x28>
 800a39c:	6932      	ldr	r2, [r6, #16]
 800a39e:	f106 010c 	add.w	r1, r6, #12
 800a3a2:	3202      	adds	r2, #2
 800a3a4:	0092      	lsls	r2, r2, #2
 800a3a6:	300c      	adds	r0, #12
 800a3a8:	f7ff fa60 	bl	800986c <memcpy>
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	4639      	mov	r1, r7
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	f000 fc4d 	bl	800ac50 <__lshift>
 800a3b6:	46b0      	mov	r8, r6
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	9b03      	ldr	r3, [sp, #12]
 800a3bc:	9a03      	ldr	r2, [sp, #12]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	9308      	str	r3, [sp, #32]
 800a3c2:	9b06      	ldr	r3, [sp, #24]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3c8:	9b04      	ldr	r3, [sp, #16]
 800a3ca:	f003 0301 	and.w	r3, r3, #1
 800a3ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a3d0:	9b08      	ldr	r3, [sp, #32]
 800a3d2:	4621      	mov	r1, r4
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	4650      	mov	r0, sl
 800a3d8:	9304      	str	r3, [sp, #16]
 800a3da:	f7ff fa77 	bl	80098cc <quorem>
 800a3de:	4641      	mov	r1, r8
 800a3e0:	9006      	str	r0, [sp, #24]
 800a3e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a3e6:	4650      	mov	r0, sl
 800a3e8:	f000 fc9e 	bl	800ad28 <__mcmp>
 800a3ec:	4632      	mov	r2, r6
 800a3ee:	9009      	str	r0, [sp, #36]	; 0x24
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f000 fcb4 	bl	800ad60 <__mdiff>
 800a3f8:	68c2      	ldr	r2, [r0, #12]
 800a3fa:	4607      	mov	r7, r0
 800a3fc:	bb02      	cbnz	r2, 800a440 <_dtoa_r+0xa60>
 800a3fe:	4601      	mov	r1, r0
 800a400:	4650      	mov	r0, sl
 800a402:	f000 fc91 	bl	800ad28 <__mcmp>
 800a406:	4602      	mov	r2, r0
 800a408:	4639      	mov	r1, r7
 800a40a:	4628      	mov	r0, r5
 800a40c:	920c      	str	r2, [sp, #48]	; 0x30
 800a40e:	f000 fa07 	bl	800a820 <_Bfree>
 800a412:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a416:	9f08      	ldr	r7, [sp, #32]
 800a418:	ea43 0102 	orr.w	r1, r3, r2
 800a41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a41e:	4319      	orrs	r1, r3
 800a420:	d110      	bne.n	800a444 <_dtoa_r+0xa64>
 800a422:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a426:	d029      	beq.n	800a47c <_dtoa_r+0xa9c>
 800a428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	dd02      	ble.n	800a434 <_dtoa_r+0xa54>
 800a42e:	9b06      	ldr	r3, [sp, #24]
 800a430:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a434:	9b04      	ldr	r3, [sp, #16]
 800a436:	f883 9000 	strb.w	r9, [r3]
 800a43a:	e777      	b.n	800a32c <_dtoa_r+0x94c>
 800a43c:	4630      	mov	r0, r6
 800a43e:	e7ba      	b.n	800a3b6 <_dtoa_r+0x9d6>
 800a440:	2201      	movs	r2, #1
 800a442:	e7e1      	b.n	800a408 <_dtoa_r+0xa28>
 800a444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a446:	2b00      	cmp	r3, #0
 800a448:	db04      	blt.n	800a454 <_dtoa_r+0xa74>
 800a44a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a44c:	430b      	orrs	r3, r1
 800a44e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a450:	430b      	orrs	r3, r1
 800a452:	d120      	bne.n	800a496 <_dtoa_r+0xab6>
 800a454:	2a00      	cmp	r2, #0
 800a456:	dded      	ble.n	800a434 <_dtoa_r+0xa54>
 800a458:	4651      	mov	r1, sl
 800a45a:	2201      	movs	r2, #1
 800a45c:	4628      	mov	r0, r5
 800a45e:	f000 fbf7 	bl	800ac50 <__lshift>
 800a462:	4621      	mov	r1, r4
 800a464:	4682      	mov	sl, r0
 800a466:	f000 fc5f 	bl	800ad28 <__mcmp>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	dc03      	bgt.n	800a476 <_dtoa_r+0xa96>
 800a46e:	d1e1      	bne.n	800a434 <_dtoa_r+0xa54>
 800a470:	f019 0f01 	tst.w	r9, #1
 800a474:	d0de      	beq.n	800a434 <_dtoa_r+0xa54>
 800a476:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a47a:	d1d8      	bne.n	800a42e <_dtoa_r+0xa4e>
 800a47c:	2339      	movs	r3, #57	; 0x39
 800a47e:	9a04      	ldr	r2, [sp, #16]
 800a480:	7013      	strb	r3, [r2, #0]
 800a482:	463b      	mov	r3, r7
 800a484:	461f      	mov	r7, r3
 800a486:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a48a:	3b01      	subs	r3, #1
 800a48c:	2a39      	cmp	r2, #57	; 0x39
 800a48e:	d06b      	beq.n	800a568 <_dtoa_r+0xb88>
 800a490:	3201      	adds	r2, #1
 800a492:	701a      	strb	r2, [r3, #0]
 800a494:	e74a      	b.n	800a32c <_dtoa_r+0x94c>
 800a496:	2a00      	cmp	r2, #0
 800a498:	dd07      	ble.n	800a4aa <_dtoa_r+0xaca>
 800a49a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a49e:	d0ed      	beq.n	800a47c <_dtoa_r+0xa9c>
 800a4a0:	9a04      	ldr	r2, [sp, #16]
 800a4a2:	f109 0301 	add.w	r3, r9, #1
 800a4a6:	7013      	strb	r3, [r2, #0]
 800a4a8:	e740      	b.n	800a32c <_dtoa_r+0x94c>
 800a4aa:	9b08      	ldr	r3, [sp, #32]
 800a4ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4ae:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d042      	beq.n	800a53c <_dtoa_r+0xb5c>
 800a4b6:	4651      	mov	r1, sl
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	220a      	movs	r2, #10
 800a4bc:	4628      	mov	r0, r5
 800a4be:	f000 f9d1 	bl	800a864 <__multadd>
 800a4c2:	45b0      	cmp	r8, r6
 800a4c4:	4682      	mov	sl, r0
 800a4c6:	f04f 0300 	mov.w	r3, #0
 800a4ca:	f04f 020a 	mov.w	r2, #10
 800a4ce:	4641      	mov	r1, r8
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	d107      	bne.n	800a4e4 <_dtoa_r+0xb04>
 800a4d4:	f000 f9c6 	bl	800a864 <__multadd>
 800a4d8:	4680      	mov	r8, r0
 800a4da:	4606      	mov	r6, r0
 800a4dc:	9b08      	ldr	r3, [sp, #32]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	9308      	str	r3, [sp, #32]
 800a4e2:	e775      	b.n	800a3d0 <_dtoa_r+0x9f0>
 800a4e4:	f000 f9be 	bl	800a864 <__multadd>
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	4680      	mov	r8, r0
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	220a      	movs	r2, #10
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	f000 f9b7 	bl	800a864 <__multadd>
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	e7f0      	b.n	800a4dc <_dtoa_r+0xafc>
 800a4fa:	9b08      	ldr	r3, [sp, #32]
 800a4fc:	9306      	str	r3, [sp, #24]
 800a4fe:	9f03      	ldr	r7, [sp, #12]
 800a500:	4621      	mov	r1, r4
 800a502:	4650      	mov	r0, sl
 800a504:	f7ff f9e2 	bl	80098cc <quorem>
 800a508:	9b03      	ldr	r3, [sp, #12]
 800a50a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a50e:	f807 9b01 	strb.w	r9, [r7], #1
 800a512:	1afa      	subs	r2, r7, r3
 800a514:	9b06      	ldr	r3, [sp, #24]
 800a516:	4293      	cmp	r3, r2
 800a518:	dd07      	ble.n	800a52a <_dtoa_r+0xb4a>
 800a51a:	4651      	mov	r1, sl
 800a51c:	2300      	movs	r3, #0
 800a51e:	220a      	movs	r2, #10
 800a520:	4628      	mov	r0, r5
 800a522:	f000 f99f 	bl	800a864 <__multadd>
 800a526:	4682      	mov	sl, r0
 800a528:	e7ea      	b.n	800a500 <_dtoa_r+0xb20>
 800a52a:	9b06      	ldr	r3, [sp, #24]
 800a52c:	f04f 0800 	mov.w	r8, #0
 800a530:	2b00      	cmp	r3, #0
 800a532:	bfcc      	ite	gt
 800a534:	461f      	movgt	r7, r3
 800a536:	2701      	movle	r7, #1
 800a538:	9b03      	ldr	r3, [sp, #12]
 800a53a:	441f      	add	r7, r3
 800a53c:	4651      	mov	r1, sl
 800a53e:	2201      	movs	r2, #1
 800a540:	4628      	mov	r0, r5
 800a542:	f000 fb85 	bl	800ac50 <__lshift>
 800a546:	4621      	mov	r1, r4
 800a548:	4682      	mov	sl, r0
 800a54a:	f000 fbed 	bl	800ad28 <__mcmp>
 800a54e:	2800      	cmp	r0, #0
 800a550:	dc97      	bgt.n	800a482 <_dtoa_r+0xaa2>
 800a552:	d102      	bne.n	800a55a <_dtoa_r+0xb7a>
 800a554:	f019 0f01 	tst.w	r9, #1
 800a558:	d193      	bne.n	800a482 <_dtoa_r+0xaa2>
 800a55a:	463b      	mov	r3, r7
 800a55c:	461f      	mov	r7, r3
 800a55e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a562:	2a30      	cmp	r2, #48	; 0x30
 800a564:	d0fa      	beq.n	800a55c <_dtoa_r+0xb7c>
 800a566:	e6e1      	b.n	800a32c <_dtoa_r+0x94c>
 800a568:	9a03      	ldr	r2, [sp, #12]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d18a      	bne.n	800a484 <_dtoa_r+0xaa4>
 800a56e:	2331      	movs	r3, #49	; 0x31
 800a570:	f10b 0b01 	add.w	fp, fp, #1
 800a574:	e797      	b.n	800a4a6 <_dtoa_r+0xac6>
 800a576:	4b0a      	ldr	r3, [pc, #40]	; (800a5a0 <_dtoa_r+0xbc0>)
 800a578:	f7ff ba9f 	b.w	8009aba <_dtoa_r+0xda>
 800a57c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f47f aa77 	bne.w	8009a72 <_dtoa_r+0x92>
 800a584:	4b07      	ldr	r3, [pc, #28]	; (800a5a4 <_dtoa_r+0xbc4>)
 800a586:	f7ff ba98 	b.w	8009aba <_dtoa_r+0xda>
 800a58a:	9b06      	ldr	r3, [sp, #24]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	dcb6      	bgt.n	800a4fe <_dtoa_r+0xb1e>
 800a590:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a592:	2b02      	cmp	r3, #2
 800a594:	f73f aeb5 	bgt.w	800a302 <_dtoa_r+0x922>
 800a598:	e7b1      	b.n	800a4fe <_dtoa_r+0xb1e>
 800a59a:	bf00      	nop
 800a59c:	0800d3a6 	.word	0x0800d3a6
 800a5a0:	0800d26b 	.word	0x0800d26b
 800a5a4:	0800d341 	.word	0x0800d341

0800a5a8 <_free_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4605      	mov	r5, r0
 800a5ac:	2900      	cmp	r1, #0
 800a5ae:	d040      	beq.n	800a632 <_free_r+0x8a>
 800a5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5b4:	1f0c      	subs	r4, r1, #4
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	bfb8      	it	lt
 800a5ba:	18e4      	addlt	r4, r4, r3
 800a5bc:	f000 f8e4 	bl	800a788 <__malloc_lock>
 800a5c0:	4a1c      	ldr	r2, [pc, #112]	; (800a634 <_free_r+0x8c>)
 800a5c2:	6813      	ldr	r3, [r2, #0]
 800a5c4:	b933      	cbnz	r3, 800a5d4 <_free_r+0x2c>
 800a5c6:	6063      	str	r3, [r4, #4]
 800a5c8:	6014      	str	r4, [r2, #0]
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5d0:	f000 b8e0 	b.w	800a794 <__malloc_unlock>
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	d908      	bls.n	800a5ea <_free_r+0x42>
 800a5d8:	6820      	ldr	r0, [r4, #0]
 800a5da:	1821      	adds	r1, r4, r0
 800a5dc:	428b      	cmp	r3, r1
 800a5de:	bf01      	itttt	eq
 800a5e0:	6819      	ldreq	r1, [r3, #0]
 800a5e2:	685b      	ldreq	r3, [r3, #4]
 800a5e4:	1809      	addeq	r1, r1, r0
 800a5e6:	6021      	streq	r1, [r4, #0]
 800a5e8:	e7ed      	b.n	800a5c6 <_free_r+0x1e>
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	b10b      	cbz	r3, 800a5f4 <_free_r+0x4c>
 800a5f0:	42a3      	cmp	r3, r4
 800a5f2:	d9fa      	bls.n	800a5ea <_free_r+0x42>
 800a5f4:	6811      	ldr	r1, [r2, #0]
 800a5f6:	1850      	adds	r0, r2, r1
 800a5f8:	42a0      	cmp	r0, r4
 800a5fa:	d10b      	bne.n	800a614 <_free_r+0x6c>
 800a5fc:	6820      	ldr	r0, [r4, #0]
 800a5fe:	4401      	add	r1, r0
 800a600:	1850      	adds	r0, r2, r1
 800a602:	4283      	cmp	r3, r0
 800a604:	6011      	str	r1, [r2, #0]
 800a606:	d1e0      	bne.n	800a5ca <_free_r+0x22>
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	4408      	add	r0, r1
 800a60e:	6010      	str	r0, [r2, #0]
 800a610:	6053      	str	r3, [r2, #4]
 800a612:	e7da      	b.n	800a5ca <_free_r+0x22>
 800a614:	d902      	bls.n	800a61c <_free_r+0x74>
 800a616:	230c      	movs	r3, #12
 800a618:	602b      	str	r3, [r5, #0]
 800a61a:	e7d6      	b.n	800a5ca <_free_r+0x22>
 800a61c:	6820      	ldr	r0, [r4, #0]
 800a61e:	1821      	adds	r1, r4, r0
 800a620:	428b      	cmp	r3, r1
 800a622:	bf01      	itttt	eq
 800a624:	6819      	ldreq	r1, [r3, #0]
 800a626:	685b      	ldreq	r3, [r3, #4]
 800a628:	1809      	addeq	r1, r1, r0
 800a62a:	6021      	streq	r1, [r4, #0]
 800a62c:	6063      	str	r3, [r4, #4]
 800a62e:	6054      	str	r4, [r2, #4]
 800a630:	e7cb      	b.n	800a5ca <_free_r+0x22>
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	20002554 	.word	0x20002554

0800a638 <malloc>:
 800a638:	4b02      	ldr	r3, [pc, #8]	; (800a644 <malloc+0xc>)
 800a63a:	4601      	mov	r1, r0
 800a63c:	6818      	ldr	r0, [r3, #0]
 800a63e:	f000 b823 	b.w	800a688 <_malloc_r>
 800a642:	bf00      	nop
 800a644:	20000074 	.word	0x20000074

0800a648 <sbrk_aligned>:
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	4e0e      	ldr	r6, [pc, #56]	; (800a684 <sbrk_aligned+0x3c>)
 800a64c:	460c      	mov	r4, r1
 800a64e:	6831      	ldr	r1, [r6, #0]
 800a650:	4605      	mov	r5, r0
 800a652:	b911      	cbnz	r1, 800a65a <sbrk_aligned+0x12>
 800a654:	f001 ff64 	bl	800c520 <_sbrk_r>
 800a658:	6030      	str	r0, [r6, #0]
 800a65a:	4621      	mov	r1, r4
 800a65c:	4628      	mov	r0, r5
 800a65e:	f001 ff5f 	bl	800c520 <_sbrk_r>
 800a662:	1c43      	adds	r3, r0, #1
 800a664:	d00a      	beq.n	800a67c <sbrk_aligned+0x34>
 800a666:	1cc4      	adds	r4, r0, #3
 800a668:	f024 0403 	bic.w	r4, r4, #3
 800a66c:	42a0      	cmp	r0, r4
 800a66e:	d007      	beq.n	800a680 <sbrk_aligned+0x38>
 800a670:	1a21      	subs	r1, r4, r0
 800a672:	4628      	mov	r0, r5
 800a674:	f001 ff54 	bl	800c520 <_sbrk_r>
 800a678:	3001      	adds	r0, #1
 800a67a:	d101      	bne.n	800a680 <sbrk_aligned+0x38>
 800a67c:	f04f 34ff 	mov.w	r4, #4294967295
 800a680:	4620      	mov	r0, r4
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	20002558 	.word	0x20002558

0800a688 <_malloc_r>:
 800a688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a68c:	1ccd      	adds	r5, r1, #3
 800a68e:	f025 0503 	bic.w	r5, r5, #3
 800a692:	3508      	adds	r5, #8
 800a694:	2d0c      	cmp	r5, #12
 800a696:	bf38      	it	cc
 800a698:	250c      	movcc	r5, #12
 800a69a:	2d00      	cmp	r5, #0
 800a69c:	4607      	mov	r7, r0
 800a69e:	db01      	blt.n	800a6a4 <_malloc_r+0x1c>
 800a6a0:	42a9      	cmp	r1, r5
 800a6a2:	d905      	bls.n	800a6b0 <_malloc_r+0x28>
 800a6a4:	230c      	movs	r3, #12
 800a6a6:	2600      	movs	r6, #0
 800a6a8:	603b      	str	r3, [r7, #0]
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a784 <_malloc_r+0xfc>
 800a6b4:	f000 f868 	bl	800a788 <__malloc_lock>
 800a6b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a6bc:	461c      	mov	r4, r3
 800a6be:	bb5c      	cbnz	r4, 800a718 <_malloc_r+0x90>
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	f7ff ffc0 	bl	800a648 <sbrk_aligned>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	d155      	bne.n	800a77a <_malloc_r+0xf2>
 800a6ce:	f8d8 4000 	ldr.w	r4, [r8]
 800a6d2:	4626      	mov	r6, r4
 800a6d4:	2e00      	cmp	r6, #0
 800a6d6:	d145      	bne.n	800a764 <_malloc_r+0xdc>
 800a6d8:	2c00      	cmp	r4, #0
 800a6da:	d048      	beq.n	800a76e <_malloc_r+0xe6>
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	4631      	mov	r1, r6
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	eb04 0903 	add.w	r9, r4, r3
 800a6e6:	f001 ff1b 	bl	800c520 <_sbrk_r>
 800a6ea:	4581      	cmp	r9, r0
 800a6ec:	d13f      	bne.n	800a76e <_malloc_r+0xe6>
 800a6ee:	6821      	ldr	r1, [r4, #0]
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	1a6d      	subs	r5, r5, r1
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	f7ff ffa7 	bl	800a648 <sbrk_aligned>
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	d037      	beq.n	800a76e <_malloc_r+0xe6>
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	442b      	add	r3, r5
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	f8d8 3000 	ldr.w	r3, [r8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d038      	beq.n	800a77e <_malloc_r+0xf6>
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	42a2      	cmp	r2, r4
 800a710:	d12b      	bne.n	800a76a <_malloc_r+0xe2>
 800a712:	2200      	movs	r2, #0
 800a714:	605a      	str	r2, [r3, #4]
 800a716:	e00f      	b.n	800a738 <_malloc_r+0xb0>
 800a718:	6822      	ldr	r2, [r4, #0]
 800a71a:	1b52      	subs	r2, r2, r5
 800a71c:	d41f      	bmi.n	800a75e <_malloc_r+0xd6>
 800a71e:	2a0b      	cmp	r2, #11
 800a720:	d917      	bls.n	800a752 <_malloc_r+0xca>
 800a722:	1961      	adds	r1, r4, r5
 800a724:	42a3      	cmp	r3, r4
 800a726:	6025      	str	r5, [r4, #0]
 800a728:	bf18      	it	ne
 800a72a:	6059      	strne	r1, [r3, #4]
 800a72c:	6863      	ldr	r3, [r4, #4]
 800a72e:	bf08      	it	eq
 800a730:	f8c8 1000 	streq.w	r1, [r8]
 800a734:	5162      	str	r2, [r4, r5]
 800a736:	604b      	str	r3, [r1, #4]
 800a738:	4638      	mov	r0, r7
 800a73a:	f104 060b 	add.w	r6, r4, #11
 800a73e:	f000 f829 	bl	800a794 <__malloc_unlock>
 800a742:	f026 0607 	bic.w	r6, r6, #7
 800a746:	1d23      	adds	r3, r4, #4
 800a748:	1af2      	subs	r2, r6, r3
 800a74a:	d0ae      	beq.n	800a6aa <_malloc_r+0x22>
 800a74c:	1b9b      	subs	r3, r3, r6
 800a74e:	50a3      	str	r3, [r4, r2]
 800a750:	e7ab      	b.n	800a6aa <_malloc_r+0x22>
 800a752:	42a3      	cmp	r3, r4
 800a754:	6862      	ldr	r2, [r4, #4]
 800a756:	d1dd      	bne.n	800a714 <_malloc_r+0x8c>
 800a758:	f8c8 2000 	str.w	r2, [r8]
 800a75c:	e7ec      	b.n	800a738 <_malloc_r+0xb0>
 800a75e:	4623      	mov	r3, r4
 800a760:	6864      	ldr	r4, [r4, #4]
 800a762:	e7ac      	b.n	800a6be <_malloc_r+0x36>
 800a764:	4634      	mov	r4, r6
 800a766:	6876      	ldr	r6, [r6, #4]
 800a768:	e7b4      	b.n	800a6d4 <_malloc_r+0x4c>
 800a76a:	4613      	mov	r3, r2
 800a76c:	e7cc      	b.n	800a708 <_malloc_r+0x80>
 800a76e:	230c      	movs	r3, #12
 800a770:	4638      	mov	r0, r7
 800a772:	603b      	str	r3, [r7, #0]
 800a774:	f000 f80e 	bl	800a794 <__malloc_unlock>
 800a778:	e797      	b.n	800a6aa <_malloc_r+0x22>
 800a77a:	6025      	str	r5, [r4, #0]
 800a77c:	e7dc      	b.n	800a738 <_malloc_r+0xb0>
 800a77e:	605b      	str	r3, [r3, #4]
 800a780:	deff      	udf	#255	; 0xff
 800a782:	bf00      	nop
 800a784:	20002554 	.word	0x20002554

0800a788 <__malloc_lock>:
 800a788:	4801      	ldr	r0, [pc, #4]	; (800a790 <__malloc_lock+0x8>)
 800a78a:	f7ff b85f 	b.w	800984c <__retarget_lock_acquire_recursive>
 800a78e:	bf00      	nop
 800a790:	20002550 	.word	0x20002550

0800a794 <__malloc_unlock>:
 800a794:	4801      	ldr	r0, [pc, #4]	; (800a79c <__malloc_unlock+0x8>)
 800a796:	f7ff b85a 	b.w	800984e <__retarget_lock_release_recursive>
 800a79a:	bf00      	nop
 800a79c:	20002550 	.word	0x20002550

0800a7a0 <_Balloc>:
 800a7a0:	b570      	push	{r4, r5, r6, lr}
 800a7a2:	69c6      	ldr	r6, [r0, #28]
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	460d      	mov	r5, r1
 800a7a8:	b976      	cbnz	r6, 800a7c8 <_Balloc+0x28>
 800a7aa:	2010      	movs	r0, #16
 800a7ac:	f7ff ff44 	bl	800a638 <malloc>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	61e0      	str	r0, [r4, #28]
 800a7b4:	b920      	cbnz	r0, 800a7c0 <_Balloc+0x20>
 800a7b6:	216b      	movs	r1, #107	; 0x6b
 800a7b8:	4b17      	ldr	r3, [pc, #92]	; (800a818 <_Balloc+0x78>)
 800a7ba:	4818      	ldr	r0, [pc, #96]	; (800a81c <_Balloc+0x7c>)
 800a7bc:	f7ff f868 	bl	8009890 <__assert_func>
 800a7c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7c4:	6006      	str	r6, [r0, #0]
 800a7c6:	60c6      	str	r6, [r0, #12]
 800a7c8:	69e6      	ldr	r6, [r4, #28]
 800a7ca:	68f3      	ldr	r3, [r6, #12]
 800a7cc:	b183      	cbz	r3, 800a7f0 <_Balloc+0x50>
 800a7ce:	69e3      	ldr	r3, [r4, #28]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7d6:	b9b8      	cbnz	r0, 800a808 <_Balloc+0x68>
 800a7d8:	2101      	movs	r1, #1
 800a7da:	fa01 f605 	lsl.w	r6, r1, r5
 800a7de:	1d72      	adds	r2, r6, #5
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	0092      	lsls	r2, r2, #2
 800a7e4:	f001 feb9 	bl	800c55a <_calloc_r>
 800a7e8:	b160      	cbz	r0, 800a804 <_Balloc+0x64>
 800a7ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7ee:	e00e      	b.n	800a80e <_Balloc+0x6e>
 800a7f0:	2221      	movs	r2, #33	; 0x21
 800a7f2:	2104      	movs	r1, #4
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f001 feb0 	bl	800c55a <_calloc_r>
 800a7fa:	69e3      	ldr	r3, [r4, #28]
 800a7fc:	60f0      	str	r0, [r6, #12]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1e4      	bne.n	800a7ce <_Balloc+0x2e>
 800a804:	2000      	movs	r0, #0
 800a806:	bd70      	pop	{r4, r5, r6, pc}
 800a808:	6802      	ldr	r2, [r0, #0]
 800a80a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a80e:	2300      	movs	r3, #0
 800a810:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a814:	e7f7      	b.n	800a806 <_Balloc+0x66>
 800a816:	bf00      	nop
 800a818:	0800d294 	.word	0x0800d294
 800a81c:	0800d3b7 	.word	0x0800d3b7

0800a820 <_Bfree>:
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	69c6      	ldr	r6, [r0, #28]
 800a824:	4605      	mov	r5, r0
 800a826:	460c      	mov	r4, r1
 800a828:	b976      	cbnz	r6, 800a848 <_Bfree+0x28>
 800a82a:	2010      	movs	r0, #16
 800a82c:	f7ff ff04 	bl	800a638 <malloc>
 800a830:	4602      	mov	r2, r0
 800a832:	61e8      	str	r0, [r5, #28]
 800a834:	b920      	cbnz	r0, 800a840 <_Bfree+0x20>
 800a836:	218f      	movs	r1, #143	; 0x8f
 800a838:	4b08      	ldr	r3, [pc, #32]	; (800a85c <_Bfree+0x3c>)
 800a83a:	4809      	ldr	r0, [pc, #36]	; (800a860 <_Bfree+0x40>)
 800a83c:	f7ff f828 	bl	8009890 <__assert_func>
 800a840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a844:	6006      	str	r6, [r0, #0]
 800a846:	60c6      	str	r6, [r0, #12]
 800a848:	b13c      	cbz	r4, 800a85a <_Bfree+0x3a>
 800a84a:	69eb      	ldr	r3, [r5, #28]
 800a84c:	6862      	ldr	r2, [r4, #4]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a854:	6021      	str	r1, [r4, #0]
 800a856:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a85a:	bd70      	pop	{r4, r5, r6, pc}
 800a85c:	0800d294 	.word	0x0800d294
 800a860:	0800d3b7 	.word	0x0800d3b7

0800a864 <__multadd>:
 800a864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a868:	4607      	mov	r7, r0
 800a86a:	460c      	mov	r4, r1
 800a86c:	461e      	mov	r6, r3
 800a86e:	2000      	movs	r0, #0
 800a870:	690d      	ldr	r5, [r1, #16]
 800a872:	f101 0c14 	add.w	ip, r1, #20
 800a876:	f8dc 3000 	ldr.w	r3, [ip]
 800a87a:	3001      	adds	r0, #1
 800a87c:	b299      	uxth	r1, r3
 800a87e:	fb02 6101 	mla	r1, r2, r1, r6
 800a882:	0c1e      	lsrs	r6, r3, #16
 800a884:	0c0b      	lsrs	r3, r1, #16
 800a886:	fb02 3306 	mla	r3, r2, r6, r3
 800a88a:	b289      	uxth	r1, r1
 800a88c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a890:	4285      	cmp	r5, r0
 800a892:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a896:	f84c 1b04 	str.w	r1, [ip], #4
 800a89a:	dcec      	bgt.n	800a876 <__multadd+0x12>
 800a89c:	b30e      	cbz	r6, 800a8e2 <__multadd+0x7e>
 800a89e:	68a3      	ldr	r3, [r4, #8]
 800a8a0:	42ab      	cmp	r3, r5
 800a8a2:	dc19      	bgt.n	800a8d8 <__multadd+0x74>
 800a8a4:	6861      	ldr	r1, [r4, #4]
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	3101      	adds	r1, #1
 800a8aa:	f7ff ff79 	bl	800a7a0 <_Balloc>
 800a8ae:	4680      	mov	r8, r0
 800a8b0:	b928      	cbnz	r0, 800a8be <__multadd+0x5a>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	21ba      	movs	r1, #186	; 0xba
 800a8b6:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <__multadd+0x84>)
 800a8b8:	480c      	ldr	r0, [pc, #48]	; (800a8ec <__multadd+0x88>)
 800a8ba:	f7fe ffe9 	bl	8009890 <__assert_func>
 800a8be:	6922      	ldr	r2, [r4, #16]
 800a8c0:	f104 010c 	add.w	r1, r4, #12
 800a8c4:	3202      	adds	r2, #2
 800a8c6:	0092      	lsls	r2, r2, #2
 800a8c8:	300c      	adds	r0, #12
 800a8ca:	f7fe ffcf 	bl	800986c <memcpy>
 800a8ce:	4621      	mov	r1, r4
 800a8d0:	4638      	mov	r0, r7
 800a8d2:	f7ff ffa5 	bl	800a820 <_Bfree>
 800a8d6:	4644      	mov	r4, r8
 800a8d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8dc:	3501      	adds	r5, #1
 800a8de:	615e      	str	r6, [r3, #20]
 800a8e0:	6125      	str	r5, [r4, #16]
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e8:	0800d3a6 	.word	0x0800d3a6
 800a8ec:	0800d3b7 	.word	0x0800d3b7

0800a8f0 <__s2b>:
 800a8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8f4:	4615      	mov	r5, r2
 800a8f6:	2209      	movs	r2, #9
 800a8f8:	461f      	mov	r7, r3
 800a8fa:	3308      	adds	r3, #8
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800a902:	4606      	mov	r6, r0
 800a904:	2201      	movs	r2, #1
 800a906:	2100      	movs	r1, #0
 800a908:	429a      	cmp	r2, r3
 800a90a:	db09      	blt.n	800a920 <__s2b+0x30>
 800a90c:	4630      	mov	r0, r6
 800a90e:	f7ff ff47 	bl	800a7a0 <_Balloc>
 800a912:	b940      	cbnz	r0, 800a926 <__s2b+0x36>
 800a914:	4602      	mov	r2, r0
 800a916:	21d3      	movs	r1, #211	; 0xd3
 800a918:	4b18      	ldr	r3, [pc, #96]	; (800a97c <__s2b+0x8c>)
 800a91a:	4819      	ldr	r0, [pc, #100]	; (800a980 <__s2b+0x90>)
 800a91c:	f7fe ffb8 	bl	8009890 <__assert_func>
 800a920:	0052      	lsls	r2, r2, #1
 800a922:	3101      	adds	r1, #1
 800a924:	e7f0      	b.n	800a908 <__s2b+0x18>
 800a926:	9b08      	ldr	r3, [sp, #32]
 800a928:	2d09      	cmp	r5, #9
 800a92a:	6143      	str	r3, [r0, #20]
 800a92c:	f04f 0301 	mov.w	r3, #1
 800a930:	6103      	str	r3, [r0, #16]
 800a932:	dd16      	ble.n	800a962 <__s2b+0x72>
 800a934:	f104 0909 	add.w	r9, r4, #9
 800a938:	46c8      	mov	r8, r9
 800a93a:	442c      	add	r4, r5
 800a93c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a940:	4601      	mov	r1, r0
 800a942:	220a      	movs	r2, #10
 800a944:	4630      	mov	r0, r6
 800a946:	3b30      	subs	r3, #48	; 0x30
 800a948:	f7ff ff8c 	bl	800a864 <__multadd>
 800a94c:	45a0      	cmp	r8, r4
 800a94e:	d1f5      	bne.n	800a93c <__s2b+0x4c>
 800a950:	f1a5 0408 	sub.w	r4, r5, #8
 800a954:	444c      	add	r4, r9
 800a956:	1b2d      	subs	r5, r5, r4
 800a958:	1963      	adds	r3, r4, r5
 800a95a:	42bb      	cmp	r3, r7
 800a95c:	db04      	blt.n	800a968 <__s2b+0x78>
 800a95e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a962:	2509      	movs	r5, #9
 800a964:	340a      	adds	r4, #10
 800a966:	e7f6      	b.n	800a956 <__s2b+0x66>
 800a968:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a96c:	4601      	mov	r1, r0
 800a96e:	220a      	movs	r2, #10
 800a970:	4630      	mov	r0, r6
 800a972:	3b30      	subs	r3, #48	; 0x30
 800a974:	f7ff ff76 	bl	800a864 <__multadd>
 800a978:	e7ee      	b.n	800a958 <__s2b+0x68>
 800a97a:	bf00      	nop
 800a97c:	0800d3a6 	.word	0x0800d3a6
 800a980:	0800d3b7 	.word	0x0800d3b7

0800a984 <__hi0bits>:
 800a984:	0c02      	lsrs	r2, r0, #16
 800a986:	0412      	lsls	r2, r2, #16
 800a988:	4603      	mov	r3, r0
 800a98a:	b9ca      	cbnz	r2, 800a9c0 <__hi0bits+0x3c>
 800a98c:	0403      	lsls	r3, r0, #16
 800a98e:	2010      	movs	r0, #16
 800a990:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a994:	bf04      	itt	eq
 800a996:	021b      	lsleq	r3, r3, #8
 800a998:	3008      	addeq	r0, #8
 800a99a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a99e:	bf04      	itt	eq
 800a9a0:	011b      	lsleq	r3, r3, #4
 800a9a2:	3004      	addeq	r0, #4
 800a9a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a9a8:	bf04      	itt	eq
 800a9aa:	009b      	lsleq	r3, r3, #2
 800a9ac:	3002      	addeq	r0, #2
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	db05      	blt.n	800a9be <__hi0bits+0x3a>
 800a9b2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a9b6:	f100 0001 	add.w	r0, r0, #1
 800a9ba:	bf08      	it	eq
 800a9bc:	2020      	moveq	r0, #32
 800a9be:	4770      	bx	lr
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	e7e5      	b.n	800a990 <__hi0bits+0xc>

0800a9c4 <__lo0bits>:
 800a9c4:	6803      	ldr	r3, [r0, #0]
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	f013 0007 	ands.w	r0, r3, #7
 800a9cc:	d00b      	beq.n	800a9e6 <__lo0bits+0x22>
 800a9ce:	07d9      	lsls	r1, r3, #31
 800a9d0:	d421      	bmi.n	800aa16 <__lo0bits+0x52>
 800a9d2:	0798      	lsls	r0, r3, #30
 800a9d4:	bf49      	itett	mi
 800a9d6:	085b      	lsrmi	r3, r3, #1
 800a9d8:	089b      	lsrpl	r3, r3, #2
 800a9da:	2001      	movmi	r0, #1
 800a9dc:	6013      	strmi	r3, [r2, #0]
 800a9de:	bf5c      	itt	pl
 800a9e0:	2002      	movpl	r0, #2
 800a9e2:	6013      	strpl	r3, [r2, #0]
 800a9e4:	4770      	bx	lr
 800a9e6:	b299      	uxth	r1, r3
 800a9e8:	b909      	cbnz	r1, 800a9ee <__lo0bits+0x2a>
 800a9ea:	2010      	movs	r0, #16
 800a9ec:	0c1b      	lsrs	r3, r3, #16
 800a9ee:	b2d9      	uxtb	r1, r3
 800a9f0:	b909      	cbnz	r1, 800a9f6 <__lo0bits+0x32>
 800a9f2:	3008      	adds	r0, #8
 800a9f4:	0a1b      	lsrs	r3, r3, #8
 800a9f6:	0719      	lsls	r1, r3, #28
 800a9f8:	bf04      	itt	eq
 800a9fa:	091b      	lsreq	r3, r3, #4
 800a9fc:	3004      	addeq	r0, #4
 800a9fe:	0799      	lsls	r1, r3, #30
 800aa00:	bf04      	itt	eq
 800aa02:	089b      	lsreq	r3, r3, #2
 800aa04:	3002      	addeq	r0, #2
 800aa06:	07d9      	lsls	r1, r3, #31
 800aa08:	d403      	bmi.n	800aa12 <__lo0bits+0x4e>
 800aa0a:	085b      	lsrs	r3, r3, #1
 800aa0c:	f100 0001 	add.w	r0, r0, #1
 800aa10:	d003      	beq.n	800aa1a <__lo0bits+0x56>
 800aa12:	6013      	str	r3, [r2, #0]
 800aa14:	4770      	bx	lr
 800aa16:	2000      	movs	r0, #0
 800aa18:	4770      	bx	lr
 800aa1a:	2020      	movs	r0, #32
 800aa1c:	4770      	bx	lr
	...

0800aa20 <__i2b>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	460c      	mov	r4, r1
 800aa24:	2101      	movs	r1, #1
 800aa26:	f7ff febb 	bl	800a7a0 <_Balloc>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	b928      	cbnz	r0, 800aa3a <__i2b+0x1a>
 800aa2e:	f240 1145 	movw	r1, #325	; 0x145
 800aa32:	4b04      	ldr	r3, [pc, #16]	; (800aa44 <__i2b+0x24>)
 800aa34:	4804      	ldr	r0, [pc, #16]	; (800aa48 <__i2b+0x28>)
 800aa36:	f7fe ff2b 	bl	8009890 <__assert_func>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	6144      	str	r4, [r0, #20]
 800aa3e:	6103      	str	r3, [r0, #16]
 800aa40:	bd10      	pop	{r4, pc}
 800aa42:	bf00      	nop
 800aa44:	0800d3a6 	.word	0x0800d3a6
 800aa48:	0800d3b7 	.word	0x0800d3b7

0800aa4c <__multiply>:
 800aa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa50:	4691      	mov	r9, r2
 800aa52:	690a      	ldr	r2, [r1, #16]
 800aa54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa58:	460c      	mov	r4, r1
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	bfbe      	ittt	lt
 800aa5e:	460b      	movlt	r3, r1
 800aa60:	464c      	movlt	r4, r9
 800aa62:	4699      	movlt	r9, r3
 800aa64:	6927      	ldr	r7, [r4, #16]
 800aa66:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa6a:	68a3      	ldr	r3, [r4, #8]
 800aa6c:	6861      	ldr	r1, [r4, #4]
 800aa6e:	eb07 060a 	add.w	r6, r7, sl
 800aa72:	42b3      	cmp	r3, r6
 800aa74:	b085      	sub	sp, #20
 800aa76:	bfb8      	it	lt
 800aa78:	3101      	addlt	r1, #1
 800aa7a:	f7ff fe91 	bl	800a7a0 <_Balloc>
 800aa7e:	b930      	cbnz	r0, 800aa8e <__multiply+0x42>
 800aa80:	4602      	mov	r2, r0
 800aa82:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aa86:	4b43      	ldr	r3, [pc, #268]	; (800ab94 <__multiply+0x148>)
 800aa88:	4843      	ldr	r0, [pc, #268]	; (800ab98 <__multiply+0x14c>)
 800aa8a:	f7fe ff01 	bl	8009890 <__assert_func>
 800aa8e:	f100 0514 	add.w	r5, r0, #20
 800aa92:	462b      	mov	r3, r5
 800aa94:	2200      	movs	r2, #0
 800aa96:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa9a:	4543      	cmp	r3, r8
 800aa9c:	d321      	bcc.n	800aae2 <__multiply+0x96>
 800aa9e:	f104 0314 	add.w	r3, r4, #20
 800aaa2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aaa6:	f109 0314 	add.w	r3, r9, #20
 800aaaa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aaae:	9202      	str	r2, [sp, #8]
 800aab0:	1b3a      	subs	r2, r7, r4
 800aab2:	3a15      	subs	r2, #21
 800aab4:	f022 0203 	bic.w	r2, r2, #3
 800aab8:	3204      	adds	r2, #4
 800aaba:	f104 0115 	add.w	r1, r4, #21
 800aabe:	428f      	cmp	r7, r1
 800aac0:	bf38      	it	cc
 800aac2:	2204      	movcc	r2, #4
 800aac4:	9201      	str	r2, [sp, #4]
 800aac6:	9a02      	ldr	r2, [sp, #8]
 800aac8:	9303      	str	r3, [sp, #12]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d80c      	bhi.n	800aae8 <__multiply+0x9c>
 800aace:	2e00      	cmp	r6, #0
 800aad0:	dd03      	ble.n	800aada <__multiply+0x8e>
 800aad2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d05a      	beq.n	800ab90 <__multiply+0x144>
 800aada:	6106      	str	r6, [r0, #16]
 800aadc:	b005      	add	sp, #20
 800aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae2:	f843 2b04 	str.w	r2, [r3], #4
 800aae6:	e7d8      	b.n	800aa9a <__multiply+0x4e>
 800aae8:	f8b3 a000 	ldrh.w	sl, [r3]
 800aaec:	f1ba 0f00 	cmp.w	sl, #0
 800aaf0:	d023      	beq.n	800ab3a <__multiply+0xee>
 800aaf2:	46a9      	mov	r9, r5
 800aaf4:	f04f 0c00 	mov.w	ip, #0
 800aaf8:	f104 0e14 	add.w	lr, r4, #20
 800aafc:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab00:	f8d9 1000 	ldr.w	r1, [r9]
 800ab04:	fa1f fb82 	uxth.w	fp, r2
 800ab08:	b289      	uxth	r1, r1
 800ab0a:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab0e:	4461      	add	r1, ip
 800ab10:	f8d9 c000 	ldr.w	ip, [r9]
 800ab14:	0c12      	lsrs	r2, r2, #16
 800ab16:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ab1a:	fb0a c202 	mla	r2, sl, r2, ip
 800ab1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab22:	b289      	uxth	r1, r1
 800ab24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab28:	4577      	cmp	r7, lr
 800ab2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab2e:	f849 1b04 	str.w	r1, [r9], #4
 800ab32:	d8e3      	bhi.n	800aafc <__multiply+0xb0>
 800ab34:	9a01      	ldr	r2, [sp, #4]
 800ab36:	f845 c002 	str.w	ip, [r5, r2]
 800ab3a:	9a03      	ldr	r2, [sp, #12]
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab42:	f1b9 0f00 	cmp.w	r9, #0
 800ab46:	d021      	beq.n	800ab8c <__multiply+0x140>
 800ab48:	46ae      	mov	lr, r5
 800ab4a:	f04f 0a00 	mov.w	sl, #0
 800ab4e:	6829      	ldr	r1, [r5, #0]
 800ab50:	f104 0c14 	add.w	ip, r4, #20
 800ab54:	f8bc b000 	ldrh.w	fp, [ip]
 800ab58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab5c:	b289      	uxth	r1, r1
 800ab5e:	fb09 220b 	mla	r2, r9, fp, r2
 800ab62:	4452      	add	r2, sl
 800ab64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab68:	f84e 1b04 	str.w	r1, [lr], #4
 800ab6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab74:	f8be 1000 	ldrh.w	r1, [lr]
 800ab78:	4567      	cmp	r7, ip
 800ab7a:	fb09 110a 	mla	r1, r9, sl, r1
 800ab7e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ab82:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab86:	d8e5      	bhi.n	800ab54 <__multiply+0x108>
 800ab88:	9a01      	ldr	r2, [sp, #4]
 800ab8a:	50a9      	str	r1, [r5, r2]
 800ab8c:	3504      	adds	r5, #4
 800ab8e:	e79a      	b.n	800aac6 <__multiply+0x7a>
 800ab90:	3e01      	subs	r6, #1
 800ab92:	e79c      	b.n	800aace <__multiply+0x82>
 800ab94:	0800d3a6 	.word	0x0800d3a6
 800ab98:	0800d3b7 	.word	0x0800d3b7

0800ab9c <__pow5mult>:
 800ab9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aba0:	4615      	mov	r5, r2
 800aba2:	f012 0203 	ands.w	r2, r2, #3
 800aba6:	4606      	mov	r6, r0
 800aba8:	460f      	mov	r7, r1
 800abaa:	d007      	beq.n	800abbc <__pow5mult+0x20>
 800abac:	4c25      	ldr	r4, [pc, #148]	; (800ac44 <__pow5mult+0xa8>)
 800abae:	3a01      	subs	r2, #1
 800abb0:	2300      	movs	r3, #0
 800abb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abb6:	f7ff fe55 	bl	800a864 <__multadd>
 800abba:	4607      	mov	r7, r0
 800abbc:	10ad      	asrs	r5, r5, #2
 800abbe:	d03d      	beq.n	800ac3c <__pow5mult+0xa0>
 800abc0:	69f4      	ldr	r4, [r6, #28]
 800abc2:	b97c      	cbnz	r4, 800abe4 <__pow5mult+0x48>
 800abc4:	2010      	movs	r0, #16
 800abc6:	f7ff fd37 	bl	800a638 <malloc>
 800abca:	4602      	mov	r2, r0
 800abcc:	61f0      	str	r0, [r6, #28]
 800abce:	b928      	cbnz	r0, 800abdc <__pow5mult+0x40>
 800abd0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800abd4:	4b1c      	ldr	r3, [pc, #112]	; (800ac48 <__pow5mult+0xac>)
 800abd6:	481d      	ldr	r0, [pc, #116]	; (800ac4c <__pow5mult+0xb0>)
 800abd8:	f7fe fe5a 	bl	8009890 <__assert_func>
 800abdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abe0:	6004      	str	r4, [r0, #0]
 800abe2:	60c4      	str	r4, [r0, #12]
 800abe4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800abe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abec:	b94c      	cbnz	r4, 800ac02 <__pow5mult+0x66>
 800abee:	f240 2171 	movw	r1, #625	; 0x271
 800abf2:	4630      	mov	r0, r6
 800abf4:	f7ff ff14 	bl	800aa20 <__i2b>
 800abf8:	2300      	movs	r3, #0
 800abfa:	4604      	mov	r4, r0
 800abfc:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac00:	6003      	str	r3, [r0, #0]
 800ac02:	f04f 0900 	mov.w	r9, #0
 800ac06:	07eb      	lsls	r3, r5, #31
 800ac08:	d50a      	bpl.n	800ac20 <__pow5mult+0x84>
 800ac0a:	4639      	mov	r1, r7
 800ac0c:	4622      	mov	r2, r4
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f7ff ff1c 	bl	800aa4c <__multiply>
 800ac14:	4680      	mov	r8, r0
 800ac16:	4639      	mov	r1, r7
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f7ff fe01 	bl	800a820 <_Bfree>
 800ac1e:	4647      	mov	r7, r8
 800ac20:	106d      	asrs	r5, r5, #1
 800ac22:	d00b      	beq.n	800ac3c <__pow5mult+0xa0>
 800ac24:	6820      	ldr	r0, [r4, #0]
 800ac26:	b938      	cbnz	r0, 800ac38 <__pow5mult+0x9c>
 800ac28:	4622      	mov	r2, r4
 800ac2a:	4621      	mov	r1, r4
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	f7ff ff0d 	bl	800aa4c <__multiply>
 800ac32:	6020      	str	r0, [r4, #0]
 800ac34:	f8c0 9000 	str.w	r9, [r0]
 800ac38:	4604      	mov	r4, r0
 800ac3a:	e7e4      	b.n	800ac06 <__pow5mult+0x6a>
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac42:	bf00      	nop
 800ac44:	0800d500 	.word	0x0800d500
 800ac48:	0800d294 	.word	0x0800d294
 800ac4c:	0800d3b7 	.word	0x0800d3b7

0800ac50 <__lshift>:
 800ac50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac54:	460c      	mov	r4, r1
 800ac56:	4607      	mov	r7, r0
 800ac58:	4691      	mov	r9, r2
 800ac5a:	6923      	ldr	r3, [r4, #16]
 800ac5c:	6849      	ldr	r1, [r1, #4]
 800ac5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac62:	68a3      	ldr	r3, [r4, #8]
 800ac64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac68:	f108 0601 	add.w	r6, r8, #1
 800ac6c:	42b3      	cmp	r3, r6
 800ac6e:	db0b      	blt.n	800ac88 <__lshift+0x38>
 800ac70:	4638      	mov	r0, r7
 800ac72:	f7ff fd95 	bl	800a7a0 <_Balloc>
 800ac76:	4605      	mov	r5, r0
 800ac78:	b948      	cbnz	r0, 800ac8e <__lshift+0x3e>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ac80:	4b27      	ldr	r3, [pc, #156]	; (800ad20 <__lshift+0xd0>)
 800ac82:	4828      	ldr	r0, [pc, #160]	; (800ad24 <__lshift+0xd4>)
 800ac84:	f7fe fe04 	bl	8009890 <__assert_func>
 800ac88:	3101      	adds	r1, #1
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	e7ee      	b.n	800ac6c <__lshift+0x1c>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f100 0114 	add.w	r1, r0, #20
 800ac94:	f100 0210 	add.w	r2, r0, #16
 800ac98:	4618      	mov	r0, r3
 800ac9a:	4553      	cmp	r3, sl
 800ac9c:	db33      	blt.n	800ad06 <__lshift+0xb6>
 800ac9e:	6920      	ldr	r0, [r4, #16]
 800aca0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aca4:	f104 0314 	add.w	r3, r4, #20
 800aca8:	f019 091f 	ands.w	r9, r9, #31
 800acac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800acb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800acb4:	d02b      	beq.n	800ad0e <__lshift+0xbe>
 800acb6:	468a      	mov	sl, r1
 800acb8:	2200      	movs	r2, #0
 800acba:	f1c9 0e20 	rsb	lr, r9, #32
 800acbe:	6818      	ldr	r0, [r3, #0]
 800acc0:	fa00 f009 	lsl.w	r0, r0, r9
 800acc4:	4310      	orrs	r0, r2
 800acc6:	f84a 0b04 	str.w	r0, [sl], #4
 800acca:	f853 2b04 	ldr.w	r2, [r3], #4
 800acce:	459c      	cmp	ip, r3
 800acd0:	fa22 f20e 	lsr.w	r2, r2, lr
 800acd4:	d8f3      	bhi.n	800acbe <__lshift+0x6e>
 800acd6:	ebac 0304 	sub.w	r3, ip, r4
 800acda:	3b15      	subs	r3, #21
 800acdc:	f023 0303 	bic.w	r3, r3, #3
 800ace0:	3304      	adds	r3, #4
 800ace2:	f104 0015 	add.w	r0, r4, #21
 800ace6:	4584      	cmp	ip, r0
 800ace8:	bf38      	it	cc
 800acea:	2304      	movcc	r3, #4
 800acec:	50ca      	str	r2, [r1, r3]
 800acee:	b10a      	cbz	r2, 800acf4 <__lshift+0xa4>
 800acf0:	f108 0602 	add.w	r6, r8, #2
 800acf4:	3e01      	subs	r6, #1
 800acf6:	4638      	mov	r0, r7
 800acf8:	4621      	mov	r1, r4
 800acfa:	612e      	str	r6, [r5, #16]
 800acfc:	f7ff fd90 	bl	800a820 <_Bfree>
 800ad00:	4628      	mov	r0, r5
 800ad02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad06:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	e7c5      	b.n	800ac9a <__lshift+0x4a>
 800ad0e:	3904      	subs	r1, #4
 800ad10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad14:	459c      	cmp	ip, r3
 800ad16:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad1a:	d8f9      	bhi.n	800ad10 <__lshift+0xc0>
 800ad1c:	e7ea      	b.n	800acf4 <__lshift+0xa4>
 800ad1e:	bf00      	nop
 800ad20:	0800d3a6 	.word	0x0800d3a6
 800ad24:	0800d3b7 	.word	0x0800d3b7

0800ad28 <__mcmp>:
 800ad28:	4603      	mov	r3, r0
 800ad2a:	690a      	ldr	r2, [r1, #16]
 800ad2c:	6900      	ldr	r0, [r0, #16]
 800ad2e:	b530      	push	{r4, r5, lr}
 800ad30:	1a80      	subs	r0, r0, r2
 800ad32:	d10d      	bne.n	800ad50 <__mcmp+0x28>
 800ad34:	3314      	adds	r3, #20
 800ad36:	3114      	adds	r1, #20
 800ad38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ad3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ad40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ad48:	4295      	cmp	r5, r2
 800ad4a:	d002      	beq.n	800ad52 <__mcmp+0x2a>
 800ad4c:	d304      	bcc.n	800ad58 <__mcmp+0x30>
 800ad4e:	2001      	movs	r0, #1
 800ad50:	bd30      	pop	{r4, r5, pc}
 800ad52:	42a3      	cmp	r3, r4
 800ad54:	d3f4      	bcc.n	800ad40 <__mcmp+0x18>
 800ad56:	e7fb      	b.n	800ad50 <__mcmp+0x28>
 800ad58:	f04f 30ff 	mov.w	r0, #4294967295
 800ad5c:	e7f8      	b.n	800ad50 <__mcmp+0x28>
	...

0800ad60 <__mdiff>:
 800ad60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad64:	460d      	mov	r5, r1
 800ad66:	4607      	mov	r7, r0
 800ad68:	4611      	mov	r1, r2
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	4614      	mov	r4, r2
 800ad6e:	f7ff ffdb 	bl	800ad28 <__mcmp>
 800ad72:	1e06      	subs	r6, r0, #0
 800ad74:	d111      	bne.n	800ad9a <__mdiff+0x3a>
 800ad76:	4631      	mov	r1, r6
 800ad78:	4638      	mov	r0, r7
 800ad7a:	f7ff fd11 	bl	800a7a0 <_Balloc>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	b928      	cbnz	r0, 800ad8e <__mdiff+0x2e>
 800ad82:	f240 2137 	movw	r1, #567	; 0x237
 800ad86:	4b3a      	ldr	r3, [pc, #232]	; (800ae70 <__mdiff+0x110>)
 800ad88:	483a      	ldr	r0, [pc, #232]	; (800ae74 <__mdiff+0x114>)
 800ad8a:	f7fe fd81 	bl	8009890 <__assert_func>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ad94:	4610      	mov	r0, r2
 800ad96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9a:	bfa4      	itt	ge
 800ad9c:	4623      	movge	r3, r4
 800ad9e:	462c      	movge	r4, r5
 800ada0:	4638      	mov	r0, r7
 800ada2:	6861      	ldr	r1, [r4, #4]
 800ada4:	bfa6      	itte	ge
 800ada6:	461d      	movge	r5, r3
 800ada8:	2600      	movge	r6, #0
 800adaa:	2601      	movlt	r6, #1
 800adac:	f7ff fcf8 	bl	800a7a0 <_Balloc>
 800adb0:	4602      	mov	r2, r0
 800adb2:	b918      	cbnz	r0, 800adbc <__mdiff+0x5c>
 800adb4:	f240 2145 	movw	r1, #581	; 0x245
 800adb8:	4b2d      	ldr	r3, [pc, #180]	; (800ae70 <__mdiff+0x110>)
 800adba:	e7e5      	b.n	800ad88 <__mdiff+0x28>
 800adbc:	f102 0814 	add.w	r8, r2, #20
 800adc0:	46c2      	mov	sl, r8
 800adc2:	f04f 0c00 	mov.w	ip, #0
 800adc6:	6927      	ldr	r7, [r4, #16]
 800adc8:	60c6      	str	r6, [r0, #12]
 800adca:	692e      	ldr	r6, [r5, #16]
 800adcc:	f104 0014 	add.w	r0, r4, #20
 800add0:	f105 0914 	add.w	r9, r5, #20
 800add4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800add8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800addc:	3410      	adds	r4, #16
 800adde:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ade2:	f859 3b04 	ldr.w	r3, [r9], #4
 800ade6:	fa1f f18b 	uxth.w	r1, fp
 800adea:	4461      	add	r1, ip
 800adec:	fa1f fc83 	uxth.w	ip, r3
 800adf0:	0c1b      	lsrs	r3, r3, #16
 800adf2:	eba1 010c 	sub.w	r1, r1, ip
 800adf6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800adfa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800adfe:	b289      	uxth	r1, r1
 800ae00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ae04:	454e      	cmp	r6, r9
 800ae06:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ae0a:	f84a 1b04 	str.w	r1, [sl], #4
 800ae0e:	d8e6      	bhi.n	800adde <__mdiff+0x7e>
 800ae10:	1b73      	subs	r3, r6, r5
 800ae12:	3b15      	subs	r3, #21
 800ae14:	f023 0303 	bic.w	r3, r3, #3
 800ae18:	3515      	adds	r5, #21
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	42ae      	cmp	r6, r5
 800ae1e:	bf38      	it	cc
 800ae20:	2304      	movcc	r3, #4
 800ae22:	4418      	add	r0, r3
 800ae24:	4443      	add	r3, r8
 800ae26:	461e      	mov	r6, r3
 800ae28:	4605      	mov	r5, r0
 800ae2a:	4575      	cmp	r5, lr
 800ae2c:	d30e      	bcc.n	800ae4c <__mdiff+0xec>
 800ae2e:	f10e 0103 	add.w	r1, lr, #3
 800ae32:	1a09      	subs	r1, r1, r0
 800ae34:	f021 0103 	bic.w	r1, r1, #3
 800ae38:	3803      	subs	r0, #3
 800ae3a:	4586      	cmp	lr, r0
 800ae3c:	bf38      	it	cc
 800ae3e:	2100      	movcc	r1, #0
 800ae40:	440b      	add	r3, r1
 800ae42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae46:	b189      	cbz	r1, 800ae6c <__mdiff+0x10c>
 800ae48:	6117      	str	r7, [r2, #16]
 800ae4a:	e7a3      	b.n	800ad94 <__mdiff+0x34>
 800ae4c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ae50:	fa1f f188 	uxth.w	r1, r8
 800ae54:	4461      	add	r1, ip
 800ae56:	140c      	asrs	r4, r1, #16
 800ae58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae5c:	b289      	uxth	r1, r1
 800ae5e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ae62:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ae66:	f846 1b04 	str.w	r1, [r6], #4
 800ae6a:	e7de      	b.n	800ae2a <__mdiff+0xca>
 800ae6c:	3f01      	subs	r7, #1
 800ae6e:	e7e8      	b.n	800ae42 <__mdiff+0xe2>
 800ae70:	0800d3a6 	.word	0x0800d3a6
 800ae74:	0800d3b7 	.word	0x0800d3b7

0800ae78 <__ulp>:
 800ae78:	4b0e      	ldr	r3, [pc, #56]	; (800aeb4 <__ulp+0x3c>)
 800ae7a:	400b      	ands	r3, r1
 800ae7c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	dc08      	bgt.n	800ae96 <__ulp+0x1e>
 800ae84:	425b      	negs	r3, r3
 800ae86:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ae8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae8e:	da04      	bge.n	800ae9a <__ulp+0x22>
 800ae90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae94:	4113      	asrs	r3, r2
 800ae96:	2200      	movs	r2, #0
 800ae98:	e008      	b.n	800aeac <__ulp+0x34>
 800ae9a:	f1a2 0314 	sub.w	r3, r2, #20
 800ae9e:	2b1e      	cmp	r3, #30
 800aea0:	bfd6      	itet	le
 800aea2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800aea6:	2201      	movgt	r2, #1
 800aea8:	40da      	lsrle	r2, r3
 800aeaa:	2300      	movs	r3, #0
 800aeac:	4619      	mov	r1, r3
 800aeae:	4610      	mov	r0, r2
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	7ff00000 	.word	0x7ff00000

0800aeb8 <__b2d>:
 800aeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeba:	6905      	ldr	r5, [r0, #16]
 800aebc:	f100 0714 	add.w	r7, r0, #20
 800aec0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aec4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aec8:	1f2e      	subs	r6, r5, #4
 800aeca:	4620      	mov	r0, r4
 800aecc:	f7ff fd5a 	bl	800a984 <__hi0bits>
 800aed0:	f1c0 0220 	rsb	r2, r0, #32
 800aed4:	280a      	cmp	r0, #10
 800aed6:	4603      	mov	r3, r0
 800aed8:	f8df c068 	ldr.w	ip, [pc, #104]	; 800af44 <__b2d+0x8c>
 800aedc:	600a      	str	r2, [r1, #0]
 800aede:	dc12      	bgt.n	800af06 <__b2d+0x4e>
 800aee0:	f1c0 0e0b 	rsb	lr, r0, #11
 800aee4:	fa24 f20e 	lsr.w	r2, r4, lr
 800aee8:	42b7      	cmp	r7, r6
 800aeea:	ea42 010c 	orr.w	r1, r2, ip
 800aeee:	bf2c      	ite	cs
 800aef0:	2200      	movcs	r2, #0
 800aef2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800aef6:	3315      	adds	r3, #21
 800aef8:	fa04 f303 	lsl.w	r3, r4, r3
 800aefc:	fa22 f20e 	lsr.w	r2, r2, lr
 800af00:	431a      	orrs	r2, r3
 800af02:	4610      	mov	r0, r2
 800af04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af06:	42b7      	cmp	r7, r6
 800af08:	bf2e      	itee	cs
 800af0a:	2200      	movcs	r2, #0
 800af0c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800af10:	f1a5 0608 	subcc.w	r6, r5, #8
 800af14:	3b0b      	subs	r3, #11
 800af16:	d012      	beq.n	800af3e <__b2d+0x86>
 800af18:	f1c3 0520 	rsb	r5, r3, #32
 800af1c:	fa22 f105 	lsr.w	r1, r2, r5
 800af20:	409c      	lsls	r4, r3
 800af22:	430c      	orrs	r4, r1
 800af24:	42be      	cmp	r6, r7
 800af26:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800af2a:	bf94      	ite	ls
 800af2c:	2400      	movls	r4, #0
 800af2e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800af32:	409a      	lsls	r2, r3
 800af34:	40ec      	lsrs	r4, r5
 800af36:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800af3a:	4322      	orrs	r2, r4
 800af3c:	e7e1      	b.n	800af02 <__b2d+0x4a>
 800af3e:	ea44 010c 	orr.w	r1, r4, ip
 800af42:	e7de      	b.n	800af02 <__b2d+0x4a>
 800af44:	3ff00000 	.word	0x3ff00000

0800af48 <__d2b>:
 800af48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af4a:	2101      	movs	r1, #1
 800af4c:	4617      	mov	r7, r2
 800af4e:	461c      	mov	r4, r3
 800af50:	9e08      	ldr	r6, [sp, #32]
 800af52:	f7ff fc25 	bl	800a7a0 <_Balloc>
 800af56:	4605      	mov	r5, r0
 800af58:	b930      	cbnz	r0, 800af68 <__d2b+0x20>
 800af5a:	4602      	mov	r2, r0
 800af5c:	f240 310f 	movw	r1, #783	; 0x30f
 800af60:	4b22      	ldr	r3, [pc, #136]	; (800afec <__d2b+0xa4>)
 800af62:	4823      	ldr	r0, [pc, #140]	; (800aff0 <__d2b+0xa8>)
 800af64:	f7fe fc94 	bl	8009890 <__assert_func>
 800af68:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800af6c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800af70:	bb24      	cbnz	r4, 800afbc <__d2b+0x74>
 800af72:	2f00      	cmp	r7, #0
 800af74:	9301      	str	r3, [sp, #4]
 800af76:	d026      	beq.n	800afc6 <__d2b+0x7e>
 800af78:	4668      	mov	r0, sp
 800af7a:	9700      	str	r7, [sp, #0]
 800af7c:	f7ff fd22 	bl	800a9c4 <__lo0bits>
 800af80:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af84:	b1e8      	cbz	r0, 800afc2 <__d2b+0x7a>
 800af86:	f1c0 0320 	rsb	r3, r0, #32
 800af8a:	fa02 f303 	lsl.w	r3, r2, r3
 800af8e:	430b      	orrs	r3, r1
 800af90:	40c2      	lsrs	r2, r0
 800af92:	616b      	str	r3, [r5, #20]
 800af94:	9201      	str	r2, [sp, #4]
 800af96:	9b01      	ldr	r3, [sp, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	bf14      	ite	ne
 800af9c:	2102      	movne	r1, #2
 800af9e:	2101      	moveq	r1, #1
 800afa0:	61ab      	str	r3, [r5, #24]
 800afa2:	6129      	str	r1, [r5, #16]
 800afa4:	b1bc      	cbz	r4, 800afd6 <__d2b+0x8e>
 800afa6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800afaa:	4404      	add	r4, r0
 800afac:	6034      	str	r4, [r6, #0]
 800afae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800afb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afb4:	6018      	str	r0, [r3, #0]
 800afb6:	4628      	mov	r0, r5
 800afb8:	b003      	add	sp, #12
 800afba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afc0:	e7d7      	b.n	800af72 <__d2b+0x2a>
 800afc2:	6169      	str	r1, [r5, #20]
 800afc4:	e7e7      	b.n	800af96 <__d2b+0x4e>
 800afc6:	a801      	add	r0, sp, #4
 800afc8:	f7ff fcfc 	bl	800a9c4 <__lo0bits>
 800afcc:	9b01      	ldr	r3, [sp, #4]
 800afce:	2101      	movs	r1, #1
 800afd0:	616b      	str	r3, [r5, #20]
 800afd2:	3020      	adds	r0, #32
 800afd4:	e7e5      	b.n	800afa2 <__d2b+0x5a>
 800afd6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800afda:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800afde:	6030      	str	r0, [r6, #0]
 800afe0:	6918      	ldr	r0, [r3, #16]
 800afe2:	f7ff fccf 	bl	800a984 <__hi0bits>
 800afe6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800afea:	e7e2      	b.n	800afb2 <__d2b+0x6a>
 800afec:	0800d3a6 	.word	0x0800d3a6
 800aff0:	0800d3b7 	.word	0x0800d3b7

0800aff4 <__ratio>:
 800aff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff8:	4688      	mov	r8, r1
 800affa:	4669      	mov	r1, sp
 800affc:	4681      	mov	r9, r0
 800affe:	f7ff ff5b 	bl	800aeb8 <__b2d>
 800b002:	460f      	mov	r7, r1
 800b004:	4604      	mov	r4, r0
 800b006:	460d      	mov	r5, r1
 800b008:	4640      	mov	r0, r8
 800b00a:	a901      	add	r1, sp, #4
 800b00c:	f7ff ff54 	bl	800aeb8 <__b2d>
 800b010:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b014:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b018:	468b      	mov	fp, r1
 800b01a:	eba3 0c02 	sub.w	ip, r3, r2
 800b01e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b022:	1a9b      	subs	r3, r3, r2
 800b024:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b028:	2b00      	cmp	r3, #0
 800b02a:	bfd5      	itete	le
 800b02c:	460a      	movle	r2, r1
 800b02e:	462a      	movgt	r2, r5
 800b030:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b034:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b038:	bfd8      	it	le
 800b03a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b03e:	465b      	mov	r3, fp
 800b040:	4602      	mov	r2, r0
 800b042:	4639      	mov	r1, r7
 800b044:	4620      	mov	r0, r4
 800b046:	f7f5 fc2f 	bl	80008a8 <__aeabi_ddiv>
 800b04a:	b003      	add	sp, #12
 800b04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b050 <__copybits>:
 800b050:	3901      	subs	r1, #1
 800b052:	b570      	push	{r4, r5, r6, lr}
 800b054:	1149      	asrs	r1, r1, #5
 800b056:	6914      	ldr	r4, [r2, #16]
 800b058:	3101      	adds	r1, #1
 800b05a:	f102 0314 	add.w	r3, r2, #20
 800b05e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b062:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b066:	1f05      	subs	r5, r0, #4
 800b068:	42a3      	cmp	r3, r4
 800b06a:	d30c      	bcc.n	800b086 <__copybits+0x36>
 800b06c:	1aa3      	subs	r3, r4, r2
 800b06e:	3b11      	subs	r3, #17
 800b070:	f023 0303 	bic.w	r3, r3, #3
 800b074:	3211      	adds	r2, #17
 800b076:	42a2      	cmp	r2, r4
 800b078:	bf88      	it	hi
 800b07a:	2300      	movhi	r3, #0
 800b07c:	4418      	add	r0, r3
 800b07e:	2300      	movs	r3, #0
 800b080:	4288      	cmp	r0, r1
 800b082:	d305      	bcc.n	800b090 <__copybits+0x40>
 800b084:	bd70      	pop	{r4, r5, r6, pc}
 800b086:	f853 6b04 	ldr.w	r6, [r3], #4
 800b08a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b08e:	e7eb      	b.n	800b068 <__copybits+0x18>
 800b090:	f840 3b04 	str.w	r3, [r0], #4
 800b094:	e7f4      	b.n	800b080 <__copybits+0x30>

0800b096 <__any_on>:
 800b096:	f100 0214 	add.w	r2, r0, #20
 800b09a:	6900      	ldr	r0, [r0, #16]
 800b09c:	114b      	asrs	r3, r1, #5
 800b09e:	4298      	cmp	r0, r3
 800b0a0:	b510      	push	{r4, lr}
 800b0a2:	db11      	blt.n	800b0c8 <__any_on+0x32>
 800b0a4:	dd0a      	ble.n	800b0bc <__any_on+0x26>
 800b0a6:	f011 011f 	ands.w	r1, r1, #31
 800b0aa:	d007      	beq.n	800b0bc <__any_on+0x26>
 800b0ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b0b0:	fa24 f001 	lsr.w	r0, r4, r1
 800b0b4:	fa00 f101 	lsl.w	r1, r0, r1
 800b0b8:	428c      	cmp	r4, r1
 800b0ba:	d10b      	bne.n	800b0d4 <__any_on+0x3e>
 800b0bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d803      	bhi.n	800b0cc <__any_on+0x36>
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	bd10      	pop	{r4, pc}
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	e7f7      	b.n	800b0bc <__any_on+0x26>
 800b0cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0d0:	2900      	cmp	r1, #0
 800b0d2:	d0f5      	beq.n	800b0c0 <__any_on+0x2a>
 800b0d4:	2001      	movs	r0, #1
 800b0d6:	e7f6      	b.n	800b0c6 <__any_on+0x30>

0800b0d8 <sulp>:
 800b0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0dc:	460f      	mov	r7, r1
 800b0de:	4690      	mov	r8, r2
 800b0e0:	f7ff feca 	bl	800ae78 <__ulp>
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	460d      	mov	r5, r1
 800b0e8:	f1b8 0f00 	cmp.w	r8, #0
 800b0ec:	d011      	beq.n	800b112 <sulp+0x3a>
 800b0ee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b0f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	dd0b      	ble.n	800b112 <sulp+0x3a>
 800b0fa:	2400      	movs	r4, #0
 800b0fc:	051b      	lsls	r3, r3, #20
 800b0fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b102:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b106:	4622      	mov	r2, r4
 800b108:	462b      	mov	r3, r5
 800b10a:	f7f5 faa3 	bl	8000654 <__aeabi_dmul>
 800b10e:	4604      	mov	r4, r0
 800b110:	460d      	mov	r5, r1
 800b112:	4620      	mov	r0, r4
 800b114:	4629      	mov	r1, r5
 800b116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b11a:	0000      	movs	r0, r0
 800b11c:	0000      	movs	r0, r0
	...

0800b120 <_strtod_l>:
 800b120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b124:	b09f      	sub	sp, #124	; 0x7c
 800b126:	9217      	str	r2, [sp, #92]	; 0x5c
 800b128:	2200      	movs	r2, #0
 800b12a:	4604      	mov	r4, r0
 800b12c:	921a      	str	r2, [sp, #104]	; 0x68
 800b12e:	460d      	mov	r5, r1
 800b130:	f04f 0800 	mov.w	r8, #0
 800b134:	f04f 0900 	mov.w	r9, #0
 800b138:	460a      	mov	r2, r1
 800b13a:	9219      	str	r2, [sp, #100]	; 0x64
 800b13c:	7811      	ldrb	r1, [r2, #0]
 800b13e:	292b      	cmp	r1, #43	; 0x2b
 800b140:	d04a      	beq.n	800b1d8 <_strtod_l+0xb8>
 800b142:	d838      	bhi.n	800b1b6 <_strtod_l+0x96>
 800b144:	290d      	cmp	r1, #13
 800b146:	d832      	bhi.n	800b1ae <_strtod_l+0x8e>
 800b148:	2908      	cmp	r1, #8
 800b14a:	d832      	bhi.n	800b1b2 <_strtod_l+0x92>
 800b14c:	2900      	cmp	r1, #0
 800b14e:	d03b      	beq.n	800b1c8 <_strtod_l+0xa8>
 800b150:	2200      	movs	r2, #0
 800b152:	920e      	str	r2, [sp, #56]	; 0x38
 800b154:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b156:	7832      	ldrb	r2, [r6, #0]
 800b158:	2a30      	cmp	r2, #48	; 0x30
 800b15a:	f040 80b2 	bne.w	800b2c2 <_strtod_l+0x1a2>
 800b15e:	7872      	ldrb	r2, [r6, #1]
 800b160:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b164:	2a58      	cmp	r2, #88	; 0x58
 800b166:	d16e      	bne.n	800b246 <_strtod_l+0x126>
 800b168:	9302      	str	r3, [sp, #8]
 800b16a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b16c:	4620      	mov	r0, r4
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	ab1a      	add	r3, sp, #104	; 0x68
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	4a8c      	ldr	r2, [pc, #560]	; (800b3a8 <_strtod_l+0x288>)
 800b176:	ab1b      	add	r3, sp, #108	; 0x6c
 800b178:	a919      	add	r1, sp, #100	; 0x64
 800b17a:	f001 fa6b 	bl	800c654 <__gethex>
 800b17e:	f010 070f 	ands.w	r7, r0, #15
 800b182:	4605      	mov	r5, r0
 800b184:	d005      	beq.n	800b192 <_strtod_l+0x72>
 800b186:	2f06      	cmp	r7, #6
 800b188:	d128      	bne.n	800b1dc <_strtod_l+0xbc>
 800b18a:	2300      	movs	r3, #0
 800b18c:	3601      	adds	r6, #1
 800b18e:	9619      	str	r6, [sp, #100]	; 0x64
 800b190:	930e      	str	r3, [sp, #56]	; 0x38
 800b192:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b194:	2b00      	cmp	r3, #0
 800b196:	f040 85a0 	bne.w	800bcda <_strtod_l+0xbba>
 800b19a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b19c:	b1cb      	cbz	r3, 800b1d2 <_strtod_l+0xb2>
 800b19e:	4642      	mov	r2, r8
 800b1a0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	b01f      	add	sp, #124	; 0x7c
 800b1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ae:	2920      	cmp	r1, #32
 800b1b0:	d1ce      	bne.n	800b150 <_strtod_l+0x30>
 800b1b2:	3201      	adds	r2, #1
 800b1b4:	e7c1      	b.n	800b13a <_strtod_l+0x1a>
 800b1b6:	292d      	cmp	r1, #45	; 0x2d
 800b1b8:	d1ca      	bne.n	800b150 <_strtod_l+0x30>
 800b1ba:	2101      	movs	r1, #1
 800b1bc:	910e      	str	r1, [sp, #56]	; 0x38
 800b1be:	1c51      	adds	r1, r2, #1
 800b1c0:	9119      	str	r1, [sp, #100]	; 0x64
 800b1c2:	7852      	ldrb	r2, [r2, #1]
 800b1c4:	2a00      	cmp	r2, #0
 800b1c6:	d1c5      	bne.n	800b154 <_strtod_l+0x34>
 800b1c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1ca:	9519      	str	r5, [sp, #100]	; 0x64
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f040 8582 	bne.w	800bcd6 <_strtod_l+0xbb6>
 800b1d2:	4642      	mov	r2, r8
 800b1d4:	464b      	mov	r3, r9
 800b1d6:	e7e5      	b.n	800b1a4 <_strtod_l+0x84>
 800b1d8:	2100      	movs	r1, #0
 800b1da:	e7ef      	b.n	800b1bc <_strtod_l+0x9c>
 800b1dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b1de:	b13a      	cbz	r2, 800b1f0 <_strtod_l+0xd0>
 800b1e0:	2135      	movs	r1, #53	; 0x35
 800b1e2:	a81c      	add	r0, sp, #112	; 0x70
 800b1e4:	f7ff ff34 	bl	800b050 <__copybits>
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b1ec:	f7ff fb18 	bl	800a820 <_Bfree>
 800b1f0:	3f01      	subs	r7, #1
 800b1f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b1f4:	2f04      	cmp	r7, #4
 800b1f6:	d806      	bhi.n	800b206 <_strtod_l+0xe6>
 800b1f8:	e8df f007 	tbb	[pc, r7]
 800b1fc:	201d0314 	.word	0x201d0314
 800b200:	14          	.byte	0x14
 800b201:	00          	.byte	0x00
 800b202:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800b206:	05e9      	lsls	r1, r5, #23
 800b208:	bf48      	it	mi
 800b20a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b20e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b212:	0d1b      	lsrs	r3, r3, #20
 800b214:	051b      	lsls	r3, r3, #20
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1bb      	bne.n	800b192 <_strtod_l+0x72>
 800b21a:	f7fe faed 	bl	80097f8 <__errno>
 800b21e:	2322      	movs	r3, #34	; 0x22
 800b220:	6003      	str	r3, [r0, #0]
 800b222:	e7b6      	b.n	800b192 <_strtod_l+0x72>
 800b224:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b228:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800b22c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b230:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b234:	e7e7      	b.n	800b206 <_strtod_l+0xe6>
 800b236:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800b3ac <_strtod_l+0x28c>
 800b23a:	e7e4      	b.n	800b206 <_strtod_l+0xe6>
 800b23c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b240:	f04f 38ff 	mov.w	r8, #4294967295
 800b244:	e7df      	b.n	800b206 <_strtod_l+0xe6>
 800b246:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b248:	1c5a      	adds	r2, r3, #1
 800b24a:	9219      	str	r2, [sp, #100]	; 0x64
 800b24c:	785b      	ldrb	r3, [r3, #1]
 800b24e:	2b30      	cmp	r3, #48	; 0x30
 800b250:	d0f9      	beq.n	800b246 <_strtod_l+0x126>
 800b252:	2b00      	cmp	r3, #0
 800b254:	d09d      	beq.n	800b192 <_strtod_l+0x72>
 800b256:	2301      	movs	r3, #1
 800b258:	f04f 0a00 	mov.w	sl, #0
 800b25c:	220a      	movs	r2, #10
 800b25e:	46d3      	mov	fp, sl
 800b260:	9305      	str	r3, [sp, #20]
 800b262:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b264:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800b268:	930b      	str	r3, [sp, #44]	; 0x2c
 800b26a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b26c:	7806      	ldrb	r6, [r0, #0]
 800b26e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b272:	b2d9      	uxtb	r1, r3
 800b274:	2909      	cmp	r1, #9
 800b276:	d926      	bls.n	800b2c6 <_strtod_l+0x1a6>
 800b278:	2201      	movs	r2, #1
 800b27a:	494d      	ldr	r1, [pc, #308]	; (800b3b0 <_strtod_l+0x290>)
 800b27c:	f001 f91b 	bl	800c4b6 <strncmp>
 800b280:	2800      	cmp	r0, #0
 800b282:	d030      	beq.n	800b2e6 <_strtod_l+0x1c6>
 800b284:	2000      	movs	r0, #0
 800b286:	4632      	mov	r2, r6
 800b288:	4603      	mov	r3, r0
 800b28a:	465e      	mov	r6, fp
 800b28c:	9008      	str	r0, [sp, #32]
 800b28e:	2a65      	cmp	r2, #101	; 0x65
 800b290:	d001      	beq.n	800b296 <_strtod_l+0x176>
 800b292:	2a45      	cmp	r2, #69	; 0x45
 800b294:	d113      	bne.n	800b2be <_strtod_l+0x19e>
 800b296:	b91e      	cbnz	r6, 800b2a0 <_strtod_l+0x180>
 800b298:	9a05      	ldr	r2, [sp, #20]
 800b29a:	4302      	orrs	r2, r0
 800b29c:	d094      	beq.n	800b1c8 <_strtod_l+0xa8>
 800b29e:	2600      	movs	r6, #0
 800b2a0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b2a2:	1c6a      	adds	r2, r5, #1
 800b2a4:	9219      	str	r2, [sp, #100]	; 0x64
 800b2a6:	786a      	ldrb	r2, [r5, #1]
 800b2a8:	2a2b      	cmp	r2, #43	; 0x2b
 800b2aa:	d074      	beq.n	800b396 <_strtod_l+0x276>
 800b2ac:	2a2d      	cmp	r2, #45	; 0x2d
 800b2ae:	d078      	beq.n	800b3a2 <_strtod_l+0x282>
 800b2b0:	f04f 0c00 	mov.w	ip, #0
 800b2b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b2b8:	2909      	cmp	r1, #9
 800b2ba:	d97f      	bls.n	800b3bc <_strtod_l+0x29c>
 800b2bc:	9519      	str	r5, [sp, #100]	; 0x64
 800b2be:	2700      	movs	r7, #0
 800b2c0:	e09e      	b.n	800b400 <_strtod_l+0x2e0>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	e7c8      	b.n	800b258 <_strtod_l+0x138>
 800b2c6:	f1bb 0f08 	cmp.w	fp, #8
 800b2ca:	bfd8      	it	le
 800b2cc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800b2ce:	f100 0001 	add.w	r0, r0, #1
 800b2d2:	bfd6      	itet	le
 800b2d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b2d8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b2dc:	930a      	strle	r3, [sp, #40]	; 0x28
 800b2de:	f10b 0b01 	add.w	fp, fp, #1
 800b2e2:	9019      	str	r0, [sp, #100]	; 0x64
 800b2e4:	e7c1      	b.n	800b26a <_strtod_l+0x14a>
 800b2e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2e8:	1c5a      	adds	r2, r3, #1
 800b2ea:	9219      	str	r2, [sp, #100]	; 0x64
 800b2ec:	785a      	ldrb	r2, [r3, #1]
 800b2ee:	f1bb 0f00 	cmp.w	fp, #0
 800b2f2:	d037      	beq.n	800b364 <_strtod_l+0x244>
 800b2f4:	465e      	mov	r6, fp
 800b2f6:	9008      	str	r0, [sp, #32]
 800b2f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b2fc:	2b09      	cmp	r3, #9
 800b2fe:	d912      	bls.n	800b326 <_strtod_l+0x206>
 800b300:	2301      	movs	r3, #1
 800b302:	e7c4      	b.n	800b28e <_strtod_l+0x16e>
 800b304:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b306:	3001      	adds	r0, #1
 800b308:	1c5a      	adds	r2, r3, #1
 800b30a:	9219      	str	r2, [sp, #100]	; 0x64
 800b30c:	785a      	ldrb	r2, [r3, #1]
 800b30e:	2a30      	cmp	r2, #48	; 0x30
 800b310:	d0f8      	beq.n	800b304 <_strtod_l+0x1e4>
 800b312:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b316:	2b08      	cmp	r3, #8
 800b318:	f200 84e4 	bhi.w	800bce4 <_strtod_l+0xbc4>
 800b31c:	9008      	str	r0, [sp, #32]
 800b31e:	2000      	movs	r0, #0
 800b320:	4606      	mov	r6, r0
 800b322:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b324:	930b      	str	r3, [sp, #44]	; 0x2c
 800b326:	3a30      	subs	r2, #48	; 0x30
 800b328:	f100 0301 	add.w	r3, r0, #1
 800b32c:	d014      	beq.n	800b358 <_strtod_l+0x238>
 800b32e:	9908      	ldr	r1, [sp, #32]
 800b330:	eb00 0c06 	add.w	ip, r0, r6
 800b334:	4419      	add	r1, r3
 800b336:	9108      	str	r1, [sp, #32]
 800b338:	4633      	mov	r3, r6
 800b33a:	210a      	movs	r1, #10
 800b33c:	4563      	cmp	r3, ip
 800b33e:	d113      	bne.n	800b368 <_strtod_l+0x248>
 800b340:	1833      	adds	r3, r6, r0
 800b342:	2b08      	cmp	r3, #8
 800b344:	f106 0601 	add.w	r6, r6, #1
 800b348:	4406      	add	r6, r0
 800b34a:	dc1a      	bgt.n	800b382 <_strtod_l+0x262>
 800b34c:	230a      	movs	r3, #10
 800b34e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b350:	fb03 2301 	mla	r3, r3, r1, r2
 800b354:	930a      	str	r3, [sp, #40]	; 0x28
 800b356:	2300      	movs	r3, #0
 800b358:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b35a:	4618      	mov	r0, r3
 800b35c:	1c51      	adds	r1, r2, #1
 800b35e:	9119      	str	r1, [sp, #100]	; 0x64
 800b360:	7852      	ldrb	r2, [r2, #1]
 800b362:	e7c9      	b.n	800b2f8 <_strtod_l+0x1d8>
 800b364:	4658      	mov	r0, fp
 800b366:	e7d2      	b.n	800b30e <_strtod_l+0x1ee>
 800b368:	2b08      	cmp	r3, #8
 800b36a:	f103 0301 	add.w	r3, r3, #1
 800b36e:	dc03      	bgt.n	800b378 <_strtod_l+0x258>
 800b370:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b372:	434f      	muls	r7, r1
 800b374:	970a      	str	r7, [sp, #40]	; 0x28
 800b376:	e7e1      	b.n	800b33c <_strtod_l+0x21c>
 800b378:	2b10      	cmp	r3, #16
 800b37a:	bfd8      	it	le
 800b37c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b380:	e7dc      	b.n	800b33c <_strtod_l+0x21c>
 800b382:	2e10      	cmp	r6, #16
 800b384:	bfdc      	itt	le
 800b386:	230a      	movle	r3, #10
 800b388:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b38c:	e7e3      	b.n	800b356 <_strtod_l+0x236>
 800b38e:	2300      	movs	r3, #0
 800b390:	9308      	str	r3, [sp, #32]
 800b392:	2301      	movs	r3, #1
 800b394:	e780      	b.n	800b298 <_strtod_l+0x178>
 800b396:	f04f 0c00 	mov.w	ip, #0
 800b39a:	1caa      	adds	r2, r5, #2
 800b39c:	9219      	str	r2, [sp, #100]	; 0x64
 800b39e:	78aa      	ldrb	r2, [r5, #2]
 800b3a0:	e788      	b.n	800b2b4 <_strtod_l+0x194>
 800b3a2:	f04f 0c01 	mov.w	ip, #1
 800b3a6:	e7f8      	b.n	800b39a <_strtod_l+0x27a>
 800b3a8:	0800d510 	.word	0x0800d510
 800b3ac:	7ff00000 	.word	0x7ff00000
 800b3b0:	0800d50c 	.word	0x0800d50c
 800b3b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b3b6:	1c51      	adds	r1, r2, #1
 800b3b8:	9119      	str	r1, [sp, #100]	; 0x64
 800b3ba:	7852      	ldrb	r2, [r2, #1]
 800b3bc:	2a30      	cmp	r2, #48	; 0x30
 800b3be:	d0f9      	beq.n	800b3b4 <_strtod_l+0x294>
 800b3c0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b3c4:	2908      	cmp	r1, #8
 800b3c6:	f63f af7a 	bhi.w	800b2be <_strtod_l+0x19e>
 800b3ca:	3a30      	subs	r2, #48	; 0x30
 800b3cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b3ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b3d0:	920c      	str	r2, [sp, #48]	; 0x30
 800b3d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b3d4:	1c57      	adds	r7, r2, #1
 800b3d6:	9719      	str	r7, [sp, #100]	; 0x64
 800b3d8:	7852      	ldrb	r2, [r2, #1]
 800b3da:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b3de:	f1be 0f09 	cmp.w	lr, #9
 800b3e2:	d938      	bls.n	800b456 <_strtod_l+0x336>
 800b3e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b3e6:	1a7f      	subs	r7, r7, r1
 800b3e8:	2f08      	cmp	r7, #8
 800b3ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b3ee:	dc03      	bgt.n	800b3f8 <_strtod_l+0x2d8>
 800b3f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3f2:	428f      	cmp	r7, r1
 800b3f4:	bfa8      	it	ge
 800b3f6:	460f      	movge	r7, r1
 800b3f8:	f1bc 0f00 	cmp.w	ip, #0
 800b3fc:	d000      	beq.n	800b400 <_strtod_l+0x2e0>
 800b3fe:	427f      	negs	r7, r7
 800b400:	2e00      	cmp	r6, #0
 800b402:	d14f      	bne.n	800b4a4 <_strtod_l+0x384>
 800b404:	9905      	ldr	r1, [sp, #20]
 800b406:	4301      	orrs	r1, r0
 800b408:	f47f aec3 	bne.w	800b192 <_strtod_l+0x72>
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f47f aedb 	bne.w	800b1c8 <_strtod_l+0xa8>
 800b412:	2a69      	cmp	r2, #105	; 0x69
 800b414:	d029      	beq.n	800b46a <_strtod_l+0x34a>
 800b416:	dc26      	bgt.n	800b466 <_strtod_l+0x346>
 800b418:	2a49      	cmp	r2, #73	; 0x49
 800b41a:	d026      	beq.n	800b46a <_strtod_l+0x34a>
 800b41c:	2a4e      	cmp	r2, #78	; 0x4e
 800b41e:	f47f aed3 	bne.w	800b1c8 <_strtod_l+0xa8>
 800b422:	499a      	ldr	r1, [pc, #616]	; (800b68c <_strtod_l+0x56c>)
 800b424:	a819      	add	r0, sp, #100	; 0x64
 800b426:	f001 fb57 	bl	800cad8 <__match>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	f43f aecc 	beq.w	800b1c8 <_strtod_l+0xa8>
 800b430:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b28      	cmp	r3, #40	; 0x28
 800b436:	d12f      	bne.n	800b498 <_strtod_l+0x378>
 800b438:	4995      	ldr	r1, [pc, #596]	; (800b690 <_strtod_l+0x570>)
 800b43a:	aa1c      	add	r2, sp, #112	; 0x70
 800b43c:	a819      	add	r0, sp, #100	; 0x64
 800b43e:	f001 fb5f 	bl	800cb00 <__hexnan>
 800b442:	2805      	cmp	r0, #5
 800b444:	d128      	bne.n	800b498 <_strtod_l+0x378>
 800b446:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b448:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800b44c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b450:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b454:	e69d      	b.n	800b192 <_strtod_l+0x72>
 800b456:	210a      	movs	r1, #10
 800b458:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b45a:	fb01 2107 	mla	r1, r1, r7, r2
 800b45e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b462:	9209      	str	r2, [sp, #36]	; 0x24
 800b464:	e7b5      	b.n	800b3d2 <_strtod_l+0x2b2>
 800b466:	2a6e      	cmp	r2, #110	; 0x6e
 800b468:	e7d9      	b.n	800b41e <_strtod_l+0x2fe>
 800b46a:	498a      	ldr	r1, [pc, #552]	; (800b694 <_strtod_l+0x574>)
 800b46c:	a819      	add	r0, sp, #100	; 0x64
 800b46e:	f001 fb33 	bl	800cad8 <__match>
 800b472:	2800      	cmp	r0, #0
 800b474:	f43f aea8 	beq.w	800b1c8 <_strtod_l+0xa8>
 800b478:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b47a:	4987      	ldr	r1, [pc, #540]	; (800b698 <_strtod_l+0x578>)
 800b47c:	3b01      	subs	r3, #1
 800b47e:	a819      	add	r0, sp, #100	; 0x64
 800b480:	9319      	str	r3, [sp, #100]	; 0x64
 800b482:	f001 fb29 	bl	800cad8 <__match>
 800b486:	b910      	cbnz	r0, 800b48e <_strtod_l+0x36e>
 800b488:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b48a:	3301      	adds	r3, #1
 800b48c:	9319      	str	r3, [sp, #100]	; 0x64
 800b48e:	f04f 0800 	mov.w	r8, #0
 800b492:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800b69c <_strtod_l+0x57c>
 800b496:	e67c      	b.n	800b192 <_strtod_l+0x72>
 800b498:	4881      	ldr	r0, [pc, #516]	; (800b6a0 <_strtod_l+0x580>)
 800b49a:	f001 f851 	bl	800c540 <nan>
 800b49e:	4680      	mov	r8, r0
 800b4a0:	4689      	mov	r9, r1
 800b4a2:	e676      	b.n	800b192 <_strtod_l+0x72>
 800b4a4:	9b08      	ldr	r3, [sp, #32]
 800b4a6:	f1bb 0f00 	cmp.w	fp, #0
 800b4aa:	bf08      	it	eq
 800b4ac:	46b3      	moveq	fp, r6
 800b4ae:	1afb      	subs	r3, r7, r3
 800b4b0:	2e10      	cmp	r6, #16
 800b4b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b4b4:	4635      	mov	r5, r6
 800b4b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4b8:	bfa8      	it	ge
 800b4ba:	2510      	movge	r5, #16
 800b4bc:	f7f5 f850 	bl	8000560 <__aeabi_ui2d>
 800b4c0:	2e09      	cmp	r6, #9
 800b4c2:	4680      	mov	r8, r0
 800b4c4:	4689      	mov	r9, r1
 800b4c6:	dd13      	ble.n	800b4f0 <_strtod_l+0x3d0>
 800b4c8:	4b76      	ldr	r3, [pc, #472]	; (800b6a4 <_strtod_l+0x584>)
 800b4ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b4ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b4d2:	f7f5 f8bf 	bl	8000654 <__aeabi_dmul>
 800b4d6:	4680      	mov	r8, r0
 800b4d8:	4650      	mov	r0, sl
 800b4da:	4689      	mov	r9, r1
 800b4dc:	f7f5 f840 	bl	8000560 <__aeabi_ui2d>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4640      	mov	r0, r8
 800b4e6:	4649      	mov	r1, r9
 800b4e8:	f7f4 fefe 	bl	80002e8 <__adddf3>
 800b4ec:	4680      	mov	r8, r0
 800b4ee:	4689      	mov	r9, r1
 800b4f0:	2e0f      	cmp	r6, #15
 800b4f2:	dc36      	bgt.n	800b562 <_strtod_l+0x442>
 800b4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f43f ae4b 	beq.w	800b192 <_strtod_l+0x72>
 800b4fc:	dd22      	ble.n	800b544 <_strtod_l+0x424>
 800b4fe:	2b16      	cmp	r3, #22
 800b500:	dc09      	bgt.n	800b516 <_strtod_l+0x3f6>
 800b502:	4968      	ldr	r1, [pc, #416]	; (800b6a4 <_strtod_l+0x584>)
 800b504:	4642      	mov	r2, r8
 800b506:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b50a:	464b      	mov	r3, r9
 800b50c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b510:	f7f5 f8a0 	bl	8000654 <__aeabi_dmul>
 800b514:	e7c3      	b.n	800b49e <_strtod_l+0x37e>
 800b516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b518:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b51c:	4293      	cmp	r3, r2
 800b51e:	db20      	blt.n	800b562 <_strtod_l+0x442>
 800b520:	4c60      	ldr	r4, [pc, #384]	; (800b6a4 <_strtod_l+0x584>)
 800b522:	f1c6 060f 	rsb	r6, r6, #15
 800b526:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b52a:	4642      	mov	r2, r8
 800b52c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b530:	464b      	mov	r3, r9
 800b532:	f7f5 f88f 	bl	8000654 <__aeabi_dmul>
 800b536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b538:	1b9e      	subs	r6, r3, r6
 800b53a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b53e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b542:	e7e5      	b.n	800b510 <_strtod_l+0x3f0>
 800b544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b546:	3316      	adds	r3, #22
 800b548:	db0b      	blt.n	800b562 <_strtod_l+0x442>
 800b54a:	9b08      	ldr	r3, [sp, #32]
 800b54c:	4640      	mov	r0, r8
 800b54e:	1bdf      	subs	r7, r3, r7
 800b550:	4b54      	ldr	r3, [pc, #336]	; (800b6a4 <_strtod_l+0x584>)
 800b552:	4649      	mov	r1, r9
 800b554:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b55c:	f7f5 f9a4 	bl	80008a8 <__aeabi_ddiv>
 800b560:	e79d      	b.n	800b49e <_strtod_l+0x37e>
 800b562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b564:	1b75      	subs	r5, r6, r5
 800b566:	441d      	add	r5, r3
 800b568:	2d00      	cmp	r5, #0
 800b56a:	dd70      	ble.n	800b64e <_strtod_l+0x52e>
 800b56c:	f015 030f 	ands.w	r3, r5, #15
 800b570:	d00a      	beq.n	800b588 <_strtod_l+0x468>
 800b572:	494c      	ldr	r1, [pc, #304]	; (800b6a4 <_strtod_l+0x584>)
 800b574:	4642      	mov	r2, r8
 800b576:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b57a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b57e:	464b      	mov	r3, r9
 800b580:	f7f5 f868 	bl	8000654 <__aeabi_dmul>
 800b584:	4680      	mov	r8, r0
 800b586:	4689      	mov	r9, r1
 800b588:	f035 050f 	bics.w	r5, r5, #15
 800b58c:	d04d      	beq.n	800b62a <_strtod_l+0x50a>
 800b58e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b592:	dd22      	ble.n	800b5da <_strtod_l+0x4ba>
 800b594:	2600      	movs	r6, #0
 800b596:	46b3      	mov	fp, r6
 800b598:	960b      	str	r6, [sp, #44]	; 0x2c
 800b59a:	9608      	str	r6, [sp, #32]
 800b59c:	2322      	movs	r3, #34	; 0x22
 800b59e:	f04f 0800 	mov.w	r8, #0
 800b5a2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800b69c <_strtod_l+0x57c>
 800b5a6:	6023      	str	r3, [r4, #0]
 800b5a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f43f adf1 	beq.w	800b192 <_strtod_l+0x72>
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b5b4:	f7ff f934 	bl	800a820 <_Bfree>
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	9908      	ldr	r1, [sp, #32]
 800b5bc:	f7ff f930 	bl	800a820 <_Bfree>
 800b5c0:	4659      	mov	r1, fp
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f7ff f92c 	bl	800a820 <_Bfree>
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5cc:	f7ff f928 	bl	800a820 <_Bfree>
 800b5d0:	4631      	mov	r1, r6
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f7ff f924 	bl	800a820 <_Bfree>
 800b5d8:	e5db      	b.n	800b192 <_strtod_l+0x72>
 800b5da:	4b33      	ldr	r3, [pc, #204]	; (800b6a8 <_strtod_l+0x588>)
 800b5dc:	4640      	mov	r0, r8
 800b5de:	9305      	str	r3, [sp, #20]
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	469a      	mov	sl, r3
 800b5e6:	112d      	asrs	r5, r5, #4
 800b5e8:	2d01      	cmp	r5, #1
 800b5ea:	dc21      	bgt.n	800b630 <_strtod_l+0x510>
 800b5ec:	b10b      	cbz	r3, 800b5f2 <_strtod_l+0x4d2>
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	4689      	mov	r9, r1
 800b5f2:	492d      	ldr	r1, [pc, #180]	; (800b6a8 <_strtod_l+0x588>)
 800b5f4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b5f8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b5fc:	4642      	mov	r2, r8
 800b5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b602:	464b      	mov	r3, r9
 800b604:	f7f5 f826 	bl	8000654 <__aeabi_dmul>
 800b608:	4b24      	ldr	r3, [pc, #144]	; (800b69c <_strtod_l+0x57c>)
 800b60a:	460a      	mov	r2, r1
 800b60c:	400b      	ands	r3, r1
 800b60e:	4927      	ldr	r1, [pc, #156]	; (800b6ac <_strtod_l+0x58c>)
 800b610:	4680      	mov	r8, r0
 800b612:	428b      	cmp	r3, r1
 800b614:	d8be      	bhi.n	800b594 <_strtod_l+0x474>
 800b616:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b61a:	428b      	cmp	r3, r1
 800b61c:	bf86      	itte	hi
 800b61e:	f04f 38ff 	movhi.w	r8, #4294967295
 800b622:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b6b0 <_strtod_l+0x590>
 800b626:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b62a:	2300      	movs	r3, #0
 800b62c:	9305      	str	r3, [sp, #20]
 800b62e:	e07b      	b.n	800b728 <_strtod_l+0x608>
 800b630:	07ea      	lsls	r2, r5, #31
 800b632:	d505      	bpl.n	800b640 <_strtod_l+0x520>
 800b634:	9b05      	ldr	r3, [sp, #20]
 800b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63a:	f7f5 f80b 	bl	8000654 <__aeabi_dmul>
 800b63e:	2301      	movs	r3, #1
 800b640:	9a05      	ldr	r2, [sp, #20]
 800b642:	f10a 0a01 	add.w	sl, sl, #1
 800b646:	3208      	adds	r2, #8
 800b648:	106d      	asrs	r5, r5, #1
 800b64a:	9205      	str	r2, [sp, #20]
 800b64c:	e7cc      	b.n	800b5e8 <_strtod_l+0x4c8>
 800b64e:	d0ec      	beq.n	800b62a <_strtod_l+0x50a>
 800b650:	426d      	negs	r5, r5
 800b652:	f015 020f 	ands.w	r2, r5, #15
 800b656:	d00a      	beq.n	800b66e <_strtod_l+0x54e>
 800b658:	4b12      	ldr	r3, [pc, #72]	; (800b6a4 <_strtod_l+0x584>)
 800b65a:	4640      	mov	r0, r8
 800b65c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b660:	4649      	mov	r1, r9
 800b662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b666:	f7f5 f91f 	bl	80008a8 <__aeabi_ddiv>
 800b66a:	4680      	mov	r8, r0
 800b66c:	4689      	mov	r9, r1
 800b66e:	112d      	asrs	r5, r5, #4
 800b670:	d0db      	beq.n	800b62a <_strtod_l+0x50a>
 800b672:	2d1f      	cmp	r5, #31
 800b674:	dd1e      	ble.n	800b6b4 <_strtod_l+0x594>
 800b676:	2600      	movs	r6, #0
 800b678:	46b3      	mov	fp, r6
 800b67a:	960b      	str	r6, [sp, #44]	; 0x2c
 800b67c:	9608      	str	r6, [sp, #32]
 800b67e:	2322      	movs	r3, #34	; 0x22
 800b680:	f04f 0800 	mov.w	r8, #0
 800b684:	f04f 0900 	mov.w	r9, #0
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	e78d      	b.n	800b5a8 <_strtod_l+0x488>
 800b68c:	0800d268 	.word	0x0800d268
 800b690:	0800d524 	.word	0x0800d524
 800b694:	0800d260 	.word	0x0800d260
 800b698:	0800d344 	.word	0x0800d344
 800b69c:	7ff00000 	.word	0x7ff00000
 800b6a0:	0800d340 	.word	0x0800d340
 800b6a4:	0800d438 	.word	0x0800d438
 800b6a8:	0800d410 	.word	0x0800d410
 800b6ac:	7ca00000 	.word	0x7ca00000
 800b6b0:	7fefffff 	.word	0x7fefffff
 800b6b4:	f015 0310 	ands.w	r3, r5, #16
 800b6b8:	bf18      	it	ne
 800b6ba:	236a      	movne	r3, #106	; 0x6a
 800b6bc:	4640      	mov	r0, r8
 800b6be:	9305      	str	r3, [sp, #20]
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800b990 <_strtod_l+0x870>
 800b6c8:	07ea      	lsls	r2, r5, #31
 800b6ca:	d504      	bpl.n	800b6d6 <_strtod_l+0x5b6>
 800b6cc:	e9da 2300 	ldrd	r2, r3, [sl]
 800b6d0:	f7f4 ffc0 	bl	8000654 <__aeabi_dmul>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	106d      	asrs	r5, r5, #1
 800b6d8:	f10a 0a08 	add.w	sl, sl, #8
 800b6dc:	d1f4      	bne.n	800b6c8 <_strtod_l+0x5a8>
 800b6de:	b10b      	cbz	r3, 800b6e4 <_strtod_l+0x5c4>
 800b6e0:	4680      	mov	r8, r0
 800b6e2:	4689      	mov	r9, r1
 800b6e4:	9b05      	ldr	r3, [sp, #20]
 800b6e6:	b1bb      	cbz	r3, 800b718 <_strtod_l+0x5f8>
 800b6e8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b6ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	dd10      	ble.n	800b718 <_strtod_l+0x5f8>
 800b6f6:	2b1f      	cmp	r3, #31
 800b6f8:	f340 8128 	ble.w	800b94c <_strtod_l+0x82c>
 800b6fc:	2b34      	cmp	r3, #52	; 0x34
 800b6fe:	bfd8      	it	le
 800b700:	f04f 33ff 	movle.w	r3, #4294967295
 800b704:	f04f 0800 	mov.w	r8, #0
 800b708:	bfcf      	iteee	gt
 800b70a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b70e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b712:	4093      	lslle	r3, r2
 800b714:	ea03 0901 	andle.w	r9, r3, r1
 800b718:	2200      	movs	r2, #0
 800b71a:	2300      	movs	r3, #0
 800b71c:	4640      	mov	r0, r8
 800b71e:	4649      	mov	r1, r9
 800b720:	f7f5 fa00 	bl	8000b24 <__aeabi_dcmpeq>
 800b724:	2800      	cmp	r0, #0
 800b726:	d1a6      	bne.n	800b676 <_strtod_l+0x556>
 800b728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b72a:	465a      	mov	r2, fp
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	4620      	mov	r0, r4
 800b730:	4633      	mov	r3, r6
 800b732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b734:	f7ff f8dc 	bl	800a8f0 <__s2b>
 800b738:	900b      	str	r0, [sp, #44]	; 0x2c
 800b73a:	2800      	cmp	r0, #0
 800b73c:	f43f af2a 	beq.w	800b594 <_strtod_l+0x474>
 800b740:	2600      	movs	r6, #0
 800b742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b744:	9b08      	ldr	r3, [sp, #32]
 800b746:	2a00      	cmp	r2, #0
 800b748:	eba3 0307 	sub.w	r3, r3, r7
 800b74c:	bfa8      	it	ge
 800b74e:	2300      	movge	r3, #0
 800b750:	46b3      	mov	fp, r6
 800b752:	9312      	str	r3, [sp, #72]	; 0x48
 800b754:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b758:	9316      	str	r3, [sp, #88]	; 0x58
 800b75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b75c:	4620      	mov	r0, r4
 800b75e:	6859      	ldr	r1, [r3, #4]
 800b760:	f7ff f81e 	bl	800a7a0 <_Balloc>
 800b764:	9008      	str	r0, [sp, #32]
 800b766:	2800      	cmp	r0, #0
 800b768:	f43f af18 	beq.w	800b59c <_strtod_l+0x47c>
 800b76c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b76e:	300c      	adds	r0, #12
 800b770:	691a      	ldr	r2, [r3, #16]
 800b772:	f103 010c 	add.w	r1, r3, #12
 800b776:	3202      	adds	r2, #2
 800b778:	0092      	lsls	r2, r2, #2
 800b77a:	f7fe f877 	bl	800986c <memcpy>
 800b77e:	ab1c      	add	r3, sp, #112	; 0x70
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	ab1b      	add	r3, sp, #108	; 0x6c
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	4642      	mov	r2, r8
 800b788:	464b      	mov	r3, r9
 800b78a:	4620      	mov	r0, r4
 800b78c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800b790:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800b794:	f7ff fbd8 	bl	800af48 <__d2b>
 800b798:	901a      	str	r0, [sp, #104]	; 0x68
 800b79a:	2800      	cmp	r0, #0
 800b79c:	f43f aefe 	beq.w	800b59c <_strtod_l+0x47c>
 800b7a0:	2101      	movs	r1, #1
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f7ff f93c 	bl	800aa20 <__i2b>
 800b7a8:	4683      	mov	fp, r0
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	f43f aef6 	beq.w	800b59c <_strtod_l+0x47c>
 800b7b0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b7b2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b7b4:	2f00      	cmp	r7, #0
 800b7b6:	bfab      	itete	ge
 800b7b8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800b7ba:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b7bc:	eb07 0a03 	addge.w	sl, r7, r3
 800b7c0:	1bdd      	sublt	r5, r3, r7
 800b7c2:	9b05      	ldr	r3, [sp, #20]
 800b7c4:	bfa8      	it	ge
 800b7c6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b7c8:	eba7 0703 	sub.w	r7, r7, r3
 800b7cc:	4417      	add	r7, r2
 800b7ce:	4b71      	ldr	r3, [pc, #452]	; (800b994 <_strtod_l+0x874>)
 800b7d0:	f107 37ff 	add.w	r7, r7, #4294967295
 800b7d4:	bfb8      	it	lt
 800b7d6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800b7da:	429f      	cmp	r7, r3
 800b7dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b7e0:	f280 80c7 	bge.w	800b972 <_strtod_l+0x852>
 800b7e4:	1bdb      	subs	r3, r3, r7
 800b7e6:	2b1f      	cmp	r3, #31
 800b7e8:	f04f 0101 	mov.w	r1, #1
 800b7ec:	eba2 0203 	sub.w	r2, r2, r3
 800b7f0:	f300 80b3 	bgt.w	800b95a <_strtod_l+0x83a>
 800b7f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b7f8:	9313      	str	r3, [sp, #76]	; 0x4c
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	9310      	str	r3, [sp, #64]	; 0x40
 800b7fe:	eb0a 0702 	add.w	r7, sl, r2
 800b802:	9b05      	ldr	r3, [sp, #20]
 800b804:	45ba      	cmp	sl, r7
 800b806:	4415      	add	r5, r2
 800b808:	441d      	add	r5, r3
 800b80a:	4653      	mov	r3, sl
 800b80c:	bfa8      	it	ge
 800b80e:	463b      	movge	r3, r7
 800b810:	42ab      	cmp	r3, r5
 800b812:	bfa8      	it	ge
 800b814:	462b      	movge	r3, r5
 800b816:	2b00      	cmp	r3, #0
 800b818:	bfc2      	ittt	gt
 800b81a:	1aff      	subgt	r7, r7, r3
 800b81c:	1aed      	subgt	r5, r5, r3
 800b81e:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b822:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b824:	2b00      	cmp	r3, #0
 800b826:	dd17      	ble.n	800b858 <_strtod_l+0x738>
 800b828:	4659      	mov	r1, fp
 800b82a:	461a      	mov	r2, r3
 800b82c:	4620      	mov	r0, r4
 800b82e:	f7ff f9b5 	bl	800ab9c <__pow5mult>
 800b832:	4683      	mov	fp, r0
 800b834:	2800      	cmp	r0, #0
 800b836:	f43f aeb1 	beq.w	800b59c <_strtod_l+0x47c>
 800b83a:	4601      	mov	r1, r0
 800b83c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b83e:	4620      	mov	r0, r4
 800b840:	f7ff f904 	bl	800aa4c <__multiply>
 800b844:	900a      	str	r0, [sp, #40]	; 0x28
 800b846:	2800      	cmp	r0, #0
 800b848:	f43f aea8 	beq.w	800b59c <_strtod_l+0x47c>
 800b84c:	4620      	mov	r0, r4
 800b84e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b850:	f7fe ffe6 	bl	800a820 <_Bfree>
 800b854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b856:	931a      	str	r3, [sp, #104]	; 0x68
 800b858:	2f00      	cmp	r7, #0
 800b85a:	f300 808f 	bgt.w	800b97c <_strtod_l+0x85c>
 800b85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b860:	2b00      	cmp	r3, #0
 800b862:	dd08      	ble.n	800b876 <_strtod_l+0x756>
 800b864:	4620      	mov	r0, r4
 800b866:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b868:	9908      	ldr	r1, [sp, #32]
 800b86a:	f7ff f997 	bl	800ab9c <__pow5mult>
 800b86e:	9008      	str	r0, [sp, #32]
 800b870:	2800      	cmp	r0, #0
 800b872:	f43f ae93 	beq.w	800b59c <_strtod_l+0x47c>
 800b876:	2d00      	cmp	r5, #0
 800b878:	dd08      	ble.n	800b88c <_strtod_l+0x76c>
 800b87a:	462a      	mov	r2, r5
 800b87c:	4620      	mov	r0, r4
 800b87e:	9908      	ldr	r1, [sp, #32]
 800b880:	f7ff f9e6 	bl	800ac50 <__lshift>
 800b884:	9008      	str	r0, [sp, #32]
 800b886:	2800      	cmp	r0, #0
 800b888:	f43f ae88 	beq.w	800b59c <_strtod_l+0x47c>
 800b88c:	f1ba 0f00 	cmp.w	sl, #0
 800b890:	dd08      	ble.n	800b8a4 <_strtod_l+0x784>
 800b892:	4659      	mov	r1, fp
 800b894:	4652      	mov	r2, sl
 800b896:	4620      	mov	r0, r4
 800b898:	f7ff f9da 	bl	800ac50 <__lshift>
 800b89c:	4683      	mov	fp, r0
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	f43f ae7c 	beq.w	800b59c <_strtod_l+0x47c>
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	9a08      	ldr	r2, [sp, #32]
 800b8a8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b8aa:	f7ff fa59 	bl	800ad60 <__mdiff>
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	f43f ae73 	beq.w	800b59c <_strtod_l+0x47c>
 800b8b6:	2500      	movs	r5, #0
 800b8b8:	68c3      	ldr	r3, [r0, #12]
 800b8ba:	4659      	mov	r1, fp
 800b8bc:	60c5      	str	r5, [r0, #12]
 800b8be:	930a      	str	r3, [sp, #40]	; 0x28
 800b8c0:	f7ff fa32 	bl	800ad28 <__mcmp>
 800b8c4:	42a8      	cmp	r0, r5
 800b8c6:	da6b      	bge.n	800b9a0 <_strtod_l+0x880>
 800b8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ca:	ea53 0308 	orrs.w	r3, r3, r8
 800b8ce:	f040 808f 	bne.w	800b9f0 <_strtod_l+0x8d0>
 800b8d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f040 808a 	bne.w	800b9f0 <_strtod_l+0x8d0>
 800b8dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b8e0:	0d1b      	lsrs	r3, r3, #20
 800b8e2:	051b      	lsls	r3, r3, #20
 800b8e4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b8e8:	f240 8082 	bls.w	800b9f0 <_strtod_l+0x8d0>
 800b8ec:	6973      	ldr	r3, [r6, #20]
 800b8ee:	b913      	cbnz	r3, 800b8f6 <_strtod_l+0x7d6>
 800b8f0:	6933      	ldr	r3, [r6, #16]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	dd7c      	ble.n	800b9f0 <_strtod_l+0x8d0>
 800b8f6:	4631      	mov	r1, r6
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f7ff f9a8 	bl	800ac50 <__lshift>
 800b900:	4659      	mov	r1, fp
 800b902:	4606      	mov	r6, r0
 800b904:	f7ff fa10 	bl	800ad28 <__mcmp>
 800b908:	2800      	cmp	r0, #0
 800b90a:	dd71      	ble.n	800b9f0 <_strtod_l+0x8d0>
 800b90c:	9905      	ldr	r1, [sp, #20]
 800b90e:	464b      	mov	r3, r9
 800b910:	4a21      	ldr	r2, [pc, #132]	; (800b998 <_strtod_l+0x878>)
 800b912:	2900      	cmp	r1, #0
 800b914:	f000 808d 	beq.w	800ba32 <_strtod_l+0x912>
 800b918:	ea02 0109 	and.w	r1, r2, r9
 800b91c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b920:	f300 8087 	bgt.w	800ba32 <_strtod_l+0x912>
 800b924:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b928:	f77f aea9 	ble.w	800b67e <_strtod_l+0x55e>
 800b92c:	4640      	mov	r0, r8
 800b92e:	4649      	mov	r1, r9
 800b930:	4b1a      	ldr	r3, [pc, #104]	; (800b99c <_strtod_l+0x87c>)
 800b932:	2200      	movs	r2, #0
 800b934:	f7f4 fe8e 	bl	8000654 <__aeabi_dmul>
 800b938:	4b17      	ldr	r3, [pc, #92]	; (800b998 <_strtod_l+0x878>)
 800b93a:	4680      	mov	r8, r0
 800b93c:	400b      	ands	r3, r1
 800b93e:	4689      	mov	r9, r1
 800b940:	2b00      	cmp	r3, #0
 800b942:	f47f ae35 	bne.w	800b5b0 <_strtod_l+0x490>
 800b946:	2322      	movs	r3, #34	; 0x22
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	e631      	b.n	800b5b0 <_strtod_l+0x490>
 800b94c:	f04f 32ff 	mov.w	r2, #4294967295
 800b950:	fa02 f303 	lsl.w	r3, r2, r3
 800b954:	ea03 0808 	and.w	r8, r3, r8
 800b958:	e6de      	b.n	800b718 <_strtod_l+0x5f8>
 800b95a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800b95e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800b962:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800b966:	37e2      	adds	r7, #226	; 0xe2
 800b968:	fa01 f307 	lsl.w	r3, r1, r7
 800b96c:	9310      	str	r3, [sp, #64]	; 0x40
 800b96e:	9113      	str	r1, [sp, #76]	; 0x4c
 800b970:	e745      	b.n	800b7fe <_strtod_l+0x6de>
 800b972:	2300      	movs	r3, #0
 800b974:	9310      	str	r3, [sp, #64]	; 0x40
 800b976:	2301      	movs	r3, #1
 800b978:	9313      	str	r3, [sp, #76]	; 0x4c
 800b97a:	e740      	b.n	800b7fe <_strtod_l+0x6de>
 800b97c:	463a      	mov	r2, r7
 800b97e:	4620      	mov	r0, r4
 800b980:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b982:	f7ff f965 	bl	800ac50 <__lshift>
 800b986:	901a      	str	r0, [sp, #104]	; 0x68
 800b988:	2800      	cmp	r0, #0
 800b98a:	f47f af68 	bne.w	800b85e <_strtod_l+0x73e>
 800b98e:	e605      	b.n	800b59c <_strtod_l+0x47c>
 800b990:	0800d538 	.word	0x0800d538
 800b994:	fffffc02 	.word	0xfffffc02
 800b998:	7ff00000 	.word	0x7ff00000
 800b99c:	39500000 	.word	0x39500000
 800b9a0:	46ca      	mov	sl, r9
 800b9a2:	d165      	bne.n	800ba70 <_strtod_l+0x950>
 800b9a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9aa:	b352      	cbz	r2, 800ba02 <_strtod_l+0x8e2>
 800b9ac:	4a9e      	ldr	r2, [pc, #632]	; (800bc28 <_strtod_l+0xb08>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d12a      	bne.n	800ba08 <_strtod_l+0x8e8>
 800b9b2:	9b05      	ldr	r3, [sp, #20]
 800b9b4:	4641      	mov	r1, r8
 800b9b6:	b1fb      	cbz	r3, 800b9f8 <_strtod_l+0x8d8>
 800b9b8:	4b9c      	ldr	r3, [pc, #624]	; (800bc2c <_strtod_l+0xb0c>)
 800b9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b9be:	ea09 0303 	and.w	r3, r9, r3
 800b9c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b9c6:	d81a      	bhi.n	800b9fe <_strtod_l+0x8de>
 800b9c8:	0d1b      	lsrs	r3, r3, #20
 800b9ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b9d2:	4299      	cmp	r1, r3
 800b9d4:	d118      	bne.n	800ba08 <_strtod_l+0x8e8>
 800b9d6:	4b96      	ldr	r3, [pc, #600]	; (800bc30 <_strtod_l+0xb10>)
 800b9d8:	459a      	cmp	sl, r3
 800b9da:	d102      	bne.n	800b9e2 <_strtod_l+0x8c2>
 800b9dc:	3101      	adds	r1, #1
 800b9de:	f43f addd 	beq.w	800b59c <_strtod_l+0x47c>
 800b9e2:	f04f 0800 	mov.w	r8, #0
 800b9e6:	4b91      	ldr	r3, [pc, #580]	; (800bc2c <_strtod_l+0xb0c>)
 800b9e8:	ea0a 0303 	and.w	r3, sl, r3
 800b9ec:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b9f0:	9b05      	ldr	r3, [sp, #20]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d19a      	bne.n	800b92c <_strtod_l+0x80c>
 800b9f6:	e5db      	b.n	800b5b0 <_strtod_l+0x490>
 800b9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fc:	e7e9      	b.n	800b9d2 <_strtod_l+0x8b2>
 800b9fe:	4613      	mov	r3, r2
 800ba00:	e7e7      	b.n	800b9d2 <_strtod_l+0x8b2>
 800ba02:	ea53 0308 	orrs.w	r3, r3, r8
 800ba06:	d081      	beq.n	800b90c <_strtod_l+0x7ec>
 800ba08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba0a:	b1e3      	cbz	r3, 800ba46 <_strtod_l+0x926>
 800ba0c:	ea13 0f0a 	tst.w	r3, sl
 800ba10:	d0ee      	beq.n	800b9f0 <_strtod_l+0x8d0>
 800ba12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba14:	4640      	mov	r0, r8
 800ba16:	4649      	mov	r1, r9
 800ba18:	9a05      	ldr	r2, [sp, #20]
 800ba1a:	b1c3      	cbz	r3, 800ba4e <_strtod_l+0x92e>
 800ba1c:	f7ff fb5c 	bl	800b0d8 <sulp>
 800ba20:	4602      	mov	r2, r0
 800ba22:	460b      	mov	r3, r1
 800ba24:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba26:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ba28:	f7f4 fc5e 	bl	80002e8 <__adddf3>
 800ba2c:	4680      	mov	r8, r0
 800ba2e:	4689      	mov	r9, r1
 800ba30:	e7de      	b.n	800b9f0 <_strtod_l+0x8d0>
 800ba32:	4013      	ands	r3, r2
 800ba34:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ba38:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ba3c:	f04f 38ff 	mov.w	r8, #4294967295
 800ba40:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ba44:	e7d4      	b.n	800b9f0 <_strtod_l+0x8d0>
 800ba46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba48:	ea13 0f08 	tst.w	r3, r8
 800ba4c:	e7e0      	b.n	800ba10 <_strtod_l+0x8f0>
 800ba4e:	f7ff fb43 	bl	800b0d8 <sulp>
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
 800ba56:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ba5a:	f7f4 fc43 	bl	80002e4 <__aeabi_dsub>
 800ba5e:	2200      	movs	r2, #0
 800ba60:	2300      	movs	r3, #0
 800ba62:	4680      	mov	r8, r0
 800ba64:	4689      	mov	r9, r1
 800ba66:	f7f5 f85d 	bl	8000b24 <__aeabi_dcmpeq>
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d0c0      	beq.n	800b9f0 <_strtod_l+0x8d0>
 800ba6e:	e606      	b.n	800b67e <_strtod_l+0x55e>
 800ba70:	4659      	mov	r1, fp
 800ba72:	4630      	mov	r0, r6
 800ba74:	f7ff fabe 	bl	800aff4 <__ratio>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ba80:	2200      	movs	r2, #0
 800ba82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba86:	f7f5 f861 	bl	8000b4c <__aeabi_dcmple>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d06f      	beq.n	800bb6e <_strtod_l+0xa4e>
 800ba8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d17c      	bne.n	800bb8e <_strtod_l+0xa6e>
 800ba94:	f1b8 0f00 	cmp.w	r8, #0
 800ba98:	d159      	bne.n	800bb4e <_strtod_l+0xa2e>
 800ba9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d17b      	bne.n	800bb9a <_strtod_l+0xa7a>
 800baa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800baa6:	2200      	movs	r2, #0
 800baa8:	4b62      	ldr	r3, [pc, #392]	; (800bc34 <_strtod_l+0xb14>)
 800baaa:	f7f5 f845 	bl	8000b38 <__aeabi_dcmplt>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d15a      	bne.n	800bb68 <_strtod_l+0xa48>
 800bab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bab6:	2200      	movs	r2, #0
 800bab8:	4b5f      	ldr	r3, [pc, #380]	; (800bc38 <_strtod_l+0xb18>)
 800baba:	f7f4 fdcb 	bl	8000654 <__aeabi_dmul>
 800babe:	4605      	mov	r5, r0
 800bac0:	460f      	mov	r7, r1
 800bac2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bac6:	9506      	str	r5, [sp, #24]
 800bac8:	9307      	str	r3, [sp, #28]
 800baca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bace:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800bad2:	4b56      	ldr	r3, [pc, #344]	; (800bc2c <_strtod_l+0xb0c>)
 800bad4:	4a55      	ldr	r2, [pc, #340]	; (800bc2c <_strtod_l+0xb0c>)
 800bad6:	ea0a 0303 	and.w	r3, sl, r3
 800bada:	9313      	str	r3, [sp, #76]	; 0x4c
 800badc:	4b57      	ldr	r3, [pc, #348]	; (800bc3c <_strtod_l+0xb1c>)
 800bade:	ea0a 0202 	and.w	r2, sl, r2
 800bae2:	429a      	cmp	r2, r3
 800bae4:	f040 80b0 	bne.w	800bc48 <_strtod_l+0xb28>
 800bae8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800baec:	4640      	mov	r0, r8
 800baee:	4649      	mov	r1, r9
 800baf0:	f7ff f9c2 	bl	800ae78 <__ulp>
 800baf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800baf8:	f7f4 fdac 	bl	8000654 <__aeabi_dmul>
 800bafc:	4642      	mov	r2, r8
 800bafe:	464b      	mov	r3, r9
 800bb00:	f7f4 fbf2 	bl	80002e8 <__adddf3>
 800bb04:	f8df a124 	ldr.w	sl, [pc, #292]	; 800bc2c <_strtod_l+0xb0c>
 800bb08:	4a4d      	ldr	r2, [pc, #308]	; (800bc40 <_strtod_l+0xb20>)
 800bb0a:	ea01 0a0a 	and.w	sl, r1, sl
 800bb0e:	4592      	cmp	sl, r2
 800bb10:	4680      	mov	r8, r0
 800bb12:	d948      	bls.n	800bba6 <_strtod_l+0xa86>
 800bb14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb16:	4b46      	ldr	r3, [pc, #280]	; (800bc30 <_strtod_l+0xb10>)
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d103      	bne.n	800bb24 <_strtod_l+0xa04>
 800bb1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb1e:	3301      	adds	r3, #1
 800bb20:	f43f ad3c 	beq.w	800b59c <_strtod_l+0x47c>
 800bb24:	f04f 38ff 	mov.w	r8, #4294967295
 800bb28:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800bc30 <_strtod_l+0xb10>
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bb30:	f7fe fe76 	bl	800a820 <_Bfree>
 800bb34:	4620      	mov	r0, r4
 800bb36:	9908      	ldr	r1, [sp, #32]
 800bb38:	f7fe fe72 	bl	800a820 <_Bfree>
 800bb3c:	4659      	mov	r1, fp
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f7fe fe6e 	bl	800a820 <_Bfree>
 800bb44:	4631      	mov	r1, r6
 800bb46:	4620      	mov	r0, r4
 800bb48:	f7fe fe6a 	bl	800a820 <_Bfree>
 800bb4c:	e605      	b.n	800b75a <_strtod_l+0x63a>
 800bb4e:	f1b8 0f01 	cmp.w	r8, #1
 800bb52:	d103      	bne.n	800bb5c <_strtod_l+0xa3c>
 800bb54:	f1b9 0f00 	cmp.w	r9, #0
 800bb58:	f43f ad91 	beq.w	800b67e <_strtod_l+0x55e>
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	4b39      	ldr	r3, [pc, #228]	; (800bc44 <_strtod_l+0xb24>)
 800bb60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bb62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb66:	e016      	b.n	800bb96 <_strtod_l+0xa76>
 800bb68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bb6a:	4f33      	ldr	r7, [pc, #204]	; (800bc38 <_strtod_l+0xb18>)
 800bb6c:	e7a9      	b.n	800bac2 <_strtod_l+0x9a2>
 800bb6e:	4b32      	ldr	r3, [pc, #200]	; (800bc38 <_strtod_l+0xb18>)
 800bb70:	2200      	movs	r2, #0
 800bb72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb76:	f7f4 fd6d 	bl	8000654 <__aeabi_dmul>
 800bb7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb7c:	4605      	mov	r5, r0
 800bb7e:	460f      	mov	r7, r1
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d09e      	beq.n	800bac2 <_strtod_l+0x9a2>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb8c:	e79d      	b.n	800baca <_strtod_l+0x9aa>
 800bb8e:	2200      	movs	r2, #0
 800bb90:	4b28      	ldr	r3, [pc, #160]	; (800bc34 <_strtod_l+0xb14>)
 800bb92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb96:	4f27      	ldr	r7, [pc, #156]	; (800bc34 <_strtod_l+0xb14>)
 800bb98:	e797      	b.n	800baca <_strtod_l+0x9aa>
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	4b29      	ldr	r3, [pc, #164]	; (800bc44 <_strtod_l+0xb24>)
 800bb9e:	4645      	mov	r5, r8
 800bba0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bba4:	e7f7      	b.n	800bb96 <_strtod_l+0xa76>
 800bba6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800bbaa:	9b05      	ldr	r3, [sp, #20]
 800bbac:	46ca      	mov	sl, r9
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1bc      	bne.n	800bb2c <_strtod_l+0xa0c>
 800bbb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bbb6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bbb8:	0d1b      	lsrs	r3, r3, #20
 800bbba:	051b      	lsls	r3, r3, #20
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d1b5      	bne.n	800bb2c <_strtod_l+0xa0c>
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	f7f5 fa12 	bl	8000fec <__aeabi_d2lz>
 800bbc8:	f7f4 fd16 	bl	80005f8 <__aeabi_l2d>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	4639      	mov	r1, r7
 800bbd4:	f7f4 fb86 	bl	80002e4 <__aeabi_dsub>
 800bbd8:	460b      	mov	r3, r1
 800bbda:	4602      	mov	r2, r0
 800bbdc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800bbe0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bbe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe6:	ea4a 0a08 	orr.w	sl, sl, r8
 800bbea:	ea5a 0a03 	orrs.w	sl, sl, r3
 800bbee:	d06c      	beq.n	800bcca <_strtod_l+0xbaa>
 800bbf0:	a309      	add	r3, pc, #36	; (adr r3, 800bc18 <_strtod_l+0xaf8>)
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	f7f4 ff9f 	bl	8000b38 <__aeabi_dcmplt>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	f47f acd8 	bne.w	800b5b0 <_strtod_l+0x490>
 800bc00:	a307      	add	r3, pc, #28	; (adr r3, 800bc20 <_strtod_l+0xb00>)
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc0a:	f7f4 ffb3 	bl	8000b74 <__aeabi_dcmpgt>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d08c      	beq.n	800bb2c <_strtod_l+0xa0c>
 800bc12:	e4cd      	b.n	800b5b0 <_strtod_l+0x490>
 800bc14:	f3af 8000 	nop.w
 800bc18:	94a03595 	.word	0x94a03595
 800bc1c:	3fdfffff 	.word	0x3fdfffff
 800bc20:	35afe535 	.word	0x35afe535
 800bc24:	3fe00000 	.word	0x3fe00000
 800bc28:	000fffff 	.word	0x000fffff
 800bc2c:	7ff00000 	.word	0x7ff00000
 800bc30:	7fefffff 	.word	0x7fefffff
 800bc34:	3ff00000 	.word	0x3ff00000
 800bc38:	3fe00000 	.word	0x3fe00000
 800bc3c:	7fe00000 	.word	0x7fe00000
 800bc40:	7c9fffff 	.word	0x7c9fffff
 800bc44:	bff00000 	.word	0xbff00000
 800bc48:	9b05      	ldr	r3, [sp, #20]
 800bc4a:	b333      	cbz	r3, 800bc9a <_strtod_l+0xb7a>
 800bc4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bc52:	d822      	bhi.n	800bc9a <_strtod_l+0xb7a>
 800bc54:	a328      	add	r3, pc, #160	; (adr r3, 800bcf8 <_strtod_l+0xbd8>)
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	4639      	mov	r1, r7
 800bc5e:	f7f4 ff75 	bl	8000b4c <__aeabi_dcmple>
 800bc62:	b1a0      	cbz	r0, 800bc8e <_strtod_l+0xb6e>
 800bc64:	4639      	mov	r1, r7
 800bc66:	4628      	mov	r0, r5
 800bc68:	f7f4 ffcc 	bl	8000c04 <__aeabi_d2uiz>
 800bc6c:	2801      	cmp	r0, #1
 800bc6e:	bf38      	it	cc
 800bc70:	2001      	movcc	r0, #1
 800bc72:	f7f4 fc75 	bl	8000560 <__aeabi_ui2d>
 800bc76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc78:	4605      	mov	r5, r0
 800bc7a:	460f      	mov	r7, r1
 800bc7c:	bb03      	cbnz	r3, 800bcc0 <_strtod_l+0xba0>
 800bc7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc82:	9014      	str	r0, [sp, #80]	; 0x50
 800bc84:	9315      	str	r3, [sp, #84]	; 0x54
 800bc86:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bc8a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800bc8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bc92:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bc96:	1a9b      	subs	r3, r3, r2
 800bc98:	9311      	str	r3, [sp, #68]	; 0x44
 800bc9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bc9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bc9e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800bca2:	f7ff f8e9 	bl	800ae78 <__ulp>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	4640      	mov	r0, r8
 800bcac:	4649      	mov	r1, r9
 800bcae:	f7f4 fcd1 	bl	8000654 <__aeabi_dmul>
 800bcb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcb6:	f7f4 fb17 	bl	80002e8 <__adddf3>
 800bcba:	4680      	mov	r8, r0
 800bcbc:	4689      	mov	r9, r1
 800bcbe:	e774      	b.n	800bbaa <_strtod_l+0xa8a>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800bcc8:	e7dd      	b.n	800bc86 <_strtod_l+0xb66>
 800bcca:	a30d      	add	r3, pc, #52	; (adr r3, 800bd00 <_strtod_l+0xbe0>)
 800bccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd0:	f7f4 ff32 	bl	8000b38 <__aeabi_dcmplt>
 800bcd4:	e79b      	b.n	800bc0e <_strtod_l+0xaee>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	930e      	str	r3, [sp, #56]	; 0x38
 800bcda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bcdc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bcde:	6013      	str	r3, [r2, #0]
 800bce0:	f7ff ba5b 	b.w	800b19a <_strtod_l+0x7a>
 800bce4:	2a65      	cmp	r2, #101	; 0x65
 800bce6:	f43f ab52 	beq.w	800b38e <_strtod_l+0x26e>
 800bcea:	2a45      	cmp	r2, #69	; 0x45
 800bcec:	f43f ab4f 	beq.w	800b38e <_strtod_l+0x26e>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	f7ff bb87 	b.w	800b404 <_strtod_l+0x2e4>
 800bcf6:	bf00      	nop
 800bcf8:	ffc00000 	.word	0xffc00000
 800bcfc:	41dfffff 	.word	0x41dfffff
 800bd00:	94a03595 	.word	0x94a03595
 800bd04:	3fcfffff 	.word	0x3fcfffff

0800bd08 <_strtod_r>:
 800bd08:	4b01      	ldr	r3, [pc, #4]	; (800bd10 <_strtod_r+0x8>)
 800bd0a:	f7ff ba09 	b.w	800b120 <_strtod_l>
 800bd0e:	bf00      	nop
 800bd10:	20000078 	.word	0x20000078

0800bd14 <__ssputs_r>:
 800bd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd18:	461f      	mov	r7, r3
 800bd1a:	688e      	ldr	r6, [r1, #8]
 800bd1c:	4682      	mov	sl, r0
 800bd1e:	42be      	cmp	r6, r7
 800bd20:	460c      	mov	r4, r1
 800bd22:	4690      	mov	r8, r2
 800bd24:	680b      	ldr	r3, [r1, #0]
 800bd26:	d82c      	bhi.n	800bd82 <__ssputs_r+0x6e>
 800bd28:	898a      	ldrh	r2, [r1, #12]
 800bd2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd2e:	d026      	beq.n	800bd7e <__ssputs_r+0x6a>
 800bd30:	6965      	ldr	r5, [r4, #20]
 800bd32:	6909      	ldr	r1, [r1, #16]
 800bd34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd38:	eba3 0901 	sub.w	r9, r3, r1
 800bd3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd40:	1c7b      	adds	r3, r7, #1
 800bd42:	444b      	add	r3, r9
 800bd44:	106d      	asrs	r5, r5, #1
 800bd46:	429d      	cmp	r5, r3
 800bd48:	bf38      	it	cc
 800bd4a:	461d      	movcc	r5, r3
 800bd4c:	0553      	lsls	r3, r2, #21
 800bd4e:	d527      	bpl.n	800bda0 <__ssputs_r+0x8c>
 800bd50:	4629      	mov	r1, r5
 800bd52:	f7fe fc99 	bl	800a688 <_malloc_r>
 800bd56:	4606      	mov	r6, r0
 800bd58:	b360      	cbz	r0, 800bdb4 <__ssputs_r+0xa0>
 800bd5a:	464a      	mov	r2, r9
 800bd5c:	6921      	ldr	r1, [r4, #16]
 800bd5e:	f7fd fd85 	bl	800986c <memcpy>
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd6c:	81a3      	strh	r3, [r4, #12]
 800bd6e:	6126      	str	r6, [r4, #16]
 800bd70:	444e      	add	r6, r9
 800bd72:	6026      	str	r6, [r4, #0]
 800bd74:	463e      	mov	r6, r7
 800bd76:	6165      	str	r5, [r4, #20]
 800bd78:	eba5 0509 	sub.w	r5, r5, r9
 800bd7c:	60a5      	str	r5, [r4, #8]
 800bd7e:	42be      	cmp	r6, r7
 800bd80:	d900      	bls.n	800bd84 <__ssputs_r+0x70>
 800bd82:	463e      	mov	r6, r7
 800bd84:	4632      	mov	r2, r6
 800bd86:	4641      	mov	r1, r8
 800bd88:	6820      	ldr	r0, [r4, #0]
 800bd8a:	f000 fb7a 	bl	800c482 <memmove>
 800bd8e:	2000      	movs	r0, #0
 800bd90:	68a3      	ldr	r3, [r4, #8]
 800bd92:	1b9b      	subs	r3, r3, r6
 800bd94:	60a3      	str	r3, [r4, #8]
 800bd96:	6823      	ldr	r3, [r4, #0]
 800bd98:	4433      	add	r3, r6
 800bd9a:	6023      	str	r3, [r4, #0]
 800bd9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda0:	462a      	mov	r2, r5
 800bda2:	f000 ff5a 	bl	800cc5a <_realloc_r>
 800bda6:	4606      	mov	r6, r0
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d1e0      	bne.n	800bd6e <__ssputs_r+0x5a>
 800bdac:	4650      	mov	r0, sl
 800bdae:	6921      	ldr	r1, [r4, #16]
 800bdb0:	f7fe fbfa 	bl	800a5a8 <_free_r>
 800bdb4:	230c      	movs	r3, #12
 800bdb6:	f8ca 3000 	str.w	r3, [sl]
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdc4:	81a3      	strh	r3, [r4, #12]
 800bdc6:	e7e9      	b.n	800bd9c <__ssputs_r+0x88>

0800bdc8 <_svfiprintf_r>:
 800bdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	4698      	mov	r8, r3
 800bdce:	898b      	ldrh	r3, [r1, #12]
 800bdd0:	4607      	mov	r7, r0
 800bdd2:	061b      	lsls	r3, r3, #24
 800bdd4:	460d      	mov	r5, r1
 800bdd6:	4614      	mov	r4, r2
 800bdd8:	b09d      	sub	sp, #116	; 0x74
 800bdda:	d50e      	bpl.n	800bdfa <_svfiprintf_r+0x32>
 800bddc:	690b      	ldr	r3, [r1, #16]
 800bdde:	b963      	cbnz	r3, 800bdfa <_svfiprintf_r+0x32>
 800bde0:	2140      	movs	r1, #64	; 0x40
 800bde2:	f7fe fc51 	bl	800a688 <_malloc_r>
 800bde6:	6028      	str	r0, [r5, #0]
 800bde8:	6128      	str	r0, [r5, #16]
 800bdea:	b920      	cbnz	r0, 800bdf6 <_svfiprintf_r+0x2e>
 800bdec:	230c      	movs	r3, #12
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf4:	e0d0      	b.n	800bf98 <_svfiprintf_r+0x1d0>
 800bdf6:	2340      	movs	r3, #64	; 0x40
 800bdf8:	616b      	str	r3, [r5, #20]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	9309      	str	r3, [sp, #36]	; 0x24
 800bdfe:	2320      	movs	r3, #32
 800be00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be04:	2330      	movs	r3, #48	; 0x30
 800be06:	f04f 0901 	mov.w	r9, #1
 800be0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800be0e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800bfb0 <_svfiprintf_r+0x1e8>
 800be12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be16:	4623      	mov	r3, r4
 800be18:	469a      	mov	sl, r3
 800be1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be1e:	b10a      	cbz	r2, 800be24 <_svfiprintf_r+0x5c>
 800be20:	2a25      	cmp	r2, #37	; 0x25
 800be22:	d1f9      	bne.n	800be18 <_svfiprintf_r+0x50>
 800be24:	ebba 0b04 	subs.w	fp, sl, r4
 800be28:	d00b      	beq.n	800be42 <_svfiprintf_r+0x7a>
 800be2a:	465b      	mov	r3, fp
 800be2c:	4622      	mov	r2, r4
 800be2e:	4629      	mov	r1, r5
 800be30:	4638      	mov	r0, r7
 800be32:	f7ff ff6f 	bl	800bd14 <__ssputs_r>
 800be36:	3001      	adds	r0, #1
 800be38:	f000 80a9 	beq.w	800bf8e <_svfiprintf_r+0x1c6>
 800be3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be3e:	445a      	add	r2, fp
 800be40:	9209      	str	r2, [sp, #36]	; 0x24
 800be42:	f89a 3000 	ldrb.w	r3, [sl]
 800be46:	2b00      	cmp	r3, #0
 800be48:	f000 80a1 	beq.w	800bf8e <_svfiprintf_r+0x1c6>
 800be4c:	2300      	movs	r3, #0
 800be4e:	f04f 32ff 	mov.w	r2, #4294967295
 800be52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be56:	f10a 0a01 	add.w	sl, sl, #1
 800be5a:	9304      	str	r3, [sp, #16]
 800be5c:	9307      	str	r3, [sp, #28]
 800be5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be62:	931a      	str	r3, [sp, #104]	; 0x68
 800be64:	4654      	mov	r4, sl
 800be66:	2205      	movs	r2, #5
 800be68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be6c:	4850      	ldr	r0, [pc, #320]	; (800bfb0 <_svfiprintf_r+0x1e8>)
 800be6e:	f7fd fcef 	bl	8009850 <memchr>
 800be72:	9a04      	ldr	r2, [sp, #16]
 800be74:	b9d8      	cbnz	r0, 800beae <_svfiprintf_r+0xe6>
 800be76:	06d0      	lsls	r0, r2, #27
 800be78:	bf44      	itt	mi
 800be7a:	2320      	movmi	r3, #32
 800be7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be80:	0711      	lsls	r1, r2, #28
 800be82:	bf44      	itt	mi
 800be84:	232b      	movmi	r3, #43	; 0x2b
 800be86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be8a:	f89a 3000 	ldrb.w	r3, [sl]
 800be8e:	2b2a      	cmp	r3, #42	; 0x2a
 800be90:	d015      	beq.n	800bebe <_svfiprintf_r+0xf6>
 800be92:	4654      	mov	r4, sl
 800be94:	2000      	movs	r0, #0
 800be96:	f04f 0c0a 	mov.w	ip, #10
 800be9a:	9a07      	ldr	r2, [sp, #28]
 800be9c:	4621      	mov	r1, r4
 800be9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bea2:	3b30      	subs	r3, #48	; 0x30
 800bea4:	2b09      	cmp	r3, #9
 800bea6:	d94d      	bls.n	800bf44 <_svfiprintf_r+0x17c>
 800bea8:	b1b0      	cbz	r0, 800bed8 <_svfiprintf_r+0x110>
 800beaa:	9207      	str	r2, [sp, #28]
 800beac:	e014      	b.n	800bed8 <_svfiprintf_r+0x110>
 800beae:	eba0 0308 	sub.w	r3, r0, r8
 800beb2:	fa09 f303 	lsl.w	r3, r9, r3
 800beb6:	4313      	orrs	r3, r2
 800beb8:	46a2      	mov	sl, r4
 800beba:	9304      	str	r3, [sp, #16]
 800bebc:	e7d2      	b.n	800be64 <_svfiprintf_r+0x9c>
 800bebe:	9b03      	ldr	r3, [sp, #12]
 800bec0:	1d19      	adds	r1, r3, #4
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	9103      	str	r1, [sp, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	bfbb      	ittet	lt
 800beca:	425b      	neglt	r3, r3
 800becc:	f042 0202 	orrlt.w	r2, r2, #2
 800bed0:	9307      	strge	r3, [sp, #28]
 800bed2:	9307      	strlt	r3, [sp, #28]
 800bed4:	bfb8      	it	lt
 800bed6:	9204      	strlt	r2, [sp, #16]
 800bed8:	7823      	ldrb	r3, [r4, #0]
 800beda:	2b2e      	cmp	r3, #46	; 0x2e
 800bedc:	d10c      	bne.n	800bef8 <_svfiprintf_r+0x130>
 800bede:	7863      	ldrb	r3, [r4, #1]
 800bee0:	2b2a      	cmp	r3, #42	; 0x2a
 800bee2:	d134      	bne.n	800bf4e <_svfiprintf_r+0x186>
 800bee4:	9b03      	ldr	r3, [sp, #12]
 800bee6:	3402      	adds	r4, #2
 800bee8:	1d1a      	adds	r2, r3, #4
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	9203      	str	r2, [sp, #12]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	bfb8      	it	lt
 800bef2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bef6:	9305      	str	r3, [sp, #20]
 800bef8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bfb4 <_svfiprintf_r+0x1ec>
 800befc:	2203      	movs	r2, #3
 800befe:	4650      	mov	r0, sl
 800bf00:	7821      	ldrb	r1, [r4, #0]
 800bf02:	f7fd fca5 	bl	8009850 <memchr>
 800bf06:	b138      	cbz	r0, 800bf18 <_svfiprintf_r+0x150>
 800bf08:	2240      	movs	r2, #64	; 0x40
 800bf0a:	9b04      	ldr	r3, [sp, #16]
 800bf0c:	eba0 000a 	sub.w	r0, r0, sl
 800bf10:	4082      	lsls	r2, r0
 800bf12:	4313      	orrs	r3, r2
 800bf14:	3401      	adds	r4, #1
 800bf16:	9304      	str	r3, [sp, #16]
 800bf18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf1c:	2206      	movs	r2, #6
 800bf1e:	4826      	ldr	r0, [pc, #152]	; (800bfb8 <_svfiprintf_r+0x1f0>)
 800bf20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf24:	f7fd fc94 	bl	8009850 <memchr>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d038      	beq.n	800bf9e <_svfiprintf_r+0x1d6>
 800bf2c:	4b23      	ldr	r3, [pc, #140]	; (800bfbc <_svfiprintf_r+0x1f4>)
 800bf2e:	bb1b      	cbnz	r3, 800bf78 <_svfiprintf_r+0x1b0>
 800bf30:	9b03      	ldr	r3, [sp, #12]
 800bf32:	3307      	adds	r3, #7
 800bf34:	f023 0307 	bic.w	r3, r3, #7
 800bf38:	3308      	adds	r3, #8
 800bf3a:	9303      	str	r3, [sp, #12]
 800bf3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf3e:	4433      	add	r3, r6
 800bf40:	9309      	str	r3, [sp, #36]	; 0x24
 800bf42:	e768      	b.n	800be16 <_svfiprintf_r+0x4e>
 800bf44:	460c      	mov	r4, r1
 800bf46:	2001      	movs	r0, #1
 800bf48:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf4c:	e7a6      	b.n	800be9c <_svfiprintf_r+0xd4>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f04f 0c0a 	mov.w	ip, #10
 800bf54:	4619      	mov	r1, r3
 800bf56:	3401      	adds	r4, #1
 800bf58:	9305      	str	r3, [sp, #20]
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf60:	3a30      	subs	r2, #48	; 0x30
 800bf62:	2a09      	cmp	r2, #9
 800bf64:	d903      	bls.n	800bf6e <_svfiprintf_r+0x1a6>
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d0c6      	beq.n	800bef8 <_svfiprintf_r+0x130>
 800bf6a:	9105      	str	r1, [sp, #20]
 800bf6c:	e7c4      	b.n	800bef8 <_svfiprintf_r+0x130>
 800bf6e:	4604      	mov	r4, r0
 800bf70:	2301      	movs	r3, #1
 800bf72:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf76:	e7f0      	b.n	800bf5a <_svfiprintf_r+0x192>
 800bf78:	ab03      	add	r3, sp, #12
 800bf7a:	9300      	str	r3, [sp, #0]
 800bf7c:	462a      	mov	r2, r5
 800bf7e:	4638      	mov	r0, r7
 800bf80:	4b0f      	ldr	r3, [pc, #60]	; (800bfc0 <_svfiprintf_r+0x1f8>)
 800bf82:	a904      	add	r1, sp, #16
 800bf84:	f7fc fba4 	bl	80086d0 <_printf_float>
 800bf88:	1c42      	adds	r2, r0, #1
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	d1d6      	bne.n	800bf3c <_svfiprintf_r+0x174>
 800bf8e:	89ab      	ldrh	r3, [r5, #12]
 800bf90:	065b      	lsls	r3, r3, #25
 800bf92:	f53f af2d 	bmi.w	800bdf0 <_svfiprintf_r+0x28>
 800bf96:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf98:	b01d      	add	sp, #116	; 0x74
 800bf9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9e:	ab03      	add	r3, sp, #12
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	462a      	mov	r2, r5
 800bfa4:	4638      	mov	r0, r7
 800bfa6:	4b06      	ldr	r3, [pc, #24]	; (800bfc0 <_svfiprintf_r+0x1f8>)
 800bfa8:	a904      	add	r1, sp, #16
 800bfaa:	f7fc fe31 	bl	8008c10 <_printf_i>
 800bfae:	e7eb      	b.n	800bf88 <_svfiprintf_r+0x1c0>
 800bfb0:	0800d560 	.word	0x0800d560
 800bfb4:	0800d566 	.word	0x0800d566
 800bfb8:	0800d56a 	.word	0x0800d56a
 800bfbc:	080086d1 	.word	0x080086d1
 800bfc0:	0800bd15 	.word	0x0800bd15

0800bfc4 <__sfputc_r>:
 800bfc4:	6893      	ldr	r3, [r2, #8]
 800bfc6:	b410      	push	{r4}
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	6093      	str	r3, [r2, #8]
 800bfce:	da07      	bge.n	800bfe0 <__sfputc_r+0x1c>
 800bfd0:	6994      	ldr	r4, [r2, #24]
 800bfd2:	42a3      	cmp	r3, r4
 800bfd4:	db01      	blt.n	800bfda <__sfputc_r+0x16>
 800bfd6:	290a      	cmp	r1, #10
 800bfd8:	d102      	bne.n	800bfe0 <__sfputc_r+0x1c>
 800bfda:	bc10      	pop	{r4}
 800bfdc:	f7fd bac9 	b.w	8009572 <__swbuf_r>
 800bfe0:	6813      	ldr	r3, [r2, #0]
 800bfe2:	1c58      	adds	r0, r3, #1
 800bfe4:	6010      	str	r0, [r2, #0]
 800bfe6:	7019      	strb	r1, [r3, #0]
 800bfe8:	4608      	mov	r0, r1
 800bfea:	bc10      	pop	{r4}
 800bfec:	4770      	bx	lr

0800bfee <__sfputs_r>:
 800bfee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff0:	4606      	mov	r6, r0
 800bff2:	460f      	mov	r7, r1
 800bff4:	4614      	mov	r4, r2
 800bff6:	18d5      	adds	r5, r2, r3
 800bff8:	42ac      	cmp	r4, r5
 800bffa:	d101      	bne.n	800c000 <__sfputs_r+0x12>
 800bffc:	2000      	movs	r0, #0
 800bffe:	e007      	b.n	800c010 <__sfputs_r+0x22>
 800c000:	463a      	mov	r2, r7
 800c002:	4630      	mov	r0, r6
 800c004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c008:	f7ff ffdc 	bl	800bfc4 <__sfputc_r>
 800c00c:	1c43      	adds	r3, r0, #1
 800c00e:	d1f3      	bne.n	800bff8 <__sfputs_r+0xa>
 800c010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c014 <_vfiprintf_r>:
 800c014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c018:	460d      	mov	r5, r1
 800c01a:	4614      	mov	r4, r2
 800c01c:	4698      	mov	r8, r3
 800c01e:	4606      	mov	r6, r0
 800c020:	b09d      	sub	sp, #116	; 0x74
 800c022:	b118      	cbz	r0, 800c02c <_vfiprintf_r+0x18>
 800c024:	6a03      	ldr	r3, [r0, #32]
 800c026:	b90b      	cbnz	r3, 800c02c <_vfiprintf_r+0x18>
 800c028:	f7fd f99c 	bl	8009364 <__sinit>
 800c02c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c02e:	07d9      	lsls	r1, r3, #31
 800c030:	d405      	bmi.n	800c03e <_vfiprintf_r+0x2a>
 800c032:	89ab      	ldrh	r3, [r5, #12]
 800c034:	059a      	lsls	r2, r3, #22
 800c036:	d402      	bmi.n	800c03e <_vfiprintf_r+0x2a>
 800c038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c03a:	f7fd fc07 	bl	800984c <__retarget_lock_acquire_recursive>
 800c03e:	89ab      	ldrh	r3, [r5, #12]
 800c040:	071b      	lsls	r3, r3, #28
 800c042:	d501      	bpl.n	800c048 <_vfiprintf_r+0x34>
 800c044:	692b      	ldr	r3, [r5, #16]
 800c046:	b99b      	cbnz	r3, 800c070 <_vfiprintf_r+0x5c>
 800c048:	4629      	mov	r1, r5
 800c04a:	4630      	mov	r0, r6
 800c04c:	f7fd face 	bl	80095ec <__swsetup_r>
 800c050:	b170      	cbz	r0, 800c070 <_vfiprintf_r+0x5c>
 800c052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c054:	07dc      	lsls	r4, r3, #31
 800c056:	d504      	bpl.n	800c062 <_vfiprintf_r+0x4e>
 800c058:	f04f 30ff 	mov.w	r0, #4294967295
 800c05c:	b01d      	add	sp, #116	; 0x74
 800c05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c062:	89ab      	ldrh	r3, [r5, #12]
 800c064:	0598      	lsls	r0, r3, #22
 800c066:	d4f7      	bmi.n	800c058 <_vfiprintf_r+0x44>
 800c068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c06a:	f7fd fbf0 	bl	800984e <__retarget_lock_release_recursive>
 800c06e:	e7f3      	b.n	800c058 <_vfiprintf_r+0x44>
 800c070:	2300      	movs	r3, #0
 800c072:	9309      	str	r3, [sp, #36]	; 0x24
 800c074:	2320      	movs	r3, #32
 800c076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c07a:	2330      	movs	r3, #48	; 0x30
 800c07c:	f04f 0901 	mov.w	r9, #1
 800c080:	f8cd 800c 	str.w	r8, [sp, #12]
 800c084:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c234 <_vfiprintf_r+0x220>
 800c088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c08c:	4623      	mov	r3, r4
 800c08e:	469a      	mov	sl, r3
 800c090:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c094:	b10a      	cbz	r2, 800c09a <_vfiprintf_r+0x86>
 800c096:	2a25      	cmp	r2, #37	; 0x25
 800c098:	d1f9      	bne.n	800c08e <_vfiprintf_r+0x7a>
 800c09a:	ebba 0b04 	subs.w	fp, sl, r4
 800c09e:	d00b      	beq.n	800c0b8 <_vfiprintf_r+0xa4>
 800c0a0:	465b      	mov	r3, fp
 800c0a2:	4622      	mov	r2, r4
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f7ff ffa1 	bl	800bfee <__sfputs_r>
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	f000 80a9 	beq.w	800c204 <_vfiprintf_r+0x1f0>
 800c0b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0b4:	445a      	add	r2, fp
 800c0b6:	9209      	str	r2, [sp, #36]	; 0x24
 800c0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 80a1 	beq.w	800c204 <_vfiprintf_r+0x1f0>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0cc:	f10a 0a01 	add.w	sl, sl, #1
 800c0d0:	9304      	str	r3, [sp, #16]
 800c0d2:	9307      	str	r3, [sp, #28]
 800c0d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0d8:	931a      	str	r3, [sp, #104]	; 0x68
 800c0da:	4654      	mov	r4, sl
 800c0dc:	2205      	movs	r2, #5
 800c0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0e2:	4854      	ldr	r0, [pc, #336]	; (800c234 <_vfiprintf_r+0x220>)
 800c0e4:	f7fd fbb4 	bl	8009850 <memchr>
 800c0e8:	9a04      	ldr	r2, [sp, #16]
 800c0ea:	b9d8      	cbnz	r0, 800c124 <_vfiprintf_r+0x110>
 800c0ec:	06d1      	lsls	r1, r2, #27
 800c0ee:	bf44      	itt	mi
 800c0f0:	2320      	movmi	r3, #32
 800c0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0f6:	0713      	lsls	r3, r2, #28
 800c0f8:	bf44      	itt	mi
 800c0fa:	232b      	movmi	r3, #43	; 0x2b
 800c0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c100:	f89a 3000 	ldrb.w	r3, [sl]
 800c104:	2b2a      	cmp	r3, #42	; 0x2a
 800c106:	d015      	beq.n	800c134 <_vfiprintf_r+0x120>
 800c108:	4654      	mov	r4, sl
 800c10a:	2000      	movs	r0, #0
 800c10c:	f04f 0c0a 	mov.w	ip, #10
 800c110:	9a07      	ldr	r2, [sp, #28]
 800c112:	4621      	mov	r1, r4
 800c114:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c118:	3b30      	subs	r3, #48	; 0x30
 800c11a:	2b09      	cmp	r3, #9
 800c11c:	d94d      	bls.n	800c1ba <_vfiprintf_r+0x1a6>
 800c11e:	b1b0      	cbz	r0, 800c14e <_vfiprintf_r+0x13a>
 800c120:	9207      	str	r2, [sp, #28]
 800c122:	e014      	b.n	800c14e <_vfiprintf_r+0x13a>
 800c124:	eba0 0308 	sub.w	r3, r0, r8
 800c128:	fa09 f303 	lsl.w	r3, r9, r3
 800c12c:	4313      	orrs	r3, r2
 800c12e:	46a2      	mov	sl, r4
 800c130:	9304      	str	r3, [sp, #16]
 800c132:	e7d2      	b.n	800c0da <_vfiprintf_r+0xc6>
 800c134:	9b03      	ldr	r3, [sp, #12]
 800c136:	1d19      	adds	r1, r3, #4
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	9103      	str	r1, [sp, #12]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	bfbb      	ittet	lt
 800c140:	425b      	neglt	r3, r3
 800c142:	f042 0202 	orrlt.w	r2, r2, #2
 800c146:	9307      	strge	r3, [sp, #28]
 800c148:	9307      	strlt	r3, [sp, #28]
 800c14a:	bfb8      	it	lt
 800c14c:	9204      	strlt	r2, [sp, #16]
 800c14e:	7823      	ldrb	r3, [r4, #0]
 800c150:	2b2e      	cmp	r3, #46	; 0x2e
 800c152:	d10c      	bne.n	800c16e <_vfiprintf_r+0x15a>
 800c154:	7863      	ldrb	r3, [r4, #1]
 800c156:	2b2a      	cmp	r3, #42	; 0x2a
 800c158:	d134      	bne.n	800c1c4 <_vfiprintf_r+0x1b0>
 800c15a:	9b03      	ldr	r3, [sp, #12]
 800c15c:	3402      	adds	r4, #2
 800c15e:	1d1a      	adds	r2, r3, #4
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	9203      	str	r2, [sp, #12]
 800c164:	2b00      	cmp	r3, #0
 800c166:	bfb8      	it	lt
 800c168:	f04f 33ff 	movlt.w	r3, #4294967295
 800c16c:	9305      	str	r3, [sp, #20]
 800c16e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c238 <_vfiprintf_r+0x224>
 800c172:	2203      	movs	r2, #3
 800c174:	4650      	mov	r0, sl
 800c176:	7821      	ldrb	r1, [r4, #0]
 800c178:	f7fd fb6a 	bl	8009850 <memchr>
 800c17c:	b138      	cbz	r0, 800c18e <_vfiprintf_r+0x17a>
 800c17e:	2240      	movs	r2, #64	; 0x40
 800c180:	9b04      	ldr	r3, [sp, #16]
 800c182:	eba0 000a 	sub.w	r0, r0, sl
 800c186:	4082      	lsls	r2, r0
 800c188:	4313      	orrs	r3, r2
 800c18a:	3401      	adds	r4, #1
 800c18c:	9304      	str	r3, [sp, #16]
 800c18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c192:	2206      	movs	r2, #6
 800c194:	4829      	ldr	r0, [pc, #164]	; (800c23c <_vfiprintf_r+0x228>)
 800c196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c19a:	f7fd fb59 	bl	8009850 <memchr>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d03f      	beq.n	800c222 <_vfiprintf_r+0x20e>
 800c1a2:	4b27      	ldr	r3, [pc, #156]	; (800c240 <_vfiprintf_r+0x22c>)
 800c1a4:	bb1b      	cbnz	r3, 800c1ee <_vfiprintf_r+0x1da>
 800c1a6:	9b03      	ldr	r3, [sp, #12]
 800c1a8:	3307      	adds	r3, #7
 800c1aa:	f023 0307 	bic.w	r3, r3, #7
 800c1ae:	3308      	adds	r3, #8
 800c1b0:	9303      	str	r3, [sp, #12]
 800c1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b4:	443b      	add	r3, r7
 800c1b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b8:	e768      	b.n	800c08c <_vfiprintf_r+0x78>
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	2001      	movs	r0, #1
 800c1be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1c2:	e7a6      	b.n	800c112 <_vfiprintf_r+0xfe>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	f04f 0c0a 	mov.w	ip, #10
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	3401      	adds	r4, #1
 800c1ce:	9305      	str	r3, [sp, #20]
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1d6:	3a30      	subs	r2, #48	; 0x30
 800c1d8:	2a09      	cmp	r2, #9
 800c1da:	d903      	bls.n	800c1e4 <_vfiprintf_r+0x1d0>
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d0c6      	beq.n	800c16e <_vfiprintf_r+0x15a>
 800c1e0:	9105      	str	r1, [sp, #20]
 800c1e2:	e7c4      	b.n	800c16e <_vfiprintf_r+0x15a>
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1ec:	e7f0      	b.n	800c1d0 <_vfiprintf_r+0x1bc>
 800c1ee:	ab03      	add	r3, sp, #12
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	462a      	mov	r2, r5
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	4b13      	ldr	r3, [pc, #76]	; (800c244 <_vfiprintf_r+0x230>)
 800c1f8:	a904      	add	r1, sp, #16
 800c1fa:	f7fc fa69 	bl	80086d0 <_printf_float>
 800c1fe:	4607      	mov	r7, r0
 800c200:	1c78      	adds	r0, r7, #1
 800c202:	d1d6      	bne.n	800c1b2 <_vfiprintf_r+0x19e>
 800c204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c206:	07d9      	lsls	r1, r3, #31
 800c208:	d405      	bmi.n	800c216 <_vfiprintf_r+0x202>
 800c20a:	89ab      	ldrh	r3, [r5, #12]
 800c20c:	059a      	lsls	r2, r3, #22
 800c20e:	d402      	bmi.n	800c216 <_vfiprintf_r+0x202>
 800c210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c212:	f7fd fb1c 	bl	800984e <__retarget_lock_release_recursive>
 800c216:	89ab      	ldrh	r3, [r5, #12]
 800c218:	065b      	lsls	r3, r3, #25
 800c21a:	f53f af1d 	bmi.w	800c058 <_vfiprintf_r+0x44>
 800c21e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c220:	e71c      	b.n	800c05c <_vfiprintf_r+0x48>
 800c222:	ab03      	add	r3, sp, #12
 800c224:	9300      	str	r3, [sp, #0]
 800c226:	462a      	mov	r2, r5
 800c228:	4630      	mov	r0, r6
 800c22a:	4b06      	ldr	r3, [pc, #24]	; (800c244 <_vfiprintf_r+0x230>)
 800c22c:	a904      	add	r1, sp, #16
 800c22e:	f7fc fcef 	bl	8008c10 <_printf_i>
 800c232:	e7e4      	b.n	800c1fe <_vfiprintf_r+0x1ea>
 800c234:	0800d560 	.word	0x0800d560
 800c238:	0800d566 	.word	0x0800d566
 800c23c:	0800d56a 	.word	0x0800d56a
 800c240:	080086d1 	.word	0x080086d1
 800c244:	0800bfef 	.word	0x0800bfef

0800c248 <__sflush_r>:
 800c248:	898a      	ldrh	r2, [r1, #12]
 800c24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24c:	4605      	mov	r5, r0
 800c24e:	0710      	lsls	r0, r2, #28
 800c250:	460c      	mov	r4, r1
 800c252:	d457      	bmi.n	800c304 <__sflush_r+0xbc>
 800c254:	684b      	ldr	r3, [r1, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	dc04      	bgt.n	800c264 <__sflush_r+0x1c>
 800c25a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	dc01      	bgt.n	800c264 <__sflush_r+0x1c>
 800c260:	2000      	movs	r0, #0
 800c262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c266:	2e00      	cmp	r6, #0
 800c268:	d0fa      	beq.n	800c260 <__sflush_r+0x18>
 800c26a:	2300      	movs	r3, #0
 800c26c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c270:	682f      	ldr	r7, [r5, #0]
 800c272:	6a21      	ldr	r1, [r4, #32]
 800c274:	602b      	str	r3, [r5, #0]
 800c276:	d032      	beq.n	800c2de <__sflush_r+0x96>
 800c278:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	075a      	lsls	r2, r3, #29
 800c27e:	d505      	bpl.n	800c28c <__sflush_r+0x44>
 800c280:	6863      	ldr	r3, [r4, #4]
 800c282:	1ac0      	subs	r0, r0, r3
 800c284:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c286:	b10b      	cbz	r3, 800c28c <__sflush_r+0x44>
 800c288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c28a:	1ac0      	subs	r0, r0, r3
 800c28c:	2300      	movs	r3, #0
 800c28e:	4602      	mov	r2, r0
 800c290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c292:	4628      	mov	r0, r5
 800c294:	6a21      	ldr	r1, [r4, #32]
 800c296:	47b0      	blx	r6
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	89a3      	ldrh	r3, [r4, #12]
 800c29c:	d106      	bne.n	800c2ac <__sflush_r+0x64>
 800c29e:	6829      	ldr	r1, [r5, #0]
 800c2a0:	291d      	cmp	r1, #29
 800c2a2:	d82b      	bhi.n	800c2fc <__sflush_r+0xb4>
 800c2a4:	4a28      	ldr	r2, [pc, #160]	; (800c348 <__sflush_r+0x100>)
 800c2a6:	410a      	asrs	r2, r1
 800c2a8:	07d6      	lsls	r6, r2, #31
 800c2aa:	d427      	bmi.n	800c2fc <__sflush_r+0xb4>
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	6062      	str	r2, [r4, #4]
 800c2b0:	6922      	ldr	r2, [r4, #16]
 800c2b2:	04d9      	lsls	r1, r3, #19
 800c2b4:	6022      	str	r2, [r4, #0]
 800c2b6:	d504      	bpl.n	800c2c2 <__sflush_r+0x7a>
 800c2b8:	1c42      	adds	r2, r0, #1
 800c2ba:	d101      	bne.n	800c2c0 <__sflush_r+0x78>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	b903      	cbnz	r3, 800c2c2 <__sflush_r+0x7a>
 800c2c0:	6560      	str	r0, [r4, #84]	; 0x54
 800c2c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2c4:	602f      	str	r7, [r5, #0]
 800c2c6:	2900      	cmp	r1, #0
 800c2c8:	d0ca      	beq.n	800c260 <__sflush_r+0x18>
 800c2ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2ce:	4299      	cmp	r1, r3
 800c2d0:	d002      	beq.n	800c2d8 <__sflush_r+0x90>
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f7fe f968 	bl	800a5a8 <_free_r>
 800c2d8:	2000      	movs	r0, #0
 800c2da:	6360      	str	r0, [r4, #52]	; 0x34
 800c2dc:	e7c1      	b.n	800c262 <__sflush_r+0x1a>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	47b0      	blx	r6
 800c2e4:	1c41      	adds	r1, r0, #1
 800c2e6:	d1c8      	bne.n	800c27a <__sflush_r+0x32>
 800c2e8:	682b      	ldr	r3, [r5, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d0c5      	beq.n	800c27a <__sflush_r+0x32>
 800c2ee:	2b1d      	cmp	r3, #29
 800c2f0:	d001      	beq.n	800c2f6 <__sflush_r+0xae>
 800c2f2:	2b16      	cmp	r3, #22
 800c2f4:	d101      	bne.n	800c2fa <__sflush_r+0xb2>
 800c2f6:	602f      	str	r7, [r5, #0]
 800c2f8:	e7b2      	b.n	800c260 <__sflush_r+0x18>
 800c2fa:	89a3      	ldrh	r3, [r4, #12]
 800c2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c300:	81a3      	strh	r3, [r4, #12]
 800c302:	e7ae      	b.n	800c262 <__sflush_r+0x1a>
 800c304:	690f      	ldr	r7, [r1, #16]
 800c306:	2f00      	cmp	r7, #0
 800c308:	d0aa      	beq.n	800c260 <__sflush_r+0x18>
 800c30a:	0793      	lsls	r3, r2, #30
 800c30c:	bf18      	it	ne
 800c30e:	2300      	movne	r3, #0
 800c310:	680e      	ldr	r6, [r1, #0]
 800c312:	bf08      	it	eq
 800c314:	694b      	ldreq	r3, [r1, #20]
 800c316:	1bf6      	subs	r6, r6, r7
 800c318:	600f      	str	r7, [r1, #0]
 800c31a:	608b      	str	r3, [r1, #8]
 800c31c:	2e00      	cmp	r6, #0
 800c31e:	dd9f      	ble.n	800c260 <__sflush_r+0x18>
 800c320:	4633      	mov	r3, r6
 800c322:	463a      	mov	r2, r7
 800c324:	4628      	mov	r0, r5
 800c326:	6a21      	ldr	r1, [r4, #32]
 800c328:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c32c:	47e0      	blx	ip
 800c32e:	2800      	cmp	r0, #0
 800c330:	dc06      	bgt.n	800c340 <__sflush_r+0xf8>
 800c332:	89a3      	ldrh	r3, [r4, #12]
 800c334:	f04f 30ff 	mov.w	r0, #4294967295
 800c338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c33c:	81a3      	strh	r3, [r4, #12]
 800c33e:	e790      	b.n	800c262 <__sflush_r+0x1a>
 800c340:	4407      	add	r7, r0
 800c342:	1a36      	subs	r6, r6, r0
 800c344:	e7ea      	b.n	800c31c <__sflush_r+0xd4>
 800c346:	bf00      	nop
 800c348:	dfbffffe 	.word	0xdfbffffe

0800c34c <_fflush_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	690b      	ldr	r3, [r1, #16]
 800c350:	4605      	mov	r5, r0
 800c352:	460c      	mov	r4, r1
 800c354:	b913      	cbnz	r3, 800c35c <_fflush_r+0x10>
 800c356:	2500      	movs	r5, #0
 800c358:	4628      	mov	r0, r5
 800c35a:	bd38      	pop	{r3, r4, r5, pc}
 800c35c:	b118      	cbz	r0, 800c366 <_fflush_r+0x1a>
 800c35e:	6a03      	ldr	r3, [r0, #32]
 800c360:	b90b      	cbnz	r3, 800c366 <_fflush_r+0x1a>
 800c362:	f7fc ffff 	bl	8009364 <__sinit>
 800c366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d0f3      	beq.n	800c356 <_fflush_r+0xa>
 800c36e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c370:	07d0      	lsls	r0, r2, #31
 800c372:	d404      	bmi.n	800c37e <_fflush_r+0x32>
 800c374:	0599      	lsls	r1, r3, #22
 800c376:	d402      	bmi.n	800c37e <_fflush_r+0x32>
 800c378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c37a:	f7fd fa67 	bl	800984c <__retarget_lock_acquire_recursive>
 800c37e:	4628      	mov	r0, r5
 800c380:	4621      	mov	r1, r4
 800c382:	f7ff ff61 	bl	800c248 <__sflush_r>
 800c386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c388:	4605      	mov	r5, r0
 800c38a:	07da      	lsls	r2, r3, #31
 800c38c:	d4e4      	bmi.n	800c358 <_fflush_r+0xc>
 800c38e:	89a3      	ldrh	r3, [r4, #12]
 800c390:	059b      	lsls	r3, r3, #22
 800c392:	d4e1      	bmi.n	800c358 <_fflush_r+0xc>
 800c394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c396:	f7fd fa5a 	bl	800984e <__retarget_lock_release_recursive>
 800c39a:	e7dd      	b.n	800c358 <_fflush_r+0xc>

0800c39c <fiprintf>:
 800c39c:	b40e      	push	{r1, r2, r3}
 800c39e:	b503      	push	{r0, r1, lr}
 800c3a0:	4601      	mov	r1, r0
 800c3a2:	ab03      	add	r3, sp, #12
 800c3a4:	4805      	ldr	r0, [pc, #20]	; (800c3bc <fiprintf+0x20>)
 800c3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3aa:	6800      	ldr	r0, [r0, #0]
 800c3ac:	9301      	str	r3, [sp, #4]
 800c3ae:	f7ff fe31 	bl	800c014 <_vfiprintf_r>
 800c3b2:	b002      	add	sp, #8
 800c3b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3b8:	b003      	add	sp, #12
 800c3ba:	4770      	bx	lr
 800c3bc:	20000074 	.word	0x20000074

0800c3c0 <__swhatbuf_r>:
 800c3c0:	b570      	push	{r4, r5, r6, lr}
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c8:	4615      	mov	r5, r2
 800c3ca:	2900      	cmp	r1, #0
 800c3cc:	461e      	mov	r6, r3
 800c3ce:	b096      	sub	sp, #88	; 0x58
 800c3d0:	da0c      	bge.n	800c3ec <__swhatbuf_r+0x2c>
 800c3d2:	89a3      	ldrh	r3, [r4, #12]
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c3da:	bf0c      	ite	eq
 800c3dc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c3e0:	2340      	movne	r3, #64	; 0x40
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	6031      	str	r1, [r6, #0]
 800c3e6:	602b      	str	r3, [r5, #0]
 800c3e8:	b016      	add	sp, #88	; 0x58
 800c3ea:	bd70      	pop	{r4, r5, r6, pc}
 800c3ec:	466a      	mov	r2, sp
 800c3ee:	f000 f875 	bl	800c4dc <_fstat_r>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	dbed      	blt.n	800c3d2 <__swhatbuf_r+0x12>
 800c3f6:	9901      	ldr	r1, [sp, #4]
 800c3f8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c3fc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c400:	4259      	negs	r1, r3
 800c402:	4159      	adcs	r1, r3
 800c404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c408:	e7eb      	b.n	800c3e2 <__swhatbuf_r+0x22>

0800c40a <__smakebuf_r>:
 800c40a:	898b      	ldrh	r3, [r1, #12]
 800c40c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c40e:	079d      	lsls	r5, r3, #30
 800c410:	4606      	mov	r6, r0
 800c412:	460c      	mov	r4, r1
 800c414:	d507      	bpl.n	800c426 <__smakebuf_r+0x1c>
 800c416:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c41a:	6023      	str	r3, [r4, #0]
 800c41c:	6123      	str	r3, [r4, #16]
 800c41e:	2301      	movs	r3, #1
 800c420:	6163      	str	r3, [r4, #20]
 800c422:	b002      	add	sp, #8
 800c424:	bd70      	pop	{r4, r5, r6, pc}
 800c426:	466a      	mov	r2, sp
 800c428:	ab01      	add	r3, sp, #4
 800c42a:	f7ff ffc9 	bl	800c3c0 <__swhatbuf_r>
 800c42e:	9900      	ldr	r1, [sp, #0]
 800c430:	4605      	mov	r5, r0
 800c432:	4630      	mov	r0, r6
 800c434:	f7fe f928 	bl	800a688 <_malloc_r>
 800c438:	b948      	cbnz	r0, 800c44e <__smakebuf_r+0x44>
 800c43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c43e:	059a      	lsls	r2, r3, #22
 800c440:	d4ef      	bmi.n	800c422 <__smakebuf_r+0x18>
 800c442:	f023 0303 	bic.w	r3, r3, #3
 800c446:	f043 0302 	orr.w	r3, r3, #2
 800c44a:	81a3      	strh	r3, [r4, #12]
 800c44c:	e7e3      	b.n	800c416 <__smakebuf_r+0xc>
 800c44e:	89a3      	ldrh	r3, [r4, #12]
 800c450:	6020      	str	r0, [r4, #0]
 800c452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c456:	81a3      	strh	r3, [r4, #12]
 800c458:	9b00      	ldr	r3, [sp, #0]
 800c45a:	6120      	str	r0, [r4, #16]
 800c45c:	6163      	str	r3, [r4, #20]
 800c45e:	9b01      	ldr	r3, [sp, #4]
 800c460:	b15b      	cbz	r3, 800c47a <__smakebuf_r+0x70>
 800c462:	4630      	mov	r0, r6
 800c464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c468:	f000 f84a 	bl	800c500 <_isatty_r>
 800c46c:	b128      	cbz	r0, 800c47a <__smakebuf_r+0x70>
 800c46e:	89a3      	ldrh	r3, [r4, #12]
 800c470:	f023 0303 	bic.w	r3, r3, #3
 800c474:	f043 0301 	orr.w	r3, r3, #1
 800c478:	81a3      	strh	r3, [r4, #12]
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	431d      	orrs	r5, r3
 800c47e:	81a5      	strh	r5, [r4, #12]
 800c480:	e7cf      	b.n	800c422 <__smakebuf_r+0x18>

0800c482 <memmove>:
 800c482:	4288      	cmp	r0, r1
 800c484:	b510      	push	{r4, lr}
 800c486:	eb01 0402 	add.w	r4, r1, r2
 800c48a:	d902      	bls.n	800c492 <memmove+0x10>
 800c48c:	4284      	cmp	r4, r0
 800c48e:	4623      	mov	r3, r4
 800c490:	d807      	bhi.n	800c4a2 <memmove+0x20>
 800c492:	1e43      	subs	r3, r0, #1
 800c494:	42a1      	cmp	r1, r4
 800c496:	d008      	beq.n	800c4aa <memmove+0x28>
 800c498:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c49c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4a0:	e7f8      	b.n	800c494 <memmove+0x12>
 800c4a2:	4601      	mov	r1, r0
 800c4a4:	4402      	add	r2, r0
 800c4a6:	428a      	cmp	r2, r1
 800c4a8:	d100      	bne.n	800c4ac <memmove+0x2a>
 800c4aa:	bd10      	pop	{r4, pc}
 800c4ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4b4:	e7f7      	b.n	800c4a6 <memmove+0x24>

0800c4b6 <strncmp>:
 800c4b6:	b510      	push	{r4, lr}
 800c4b8:	b16a      	cbz	r2, 800c4d6 <strncmp+0x20>
 800c4ba:	3901      	subs	r1, #1
 800c4bc:	1884      	adds	r4, r0, r2
 800c4be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d103      	bne.n	800c4d2 <strncmp+0x1c>
 800c4ca:	42a0      	cmp	r0, r4
 800c4cc:	d001      	beq.n	800c4d2 <strncmp+0x1c>
 800c4ce:	2a00      	cmp	r2, #0
 800c4d0:	d1f5      	bne.n	800c4be <strncmp+0x8>
 800c4d2:	1ad0      	subs	r0, r2, r3
 800c4d4:	bd10      	pop	{r4, pc}
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	e7fc      	b.n	800c4d4 <strncmp+0x1e>
	...

0800c4dc <_fstat_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	2300      	movs	r3, #0
 800c4e0:	4d06      	ldr	r5, [pc, #24]	; (800c4fc <_fstat_r+0x20>)
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	4608      	mov	r0, r1
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	602b      	str	r3, [r5, #0]
 800c4ea:	f7f5 ffd4 	bl	8002496 <_fstat>
 800c4ee:	1c43      	adds	r3, r0, #1
 800c4f0:	d102      	bne.n	800c4f8 <_fstat_r+0x1c>
 800c4f2:	682b      	ldr	r3, [r5, #0]
 800c4f4:	b103      	cbz	r3, 800c4f8 <_fstat_r+0x1c>
 800c4f6:	6023      	str	r3, [r4, #0]
 800c4f8:	bd38      	pop	{r3, r4, r5, pc}
 800c4fa:	bf00      	nop
 800c4fc:	2000254c 	.word	0x2000254c

0800c500 <_isatty_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	2300      	movs	r3, #0
 800c504:	4d05      	ldr	r5, [pc, #20]	; (800c51c <_isatty_r+0x1c>)
 800c506:	4604      	mov	r4, r0
 800c508:	4608      	mov	r0, r1
 800c50a:	602b      	str	r3, [r5, #0]
 800c50c:	f7f5 ffd2 	bl	80024b4 <_isatty>
 800c510:	1c43      	adds	r3, r0, #1
 800c512:	d102      	bne.n	800c51a <_isatty_r+0x1a>
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	b103      	cbz	r3, 800c51a <_isatty_r+0x1a>
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	bd38      	pop	{r3, r4, r5, pc}
 800c51c:	2000254c 	.word	0x2000254c

0800c520 <_sbrk_r>:
 800c520:	b538      	push	{r3, r4, r5, lr}
 800c522:	2300      	movs	r3, #0
 800c524:	4d05      	ldr	r5, [pc, #20]	; (800c53c <_sbrk_r+0x1c>)
 800c526:	4604      	mov	r4, r0
 800c528:	4608      	mov	r0, r1
 800c52a:	602b      	str	r3, [r5, #0]
 800c52c:	f7f5 ffd8 	bl	80024e0 <_sbrk>
 800c530:	1c43      	adds	r3, r0, #1
 800c532:	d102      	bne.n	800c53a <_sbrk_r+0x1a>
 800c534:	682b      	ldr	r3, [r5, #0]
 800c536:	b103      	cbz	r3, 800c53a <_sbrk_r+0x1a>
 800c538:	6023      	str	r3, [r4, #0]
 800c53a:	bd38      	pop	{r3, r4, r5, pc}
 800c53c:	2000254c 	.word	0x2000254c

0800c540 <nan>:
 800c540:	2000      	movs	r0, #0
 800c542:	4901      	ldr	r1, [pc, #4]	; (800c548 <nan+0x8>)
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	7ff80000 	.word	0x7ff80000

0800c54c <abort>:
 800c54c:	2006      	movs	r0, #6
 800c54e:	b508      	push	{r3, lr}
 800c550:	f000 fbe8 	bl	800cd24 <raise>
 800c554:	2001      	movs	r0, #1
 800c556:	f7f5 ff50 	bl	80023fa <_exit>

0800c55a <_calloc_r>:
 800c55a:	b570      	push	{r4, r5, r6, lr}
 800c55c:	fba1 5402 	umull	r5, r4, r1, r2
 800c560:	b934      	cbnz	r4, 800c570 <_calloc_r+0x16>
 800c562:	4629      	mov	r1, r5
 800c564:	f7fe f890 	bl	800a688 <_malloc_r>
 800c568:	4606      	mov	r6, r0
 800c56a:	b928      	cbnz	r0, 800c578 <_calloc_r+0x1e>
 800c56c:	4630      	mov	r0, r6
 800c56e:	bd70      	pop	{r4, r5, r6, pc}
 800c570:	220c      	movs	r2, #12
 800c572:	2600      	movs	r6, #0
 800c574:	6002      	str	r2, [r0, #0]
 800c576:	e7f9      	b.n	800c56c <_calloc_r+0x12>
 800c578:	462a      	mov	r2, r5
 800c57a:	4621      	mov	r1, r4
 800c57c:	f7fd f88e 	bl	800969c <memset>
 800c580:	e7f4      	b.n	800c56c <_calloc_r+0x12>

0800c582 <rshift>:
 800c582:	6903      	ldr	r3, [r0, #16]
 800c584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c588:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c58c:	f100 0414 	add.w	r4, r0, #20
 800c590:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c594:	dd46      	ble.n	800c624 <rshift+0xa2>
 800c596:	f011 011f 	ands.w	r1, r1, #31
 800c59a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c59e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c5a2:	d10c      	bne.n	800c5be <rshift+0x3c>
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	f100 0710 	add.w	r7, r0, #16
 800c5aa:	42b1      	cmp	r1, r6
 800c5ac:	d335      	bcc.n	800c61a <rshift+0x98>
 800c5ae:	1a9b      	subs	r3, r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	1eea      	subs	r2, r5, #3
 800c5b4:	4296      	cmp	r6, r2
 800c5b6:	bf38      	it	cc
 800c5b8:	2300      	movcc	r3, #0
 800c5ba:	4423      	add	r3, r4
 800c5bc:	e015      	b.n	800c5ea <rshift+0x68>
 800c5be:	46a1      	mov	r9, r4
 800c5c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c5c4:	f1c1 0820 	rsb	r8, r1, #32
 800c5c8:	40cf      	lsrs	r7, r1
 800c5ca:	f105 0e04 	add.w	lr, r5, #4
 800c5ce:	4576      	cmp	r6, lr
 800c5d0:	46f4      	mov	ip, lr
 800c5d2:	d816      	bhi.n	800c602 <rshift+0x80>
 800c5d4:	1a9a      	subs	r2, r3, r2
 800c5d6:	0092      	lsls	r2, r2, #2
 800c5d8:	3a04      	subs	r2, #4
 800c5da:	3501      	adds	r5, #1
 800c5dc:	42ae      	cmp	r6, r5
 800c5de:	bf38      	it	cc
 800c5e0:	2200      	movcc	r2, #0
 800c5e2:	18a3      	adds	r3, r4, r2
 800c5e4:	50a7      	str	r7, [r4, r2]
 800c5e6:	b107      	cbz	r7, 800c5ea <rshift+0x68>
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	42a3      	cmp	r3, r4
 800c5ec:	eba3 0204 	sub.w	r2, r3, r4
 800c5f0:	bf08      	it	eq
 800c5f2:	2300      	moveq	r3, #0
 800c5f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c5f8:	6102      	str	r2, [r0, #16]
 800c5fa:	bf08      	it	eq
 800c5fc:	6143      	streq	r3, [r0, #20]
 800c5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c602:	f8dc c000 	ldr.w	ip, [ip]
 800c606:	fa0c fc08 	lsl.w	ip, ip, r8
 800c60a:	ea4c 0707 	orr.w	r7, ip, r7
 800c60e:	f849 7b04 	str.w	r7, [r9], #4
 800c612:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c616:	40cf      	lsrs	r7, r1
 800c618:	e7d9      	b.n	800c5ce <rshift+0x4c>
 800c61a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c61e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c622:	e7c2      	b.n	800c5aa <rshift+0x28>
 800c624:	4623      	mov	r3, r4
 800c626:	e7e0      	b.n	800c5ea <rshift+0x68>

0800c628 <__hexdig_fun>:
 800c628:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c62c:	2b09      	cmp	r3, #9
 800c62e:	d802      	bhi.n	800c636 <__hexdig_fun+0xe>
 800c630:	3820      	subs	r0, #32
 800c632:	b2c0      	uxtb	r0, r0
 800c634:	4770      	bx	lr
 800c636:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c63a:	2b05      	cmp	r3, #5
 800c63c:	d801      	bhi.n	800c642 <__hexdig_fun+0x1a>
 800c63e:	3847      	subs	r0, #71	; 0x47
 800c640:	e7f7      	b.n	800c632 <__hexdig_fun+0xa>
 800c642:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c646:	2b05      	cmp	r3, #5
 800c648:	d801      	bhi.n	800c64e <__hexdig_fun+0x26>
 800c64a:	3827      	subs	r0, #39	; 0x27
 800c64c:	e7f1      	b.n	800c632 <__hexdig_fun+0xa>
 800c64e:	2000      	movs	r0, #0
 800c650:	4770      	bx	lr
	...

0800c654 <__gethex>:
 800c654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c658:	4681      	mov	r9, r0
 800c65a:	468a      	mov	sl, r1
 800c65c:	4617      	mov	r7, r2
 800c65e:	680a      	ldr	r2, [r1, #0]
 800c660:	b085      	sub	sp, #20
 800c662:	f102 0b02 	add.w	fp, r2, #2
 800c666:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c66a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c66e:	9302      	str	r3, [sp, #8]
 800c670:	32fe      	adds	r2, #254	; 0xfe
 800c672:	eb02 030b 	add.w	r3, r2, fp
 800c676:	46d8      	mov	r8, fp
 800c678:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	2830      	cmp	r0, #48	; 0x30
 800c680:	d0f7      	beq.n	800c672 <__gethex+0x1e>
 800c682:	f7ff ffd1 	bl	800c628 <__hexdig_fun>
 800c686:	4604      	mov	r4, r0
 800c688:	2800      	cmp	r0, #0
 800c68a:	d138      	bne.n	800c6fe <__gethex+0xaa>
 800c68c:	2201      	movs	r2, #1
 800c68e:	4640      	mov	r0, r8
 800c690:	49a7      	ldr	r1, [pc, #668]	; (800c930 <__gethex+0x2dc>)
 800c692:	f7ff ff10 	bl	800c4b6 <strncmp>
 800c696:	4606      	mov	r6, r0
 800c698:	2800      	cmp	r0, #0
 800c69a:	d169      	bne.n	800c770 <__gethex+0x11c>
 800c69c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c6a0:	465d      	mov	r5, fp
 800c6a2:	f7ff ffc1 	bl	800c628 <__hexdig_fun>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d064      	beq.n	800c774 <__gethex+0x120>
 800c6aa:	465a      	mov	r2, fp
 800c6ac:	7810      	ldrb	r0, [r2, #0]
 800c6ae:	4690      	mov	r8, r2
 800c6b0:	2830      	cmp	r0, #48	; 0x30
 800c6b2:	f102 0201 	add.w	r2, r2, #1
 800c6b6:	d0f9      	beq.n	800c6ac <__gethex+0x58>
 800c6b8:	f7ff ffb6 	bl	800c628 <__hexdig_fun>
 800c6bc:	2301      	movs	r3, #1
 800c6be:	fab0 f480 	clz	r4, r0
 800c6c2:	465e      	mov	r6, fp
 800c6c4:	0964      	lsrs	r4, r4, #5
 800c6c6:	9301      	str	r3, [sp, #4]
 800c6c8:	4642      	mov	r2, r8
 800c6ca:	4615      	mov	r5, r2
 800c6cc:	7828      	ldrb	r0, [r5, #0]
 800c6ce:	3201      	adds	r2, #1
 800c6d0:	f7ff ffaa 	bl	800c628 <__hexdig_fun>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d1f8      	bne.n	800c6ca <__gethex+0x76>
 800c6d8:	2201      	movs	r2, #1
 800c6da:	4628      	mov	r0, r5
 800c6dc:	4994      	ldr	r1, [pc, #592]	; (800c930 <__gethex+0x2dc>)
 800c6de:	f7ff feea 	bl	800c4b6 <strncmp>
 800c6e2:	b978      	cbnz	r0, 800c704 <__gethex+0xb0>
 800c6e4:	b946      	cbnz	r6, 800c6f8 <__gethex+0xa4>
 800c6e6:	1c6e      	adds	r6, r5, #1
 800c6e8:	4632      	mov	r2, r6
 800c6ea:	4615      	mov	r5, r2
 800c6ec:	7828      	ldrb	r0, [r5, #0]
 800c6ee:	3201      	adds	r2, #1
 800c6f0:	f7ff ff9a 	bl	800c628 <__hexdig_fun>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d1f8      	bne.n	800c6ea <__gethex+0x96>
 800c6f8:	1b73      	subs	r3, r6, r5
 800c6fa:	009e      	lsls	r6, r3, #2
 800c6fc:	e004      	b.n	800c708 <__gethex+0xb4>
 800c6fe:	2400      	movs	r4, #0
 800c700:	4626      	mov	r6, r4
 800c702:	e7e1      	b.n	800c6c8 <__gethex+0x74>
 800c704:	2e00      	cmp	r6, #0
 800c706:	d1f7      	bne.n	800c6f8 <__gethex+0xa4>
 800c708:	782b      	ldrb	r3, [r5, #0]
 800c70a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c70e:	2b50      	cmp	r3, #80	; 0x50
 800c710:	d13d      	bne.n	800c78e <__gethex+0x13a>
 800c712:	786b      	ldrb	r3, [r5, #1]
 800c714:	2b2b      	cmp	r3, #43	; 0x2b
 800c716:	d02f      	beq.n	800c778 <__gethex+0x124>
 800c718:	2b2d      	cmp	r3, #45	; 0x2d
 800c71a:	d031      	beq.n	800c780 <__gethex+0x12c>
 800c71c:	f04f 0b00 	mov.w	fp, #0
 800c720:	1c69      	adds	r1, r5, #1
 800c722:	7808      	ldrb	r0, [r1, #0]
 800c724:	f7ff ff80 	bl	800c628 <__hexdig_fun>
 800c728:	1e42      	subs	r2, r0, #1
 800c72a:	b2d2      	uxtb	r2, r2
 800c72c:	2a18      	cmp	r2, #24
 800c72e:	d82e      	bhi.n	800c78e <__gethex+0x13a>
 800c730:	f1a0 0210 	sub.w	r2, r0, #16
 800c734:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c738:	f7ff ff76 	bl	800c628 <__hexdig_fun>
 800c73c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c740:	fa5f fc8c 	uxtb.w	ip, ip
 800c744:	f1bc 0f18 	cmp.w	ip, #24
 800c748:	d91d      	bls.n	800c786 <__gethex+0x132>
 800c74a:	f1bb 0f00 	cmp.w	fp, #0
 800c74e:	d000      	beq.n	800c752 <__gethex+0xfe>
 800c750:	4252      	negs	r2, r2
 800c752:	4416      	add	r6, r2
 800c754:	f8ca 1000 	str.w	r1, [sl]
 800c758:	b1dc      	cbz	r4, 800c792 <__gethex+0x13e>
 800c75a:	9b01      	ldr	r3, [sp, #4]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	bf14      	ite	ne
 800c760:	f04f 0800 	movne.w	r8, #0
 800c764:	f04f 0806 	moveq.w	r8, #6
 800c768:	4640      	mov	r0, r8
 800c76a:	b005      	add	sp, #20
 800c76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c770:	4645      	mov	r5, r8
 800c772:	4626      	mov	r6, r4
 800c774:	2401      	movs	r4, #1
 800c776:	e7c7      	b.n	800c708 <__gethex+0xb4>
 800c778:	f04f 0b00 	mov.w	fp, #0
 800c77c:	1ca9      	adds	r1, r5, #2
 800c77e:	e7d0      	b.n	800c722 <__gethex+0xce>
 800c780:	f04f 0b01 	mov.w	fp, #1
 800c784:	e7fa      	b.n	800c77c <__gethex+0x128>
 800c786:	230a      	movs	r3, #10
 800c788:	fb03 0002 	mla	r0, r3, r2, r0
 800c78c:	e7d0      	b.n	800c730 <__gethex+0xdc>
 800c78e:	4629      	mov	r1, r5
 800c790:	e7e0      	b.n	800c754 <__gethex+0x100>
 800c792:	4621      	mov	r1, r4
 800c794:	eba5 0308 	sub.w	r3, r5, r8
 800c798:	3b01      	subs	r3, #1
 800c79a:	2b07      	cmp	r3, #7
 800c79c:	dc0a      	bgt.n	800c7b4 <__gethex+0x160>
 800c79e:	4648      	mov	r0, r9
 800c7a0:	f7fd fffe 	bl	800a7a0 <_Balloc>
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	b940      	cbnz	r0, 800c7ba <__gethex+0x166>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	21e4      	movs	r1, #228	; 0xe4
 800c7ac:	4b61      	ldr	r3, [pc, #388]	; (800c934 <__gethex+0x2e0>)
 800c7ae:	4862      	ldr	r0, [pc, #392]	; (800c938 <__gethex+0x2e4>)
 800c7b0:	f7fd f86e 	bl	8009890 <__assert_func>
 800c7b4:	3101      	adds	r1, #1
 800c7b6:	105b      	asrs	r3, r3, #1
 800c7b8:	e7ef      	b.n	800c79a <__gethex+0x146>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	469b      	mov	fp, r3
 800c7be:	f100 0a14 	add.w	sl, r0, #20
 800c7c2:	f8cd a004 	str.w	sl, [sp, #4]
 800c7c6:	45a8      	cmp	r8, r5
 800c7c8:	d344      	bcc.n	800c854 <__gethex+0x200>
 800c7ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c7ce:	4658      	mov	r0, fp
 800c7d0:	f848 bb04 	str.w	fp, [r8], #4
 800c7d4:	eba8 080a 	sub.w	r8, r8, sl
 800c7d8:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800c7dc:	6122      	str	r2, [r4, #16]
 800c7de:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800c7e2:	f7fe f8cf 	bl	800a984 <__hi0bits>
 800c7e6:	683d      	ldr	r5, [r7, #0]
 800c7e8:	eba8 0800 	sub.w	r8, r8, r0
 800c7ec:	45a8      	cmp	r8, r5
 800c7ee:	dd59      	ble.n	800c8a4 <__gethex+0x250>
 800c7f0:	eba8 0805 	sub.w	r8, r8, r5
 800c7f4:	4641      	mov	r1, r8
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f7fe fc4d 	bl	800b096 <__any_on>
 800c7fc:	4683      	mov	fp, r0
 800c7fe:	b1b8      	cbz	r0, 800c830 <__gethex+0x1dc>
 800c800:	f04f 0b01 	mov.w	fp, #1
 800c804:	f108 33ff 	add.w	r3, r8, #4294967295
 800c808:	1159      	asrs	r1, r3, #5
 800c80a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c80e:	f003 021f 	and.w	r2, r3, #31
 800c812:	fa0b f202 	lsl.w	r2, fp, r2
 800c816:	420a      	tst	r2, r1
 800c818:	d00a      	beq.n	800c830 <__gethex+0x1dc>
 800c81a:	455b      	cmp	r3, fp
 800c81c:	dd06      	ble.n	800c82c <__gethex+0x1d8>
 800c81e:	4620      	mov	r0, r4
 800c820:	f1a8 0102 	sub.w	r1, r8, #2
 800c824:	f7fe fc37 	bl	800b096 <__any_on>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d138      	bne.n	800c89e <__gethex+0x24a>
 800c82c:	f04f 0b02 	mov.w	fp, #2
 800c830:	4641      	mov	r1, r8
 800c832:	4620      	mov	r0, r4
 800c834:	f7ff fea5 	bl	800c582 <rshift>
 800c838:	4446      	add	r6, r8
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	42b3      	cmp	r3, r6
 800c83e:	da41      	bge.n	800c8c4 <__gethex+0x270>
 800c840:	4621      	mov	r1, r4
 800c842:	4648      	mov	r0, r9
 800c844:	f7fd ffec 	bl	800a820 <_Bfree>
 800c848:	2300      	movs	r3, #0
 800c84a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c84c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c850:	6013      	str	r3, [r2, #0]
 800c852:	e789      	b.n	800c768 <__gethex+0x114>
 800c854:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c858:	2a2e      	cmp	r2, #46	; 0x2e
 800c85a:	d014      	beq.n	800c886 <__gethex+0x232>
 800c85c:	2b20      	cmp	r3, #32
 800c85e:	d106      	bne.n	800c86e <__gethex+0x21a>
 800c860:	9b01      	ldr	r3, [sp, #4]
 800c862:	f843 bb04 	str.w	fp, [r3], #4
 800c866:	f04f 0b00 	mov.w	fp, #0
 800c86a:	9301      	str	r3, [sp, #4]
 800c86c:	465b      	mov	r3, fp
 800c86e:	7828      	ldrb	r0, [r5, #0]
 800c870:	9303      	str	r3, [sp, #12]
 800c872:	f7ff fed9 	bl	800c628 <__hexdig_fun>
 800c876:	9b03      	ldr	r3, [sp, #12]
 800c878:	f000 000f 	and.w	r0, r0, #15
 800c87c:	4098      	lsls	r0, r3
 800c87e:	ea4b 0b00 	orr.w	fp, fp, r0
 800c882:	3304      	adds	r3, #4
 800c884:	e79f      	b.n	800c7c6 <__gethex+0x172>
 800c886:	45a8      	cmp	r8, r5
 800c888:	d8e8      	bhi.n	800c85c <__gethex+0x208>
 800c88a:	2201      	movs	r2, #1
 800c88c:	4628      	mov	r0, r5
 800c88e:	4928      	ldr	r1, [pc, #160]	; (800c930 <__gethex+0x2dc>)
 800c890:	9303      	str	r3, [sp, #12]
 800c892:	f7ff fe10 	bl	800c4b6 <strncmp>
 800c896:	9b03      	ldr	r3, [sp, #12]
 800c898:	2800      	cmp	r0, #0
 800c89a:	d1df      	bne.n	800c85c <__gethex+0x208>
 800c89c:	e793      	b.n	800c7c6 <__gethex+0x172>
 800c89e:	f04f 0b03 	mov.w	fp, #3
 800c8a2:	e7c5      	b.n	800c830 <__gethex+0x1dc>
 800c8a4:	da0b      	bge.n	800c8be <__gethex+0x26a>
 800c8a6:	eba5 0808 	sub.w	r8, r5, r8
 800c8aa:	4621      	mov	r1, r4
 800c8ac:	4642      	mov	r2, r8
 800c8ae:	4648      	mov	r0, r9
 800c8b0:	f7fe f9ce 	bl	800ac50 <__lshift>
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	eba6 0608 	sub.w	r6, r6, r8
 800c8ba:	f100 0a14 	add.w	sl, r0, #20
 800c8be:	f04f 0b00 	mov.w	fp, #0
 800c8c2:	e7ba      	b.n	800c83a <__gethex+0x1e6>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	42b3      	cmp	r3, r6
 800c8c8:	dd74      	ble.n	800c9b4 <__gethex+0x360>
 800c8ca:	1b9e      	subs	r6, r3, r6
 800c8cc:	42b5      	cmp	r5, r6
 800c8ce:	dc35      	bgt.n	800c93c <__gethex+0x2e8>
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d023      	beq.n	800c91e <__gethex+0x2ca>
 800c8d6:	2b03      	cmp	r3, #3
 800c8d8:	d025      	beq.n	800c926 <__gethex+0x2d2>
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d115      	bne.n	800c90a <__gethex+0x2b6>
 800c8de:	42b5      	cmp	r5, r6
 800c8e0:	d113      	bne.n	800c90a <__gethex+0x2b6>
 800c8e2:	2d01      	cmp	r5, #1
 800c8e4:	d10b      	bne.n	800c8fe <__gethex+0x2aa>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	9a02      	ldr	r2, [sp, #8]
 800c8ea:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c8ee:	6013      	str	r3, [r2, #0]
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	6123      	str	r3, [r4, #16]
 800c8f4:	f8ca 3000 	str.w	r3, [sl]
 800c8f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8fa:	601c      	str	r4, [r3, #0]
 800c8fc:	e734      	b.n	800c768 <__gethex+0x114>
 800c8fe:	4620      	mov	r0, r4
 800c900:	1e69      	subs	r1, r5, #1
 800c902:	f7fe fbc8 	bl	800b096 <__any_on>
 800c906:	2800      	cmp	r0, #0
 800c908:	d1ed      	bne.n	800c8e6 <__gethex+0x292>
 800c90a:	4621      	mov	r1, r4
 800c90c:	4648      	mov	r0, r9
 800c90e:	f7fd ff87 	bl	800a820 <_Bfree>
 800c912:	2300      	movs	r3, #0
 800c914:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c916:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c91a:	6013      	str	r3, [r2, #0]
 800c91c:	e724      	b.n	800c768 <__gethex+0x114>
 800c91e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1f2      	bne.n	800c90a <__gethex+0x2b6>
 800c924:	e7df      	b.n	800c8e6 <__gethex+0x292>
 800c926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d1dc      	bne.n	800c8e6 <__gethex+0x292>
 800c92c:	e7ed      	b.n	800c90a <__gethex+0x2b6>
 800c92e:	bf00      	nop
 800c930:	0800d50c 	.word	0x0800d50c
 800c934:	0800d3a6 	.word	0x0800d3a6
 800c938:	0800d579 	.word	0x0800d579
 800c93c:	f106 38ff 	add.w	r8, r6, #4294967295
 800c940:	f1bb 0f00 	cmp.w	fp, #0
 800c944:	d133      	bne.n	800c9ae <__gethex+0x35a>
 800c946:	f1b8 0f00 	cmp.w	r8, #0
 800c94a:	d004      	beq.n	800c956 <__gethex+0x302>
 800c94c:	4641      	mov	r1, r8
 800c94e:	4620      	mov	r0, r4
 800c950:	f7fe fba1 	bl	800b096 <__any_on>
 800c954:	4683      	mov	fp, r0
 800c956:	2301      	movs	r3, #1
 800c958:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c95c:	f008 081f 	and.w	r8, r8, #31
 800c960:	fa03 f308 	lsl.w	r3, r3, r8
 800c964:	f04f 0802 	mov.w	r8, #2
 800c968:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c96c:	4631      	mov	r1, r6
 800c96e:	4213      	tst	r3, r2
 800c970:	4620      	mov	r0, r4
 800c972:	bf18      	it	ne
 800c974:	f04b 0b02 	orrne.w	fp, fp, #2
 800c978:	1bad      	subs	r5, r5, r6
 800c97a:	f7ff fe02 	bl	800c582 <rshift>
 800c97e:	687e      	ldr	r6, [r7, #4]
 800c980:	f1bb 0f00 	cmp.w	fp, #0
 800c984:	d04a      	beq.n	800ca1c <__gethex+0x3c8>
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d016      	beq.n	800c9ba <__gethex+0x366>
 800c98c:	2b03      	cmp	r3, #3
 800c98e:	d018      	beq.n	800c9c2 <__gethex+0x36e>
 800c990:	2b01      	cmp	r3, #1
 800c992:	d109      	bne.n	800c9a8 <__gethex+0x354>
 800c994:	f01b 0f02 	tst.w	fp, #2
 800c998:	d006      	beq.n	800c9a8 <__gethex+0x354>
 800c99a:	f8da 3000 	ldr.w	r3, [sl]
 800c99e:	ea4b 0b03 	orr.w	fp, fp, r3
 800c9a2:	f01b 0f01 	tst.w	fp, #1
 800c9a6:	d10f      	bne.n	800c9c8 <__gethex+0x374>
 800c9a8:	f048 0810 	orr.w	r8, r8, #16
 800c9ac:	e036      	b.n	800ca1c <__gethex+0x3c8>
 800c9ae:	f04f 0b01 	mov.w	fp, #1
 800c9b2:	e7d0      	b.n	800c956 <__gethex+0x302>
 800c9b4:	f04f 0801 	mov.w	r8, #1
 800c9b8:	e7e2      	b.n	800c980 <__gethex+0x32c>
 800c9ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9bc:	f1c3 0301 	rsb	r3, r3, #1
 800c9c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d0ef      	beq.n	800c9a8 <__gethex+0x354>
 800c9c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c9cc:	f104 0214 	add.w	r2, r4, #20
 800c9d0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c9d4:	9301      	str	r3, [sp, #4]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c9dc:	4694      	mov	ip, r2
 800c9de:	f852 1b04 	ldr.w	r1, [r2], #4
 800c9e2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c9e6:	d01e      	beq.n	800ca26 <__gethex+0x3d2>
 800c9e8:	3101      	adds	r1, #1
 800c9ea:	f8cc 1000 	str.w	r1, [ip]
 800c9ee:	f1b8 0f02 	cmp.w	r8, #2
 800c9f2:	f104 0214 	add.w	r2, r4, #20
 800c9f6:	d13d      	bne.n	800ca74 <__gethex+0x420>
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	42ab      	cmp	r3, r5
 800c9fe:	d10b      	bne.n	800ca18 <__gethex+0x3c4>
 800ca00:	2301      	movs	r3, #1
 800ca02:	1169      	asrs	r1, r5, #5
 800ca04:	f005 051f 	and.w	r5, r5, #31
 800ca08:	fa03 f505 	lsl.w	r5, r3, r5
 800ca0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca10:	421d      	tst	r5, r3
 800ca12:	bf18      	it	ne
 800ca14:	f04f 0801 	movne.w	r8, #1
 800ca18:	f048 0820 	orr.w	r8, r8, #32
 800ca1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca1e:	601c      	str	r4, [r3, #0]
 800ca20:	9b02      	ldr	r3, [sp, #8]
 800ca22:	601e      	str	r6, [r3, #0]
 800ca24:	e6a0      	b.n	800c768 <__gethex+0x114>
 800ca26:	4290      	cmp	r0, r2
 800ca28:	f842 3c04 	str.w	r3, [r2, #-4]
 800ca2c:	d8d6      	bhi.n	800c9dc <__gethex+0x388>
 800ca2e:	68a2      	ldr	r2, [r4, #8]
 800ca30:	4593      	cmp	fp, r2
 800ca32:	db17      	blt.n	800ca64 <__gethex+0x410>
 800ca34:	6861      	ldr	r1, [r4, #4]
 800ca36:	4648      	mov	r0, r9
 800ca38:	3101      	adds	r1, #1
 800ca3a:	f7fd feb1 	bl	800a7a0 <_Balloc>
 800ca3e:	4682      	mov	sl, r0
 800ca40:	b918      	cbnz	r0, 800ca4a <__gethex+0x3f6>
 800ca42:	4602      	mov	r2, r0
 800ca44:	2184      	movs	r1, #132	; 0x84
 800ca46:	4b1a      	ldr	r3, [pc, #104]	; (800cab0 <__gethex+0x45c>)
 800ca48:	e6b1      	b.n	800c7ae <__gethex+0x15a>
 800ca4a:	6922      	ldr	r2, [r4, #16]
 800ca4c:	f104 010c 	add.w	r1, r4, #12
 800ca50:	3202      	adds	r2, #2
 800ca52:	0092      	lsls	r2, r2, #2
 800ca54:	300c      	adds	r0, #12
 800ca56:	f7fc ff09 	bl	800986c <memcpy>
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	4648      	mov	r0, r9
 800ca5e:	f7fd fedf 	bl	800a820 <_Bfree>
 800ca62:	4654      	mov	r4, sl
 800ca64:	6922      	ldr	r2, [r4, #16]
 800ca66:	1c51      	adds	r1, r2, #1
 800ca68:	6121      	str	r1, [r4, #16]
 800ca6a:	2101      	movs	r1, #1
 800ca6c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ca70:	6151      	str	r1, [r2, #20]
 800ca72:	e7bc      	b.n	800c9ee <__gethex+0x39a>
 800ca74:	6921      	ldr	r1, [r4, #16]
 800ca76:	4559      	cmp	r1, fp
 800ca78:	dd0b      	ble.n	800ca92 <__gethex+0x43e>
 800ca7a:	2101      	movs	r1, #1
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f7ff fd80 	bl	800c582 <rshift>
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	3601      	adds	r6, #1
 800ca86:	42b3      	cmp	r3, r6
 800ca88:	f6ff aeda 	blt.w	800c840 <__gethex+0x1ec>
 800ca8c:	f04f 0801 	mov.w	r8, #1
 800ca90:	e7c2      	b.n	800ca18 <__gethex+0x3c4>
 800ca92:	f015 051f 	ands.w	r5, r5, #31
 800ca96:	d0f9      	beq.n	800ca8c <__gethex+0x438>
 800ca98:	9b01      	ldr	r3, [sp, #4]
 800ca9a:	f1c5 0520 	rsb	r5, r5, #32
 800ca9e:	441a      	add	r2, r3
 800caa0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800caa4:	f7fd ff6e 	bl	800a984 <__hi0bits>
 800caa8:	42a8      	cmp	r0, r5
 800caaa:	dbe6      	blt.n	800ca7a <__gethex+0x426>
 800caac:	e7ee      	b.n	800ca8c <__gethex+0x438>
 800caae:	bf00      	nop
 800cab0:	0800d3a6 	.word	0x0800d3a6

0800cab4 <L_shift>:
 800cab4:	f1c2 0208 	rsb	r2, r2, #8
 800cab8:	0092      	lsls	r2, r2, #2
 800caba:	b570      	push	{r4, r5, r6, lr}
 800cabc:	f1c2 0620 	rsb	r6, r2, #32
 800cac0:	6843      	ldr	r3, [r0, #4]
 800cac2:	6804      	ldr	r4, [r0, #0]
 800cac4:	fa03 f506 	lsl.w	r5, r3, r6
 800cac8:	432c      	orrs	r4, r5
 800caca:	40d3      	lsrs	r3, r2
 800cacc:	6004      	str	r4, [r0, #0]
 800cace:	f840 3f04 	str.w	r3, [r0, #4]!
 800cad2:	4288      	cmp	r0, r1
 800cad4:	d3f4      	bcc.n	800cac0 <L_shift+0xc>
 800cad6:	bd70      	pop	{r4, r5, r6, pc}

0800cad8 <__match>:
 800cad8:	b530      	push	{r4, r5, lr}
 800cada:	6803      	ldr	r3, [r0, #0]
 800cadc:	3301      	adds	r3, #1
 800cade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cae2:	b914      	cbnz	r4, 800caea <__match+0x12>
 800cae4:	6003      	str	r3, [r0, #0]
 800cae6:	2001      	movs	r0, #1
 800cae8:	bd30      	pop	{r4, r5, pc}
 800caea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800caf2:	2d19      	cmp	r5, #25
 800caf4:	bf98      	it	ls
 800caf6:	3220      	addls	r2, #32
 800caf8:	42a2      	cmp	r2, r4
 800cafa:	d0f0      	beq.n	800cade <__match+0x6>
 800cafc:	2000      	movs	r0, #0
 800cafe:	e7f3      	b.n	800cae8 <__match+0x10>

0800cb00 <__hexnan>:
 800cb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb04:	2500      	movs	r5, #0
 800cb06:	680b      	ldr	r3, [r1, #0]
 800cb08:	4682      	mov	sl, r0
 800cb0a:	115e      	asrs	r6, r3, #5
 800cb0c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb10:	f013 031f 	ands.w	r3, r3, #31
 800cb14:	bf18      	it	ne
 800cb16:	3604      	addne	r6, #4
 800cb18:	1f37      	subs	r7, r6, #4
 800cb1a:	4690      	mov	r8, r2
 800cb1c:	46b9      	mov	r9, r7
 800cb1e:	463c      	mov	r4, r7
 800cb20:	46ab      	mov	fp, r5
 800cb22:	b087      	sub	sp, #28
 800cb24:	6801      	ldr	r1, [r0, #0]
 800cb26:	9301      	str	r3, [sp, #4]
 800cb28:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb2c:	9502      	str	r5, [sp, #8]
 800cb2e:	784a      	ldrb	r2, [r1, #1]
 800cb30:	1c4b      	adds	r3, r1, #1
 800cb32:	9303      	str	r3, [sp, #12]
 800cb34:	b342      	cbz	r2, 800cb88 <__hexnan+0x88>
 800cb36:	4610      	mov	r0, r2
 800cb38:	9105      	str	r1, [sp, #20]
 800cb3a:	9204      	str	r2, [sp, #16]
 800cb3c:	f7ff fd74 	bl	800c628 <__hexdig_fun>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d14f      	bne.n	800cbe4 <__hexnan+0xe4>
 800cb44:	9a04      	ldr	r2, [sp, #16]
 800cb46:	9905      	ldr	r1, [sp, #20]
 800cb48:	2a20      	cmp	r2, #32
 800cb4a:	d818      	bhi.n	800cb7e <__hexnan+0x7e>
 800cb4c:	9b02      	ldr	r3, [sp, #8]
 800cb4e:	459b      	cmp	fp, r3
 800cb50:	dd13      	ble.n	800cb7a <__hexnan+0x7a>
 800cb52:	454c      	cmp	r4, r9
 800cb54:	d206      	bcs.n	800cb64 <__hexnan+0x64>
 800cb56:	2d07      	cmp	r5, #7
 800cb58:	dc04      	bgt.n	800cb64 <__hexnan+0x64>
 800cb5a:	462a      	mov	r2, r5
 800cb5c:	4649      	mov	r1, r9
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f7ff ffa8 	bl	800cab4 <L_shift>
 800cb64:	4544      	cmp	r4, r8
 800cb66:	d950      	bls.n	800cc0a <__hexnan+0x10a>
 800cb68:	2300      	movs	r3, #0
 800cb6a:	f1a4 0904 	sub.w	r9, r4, #4
 800cb6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb72:	461d      	mov	r5, r3
 800cb74:	464c      	mov	r4, r9
 800cb76:	f8cd b008 	str.w	fp, [sp, #8]
 800cb7a:	9903      	ldr	r1, [sp, #12]
 800cb7c:	e7d7      	b.n	800cb2e <__hexnan+0x2e>
 800cb7e:	2a29      	cmp	r2, #41	; 0x29
 800cb80:	d155      	bne.n	800cc2e <__hexnan+0x12e>
 800cb82:	3102      	adds	r1, #2
 800cb84:	f8ca 1000 	str.w	r1, [sl]
 800cb88:	f1bb 0f00 	cmp.w	fp, #0
 800cb8c:	d04f      	beq.n	800cc2e <__hexnan+0x12e>
 800cb8e:	454c      	cmp	r4, r9
 800cb90:	d206      	bcs.n	800cba0 <__hexnan+0xa0>
 800cb92:	2d07      	cmp	r5, #7
 800cb94:	dc04      	bgt.n	800cba0 <__hexnan+0xa0>
 800cb96:	462a      	mov	r2, r5
 800cb98:	4649      	mov	r1, r9
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f7ff ff8a 	bl	800cab4 <L_shift>
 800cba0:	4544      	cmp	r4, r8
 800cba2:	d934      	bls.n	800cc0e <__hexnan+0x10e>
 800cba4:	4623      	mov	r3, r4
 800cba6:	f1a8 0204 	sub.w	r2, r8, #4
 800cbaa:	f853 1b04 	ldr.w	r1, [r3], #4
 800cbae:	429f      	cmp	r7, r3
 800cbb0:	f842 1f04 	str.w	r1, [r2, #4]!
 800cbb4:	d2f9      	bcs.n	800cbaa <__hexnan+0xaa>
 800cbb6:	1b3b      	subs	r3, r7, r4
 800cbb8:	f023 0303 	bic.w	r3, r3, #3
 800cbbc:	3304      	adds	r3, #4
 800cbbe:	3e03      	subs	r6, #3
 800cbc0:	3401      	adds	r4, #1
 800cbc2:	42a6      	cmp	r6, r4
 800cbc4:	bf38      	it	cc
 800cbc6:	2304      	movcc	r3, #4
 800cbc8:	2200      	movs	r2, #0
 800cbca:	4443      	add	r3, r8
 800cbcc:	f843 2b04 	str.w	r2, [r3], #4
 800cbd0:	429f      	cmp	r7, r3
 800cbd2:	d2fb      	bcs.n	800cbcc <__hexnan+0xcc>
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	b91b      	cbnz	r3, 800cbe0 <__hexnan+0xe0>
 800cbd8:	4547      	cmp	r7, r8
 800cbda:	d126      	bne.n	800cc2a <__hexnan+0x12a>
 800cbdc:	2301      	movs	r3, #1
 800cbde:	603b      	str	r3, [r7, #0]
 800cbe0:	2005      	movs	r0, #5
 800cbe2:	e025      	b.n	800cc30 <__hexnan+0x130>
 800cbe4:	3501      	adds	r5, #1
 800cbe6:	2d08      	cmp	r5, #8
 800cbe8:	f10b 0b01 	add.w	fp, fp, #1
 800cbec:	dd06      	ble.n	800cbfc <__hexnan+0xfc>
 800cbee:	4544      	cmp	r4, r8
 800cbf0:	d9c3      	bls.n	800cb7a <__hexnan+0x7a>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	2501      	movs	r5, #1
 800cbf6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbfa:	3c04      	subs	r4, #4
 800cbfc:	6822      	ldr	r2, [r4, #0]
 800cbfe:	f000 000f 	and.w	r0, r0, #15
 800cc02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cc06:	6020      	str	r0, [r4, #0]
 800cc08:	e7b7      	b.n	800cb7a <__hexnan+0x7a>
 800cc0a:	2508      	movs	r5, #8
 800cc0c:	e7b5      	b.n	800cb7a <__hexnan+0x7a>
 800cc0e:	9b01      	ldr	r3, [sp, #4]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d0df      	beq.n	800cbd4 <__hexnan+0xd4>
 800cc14:	f04f 32ff 	mov.w	r2, #4294967295
 800cc18:	f1c3 0320 	rsb	r3, r3, #32
 800cc1c:	40da      	lsrs	r2, r3
 800cc1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cc22:	4013      	ands	r3, r2
 800cc24:	f846 3c04 	str.w	r3, [r6, #-4]
 800cc28:	e7d4      	b.n	800cbd4 <__hexnan+0xd4>
 800cc2a:	3f04      	subs	r7, #4
 800cc2c:	e7d2      	b.n	800cbd4 <__hexnan+0xd4>
 800cc2e:	2004      	movs	r0, #4
 800cc30:	b007      	add	sp, #28
 800cc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc36 <__ascii_mbtowc>:
 800cc36:	b082      	sub	sp, #8
 800cc38:	b901      	cbnz	r1, 800cc3c <__ascii_mbtowc+0x6>
 800cc3a:	a901      	add	r1, sp, #4
 800cc3c:	b142      	cbz	r2, 800cc50 <__ascii_mbtowc+0x1a>
 800cc3e:	b14b      	cbz	r3, 800cc54 <__ascii_mbtowc+0x1e>
 800cc40:	7813      	ldrb	r3, [r2, #0]
 800cc42:	600b      	str	r3, [r1, #0]
 800cc44:	7812      	ldrb	r2, [r2, #0]
 800cc46:	1e10      	subs	r0, r2, #0
 800cc48:	bf18      	it	ne
 800cc4a:	2001      	movne	r0, #1
 800cc4c:	b002      	add	sp, #8
 800cc4e:	4770      	bx	lr
 800cc50:	4610      	mov	r0, r2
 800cc52:	e7fb      	b.n	800cc4c <__ascii_mbtowc+0x16>
 800cc54:	f06f 0001 	mvn.w	r0, #1
 800cc58:	e7f8      	b.n	800cc4c <__ascii_mbtowc+0x16>

0800cc5a <_realloc_r>:
 800cc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc5e:	4680      	mov	r8, r0
 800cc60:	4614      	mov	r4, r2
 800cc62:	460e      	mov	r6, r1
 800cc64:	b921      	cbnz	r1, 800cc70 <_realloc_r+0x16>
 800cc66:	4611      	mov	r1, r2
 800cc68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc6c:	f7fd bd0c 	b.w	800a688 <_malloc_r>
 800cc70:	b92a      	cbnz	r2, 800cc7e <_realloc_r+0x24>
 800cc72:	f7fd fc99 	bl	800a5a8 <_free_r>
 800cc76:	4625      	mov	r5, r4
 800cc78:	4628      	mov	r0, r5
 800cc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc7e:	f000 f86d 	bl	800cd5c <_malloc_usable_size_r>
 800cc82:	4284      	cmp	r4, r0
 800cc84:	4607      	mov	r7, r0
 800cc86:	d802      	bhi.n	800cc8e <_realloc_r+0x34>
 800cc88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc8c:	d812      	bhi.n	800ccb4 <_realloc_r+0x5a>
 800cc8e:	4621      	mov	r1, r4
 800cc90:	4640      	mov	r0, r8
 800cc92:	f7fd fcf9 	bl	800a688 <_malloc_r>
 800cc96:	4605      	mov	r5, r0
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d0ed      	beq.n	800cc78 <_realloc_r+0x1e>
 800cc9c:	42bc      	cmp	r4, r7
 800cc9e:	4622      	mov	r2, r4
 800cca0:	4631      	mov	r1, r6
 800cca2:	bf28      	it	cs
 800cca4:	463a      	movcs	r2, r7
 800cca6:	f7fc fde1 	bl	800986c <memcpy>
 800ccaa:	4631      	mov	r1, r6
 800ccac:	4640      	mov	r0, r8
 800ccae:	f7fd fc7b 	bl	800a5a8 <_free_r>
 800ccb2:	e7e1      	b.n	800cc78 <_realloc_r+0x1e>
 800ccb4:	4635      	mov	r5, r6
 800ccb6:	e7df      	b.n	800cc78 <_realloc_r+0x1e>

0800ccb8 <__ascii_wctomb>:
 800ccb8:	4603      	mov	r3, r0
 800ccba:	4608      	mov	r0, r1
 800ccbc:	b141      	cbz	r1, 800ccd0 <__ascii_wctomb+0x18>
 800ccbe:	2aff      	cmp	r2, #255	; 0xff
 800ccc0:	d904      	bls.n	800cccc <__ascii_wctomb+0x14>
 800ccc2:	228a      	movs	r2, #138	; 0x8a
 800ccc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc8:	601a      	str	r2, [r3, #0]
 800ccca:	4770      	bx	lr
 800cccc:	2001      	movs	r0, #1
 800ccce:	700a      	strb	r2, [r1, #0]
 800ccd0:	4770      	bx	lr

0800ccd2 <_raise_r>:
 800ccd2:	291f      	cmp	r1, #31
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	460d      	mov	r5, r1
 800ccda:	d904      	bls.n	800cce6 <_raise_r+0x14>
 800ccdc:	2316      	movs	r3, #22
 800ccde:	6003      	str	r3, [r0, #0]
 800cce0:	f04f 30ff 	mov.w	r0, #4294967295
 800cce4:	bd38      	pop	{r3, r4, r5, pc}
 800cce6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cce8:	b112      	cbz	r2, 800ccf0 <_raise_r+0x1e>
 800ccea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccee:	b94b      	cbnz	r3, 800cd04 <_raise_r+0x32>
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f000 f831 	bl	800cd58 <_getpid_r>
 800ccf6:	462a      	mov	r2, r5
 800ccf8:	4601      	mov	r1, r0
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd00:	f000 b818 	b.w	800cd34 <_kill_r>
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d00a      	beq.n	800cd1e <_raise_r+0x4c>
 800cd08:	1c59      	adds	r1, r3, #1
 800cd0a:	d103      	bne.n	800cd14 <_raise_r+0x42>
 800cd0c:	2316      	movs	r3, #22
 800cd0e:	6003      	str	r3, [r0, #0]
 800cd10:	2001      	movs	r0, #1
 800cd12:	e7e7      	b.n	800cce4 <_raise_r+0x12>
 800cd14:	2400      	movs	r4, #0
 800cd16:	4628      	mov	r0, r5
 800cd18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd1c:	4798      	blx	r3
 800cd1e:	2000      	movs	r0, #0
 800cd20:	e7e0      	b.n	800cce4 <_raise_r+0x12>
	...

0800cd24 <raise>:
 800cd24:	4b02      	ldr	r3, [pc, #8]	; (800cd30 <raise+0xc>)
 800cd26:	4601      	mov	r1, r0
 800cd28:	6818      	ldr	r0, [r3, #0]
 800cd2a:	f7ff bfd2 	b.w	800ccd2 <_raise_r>
 800cd2e:	bf00      	nop
 800cd30:	20000074 	.word	0x20000074

0800cd34 <_kill_r>:
 800cd34:	b538      	push	{r3, r4, r5, lr}
 800cd36:	2300      	movs	r3, #0
 800cd38:	4d06      	ldr	r5, [pc, #24]	; (800cd54 <_kill_r+0x20>)
 800cd3a:	4604      	mov	r4, r0
 800cd3c:	4608      	mov	r0, r1
 800cd3e:	4611      	mov	r1, r2
 800cd40:	602b      	str	r3, [r5, #0]
 800cd42:	f7f5 fb4a 	bl	80023da <_kill>
 800cd46:	1c43      	adds	r3, r0, #1
 800cd48:	d102      	bne.n	800cd50 <_kill_r+0x1c>
 800cd4a:	682b      	ldr	r3, [r5, #0]
 800cd4c:	b103      	cbz	r3, 800cd50 <_kill_r+0x1c>
 800cd4e:	6023      	str	r3, [r4, #0]
 800cd50:	bd38      	pop	{r3, r4, r5, pc}
 800cd52:	bf00      	nop
 800cd54:	2000254c 	.word	0x2000254c

0800cd58 <_getpid_r>:
 800cd58:	f7f5 bb38 	b.w	80023cc <_getpid>

0800cd5c <_malloc_usable_size_r>:
 800cd5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd60:	1f18      	subs	r0, r3, #4
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	bfbc      	itt	lt
 800cd66:	580b      	ldrlt	r3, [r1, r0]
 800cd68:	18c0      	addlt	r0, r0, r3
 800cd6a:	4770      	bx	lr

0800cd6c <_init>:
 800cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6e:	bf00      	nop
 800cd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd72:	bc08      	pop	{r3}
 800cd74:	469e      	mov	lr, r3
 800cd76:	4770      	bx	lr

0800cd78 <_fini>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	bf00      	nop
 800cd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7e:	bc08      	pop	{r3}
 800cd80:	469e      	mov	lr, r3
 800cd82:	4770      	bx	lr
