
DON_NHIEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  080091c0  080091c0  000191c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098c4  080098c4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080098c4  080098c4  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098c4  080098c4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098c4  080098c4  000198c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098c8  080098c8  000198c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080098cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  200001d8  08009aa4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08009aa4  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001101d  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000274f  00000000  00000000  00031261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  000339b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cf9  00000000  00000000  00034a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001947f  00000000  00000000  00035731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a8a  00000000  00000000  0004ebb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eee4  00000000  00000000  0006263a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ce0  00000000  00000000  000f1520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000f7200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080091a8 	.word	0x080091a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080091a8 	.word	0x080091a8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_fmul>:
 8000174:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000178:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800017c:	bf1e      	ittt	ne
 800017e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000182:	ea92 0f0c 	teqne	r2, ip
 8000186:	ea93 0f0c 	teqne	r3, ip
 800018a:	d06f      	beq.n	800026c <__aeabi_fmul+0xf8>
 800018c:	441a      	add	r2, r3
 800018e:	ea80 0c01 	eor.w	ip, r0, r1
 8000192:	0240      	lsls	r0, r0, #9
 8000194:	bf18      	it	ne
 8000196:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800019a:	d01e      	beq.n	80001da <__aeabi_fmul+0x66>
 800019c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a8:	fba0 3101 	umull	r3, r1, r0, r1
 80001ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b4:	bf3e      	ittt	cc
 80001b6:	0049      	lslcc	r1, r1, #1
 80001b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001bc:	005b      	lslcc	r3, r3, #1
 80001be:	ea40 0001 	orr.w	r0, r0, r1
 80001c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c6:	2afd      	cmp	r2, #253	; 0xfd
 80001c8:	d81d      	bhi.n	8000206 <__aeabi_fmul+0x92>
 80001ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001d2:	bf08      	it	eq
 80001d4:	f020 0001 	biceq.w	r0, r0, #1
 80001d8:	4770      	bx	lr
 80001da:	f090 0f00 	teq	r0, #0
 80001de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001e2:	bf08      	it	eq
 80001e4:	0249      	lsleq	r1, r1, #9
 80001e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ee:	3a7f      	subs	r2, #127	; 0x7f
 80001f0:	bfc2      	ittt	gt
 80001f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001fa:	4770      	bxgt	lr
 80001fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000200:	f04f 0300 	mov.w	r3, #0
 8000204:	3a01      	subs	r2, #1
 8000206:	dc5d      	bgt.n	80002c4 <__aeabi_fmul+0x150>
 8000208:	f112 0f19 	cmn.w	r2, #25
 800020c:	bfdc      	itt	le
 800020e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000212:	4770      	bxle	lr
 8000214:	f1c2 0200 	rsb	r2, r2, #0
 8000218:	0041      	lsls	r1, r0, #1
 800021a:	fa21 f102 	lsr.w	r1, r1, r2
 800021e:	f1c2 0220 	rsb	r2, r2, #32
 8000222:	fa00 fc02 	lsl.w	ip, r0, r2
 8000226:	ea5f 0031 	movs.w	r0, r1, rrx
 800022a:	f140 0000 	adc.w	r0, r0, #0
 800022e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000232:	bf08      	it	eq
 8000234:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000238:	4770      	bx	lr
 800023a:	f092 0f00 	teq	r2, #0
 800023e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0040      	lsleq	r0, r0, #1
 8000246:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800024a:	3a01      	subeq	r2, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xce>
 800024e:	ea40 000c 	orr.w	r0, r0, ip
 8000252:	f093 0f00 	teq	r3, #0
 8000256:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800025a:	bf02      	ittt	eq
 800025c:	0049      	lsleq	r1, r1, #1
 800025e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000262:	3b01      	subeq	r3, #1
 8000264:	d0f9      	beq.n	800025a <__aeabi_fmul+0xe6>
 8000266:	ea41 010c 	orr.w	r1, r1, ip
 800026a:	e78f      	b.n	800018c <__aeabi_fmul+0x18>
 800026c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000270:	ea92 0f0c 	teq	r2, ip
 8000274:	bf18      	it	ne
 8000276:	ea93 0f0c 	teqne	r3, ip
 800027a:	d00a      	beq.n	8000292 <__aeabi_fmul+0x11e>
 800027c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000280:	bf18      	it	ne
 8000282:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000286:	d1d8      	bne.n	800023a <__aeabi_fmul+0xc6>
 8000288:	ea80 0001 	eor.w	r0, r0, r1
 800028c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f090 0f00 	teq	r0, #0
 8000296:	bf17      	itett	ne
 8000298:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800029c:	4608      	moveq	r0, r1
 800029e:	f091 0f00 	teqne	r1, #0
 80002a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a6:	d014      	beq.n	80002d2 <__aeabi_fmul+0x15e>
 80002a8:	ea92 0f0c 	teq	r2, ip
 80002ac:	d101      	bne.n	80002b2 <__aeabi_fmul+0x13e>
 80002ae:	0242      	lsls	r2, r0, #9
 80002b0:	d10f      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002b2:	ea93 0f0c 	teq	r3, ip
 80002b6:	d103      	bne.n	80002c0 <__aeabi_fmul+0x14c>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	bf18      	it	ne
 80002bc:	4608      	movne	r0, r1
 80002be:	d108      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002c0:	ea80 0001 	eor.w	r0, r0, r1
 80002c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d0:	4770      	bx	lr
 80002d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002da:	4770      	bx	lr

080002dc <__aeabi_drsub>:
 80002dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	e002      	b.n	80002e8 <__adddf3>
 80002e2:	bf00      	nop

080002e4 <__aeabi_dsub>:
 80002e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e8 <__adddf3>:
 80002e8:	b530      	push	{r4, r5, lr}
 80002ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f2:	ea94 0f05 	teq	r4, r5
 80002f6:	bf08      	it	eq
 80002f8:	ea90 0f02 	teqeq	r0, r2
 80002fc:	bf1f      	itttt	ne
 80002fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000302:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000306:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030e:	f000 80e2 	beq.w	80004d6 <__adddf3+0x1ee>
 8000312:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000316:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031a:	bfb8      	it	lt
 800031c:	426d      	neglt	r5, r5
 800031e:	dd0c      	ble.n	800033a <__adddf3+0x52>
 8000320:	442c      	add	r4, r5
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	ea82 0000 	eor.w	r0, r2, r0
 800032e:	ea83 0101 	eor.w	r1, r3, r1
 8000332:	ea80 0202 	eor.w	r2, r0, r2
 8000336:	ea81 0303 	eor.w	r3, r1, r3
 800033a:	2d36      	cmp	r5, #54	; 0x36
 800033c:	bf88      	it	hi
 800033e:	bd30      	pophi	{r4, r5, pc}
 8000340:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000344:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000348:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800034c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x70>
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800035c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000360:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x84>
 8000366:	4252      	negs	r2, r2
 8000368:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036c:	ea94 0f05 	teq	r4, r5
 8000370:	f000 80a7 	beq.w	80004c2 <__adddf3+0x1da>
 8000374:	f1a4 0401 	sub.w	r4, r4, #1
 8000378:	f1d5 0e20 	rsbs	lr, r5, #32
 800037c:	db0d      	blt.n	800039a <__adddf3+0xb2>
 800037e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000382:	fa22 f205 	lsr.w	r2, r2, r5
 8000386:	1880      	adds	r0, r0, r2
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000390:	1880      	adds	r0, r0, r2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	4159      	adcs	r1, r3
 8000398:	e00e      	b.n	80003b8 <__adddf3+0xd0>
 800039a:	f1a5 0520 	sub.w	r5, r5, #32
 800039e:	f10e 0e20 	add.w	lr, lr, #32
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a8:	bf28      	it	cs
 80003aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	18c0      	adds	r0, r0, r3
 80003b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	d507      	bpl.n	80003ce <__adddf3+0xe6>
 80003be:	f04f 0e00 	mov.w	lr, #0
 80003c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d2:	d31b      	bcc.n	800040c <__adddf3+0x124>
 80003d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d8:	d30c      	bcc.n	80003f4 <__adddf3+0x10c>
 80003da:	0849      	lsrs	r1, r1, #1
 80003dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e4:	f104 0401 	add.w	r4, r4, #1
 80003e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f0:	f080 809a 	bcs.w	8000528 <__adddf3+0x240>
 80003f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f8:	bf08      	it	eq
 80003fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fe:	f150 0000 	adcs.w	r0, r0, #0
 8000402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000406:	ea41 0105 	orr.w	r1, r1, r5
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000410:	4140      	adcs	r0, r0
 8000412:	eb41 0101 	adc.w	r1, r1, r1
 8000416:	3c01      	subs	r4, #1
 8000418:	bf28      	it	cs
 800041a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041e:	d2e9      	bcs.n	80003f4 <__adddf3+0x10c>
 8000420:	f091 0f00 	teq	r1, #0
 8000424:	bf04      	itt	eq
 8000426:	4601      	moveq	r1, r0
 8000428:	2000      	moveq	r0, #0
 800042a:	fab1 f381 	clz	r3, r1
 800042e:	bf08      	it	eq
 8000430:	3320      	addeq	r3, #32
 8000432:	f1a3 030b 	sub.w	r3, r3, #11
 8000436:	f1b3 0220 	subs.w	r2, r3, #32
 800043a:	da0c      	bge.n	8000456 <__adddf3+0x16e>
 800043c:	320c      	adds	r2, #12
 800043e:	dd08      	ble.n	8000452 <__adddf3+0x16a>
 8000440:	f102 0c14 	add.w	ip, r2, #20
 8000444:	f1c2 020c 	rsb	r2, r2, #12
 8000448:	fa01 f00c 	lsl.w	r0, r1, ip
 800044c:	fa21 f102 	lsr.w	r1, r1, r2
 8000450:	e00c      	b.n	800046c <__adddf3+0x184>
 8000452:	f102 0214 	add.w	r2, r2, #20
 8000456:	bfd8      	it	le
 8000458:	f1c2 0c20 	rsble	ip, r2, #32
 800045c:	fa01 f102 	lsl.w	r1, r1, r2
 8000460:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000464:	bfdc      	itt	le
 8000466:	ea41 010c 	orrle.w	r1, r1, ip
 800046a:	4090      	lslle	r0, r2
 800046c:	1ae4      	subs	r4, r4, r3
 800046e:	bfa2      	ittt	ge
 8000470:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000474:	4329      	orrge	r1, r5
 8000476:	bd30      	popge	{r4, r5, pc}
 8000478:	ea6f 0404 	mvn.w	r4, r4
 800047c:	3c1f      	subs	r4, #31
 800047e:	da1c      	bge.n	80004ba <__adddf3+0x1d2>
 8000480:	340c      	adds	r4, #12
 8000482:	dc0e      	bgt.n	80004a2 <__adddf3+0x1ba>
 8000484:	f104 0414 	add.w	r4, r4, #20
 8000488:	f1c4 0220 	rsb	r2, r4, #32
 800048c:	fa20 f004 	lsr.w	r0, r0, r4
 8000490:	fa01 f302 	lsl.w	r3, r1, r2
 8000494:	ea40 0003 	orr.w	r0, r0, r3
 8000498:	fa21 f304 	lsr.w	r3, r1, r4
 800049c:	ea45 0103 	orr.w	r1, r5, r3
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f1c4 040c 	rsb	r4, r4, #12
 80004a6:	f1c4 0220 	rsb	r2, r4, #32
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 f304 	lsl.w	r3, r1, r4
 80004b2:	ea40 0003 	orr.w	r0, r0, r3
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	fa21 f004 	lsr.w	r0, r1, r4
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	f094 0f00 	teq	r4, #0
 80004c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ca:	bf06      	itte	eq
 80004cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d0:	3401      	addeq	r4, #1
 80004d2:	3d01      	subne	r5, #1
 80004d4:	e74e      	b.n	8000374 <__adddf3+0x8c>
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf18      	it	ne
 80004dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e0:	d029      	beq.n	8000536 <__adddf3+0x24e>
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	d005      	beq.n	80004fa <__adddf3+0x212>
 80004ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f2:	bf04      	itt	eq
 80004f4:	4619      	moveq	r1, r3
 80004f6:	4610      	moveq	r0, r2
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea91 0f03 	teq	r1, r3
 80004fe:	bf1e      	ittt	ne
 8000500:	2100      	movne	r1, #0
 8000502:	2000      	movne	r0, #0
 8000504:	bd30      	popne	{r4, r5, pc}
 8000506:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050a:	d105      	bne.n	8000518 <__adddf3+0x230>
 800050c:	0040      	lsls	r0, r0, #1
 800050e:	4149      	adcs	r1, r1
 8000510:	bf28      	it	cs
 8000512:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000516:	bd30      	pop	{r4, r5, pc}
 8000518:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800051c:	bf3c      	itt	cc
 800051e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000522:	bd30      	popcc	{r4, r5, pc}
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800052c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000530:	f04f 0000 	mov.w	r0, #0
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053a:	bf1a      	itte	ne
 800053c:	4619      	movne	r1, r3
 800053e:	4610      	movne	r0, r2
 8000540:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000544:	bf1c      	itt	ne
 8000546:	460b      	movne	r3, r1
 8000548:	4602      	movne	r2, r0
 800054a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054e:	bf06      	itte	eq
 8000550:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000554:	ea91 0f03 	teqeq	r1, r3
 8000558:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	bf00      	nop

08000560 <__aeabi_ui2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000574:	f04f 0500 	mov.w	r5, #0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e750      	b.n	8000420 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_i2d>:
 8000580:	f090 0f00 	teq	r0, #0
 8000584:	bf04      	itt	eq
 8000586:	2100      	moveq	r1, #0
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000590:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000594:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000598:	bf48      	it	mi
 800059a:	4240      	negmi	r0, r0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e73e      	b.n	8000420 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_f2d>:
 80005a4:	0042      	lsls	r2, r0, #1
 80005a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b2:	bf1f      	itttt	ne
 80005b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c0:	4770      	bxne	lr
 80005c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c6:	bf08      	it	eq
 80005c8:	4770      	bxeq	lr
 80005ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ce:	bf04      	itt	eq
 80005d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d4:	4770      	bxeq	lr
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	e71c      	b.n	8000420 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_ul2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	e00a      	b.n	800060e <__aeabi_l2d+0x16>

080005f8 <__aeabi_l2d>:
 80005f8:	ea50 0201 	orrs.w	r2, r0, r1
 80005fc:	bf08      	it	eq
 80005fe:	4770      	bxeq	lr
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000606:	d502      	bpl.n	800060e <__aeabi_l2d+0x16>
 8000608:	4240      	negs	r0, r0
 800060a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000612:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061a:	f43f aed8 	beq.w	80003ce <__adddf3+0xe6>
 800061e:	f04f 0203 	mov.w	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000636:	f1c2 0320 	rsb	r3, r2, #32
 800063a:	fa00 fc03 	lsl.w	ip, r0, r3
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 fe03 	lsl.w	lr, r1, r3
 8000646:	ea40 000e 	orr.w	r0, r0, lr
 800064a:	fa21 f102 	lsr.w	r1, r1, r2
 800064e:	4414      	add	r4, r2
 8000650:	e6bd      	b.n	80003ce <__adddf3+0xe6>
 8000652:	bf00      	nop

08000654 <__aeabi_dmul>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000662:	bf1d      	ittte	ne
 8000664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000668:	ea94 0f0c 	teqne	r4, ip
 800066c:	ea95 0f0c 	teqne	r5, ip
 8000670:	f000 f8de 	bleq	8000830 <__aeabi_dmul+0x1dc>
 8000674:	442c      	add	r4, r5
 8000676:	ea81 0603 	eor.w	r6, r1, r3
 800067a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000686:	bf18      	it	ne
 8000688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000694:	d038      	beq.n	8000708 <__aeabi_dmul+0xb4>
 8000696:	fba0 ce02 	umull	ip, lr, r0, r2
 800069a:	f04f 0500 	mov.w	r5, #0
 800069e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006aa:	f04f 0600 	mov.w	r6, #0
 80006ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b2:	f09c 0f00 	teq	ip, #0
 80006b6:	bf18      	it	ne
 80006b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c8:	d204      	bcs.n	80006d4 <__aeabi_dmul+0x80>
 80006ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ce:	416d      	adcs	r5, r5
 80006d0:	eb46 0606 	adc.w	r6, r6, r6
 80006d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ec:	bf88      	it	hi
 80006ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f2:	d81e      	bhi.n	8000732 <__aeabi_dmul+0xde>
 80006f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fe:	f150 0000 	adcs.w	r0, r0, #0
 8000702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800070c:	ea46 0101 	orr.w	r1, r6, r1
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	f300 80ab 	bgt.w	800088c <__aeabi_dmul+0x238>
 8000736:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073a:	bfde      	ittt	le
 800073c:	2000      	movle	r0, #0
 800073e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000742:	bd70      	pople	{r4, r5, r6, pc}
 8000744:	f1c4 0400 	rsb	r4, r4, #0
 8000748:	3c20      	subs	r4, #32
 800074a:	da35      	bge.n	80007b8 <__aeabi_dmul+0x164>
 800074c:	340c      	adds	r4, #12
 800074e:	dc1b      	bgt.n	8000788 <__aeabi_dmul+0x134>
 8000750:	f104 0414 	add.w	r4, r4, #20
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f305 	lsl.w	r3, r0, r5
 800075c:	fa20 f004 	lsr.w	r0, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	fa21 f604 	lsr.w	r6, r1, r4
 8000778:	eb42 0106 	adc.w	r1, r2, r6
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f1c4 040c 	rsb	r4, r4, #12
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f304 	lsl.w	r3, r0, r4
 8000794:	fa20 f005 	lsr.w	r0, r0, r5
 8000798:	fa01 f204 	lsl.w	r2, r1, r4
 800079c:	ea40 0002 	orr.w	r0, r0, r2
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	f141 0100 	adc.w	r1, r1, #0
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f205 	lsl.w	r2, r0, r5
 80007c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c4:	fa20 f304 	lsr.w	r3, r0, r4
 80007c8:	fa01 f205 	lsl.w	r2, r1, r5
 80007cc:	ea43 0302 	orr.w	r3, r3, r2
 80007d0:	fa21 f004 	lsr.w	r0, r1, r4
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	fa21 f204 	lsr.w	r2, r1, r4
 80007dc:	ea20 0002 	bic.w	r0, r0, r2
 80007e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f094 0f00 	teq	r4, #0
 80007f4:	d10f      	bne.n	8000816 <__aeabi_dmul+0x1c2>
 80007f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fa:	0040      	lsls	r0, r0, #1
 80007fc:	eb41 0101 	adc.w	r1, r1, r1
 8000800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000804:	bf08      	it	eq
 8000806:	3c01      	subeq	r4, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1a6>
 800080a:	ea41 0106 	orr.w	r1, r1, r6
 800080e:	f095 0f00 	teq	r5, #0
 8000812:	bf18      	it	ne
 8000814:	4770      	bxne	lr
 8000816:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	eb43 0303 	adc.w	r3, r3, r3
 8000820:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000824:	bf08      	it	eq
 8000826:	3d01      	subeq	r5, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1c6>
 800082a:	ea43 0306 	orr.w	r3, r3, r6
 800082e:	4770      	bx	lr
 8000830:	ea94 0f0c 	teq	r4, ip
 8000834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000838:	bf18      	it	ne
 800083a:	ea95 0f0c 	teqne	r5, ip
 800083e:	d00c      	beq.n	800085a <__aeabi_dmul+0x206>
 8000840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000844:	bf18      	it	ne
 8000846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084a:	d1d1      	bne.n	80007f0 <__aeabi_dmul+0x19c>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085e:	bf06      	itte	eq
 8000860:	4610      	moveq	r0, r2
 8000862:	4619      	moveq	r1, r3
 8000864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000868:	d019      	beq.n	800089e <__aeabi_dmul+0x24a>
 800086a:	ea94 0f0c 	teq	r4, ip
 800086e:	d102      	bne.n	8000876 <__aeabi_dmul+0x222>
 8000870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000874:	d113      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000876:	ea95 0f0c 	teq	r5, ip
 800087a:	d105      	bne.n	8000888 <__aeabi_dmul+0x234>
 800087c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000880:	bf1c      	itt	ne
 8000882:	4610      	movne	r0, r2
 8000884:	4619      	movne	r1, r3
 8000886:	d10a      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000890:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000894:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <__aeabi_ddiv>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b6:	bf1d      	ittte	ne
 80008b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008bc:	ea94 0f0c 	teqne	r4, ip
 80008c0:	ea95 0f0c 	teqne	r5, ip
 80008c4:	f000 f8a7 	bleq	8000a16 <__aeabi_ddiv+0x16e>
 80008c8:	eba4 0405 	sub.w	r4, r4, r5
 80008cc:	ea81 0e03 	eor.w	lr, r1, r3
 80008d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d8:	f000 8088 	beq.w	80009ec <__aeabi_ddiv+0x144>
 80008dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000900:	429d      	cmp	r5, r3
 8000902:	bf08      	it	eq
 8000904:	4296      	cmpeq	r6, r2
 8000906:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090e:	d202      	bcs.n	8000916 <__aeabi_ddiv+0x6e>
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	1ab6      	subs	r6, r6, r2
 8000918:	eb65 0503 	sbc.w	r5, r5, r3
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000926:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000984:	ea55 0e06 	orrs.w	lr, r5, r6
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x114>
 800098a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000992:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a6:	d1c0      	bne.n	800092a <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	d10b      	bne.n	80009c6 <__aeabi_ddiv+0x11e>
 80009ae:	ea41 0100 	orr.w	r1, r1, r0
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ba:	e7b6      	b.n	800092a <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	bf04      	itt	eq
 80009c2:	4301      	orreq	r1, r0
 80009c4:	2000      	moveq	r0, #0
 80009c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ca:	bf88      	it	hi
 80009cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d0:	f63f aeaf 	bhi.w	8000732 <__aeabi_dmul+0xde>
 80009d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d8:	bf04      	itt	eq
 80009da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f8:	bfc2      	ittt	gt
 80009fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	popgt	{r4, r5, r6, pc}
 8000a04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a08:	f04f 0e00 	mov.w	lr, #0
 8000a0c:	3c01      	subs	r4, #1
 8000a0e:	e690      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a10:	ea45 0e06 	orr.w	lr, r5, r6
 8000a14:	e68d      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1a:	ea94 0f0c 	teq	r4, ip
 8000a1e:	bf08      	it	eq
 8000a20:	ea95 0f0c 	teqeq	r5, ip
 8000a24:	f43f af3b 	beq.w	800089e <__aeabi_dmul+0x24a>
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	d10a      	bne.n	8000a44 <__aeabi_ddiv+0x19c>
 8000a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a32:	f47f af34 	bne.w	800089e <__aeabi_dmul+0x24a>
 8000a36:	ea95 0f0c 	teq	r5, ip
 8000a3a:	f47f af25 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e72c      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a44:	ea95 0f0c 	teq	r5, ip
 8000a48:	d106      	bne.n	8000a58 <__aeabi_ddiv+0x1b0>
 8000a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4e:	f43f aefd 	beq.w	800084c <__aeabi_dmul+0x1f8>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e722      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a62:	f47f aec5 	bne.w	80007f0 <__aeabi_dmul+0x19c>
 8000a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6a:	f47f af0d 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a72:	f47f aeeb 	bne.w	800084c <__aeabi_dmul+0x1f8>
 8000a76:	e712      	b.n	800089e <__aeabi_dmul+0x24a>

08000a78 <__gedf2>:
 8000a78:	f04f 3cff 	mov.w	ip, #4294967295
 8000a7c:	e006      	b.n	8000a8c <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__ledf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	e002      	b.n	8000a8c <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__cmpdf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa2:	d01b      	beq.n	8000adc <__cmpdf2+0x54>
 8000aa4:	b001      	add	sp, #4
 8000aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aaa:	bf0c      	ite	eq
 8000aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab0:	ea91 0f03 	teqne	r1, r3
 8000ab4:	bf02      	ittt	eq
 8000ab6:	ea90 0f02 	teqeq	r0, r2
 8000aba:	2000      	moveq	r0, #0
 8000abc:	4770      	bxeq	lr
 8000abe:	f110 0f00 	cmn.w	r0, #0
 8000ac2:	ea91 0f03 	teq	r1, r3
 8000ac6:	bf58      	it	pl
 8000ac8:	4299      	cmppl	r1, r3
 8000aca:	bf08      	it	eq
 8000acc:	4290      	cmpeq	r0, r2
 8000ace:	bf2c      	ite	cs
 8000ad0:	17d8      	asrcs	r0, r3, #31
 8000ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad6:	f040 0001 	orr.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__cmpdf2+0x64>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d107      	bne.n	8000afc <__cmpdf2+0x74>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d1d6      	bne.n	8000aa4 <__cmpdf2+0x1c>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d0d3      	beq.n	8000aa4 <__cmpdf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cdrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4610      	mov	r0, r2
 8000b08:	4662      	mov	r2, ip
 8000b0a:	468c      	mov	ip, r1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4663      	mov	r3, ip
 8000b10:	e000      	b.n	8000b14 <__aeabi_cdcmpeq>
 8000b12:	bf00      	nop

08000b14 <__aeabi_cdcmpeq>:
 8000b14:	b501      	push	{r0, lr}
 8000b16:	f7ff ffb7 	bl	8000a88 <__cmpdf2>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf48      	it	mi
 8000b1e:	f110 0f00 	cmnmi.w	r0, #0
 8000b22:	bd01      	pop	{r0, pc}

08000b24 <__aeabi_dcmpeq>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff fff4 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2001      	moveq	r0, #1
 8000b30:	2000      	movne	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmplt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffea 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmple>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffe0 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpge>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffce 	bl	8000b04 <__aeabi_cdrcmple>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpgt>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffc4 	bl	8000b04 <__aeabi_cdrcmple>
 8000b7c:	bf34      	ite	cc
 8000b7e:	2001      	movcc	r0, #1
 8000b80:	2000      	movcs	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpun>:
 8000b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d102      	bne.n	8000b98 <__aeabi_dcmpun+0x10>
 8000b92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b96:	d10a      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_dcmpun+0x20>
 8000ba2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0001 	mov.w	r0, #1
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2iz>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bbc:	d215      	bcs.n	8000bea <__aeabi_d2iz+0x36>
 8000bbe:	d511      	bpl.n	8000be4 <__aeabi_d2iz+0x30>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d912      	bls.n	8000bf0 <__aeabi_d2iz+0x3c>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	bf18      	it	ne
 8000be0:	4240      	negne	r0, r0
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d105      	bne.n	8000bfc <__aeabi_d2iz+0x48>
 8000bf0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	bf08      	it	eq
 8000bf6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfa:	4770      	bx	lr
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_d2uiz>:
 8000c04:	004a      	lsls	r2, r1, #1
 8000c06:	d211      	bcs.n	8000c2c <__aeabi_d2uiz+0x28>
 8000c08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c0c:	d211      	bcs.n	8000c32 <__aeabi_d2uiz+0x2e>
 8000c0e:	d50d      	bpl.n	8000c2c <__aeabi_d2uiz+0x28>
 8000c10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c18:	d40e      	bmi.n	8000c38 <__aeabi_d2uiz+0x34>
 8000c1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c26:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2a:	4770      	bx	lr
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c36:	d102      	bne.n	8000c3e <__aeabi_d2uiz+0x3a>
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	4770      	bx	lr
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_d2f>:
 8000c44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c4c:	bf24      	itt	cs
 8000c4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c56:	d90d      	bls.n	8000c74 <__aeabi_d2f+0x30>
 8000c58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c6c:	bf08      	it	eq
 8000c6e:	f020 0001 	biceq.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c78:	d121      	bne.n	8000cbe <__aeabi_d2f+0x7a>
 8000c7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c7e:	bfbc      	itt	lt
 8000c80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	4770      	bxlt	lr
 8000c86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c8e:	f1c2 0218 	rsb	r2, r2, #24
 8000c92:	f1c2 0c20 	rsb	ip, r2, #32
 8000c96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c9e:	bf18      	it	ne
 8000ca0:	f040 0001 	orrne.w	r0, r0, #1
 8000ca4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb0:	ea40 000c 	orr.w	r0, r0, ip
 8000cb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cbc:	e7cc      	b.n	8000c58 <__aeabi_d2f+0x14>
 8000cbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc2:	d107      	bne.n	8000cd4 <__aeabi_d2f+0x90>
 8000cc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc8:	bf1e      	ittt	ne
 8000cca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd2:	4770      	bxne	lr
 8000cd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_frsub>:
 8000ce4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ce8:	e002      	b.n	8000cf0 <__addsf3>
 8000cea:	bf00      	nop

08000cec <__aeabi_fsub>:
 8000cec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cf0 <__addsf3>:
 8000cf0:	0042      	lsls	r2, r0, #1
 8000cf2:	bf1f      	itttt	ne
 8000cf4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cf8:	ea92 0f03 	teqne	r2, r3
 8000cfc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d04:	d06a      	beq.n	8000ddc <__addsf3+0xec>
 8000d06:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d0e:	bfc1      	itttt	gt
 8000d10:	18d2      	addgt	r2, r2, r3
 8000d12:	4041      	eorgt	r1, r0
 8000d14:	4048      	eorgt	r0, r1
 8000d16:	4041      	eorgt	r1, r0
 8000d18:	bfb8      	it	lt
 8000d1a:	425b      	neglt	r3, r3
 8000d1c:	2b19      	cmp	r3, #25
 8000d1e:	bf88      	it	hi
 8000d20:	4770      	bxhi	lr
 8000d22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d2e:	bf18      	it	ne
 8000d30:	4240      	negne	r0, r0
 8000d32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d3e:	bf18      	it	ne
 8000d40:	4249      	negne	r1, r1
 8000d42:	ea92 0f03 	teq	r2, r3
 8000d46:	d03f      	beq.n	8000dc8 <__addsf3+0xd8>
 8000d48:	f1a2 0201 	sub.w	r2, r2, #1
 8000d4c:	fa41 fc03 	asr.w	ip, r1, r3
 8000d50:	eb10 000c 	adds.w	r0, r0, ip
 8000d54:	f1c3 0320 	rsb	r3, r3, #32
 8000d58:	fa01 f103 	lsl.w	r1, r1, r3
 8000d5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d60:	d502      	bpl.n	8000d68 <__addsf3+0x78>
 8000d62:	4249      	negs	r1, r1
 8000d64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d6c:	d313      	bcc.n	8000d96 <__addsf3+0xa6>
 8000d6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d72:	d306      	bcc.n	8000d82 <__addsf3+0x92>
 8000d74:	0840      	lsrs	r0, r0, #1
 8000d76:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d7a:	f102 0201 	add.w	r2, r2, #1
 8000d7e:	2afe      	cmp	r2, #254	; 0xfe
 8000d80:	d251      	bcs.n	8000e26 <__addsf3+0x136>
 8000d82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8a:	bf08      	it	eq
 8000d8c:	f020 0001 	biceq.w	r0, r0, #1
 8000d90:	ea40 0003 	orr.w	r0, r0, r3
 8000d94:	4770      	bx	lr
 8000d96:	0049      	lsls	r1, r1, #1
 8000d98:	eb40 0000 	adc.w	r0, r0, r0
 8000d9c:	3a01      	subs	r2, #1
 8000d9e:	bf28      	it	cs
 8000da0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000da4:	d2ed      	bcs.n	8000d82 <__addsf3+0x92>
 8000da6:	fab0 fc80 	clz	ip, r0
 8000daa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000dae:	ebb2 020c 	subs.w	r2, r2, ip
 8000db2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000db6:	bfaa      	itet	ge
 8000db8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000dbc:	4252      	neglt	r2, r2
 8000dbe:	4318      	orrge	r0, r3
 8000dc0:	bfbc      	itt	lt
 8000dc2:	40d0      	lsrlt	r0, r2
 8000dc4:	4318      	orrlt	r0, r3
 8000dc6:	4770      	bx	lr
 8000dc8:	f092 0f00 	teq	r2, #0
 8000dcc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dd0:	bf06      	itte	eq
 8000dd2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dd6:	3201      	addeq	r2, #1
 8000dd8:	3b01      	subne	r3, #1
 8000dda:	e7b5      	b.n	8000d48 <__addsf3+0x58>
 8000ddc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000de4:	bf18      	it	ne
 8000de6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dea:	d021      	beq.n	8000e30 <__addsf3+0x140>
 8000dec:	ea92 0f03 	teq	r2, r3
 8000df0:	d004      	beq.n	8000dfc <__addsf3+0x10c>
 8000df2:	f092 0f00 	teq	r2, #0
 8000df6:	bf08      	it	eq
 8000df8:	4608      	moveq	r0, r1
 8000dfa:	4770      	bx	lr
 8000dfc:	ea90 0f01 	teq	r0, r1
 8000e00:	bf1c      	itt	ne
 8000e02:	2000      	movne	r0, #0
 8000e04:	4770      	bxne	lr
 8000e06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000e0a:	d104      	bne.n	8000e16 <__addsf3+0x126>
 8000e0c:	0040      	lsls	r0, r0, #1
 8000e0e:	bf28      	it	cs
 8000e10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e1a:	bf3c      	itt	cc
 8000e1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e20:	4770      	bxcc	lr
 8000e22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e2e:	4770      	bx	lr
 8000e30:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e34:	bf16      	itet	ne
 8000e36:	4608      	movne	r0, r1
 8000e38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e3c:	4601      	movne	r1, r0
 8000e3e:	0242      	lsls	r2, r0, #9
 8000e40:	bf06      	itte	eq
 8000e42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e46:	ea90 0f01 	teqeq	r0, r1
 8000e4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e4e:	4770      	bx	lr

08000e50 <__aeabi_ui2f>:
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e004      	b.n	8000e60 <__aeabi_i2f+0x8>
 8000e56:	bf00      	nop

08000e58 <__aeabi_i2f>:
 8000e58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e5c:	bf48      	it	mi
 8000e5e:	4240      	negmi	r0, r0
 8000e60:	ea5f 0c00 	movs.w	ip, r0
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e6c:	4601      	mov	r1, r0
 8000e6e:	f04f 0000 	mov.w	r0, #0
 8000e72:	e01c      	b.n	8000eae <__aeabi_l2f+0x2a>

08000e74 <__aeabi_ul2f>:
 8000e74:	ea50 0201 	orrs.w	r2, r0, r1
 8000e78:	bf08      	it	eq
 8000e7a:	4770      	bxeq	lr
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	e00a      	b.n	8000e98 <__aeabi_l2f+0x14>
 8000e82:	bf00      	nop

08000e84 <__aeabi_l2f>:
 8000e84:	ea50 0201 	orrs.w	r2, r0, r1
 8000e88:	bf08      	it	eq
 8000e8a:	4770      	bxeq	lr
 8000e8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	d502      	bpl.n	8000e98 <__aeabi_l2f+0x14>
 8000e92:	4240      	negs	r0, r0
 8000e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e98:	ea5f 0c01 	movs.w	ip, r1
 8000e9c:	bf02      	ittt	eq
 8000e9e:	4684      	moveq	ip, r0
 8000ea0:	4601      	moveq	r1, r0
 8000ea2:	2000      	moveq	r0, #0
 8000ea4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ea8:	bf08      	it	eq
 8000eaa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000eae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000eb2:	fabc f28c 	clz	r2, ip
 8000eb6:	3a08      	subs	r2, #8
 8000eb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ebc:	db10      	blt.n	8000ee0 <__aeabi_l2f+0x5c>
 8000ebe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec8:	f1c2 0220 	rsb	r2, r2, #32
 8000ecc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ed0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ed4:	eb43 0002 	adc.w	r0, r3, r2
 8000ed8:	bf08      	it	eq
 8000eda:	f020 0001 	biceq.w	r0, r0, #1
 8000ede:	4770      	bx	lr
 8000ee0:	f102 0220 	add.w	r2, r2, #32
 8000ee4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ee8:	f1c2 0220 	rsb	r2, r2, #32
 8000eec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ef0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ef4:	eb43 0002 	adc.w	r0, r3, r2
 8000ef8:	bf08      	it	eq
 8000efa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000efe:	4770      	bx	lr

08000f00 <__gesf2>:
 8000f00:	f04f 3cff 	mov.w	ip, #4294967295
 8000f04:	e006      	b.n	8000f14 <__cmpsf2+0x4>
 8000f06:	bf00      	nop

08000f08 <__lesf2>:
 8000f08:	f04f 0c01 	mov.w	ip, #1
 8000f0c:	e002      	b.n	8000f14 <__cmpsf2+0x4>
 8000f0e:	bf00      	nop

08000f10 <__cmpsf2>:
 8000f10:	f04f 0c01 	mov.w	ip, #1
 8000f14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f24:	bf18      	it	ne
 8000f26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f2a:	d011      	beq.n	8000f50 <__cmpsf2+0x40>
 8000f2c:	b001      	add	sp, #4
 8000f2e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f32:	bf18      	it	ne
 8000f34:	ea90 0f01 	teqne	r0, r1
 8000f38:	bf58      	it	pl
 8000f3a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f3e:	bf88      	it	hi
 8000f40:	17c8      	asrhi	r0, r1, #31
 8000f42:	bf38      	it	cc
 8000f44:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f48:	bf18      	it	ne
 8000f4a:	f040 0001 	orrne.w	r0, r0, #1
 8000f4e:	4770      	bx	lr
 8000f50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f54:	d102      	bne.n	8000f5c <__cmpsf2+0x4c>
 8000f56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f5a:	d105      	bne.n	8000f68 <__cmpsf2+0x58>
 8000f5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f60:	d1e4      	bne.n	8000f2c <__cmpsf2+0x1c>
 8000f62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f66:	d0e1      	beq.n	8000f2c <__cmpsf2+0x1c>
 8000f68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <__aeabi_cfrcmple>:
 8000f70:	4684      	mov	ip, r0
 8000f72:	4608      	mov	r0, r1
 8000f74:	4661      	mov	r1, ip
 8000f76:	e7ff      	b.n	8000f78 <__aeabi_cfcmpeq>

08000f78 <__aeabi_cfcmpeq>:
 8000f78:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f7a:	f7ff ffc9 	bl	8000f10 <__cmpsf2>
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	bf48      	it	mi
 8000f82:	f110 0f00 	cmnmi.w	r0, #0
 8000f86:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f88 <__aeabi_fcmpeq>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff fff4 	bl	8000f78 <__aeabi_cfcmpeq>
 8000f90:	bf0c      	ite	eq
 8000f92:	2001      	moveq	r0, #1
 8000f94:	2000      	movne	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmplt>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffea 	bl	8000f78 <__aeabi_cfcmpeq>
 8000fa4:	bf34      	ite	cc
 8000fa6:	2001      	movcc	r0, #1
 8000fa8:	2000      	movcs	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmple>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffe0 	bl	8000f78 <__aeabi_cfcmpeq>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpge>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffd2 	bl	8000f70 <__aeabi_cfrcmple>
 8000fcc:	bf94      	ite	ls
 8000fce:	2001      	movls	r0, #1
 8000fd0:	2000      	movhi	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_fcmpgt>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff ffc8 	bl	8000f70 <__aeabi_cfrcmple>
 8000fe0:	bf34      	ite	cc
 8000fe2:	2001      	movcc	r0, #1
 8000fe4:	2000      	movcs	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_d2lz>:
 8000fec:	b538      	push	{r3, r4, r5, lr}
 8000fee:	4605      	mov	r5, r0
 8000ff0:	460c      	mov	r4, r1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	4621      	mov	r1, r4
 8000ffa:	f7ff fd9d 	bl	8000b38 <__aeabi_dcmplt>
 8000ffe:	b928      	cbnz	r0, 800100c <__aeabi_d2lz+0x20>
 8001000:	4628      	mov	r0, r5
 8001002:	4621      	mov	r1, r4
 8001004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001008:	f000 b80a 	b.w	8001020 <__aeabi_d2ulz>
 800100c:	4628      	mov	r0, r5
 800100e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001012:	f000 f805 	bl	8001020 <__aeabi_d2ulz>
 8001016:	4240      	negs	r0, r0
 8001018:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800101c:	bd38      	pop	{r3, r4, r5, pc}
 800101e:	bf00      	nop

08001020 <__aeabi_d2ulz>:
 8001020:	b5d0      	push	{r4, r6, r7, lr}
 8001022:	2200      	movs	r2, #0
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <__aeabi_d2ulz+0x34>)
 8001026:	4606      	mov	r6, r0
 8001028:	460f      	mov	r7, r1
 800102a:	f7ff fb13 	bl	8000654 <__aeabi_dmul>
 800102e:	f7ff fde9 	bl	8000c04 <__aeabi_d2uiz>
 8001032:	4604      	mov	r4, r0
 8001034:	f7ff fa94 	bl	8000560 <__aeabi_ui2d>
 8001038:	2200      	movs	r2, #0
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <__aeabi_d2ulz+0x38>)
 800103c:	f7ff fb0a 	bl	8000654 <__aeabi_dmul>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4630      	mov	r0, r6
 8001046:	4639      	mov	r1, r7
 8001048:	f7ff f94c 	bl	80002e4 <__aeabi_dsub>
 800104c:	f7ff fdda 	bl	8000c04 <__aeabi_d2uiz>
 8001050:	4621      	mov	r1, r4
 8001052:	bdd0      	pop	{r4, r6, r7, pc}
 8001054:	3df00000 	.word	0x3df00000
 8001058:	41f00000 	.word	0x41f00000

0800105c <hSCH_Init>:

sTaskTCB hSCH_tasks_G[hSCH_MAX_TASKS];


void hSCH_Init(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0;i < hSCH_MAX_TASKS;i ++)
 8001062:	2300      	movs	r3, #0
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	e02b      	b.n	80010c0 <hSCH_Init+0x64>
    {
        hSCH_tasks_G[i].pTask  = NULL;
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <hSCH_Init+0x78>)
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	4413      	add	r3, r2
 8001070:	330c      	adds	r3, #12
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
        hSCH_tasks_G[i].Delay  = 0;
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <hSCH_Init+0x78>)
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	4413      	add	r3, r2
 800107e:	3304      	adds	r3, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
        hSCH_tasks_G[i].Period = 0;
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <hSCH_Init+0x78>)
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	4413      	add	r3, r2
 800108c:	3308      	adds	r3, #8
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
        hSCH_tasks_G[i].RunMe  = 0;
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <hSCH_Init+0x78>)
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	4413      	add	r3, r2
 800109a:	3301      	adds	r3, #1
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
        hSCH_tasks_G[i].Co_op  = 1;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <hSCH_Init+0x78>)
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	3302      	adds	r3, #2
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
        hSCH_tasks_G[i].Enable = 0;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <hSCH_Init+0x78>)
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4413      	add	r3, r2
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
    for(i = 0;i < hSCH_MAX_TASKS;i ++)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	3301      	adds	r3, #1
 80010be:	71fb      	strb	r3, [r7, #7]
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d9d0      	bls.n	8001068 <hSCH_Init+0xc>
    }
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200001f4 	.word	0x200001f4

080010d8 <SCH_Start>:


void SCH_Start(TIM_HandleTypeDef *htim)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(htim);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f002 ff49 	bl	8003f78 <HAL_TIM_Base_Start_IT>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <hSCH_Dispatch_Tasks>:


void hSCH_Dispatch_Tasks(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
   uint8_t Index;

    for (Index = 0; Index < hSCH_MAX_TASKS; Index++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	e03f      	b.n	800117c <hSCH_Dispatch_Tasks+0x8c>
    {
        if ((hSCH_tasks_G[Index].Co_op) && (hSCH_tasks_G[Index].RunMe > 0))
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	4a23      	ldr	r2, [pc, #140]	; (800118c <hSCH_Dispatch_Tasks+0x9c>)
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4413      	add	r3, r2
 8001104:	3302      	adds	r3, #2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d025      	beq.n	8001158 <hSCH_Dispatch_Tasks+0x68>
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4a1f      	ldr	r2, [pc, #124]	; (800118c <hSCH_Dispatch_Tasks+0x9c>)
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	4413      	add	r3, r2
 8001114:	3301      	adds	r3, #1
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d01d      	beq.n	8001158 <hSCH_Dispatch_Tasks+0x68>
        {
            if(hSCH_tasks_G[Index].pTask != NULL)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	4a1b      	ldr	r2, [pc, #108]	; (800118c <hSCH_Dispatch_Tasks+0x9c>)
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	4413      	add	r3, r2
 8001124:	330c      	adds	r3, #12
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <hSCH_Dispatch_Tasks+0x4a>
            {
                hSCH_tasks_G[Index].pTask();
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <hSCH_Dispatch_Tasks+0x9c>)
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	4413      	add	r3, r2
 8001134:	330c      	adds	r3, #12
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4798      	blx	r3
            }
            hSCH_tasks_G[Index].RunMe -= 1;
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	4a13      	ldr	r2, [pc, #76]	; (800118c <hSCH_Dispatch_Tasks+0x9c>)
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	4413      	add	r3, r2
 8001142:	3301      	adds	r3, #1
 8001144:	781a      	ldrb	r2, [r3, #0]
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	3a01      	subs	r2, #1
 800114a:	b2d1      	uxtb	r1, r2
 800114c:	4a0f      	ldr	r2, [pc, #60]	; (800118c <hSCH_Dispatch_Tasks+0x9c>)
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	3301      	adds	r3, #1
 8001154:	460a      	mov	r2, r1
 8001156:	701a      	strb	r2, [r3, #0]
        }

        if (hSCH_tasks_G[Index].Period == 0)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <hSCH_Dispatch_Tasks+0x9c>)
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	4413      	add	r3, r2
 8001160:	3308      	adds	r3, #8
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d106      	bne.n	8001176 <hSCH_Dispatch_Tasks+0x86>
        {
            hSCH_tasks_G[Index].pTask = NULL;
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <hSCH_Dispatch_Tasks+0x9c>)
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	4413      	add	r3, r2
 8001170:	330c      	adds	r3, #12
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
    for (Index = 0; Index < hSCH_MAX_TASKS; Index++)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	3301      	adds	r3, #1
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d9bc      	bls.n	80010fc <hSCH_Dispatch_Tasks+0xc>
        }
    }
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200001f4 	.word	0x200001f4

08001190 <SCH_Add_Task>:

sTaskTCB *SCH_Add_Task(TASK_SCH *pFunction, uint32_t DELAY, uint32_t PERIOD,uint8_t task_mode,uint8_t ENABLE)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	70fb      	strb	r3, [r7, #3]
    static uint8_t Index = 0;
    if (Index < hSCH_MAX_TASKS)
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <SCH_Add_Task+0x98>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d834      	bhi.n	8001210 <SCH_Add_Task+0x80>
    {
        hSCH_tasks_G[Index].pTask  = pFunction;
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <SCH_Add_Task+0x98>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	4a20      	ldr	r2, [pc, #128]	; (800122c <SCH_Add_Task+0x9c>)
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	4413      	add	r3, r2
 80011b0:	330c      	adds	r3, #12
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	601a      	str	r2, [r3, #0]
        hSCH_tasks_G[Index].Delay  = DELAY;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <SCH_Add_Task+0x98>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4a1c      	ldr	r2, [pc, #112]	; (800122c <SCH_Add_Task+0x9c>)
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	4413      	add	r3, r2
 80011c0:	3304      	adds	r3, #4
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	601a      	str	r2, [r3, #0]
        hSCH_tasks_G[Index].Period = PERIOD;
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <SCH_Add_Task+0x98>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4a18      	ldr	r2, [pc, #96]	; (800122c <SCH_Add_Task+0x9c>)
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	4413      	add	r3, r2
 80011d0:	3308      	adds	r3, #8
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]
        hSCH_tasks_G[Index].RunMe  = 0;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <SCH_Add_Task+0x98>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <SCH_Add_Task+0x9c>)
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	4413      	add	r3, r2
 80011e0:	3301      	adds	r3, #1
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
        hSCH_tasks_G[Index].Co_op  = task_mode;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <SCH_Add_Task+0x98>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	4a10      	ldr	r2, [pc, #64]	; (800122c <SCH_Add_Task+0x9c>)
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	4413      	add	r3, r2
 80011f0:	3302      	adds	r3, #2
 80011f2:	78fa      	ldrb	r2, [r7, #3]
 80011f4:	701a      	strb	r2, [r3, #0]
        hSCH_tasks_G[Index].Enable = ENABLE;
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <SCH_Add_Task+0x98>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4a0c      	ldr	r2, [pc, #48]	; (800122c <SCH_Add_Task+0x9c>)
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	4413      	add	r3, r2
 8001200:	7e3a      	ldrb	r2, [r7, #24]
 8001202:	701a      	strb	r2, [r3, #0]
        Index++;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <SCH_Add_Task+0x98>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <SCH_Add_Task+0x98>)
 800120e:	701a      	strb	r2, [r3, #0]
    }
    return &hSCH_tasks_G[Index-1];
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <SCH_Add_Task+0x98>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <SCH_Add_Task+0x9c>)
 800121a:	4413      	add	r3, r2
}
 800121c:	4618      	mov	r0, r3
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000234 	.word	0x20000234
 800122c:	200001f4 	.word	0x200001f4

08001230 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f002 fe53 	bl	8003ee4 <HAL_TIM_Base_Start>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	460b      	mov	r3, r1
 8001250:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 800125a:	bf00      	nop
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	429a      	cmp	r2, r3
 8001266:	d3f9      	bcc.n	800125c <DELAY_TIM_Us+0x16>
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <DHT11_SetPinIn>:
static DHT11_Status DHT11_Start(DHT11_Sensor* dht);
static uint8_t DHT11_ReadByte(DHT11_Sensor* dht);

/* Private user code ---------------------------------------------------------*/
static void DHT11_SetPinIn(DHT11_Sensor* dht)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = dht->Pin;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	889b      	ldrh	r3, [r3, #4]
 800128e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001294:	2301      	movs	r3, #1
 8001296:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f107 0208 	add.w	r2, r7, #8
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fb6e 	bl	8002984 <HAL_GPIO_Init>
}
 80012a8:	bf00      	nop
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <DHT11_SetPinOut>:

static void DHT11_SetPinOut(DHT11_Sensor* dht)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = dht->Pin;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	889b      	ldrh	r3, [r3, #4]
 80012ca:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2302      	movs	r3, #2
 80012d2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f107 0208 	add.w	r2, r7, #8
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fb50 	bl	8002984 <HAL_GPIO_Init>
}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <DHT11_WritePin>:

static void DHT11_WritePin(DHT11_Sensor* dht, uint8_t value)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(dht->Port, dht->Pin, value);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	889b      	ldrh	r3, [r3, #4]
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	4619      	mov	r1, r3
 8001304:	f001 fcd9 	bl	8002cba <HAL_GPIO_WritePin>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <DHT11_ReadPin>:

static uint8_t DHT11_ReadPin(DHT11_Sensor* dht)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
    uint8_t value = HAL_GPIO_ReadPin(dht->Port, dht->Pin);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	889b      	ldrh	r3, [r3, #4]
 8001320:	4619      	mov	r1, r3
 8001322:	4610      	mov	r0, r2
 8001324:	f001 fcb2 	bl	8002c8c <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
    return value;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <DHT11_DelayInit>:

static void DHT11_DelayInit(DHT11_Sensor* dht)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(dht->Timer);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff74 	bl	8001230 <DELAY_TIM_Init>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <DHT11_DelayUs>:

static void DHT11_DelayUs(DHT11_Sensor* dht, uint16_t time)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(dht->Timer, time);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	887a      	ldrh	r2, [r7, #2]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff6e 	bl	8001246 <DELAY_TIM_Us>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <DHT11_Start>:

static DHT11_Status DHT11_Start(DHT11_Sensor* dht)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_ERR_RESPONSE;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]

    DHT11_SetPinOut(dht);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff96 	bl	80012b0 <DHT11_SetPinOut>

    /* MCU sends out start signal and pulls down  voltage for at least 18 ms */
    DHT11_WritePin(dht, 0);
 8001384:	2100      	movs	r1, #0
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffb0 	bl	80012ec <DHT11_WritePin>
    DHT11_DelayUs(dht, 18000);
 800138c:	f244 6150 	movw	r1, #18000	; 0x4650
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ffdd 	bl	8001350 <DHT11_DelayUs>

    /* MCU waits for DHT response (20-40us) */
    DHT11_SetPinIn(dht);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff6c 	bl	8001274 <DHT11_SetPinIn>
    DHT11_DelayUs(dht, 50);
 800139c:	2132      	movs	r1, #50	; 0x32
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffd6 	bl	8001350 <DHT11_DelayUs>

    /* DHT sends out response signal and keeps it for 80 us */
    if (DHT11_ReadPin(dht) == 0)
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ffb3 	bl	8001310 <DHT11_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d112      	bne.n	80013d6 <DHT11_Start+0x64>
    {
        DHT11_DelayUs(dht, 80);
 80013b0:	2150      	movs	r1, #80	; 0x50
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffcc 	bl	8001350 <DHT11_DelayUs>
        if (DHT11_ReadPin(dht) == 1)
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ffa9 	bl	8001310 <DHT11_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d108      	bne.n	80013d6 <DHT11_Start+0x64>
        {
            status = DHT11_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	73fb      	strb	r3, [r7, #15]
            /* Wait for data transmission */
            while(DHT11_ReadPin(dht) == 1);
 80013c8:	bf00      	nop
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffa0 	bl	8001310 <DHT11_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d0f9      	beq.n	80013ca <DHT11_Start+0x58>
        }
    }

    return status;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <DHT11_ReadByte>:

static uint8_t DHT11_ReadByte(DHT11_Sensor* dht)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
    uint8_t value = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    DHT11_SetPinIn(dht);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff41 	bl	8001274 <DHT11_SetPinIn>

    for (idx = 0; idx < 8; idx++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	73bb      	strb	r3, [r7, #14]
 80013f6:	e035      	b.n	8001464 <DHT11_ReadByte+0x84>
    {
        /* Wait for old signal to end */
        while(DHT11_ReadPin(dht) == 0);
 80013f8:	bf00      	nop
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ff88 	bl	8001310 <DHT11_ReadPin>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f9      	beq.n	80013fa <DHT11_ReadByte+0x1a>

        DHT11_DelayUs(dht, 40);
 8001406:	2128      	movs	r1, #40	; 0x28
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ffa1 	bl	8001350 <DHT11_DelayUs>

        /* Bit 1 */
        if (DHT11_ReadPin(dht) == 1)
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff7e 	bl	8001310 <DHT11_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	2b01      	cmp	r3, #1
 8001418:	d10c      	bne.n	8001434 <DHT11_ReadByte+0x54>
        {
            /* Set bit at (7-idx) position */
            value |= (0x01 << (7 - idx));
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	f1c3 0307 	rsb	r3, r3, #7
 8001420:	2201      	movs	r2, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	b25a      	sxtb	r2, r3
 8001428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142c:	4313      	orrs	r3, r2
 800142e:	b25b      	sxtb	r3, r3
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e00d      	b.n	8001450 <DHT11_ReadByte+0x70>

        /* Bit 0 */
        else
        {
            /* Clear bit at (7-idx) position */
            value &= ~(0x01 << (7-idx));
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2201      	movs	r2, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	b25b      	sxtb	r3, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	b25a      	sxtb	r2, r3
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	4013      	ands	r3, r2
 800144c:	b25b      	sxtb	r3, r3
 800144e:	73fb      	strb	r3, [r7, #15]
        }

        while(DHT11_ReadPin(dht) == 1);
 8001450:	bf00      	nop
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff5c 	bl	8001310 <DHT11_ReadPin>
 8001458:	4603      	mov	r3, r0
 800145a:	2b01      	cmp	r3, #1
 800145c:	d0f9      	beq.n	8001452 <DHT11_ReadByte+0x72>
    for (idx = 0; idx < 8; idx++)
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	3301      	adds	r3, #1
 8001462:	73bb      	strb	r3, [r7, #14]
 8001464:	7bbb      	ldrb	r3, [r7, #14]
 8001466:	2b07      	cmp	r3, #7
 8001468:	d9c6      	bls.n	80013f8 <DHT11_ReadByte+0x18>
    }

    return value;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <DHT11_Init>:

void DHT11_Init(DHT11_Sensor* dht, GPIO_TypeDef* port, uint16_t pin, TIM_HandleTypeDef* timer)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	4613      	mov	r3, r2
 8001482:	80fb      	strh	r3, [r7, #6]
    dht->Port   = port;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	601a      	str	r2, [r3, #0]
    dht->Pin    = pin;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	88fa      	ldrh	r2, [r7, #6]
 800148e:	809a      	strh	r2, [r3, #4]
    dht->Timer  = timer;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	609a      	str	r2, [r3, #8]
    dht->Temp   = INIT_TEMP_VALUE;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <DHT11_Init+0x3c>)
 800149a:	60da      	str	r2, [r3, #12]
    dht->Humi   = INIT_HUMI_VALUE;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <DHT11_Init+0x3c>)
 80014a0:	611a      	str	r2, [r3, #16]

    DHT11_DelayInit(dht);
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7ff ff47 	bl	8001336 <DHT11_DelayInit>
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	bf800000 	.word	0xbf800000

080014b4 <DHT11_GetData>:

DHT11_Status DHT11_GetData(DHT11_Sensor* dht)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]

    uint8_t rh_integral, rh_decimal, temp_integral, temp_decimal, sum;

	status = DHT11_Start(dht);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff56 	bl	8001372 <DHT11_Start>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]

    if (status == DHT11_OK)
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d15f      	bne.n	8001590 <DHT11_GetData+0xdc>
    {
        /* Read 5 byte from DHT */
        rh_integral     = DHT11_ReadByte(dht);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff85 	bl	80013e0 <DHT11_ReadByte>
 80014d6:	4603      	mov	r3, r0
 80014d8:	73bb      	strb	r3, [r7, #14]
        rh_decimal      = DHT11_ReadByte(dht);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ff80 	bl	80013e0 <DHT11_ReadByte>
 80014e0:	4603      	mov	r3, r0
 80014e2:	737b      	strb	r3, [r7, #13]
        temp_integral   = DHT11_ReadByte(dht);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff7b 	bl	80013e0 <DHT11_ReadByte>
 80014ea:	4603      	mov	r3, r0
 80014ec:	733b      	strb	r3, [r7, #12]
        temp_decimal    = DHT11_ReadByte(dht);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ff76 	bl	80013e0 <DHT11_ReadByte>
 80014f4:	4603      	mov	r3, r0
 80014f6:	72fb      	strb	r3, [r7, #11]
        sum             = DHT11_ReadByte(dht);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff71 	bl	80013e0 <DHT11_ReadByte>
 80014fe:	4603      	mov	r3, r0
 8001500:	72bb      	strb	r3, [r7, #10]

        if (sum == rh_integral + rh_decimal + temp_integral + temp_decimal)
 8001502:	7aba      	ldrb	r2, [r7, #10]
 8001504:	7bb9      	ldrb	r1, [r7, #14]
 8001506:	7b7b      	ldrb	r3, [r7, #13]
 8001508:	4419      	add	r1, r3
 800150a:	7b3b      	ldrb	r3, [r7, #12]
 800150c:	4419      	add	r1, r3
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	440b      	add	r3, r1
 8001512:	429a      	cmp	r2, r3
 8001514:	d13a      	bne.n	800158c <DHT11_GetData+0xd8>
        {
            dht->Humi = rh_integral + (float)(rh_decimal/10.0);
 8001516:	7bbb      	ldrb	r3, [r7, #14]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fc9d 	bl	8000e58 <__aeabi_i2f>
 800151e:	4604      	mov	r4, r0
 8001520:	7b7b      	ldrb	r3, [r7, #13]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f82c 	bl	8000580 <__aeabi_i2d>
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <DHT11_GetData+0xe8>)
 800152e:	f7ff f9bb 	bl	80008a8 <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fb83 	bl	8000c44 <__aeabi_d2f>
 800153e:	4603      	mov	r3, r0
 8001540:	4619      	mov	r1, r3
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff fbd4 	bl	8000cf0 <__addsf3>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	611a      	str	r2, [r3, #16]
            dht->Temp = temp_integral + (float)(temp_decimal/10.0);
 8001550:	7b3b      	ldrb	r3, [r7, #12]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fc80 	bl	8000e58 <__aeabi_i2f>
 8001558:	4604      	mov	r4, r0
 800155a:	7afb      	ldrb	r3, [r7, #11]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f80f 	bl	8000580 <__aeabi_i2d>
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <DHT11_GetData+0xe8>)
 8001568:	f7ff f99e 	bl	80008a8 <__aeabi_ddiv>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff fb66 	bl	8000c44 <__aeabi_d2f>
 8001578:	4603      	mov	r3, r0
 800157a:	4619      	mov	r1, r3
 800157c:	4620      	mov	r0, r4
 800157e:	f7ff fbb7 	bl	8000cf0 <__addsf3>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	e001      	b.n	8001590 <DHT11_GetData+0xdc>
        }

        else
        {
            status = DHT11_ERR_CHECKSUM;
 800158c:	2302      	movs	r3, #2
 800158e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}
 800159a:	bf00      	nop
 800159c:	40240000 	.word	0x40240000

080015a0 <SRF05_DELAY_Us>:
#define TRIG_LOW()		HAL_GPIO_WritePin(SRF05->TRIGGER_GPIOx, SRF05->TRIGGER_GPIO_Pin, GPIO_PIN_RESET)
#define READ_ECHO() 	HAL_GPIO_ReadPin(SRF05->ECHO_GPIOx, SRF05->ECHO_GPIO_Pin)
extern TIM_HandleTypeDef htim4;

static void SRF05_DELAY_Us(uint16_t Time)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
	DELAY_TIM_Us(&htim4, Time); // thay the ham nay neu su dung ham delay khac
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4803      	ldr	r0, [pc, #12]	; (80015bc <SRF05_DELAY_Us+0x1c>)
 80015b0:	f7ff fe49 	bl	8001246 <DELAY_TIM_Us>

}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200002d4 	.word	0x200002d4

080015c0 <SRF05_Init>:

//************************* HIGH Level Layer **********************************************************/
// function:  init SRF05
// input: SRF05 target, TRIG pin, Echo Pin
// output: 0 false, 1 true
uint8_t SRF05_Init(SRF05_Device_Name* SRF05, GPIO_TypeDef* ECHO_GPIOx, uint16_t ECHO_GPIO_Pin, GPIO_TypeDef* TRIGGER_GPIOx, uint16_t TRIGGER_GPIO_Pin) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	4613      	mov	r3, r2
 80015ce:	80fb      	strh	r3, [r7, #6]

	SRF05->ECHO_GPIOx = ECHO_GPIOx;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	601a      	str	r2, [r3, #0]
	SRF05->ECHO_GPIO_Pin = ECHO_GPIO_Pin;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	88fa      	ldrh	r2, [r7, #6]
 80015da:	809a      	strh	r2, [r3, #4]
	SRF05->TRIGGER_GPIOx = TRIGGER_GPIOx;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	609a      	str	r2, [r3, #8]
	SRF05->TRIGGER_GPIO_Pin = TRIGGER_GPIO_Pin;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8b3a      	ldrh	r2, [r7, #24]
 80015e6:	819a      	strh	r2, [r3, #12]
	TRIG_LOW();
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6898      	ldr	r0, [r3, #8]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	899b      	ldrh	r3, [r3, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	4619      	mov	r1, r3
 80015f4:	f001 fb61 	bl	8002cba <HAL_GPIO_WritePin>
	if (SRF05_Read(SRF05) >= 0) {
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f000 f811 	bl	8001620 <SRF05_Read>
 80015fe:	4603      	mov	r3, r0
 8001600:	f04f 0100 	mov.w	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fcdd 	bl	8000fc4 <__aeabi_fcmpge>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SRF05_Init+0x54>
		return 1;
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <SRF05_Init+0x56>
	}
	return 0;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <SRF05_Read>:

float SRF05_Read(SRF05_Device_Name* SRF05) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	uint32_t time, timeout;

	TRIG_LOW();
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6898      	ldr	r0, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	899b      	ldrh	r3, [r3, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	4619      	mov	r1, r3
 8001634:	f001 fb41 	bl	8002cba <HAL_GPIO_WritePin>
	SRF05_DELAY_Us(2);
 8001638:	2002      	movs	r0, #2
 800163a:	f7ff ffb1 	bl	80015a0 <SRF05_DELAY_Us>
	TRIG_HIGH();
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6898      	ldr	r0, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	899b      	ldrh	r3, [r3, #12]
 8001646:	2201      	movs	r2, #1
 8001648:	4619      	mov	r1, r3
 800164a:	f001 fb36 	bl	8002cba <HAL_GPIO_WritePin>
	SRF05_DELAY_Us(10);
 800164e:	200a      	movs	r0, #10
 8001650:	f7ff ffa6 	bl	80015a0 <SRF05_DELAY_Us>
	TRIG_LOW();
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6898      	ldr	r0, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	899b      	ldrh	r3, [r3, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	f001 fb2b 	bl	8002cba <HAL_GPIO_WritePin>
	timeout = SRF05_TIMEOUT;
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <SRF05_Read+0xbc>)
 8001666:	60bb      	str	r3, [r7, #8]
	while (!READ_ECHO())
 8001668:	e006      	b.n	8001678 <SRF05_Read+0x58>
	{
		if (timeout-- == 0x00)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1e5a      	subs	r2, r3, #1
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <SRF05_Read+0x58>
		{
			return -1;
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <SRF05_Read+0xc0>)
 8001676:	e02c      	b.n	80016d2 <SRF05_Read+0xb2>
	while (!READ_ECHO())
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	889b      	ldrh	r3, [r3, #4]
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f001 fb02 	bl	8002c8c <HAL_GPIO_ReadPin>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0ed      	beq.n	800166a <SRF05_Read+0x4a>
		}
	}
	time = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
	while (READ_ECHO())
 8001692:	e005      	b.n	80016a0 <SRF05_Read+0x80>
	{
		time++;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3301      	adds	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
		SRF05_DELAY_Us(1);
 800169a:	2001      	movs	r0, #1
 800169c:	f7ff ff80 	bl	80015a0 <SRF05_DELAY_Us>
	while (READ_ECHO())
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	889b      	ldrh	r3, [r3, #4]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4610      	mov	r0, r2
 80016ac:	f001 faee 	bl	8002c8c <HAL_GPIO_ReadPin>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1ee      	bne.n	8001694 <SRF05_Read+0x74>
	}
	SRF05->Distance =  (float)time * SRF05_NUMBER;
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f7ff fbca 	bl	8000e50 <__aeabi_ui2f>
 80016bc:	4603      	mov	r3, r0
 80016be:	4909      	ldr	r1, [pc, #36]	; (80016e4 <SRF05_Read+0xc4>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fd57 	bl	8000174 <__aeabi_fmul>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	611a      	str	r2, [r3, #16]

	return SRF05->Distance;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	000f4240 	.word	0x000f4240
 80016e0:	bf800000 	.word	0xbf800000
 80016e4:	3c8cc17a 	.word	0x3c8cc17a

080016e8 <LCD_Write>:
static void LCD_WriteChar(LCD_I2C_Name* lcd, char character);

/* Private user code ---------------------------------------------------------*/

static void LCD_Write(LCD_I2C_Name* lcd, uint8_t data, uint8_t mode)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
 80016f4:	4613      	mov	r3, r2
 80016f6:	70bb      	strb	r3, [r7, #2]
    uint8_t Data_H, Data_L;
	uint8_t Data_I2C[4];

	Data_H = data & 0xF0;
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	f023 030f 	bic.w	r3, r3, #15
 80016fe:	73fb      	strb	r3, [r7, #15]
	Data_L = (data << 4) & 0xF0;
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	73bb      	strb	r3, [r7, #14]

	if(lcd->BackLight)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7adb      	ldrb	r3, [r3, #11]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <LCD_Write+0x36>
	{
        /* Set bit */
		Data_H |= LCD_BACKLIGHT;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8001716:	7bbb      	ldrb	r3, [r7, #14]
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA)
 800171e:	78bb      	ldrb	r3, [r7, #2]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d108      	bne.n	8001736 <LCD_Write+0x4e>
	{
        /* Set bit */
		Data_H |= LCD_RS;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 800172c:	7bbb      	ldrb	r3, [r7, #14]
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	73bb      	strb	r3, [r7, #14]
 8001734:	e00a      	b.n	800174c <LCD_Write+0x64>
	}
	else if(mode == LCD_COMMAND)
 8001736:	78bb      	ldrb	r3, [r7, #2]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <LCD_Write+0x64>
	{
        /* Clear bit */
		Data_H &= ~LCD_RS;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8001744:	7bbb      	ldrb	r3, [r7, #14]
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	73bb      	strb	r3, [r7, #14]
	}

    /* Assign data to higher bits */
	Data_I2C[0] = Data_H|LCD_EN;
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	b2db      	uxtb	r3, r3
 8001754:	723b      	strb	r3, [r7, #8]
	LCD_DelayMs(1);
 8001756:	2001      	movs	r0, #1
 8001758:	f001 f80c 	bl	8002774 <HAL_Delay>
	Data_I2C[1] = Data_H;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	727b      	strb	r3, [r7, #9]

    /* Assign data to lower bits */
	Data_I2C[2] = Data_L|LCD_EN;
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	b2db      	uxtb	r3, r3
 8001768:	72bb      	strb	r3, [r7, #10]
	LCD_DelayMs(1);
 800176a:	2001      	movs	r0, #1
 800176c:	f001 f802 	bl	8002774 <HAL_Delay>
	Data_I2C[3] = Data_L;
 8001770:	7bbb      	ldrb	r3, [r7, #14]
 8001772:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd->I2c, lcd->Address, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	791b      	ldrb	r3, [r3, #4]
 800177c:	b299      	uxth	r1, r3
 800177e:	f107 0208 	add.w	r2, r7, #8
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2304      	movs	r3, #4
 800178a:	f001 fbf3 	bl	8002f74 <HAL_I2C_Master_Transmit>
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <LCD_Init>:

void LCD_Init(LCD_I2C_Name* lcd, I2C_HandleTypeDef* i2c, uint8_t address, uint8_t columns, uint8_t rows)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	4611      	mov	r1, r2
 80017a2:	461a      	mov	r2, r3
 80017a4:	460b      	mov	r3, r1
 80017a6:	71fb      	strb	r3, [r7, #7]
 80017a8:	4613      	mov	r3, r2
 80017aa:	71bb      	strb	r3, [r7, #6]
    lcd->I2c        = i2c;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	601a      	str	r2, [r3, #0]
    lcd->Address    = address;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	79fa      	ldrb	r2, [r7, #7]
 80017b6:	711a      	strb	r2, [r3, #4]
    lcd->Columns    = columns;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	79ba      	ldrb	r2, [r7, #6]
 80017bc:	715a      	strb	r2, [r3, #5]
    lcd->Rows       = rows;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	7e3a      	ldrb	r2, [r7, #24]
 80017c2:	719a      	strb	r2, [r3, #6]

    lcd->FunctionSet    = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2228      	movs	r2, #40	; 0x28
 80017c8:	729a      	strb	r2, [r3, #10]
    lcd->EntryMode      = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2206      	movs	r2, #6
 80017ce:	71da      	strb	r2, [r3, #7]
    lcd->DisplayControl = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	220c      	movs	r2, #12
 80017d4:	721a      	strb	r2, [r3, #8]
    lcd->CursorShift    = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2214      	movs	r2, #20
 80017da:	725a      	strb	r2, [r3, #9]
    lcd->BackLight      = LCD_BACKLIGHT;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2208      	movs	r2, #8
 80017e0:	72da      	strb	r2, [r3, #11]

    LCD_DelayMs(50);
 80017e2:	2032      	movs	r0, #50	; 0x32
 80017e4:	f000 ffc6 	bl	8002774 <HAL_Delay>
	LCD_Write(lcd, 0x33, LCD_COMMAND);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2133      	movs	r1, #51	; 0x33
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f7ff ff7b 	bl	80016e8 <LCD_Write>

	LCD_Write(lcd, 0x33, LCD_COMMAND);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2133      	movs	r1, #51	; 0x33
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff ff76 	bl	80016e8 <LCD_Write>
	LCD_DelayMs(5);
 80017fc:	2005      	movs	r0, #5
 80017fe:	f000 ffb9 	bl	8002774 <HAL_Delay>
	LCD_Write(lcd, 0x32, LCD_COMMAND);
 8001802:	2200      	movs	r2, #0
 8001804:	2132      	movs	r1, #50	; 0x32
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f7ff ff6e 	bl	80016e8 <LCD_Write>
	LCD_DelayMs(5);
 800180c:	2005      	movs	r0, #5
 800180e:	f000 ffb1 	bl	8002774 <HAL_Delay>
	LCD_Write(lcd, 0x20, LCD_COMMAND);
 8001812:	2200      	movs	r2, #0
 8001814:	2120      	movs	r1, #32
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff ff66 	bl	80016e8 <LCD_Write>
	LCD_DelayMs(5);
 800181c:	2005      	movs	r0, #5
 800181e:	f000 ffa9 	bl	8002774 <HAL_Delay>

	LCD_Write(lcd, lcd->EntryMode, LCD_COMMAND);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	79db      	ldrb	r3, [r3, #7]
 8001826:	2200      	movs	r2, #0
 8001828:	4619      	mov	r1, r3
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f7ff ff5c 	bl	80016e8 <LCD_Write>
	LCD_Write(lcd, lcd->DisplayControl, LCD_COMMAND);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	7a1b      	ldrb	r3, [r3, #8]
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f7ff ff55 	bl	80016e8 <LCD_Write>
	LCD_Write(lcd, lcd->CursorShift, LCD_COMMAND);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	7a5b      	ldrb	r3, [r3, #9]
 8001842:	2200      	movs	r2, #0
 8001844:	4619      	mov	r1, r3
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7ff ff4e 	bl	80016e8 <LCD_Write>
	LCD_Write(lcd, lcd->FunctionSet, LCD_COMMAND);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	7a9b      	ldrb	r3, [r3, #10]
 8001850:	2200      	movs	r2, #0
 8001852:	4619      	mov	r1, r3
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7ff ff47 	bl	80016e8 <LCD_Write>

	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 800185a:	2200      	movs	r2, #0
 800185c:	2101      	movs	r1, #1
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f7ff ff42 	bl	80016e8 <LCD_Write>
	LCD_Write(lcd, LCD_RETURNHOME, LCD_COMMAND);
 8001864:	2200      	movs	r2, #0
 8001866:	2102      	movs	r1, #2
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f7ff ff3d 	bl	80016e8 <LCD_Write>
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <LCD_WriteChar>:

static void LCD_WriteChar(LCD_I2C_Name* lcd, char character)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	70fb      	strb	r3, [r7, #3]
	LCD_Write(lcd, character, LCD_DATA);
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	2201      	movs	r2, #1
 8001886:	4619      	mov	r1, r3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff2d 	bl	80016e8 <LCD_Write>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <LCD_WriteString>:

void LCD_WriteString(LCD_I2C_Name* lcd, char *string)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
	while(*string)
 80018a0:	e007      	b.n	80018b2 <LCD_WriteString+0x1c>
	{
		LCD_WriteChar(lcd, *string++);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	603a      	str	r2, [r7, #0]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	4619      	mov	r1, r3
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ffe2 	bl	8001876 <LCD_WriteChar>
	while(*string)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f3      	bne.n	80018a2 <LCD_WriteString+0xc>
	}
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <LCD_Clear>:

void LCD_Clear(LCD_I2C_Name* lcd)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2101      	movs	r1, #1
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff09 	bl	80016e8 <LCD_Write>
	LCD_DelayMs(5);
 80018d6:	2005      	movs	r0, #5
 80018d8:	f000 ff4c 	bl	8002774 <HAL_Delay>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <LCD_SetCursor>:

void LCD_SetCursor(LCD_I2C_Name* lcd, uint8_t x_pos, uint8_t y_pos)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
 80018f0:	4613      	mov	r3, r2
 80018f2:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]

	if(x_pos >= lcd->Columns)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	795b      	ldrb	r3, [r3, #5]
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d303      	bcc.n	800190a <LCD_SetCursor+0x26>
	{
		x_pos = lcd->Columns - 1;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	795b      	ldrb	r3, [r3, #5]
 8001906:	3b01      	subs	r3, #1
 8001908:	70fb      	strb	r3, [r7, #3]
	}

	if(y_pos >= lcd->Rows)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	799b      	ldrb	r3, [r3, #6]
 800190e:	78ba      	ldrb	r2, [r7, #2]
 8001910:	429a      	cmp	r2, r3
 8001912:	d303      	bcc.n	800191c <LCD_SetCursor+0x38>
	{
		y_pos = lcd->Rows -1;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	799b      	ldrb	r3, [r3, #6]
 8001918:	3b01      	subs	r3, #1
 800191a:	70bb      	strb	r3, [r7, #2]
	}

	switch (y_pos)
 800191c:	78bb      	ldrb	r3, [r7, #2]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d819      	bhi.n	8001956 <LCD_SetCursor+0x72>
 8001922:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <LCD_SetCursor+0x44>)
 8001924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001928:	08001939 	.word	0x08001939
 800192c:	0800193f 	.word	0x0800193f
 8001930:	08001947 	.word	0x08001947
 8001934:	0800194f 	.word	0x0800194f
	{
		case 0:
			DRAM_ADDRESS = 0x00 + x_pos;
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	73fb      	strb	r3, [r7, #15]
			break;
 800193c:	e00b      	b.n	8001956 <LCD_SetCursor+0x72>
		case 1:
			DRAM_ADDRESS = 0x40 + x_pos;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	3340      	adds	r3, #64	; 0x40
 8001942:	73fb      	strb	r3, [r7, #15]
			break;
 8001944:	e007      	b.n	8001956 <LCD_SetCursor+0x72>
		case 2:
			DRAM_ADDRESS = 0x14 + x_pos;
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	3314      	adds	r3, #20
 800194a:	73fb      	strb	r3, [r7, #15]
			break;
 800194c:	e003      	b.n	8001956 <LCD_SetCursor+0x72>
		case 3:
			DRAM_ADDRESS = 0x54 + x_pos;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	3354      	adds	r3, #84	; 0x54
 8001952:	73fb      	strb	r3, [r7, #15]
			break;
 8001954:	bf00      	nop
	}

	LCD_Write(lcd, LCD_SETDDRAMADDR|DRAM_ADDRESS, LCD_COMMAND);
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fec0 	bl	80016e8 <LCD_Write>
}
 8001968:	bf00      	nop
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db0b      	blt.n	800199a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4906      	ldr	r1, [pc, #24]	; (80019a4 <__NVIC_EnableIRQ+0x34>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	2001      	movs	r0, #1
 8001992:	fa00 f202 	lsl.w	r2, r0, r2
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db12      	blt.n	80019e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	490a      	ldr	r1, [pc, #40]	; (80019ec <__NVIC_DisableIRQ+0x44>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	3320      	adds	r3, #32
 80019d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019d4:	f3bf 8f4f 	dsb	sy
}
 80019d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019da:	f3bf 8f6f 	isb	sy
}
 80019de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int a)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&a, 1, HAL_MAX_DELAY);
 80019f8:	1d39      	adds	r1, r7, #4
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	2201      	movs	r2, #1
 8001a00:	4803      	ldr	r0, [pc, #12]	; (8001a10 <__io_putchar+0x20>)
 8001a02:	f002 fd79 	bl	80044f8 <HAL_UART_Transmit>
	return a;
 8001a06:	687b      	ldr	r3, [r7, #4]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000031c 	.word	0x2000031c

08001a14 <TASK_UART_Handler>:
		}
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxData[rxDataId], 1);
}

void TASK_UART_Handler(){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
	if (IsInterrup){
 8001a1a:	4b51      	ldr	r3, [pc, #324]	; (8001b60 <TASK_UART_Handler+0x14c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 8095 	beq.w	8001b50 <TASK_UART_Handler+0x13c>
		char *command = strtok((char*)rxData, " ");
 8001a26:	494f      	ldr	r1, [pc, #316]	; (8001b64 <TASK_UART_Handler+0x150>)
 8001a28:	484f      	ldr	r0, [pc, #316]	; (8001b68 <TASK_UART_Handler+0x154>)
 8001a2a:	f004 f85b 	bl	8005ae4 <strtok>
 8001a2e:	60f8      	str	r0, [r7, #12]
		char *time = strtok(NULL, " ");
 8001a30:	494c      	ldr	r1, [pc, #304]	; (8001b64 <TASK_UART_Handler+0x150>)
 8001a32:	2000      	movs	r0, #0
 8001a34:	f004 f856 	bl	8005ae4 <strtok>
 8001a38:	60b8      	str	r0, [r7, #8]
		printf("UART Handler IN: %ld\r\n", uwTick);
 8001a3a:	4b4c      	ldr	r3, [pc, #304]	; (8001b6c <TASK_UART_Handler+0x158>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	484b      	ldr	r0, [pc, #300]	; (8001b70 <TASK_UART_Handler+0x15c>)
 8001a42:	f003 fee1 	bl	8005808 <iprintf>
		NVIC_DisableIRQ(USART2_IRQn);
 8001a46:	2026      	movs	r0, #38	; 0x26
 8001a48:	f7ff ffae 	bl	80019a8 <__NVIC_DisableIRQ>

		if (NULL == time){
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d13b      	bne.n	8001aca <TASK_UART_Handler+0xb6>
			if (strcmp((const char*)rxData, "lcdtemp") == 0)
 8001a52:	4948      	ldr	r1, [pc, #288]	; (8001b74 <TASK_UART_Handler+0x160>)
 8001a54:	4844      	ldr	r0, [pc, #272]	; (8001b68 <TASK_UART_Handler+0x154>)
 8001a56:	f7fe fb7b 	bl	8000150 <strcmp>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d106      	bne.n	8001a6e <TASK_UART_Handler+0x5a>
			{
				lcdMode = LCD_TEM;
 8001a60:	4b45      	ldr	r3, [pc, #276]	; (8001b78 <TASK_UART_Handler+0x164>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
				printf("Change LCD Mode to LCD_TEM\r\n\n");
 8001a66:	4845      	ldr	r0, [pc, #276]	; (8001b7c <TASK_UART_Handler+0x168>)
 8001a68:	f003 ff34 	bl	80058d4 <puts>
 8001a6c:	e067      	b.n	8001b3e <TASK_UART_Handler+0x12a>
			}
			else if (strcmp((const char*)rxData, "lcdhumi") == 0)
 8001a6e:	4944      	ldr	r1, [pc, #272]	; (8001b80 <TASK_UART_Handler+0x16c>)
 8001a70:	483d      	ldr	r0, [pc, #244]	; (8001b68 <TASK_UART_Handler+0x154>)
 8001a72:	f7fe fb6d 	bl	8000150 <strcmp>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d106      	bne.n	8001a8a <TASK_UART_Handler+0x76>
			{
				lcdMode = LCD_HUMI;
 8001a7c:	4b3e      	ldr	r3, [pc, #248]	; (8001b78 <TASK_UART_Handler+0x164>)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	701a      	strb	r2, [r3, #0]
				printf("Change LCD Mode to LCD_HUMI\r\n\n");
 8001a82:	4840      	ldr	r0, [pc, #256]	; (8001b84 <TASK_UART_Handler+0x170>)
 8001a84:	f003 ff26 	bl	80058d4 <puts>
 8001a88:	e059      	b.n	8001b3e <TASK_UART_Handler+0x12a>
			}
			else if (strcmp((const char*)rxData, "lcddist") == 0)
 8001a8a:	493f      	ldr	r1, [pc, #252]	; (8001b88 <TASK_UART_Handler+0x174>)
 8001a8c:	4836      	ldr	r0, [pc, #216]	; (8001b68 <TASK_UART_Handler+0x154>)
 8001a8e:	f7fe fb5f 	bl	8000150 <strcmp>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d106      	bne.n	8001aa6 <TASK_UART_Handler+0x92>
			{
				lcdMode = LCD_DISTANCE;
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <TASK_UART_Handler+0x164>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
				printf("Change LCD Mode to DISPLAY_DIST\r\n\n");
 8001a9e:	483b      	ldr	r0, [pc, #236]	; (8001b8c <TASK_UART_Handler+0x178>)
 8001aa0:	f003 ff18 	bl	80058d4 <puts>
 8001aa4:	e04b      	b.n	8001b3e <TASK_UART_Handler+0x12a>
			}
			else if (strcmp((const char*)rxData, "lcdboth") == 0)
 8001aa6:	493a      	ldr	r1, [pc, #232]	; (8001b90 <TASK_UART_Handler+0x17c>)
 8001aa8:	482f      	ldr	r0, [pc, #188]	; (8001b68 <TASK_UART_Handler+0x154>)
 8001aaa:	f7fe fb51 	bl	8000150 <strcmp>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d106      	bne.n	8001ac2 <TASK_UART_Handler+0xae>
			{
				lcdMode = LCD_FULL;
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <TASK_UART_Handler+0x164>)
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	701a      	strb	r2, [r3, #0]
				printf("Change LCD Mode to LCD_FULL\r\n\n");
 8001aba:	4836      	ldr	r0, [pc, #216]	; (8001b94 <TASK_UART_Handler+0x180>)
 8001abc:	f003 ff0a 	bl	80058d4 <puts>
 8001ac0:	e03d      	b.n	8001b3e <TASK_UART_Handler+0x12a>
			}
			else
			{
				printf("Error Command Syntax\r\n\n");
 8001ac2:	4835      	ldr	r0, [pc, #212]	; (8001b98 <TASK_UART_Handler+0x184>)
 8001ac4:	f003 ff06 	bl	80058d4 <puts>
 8001ac8:	e039      	b.n	8001b3e <TASK_UART_Handler+0x12a>
			}
		}
		else {
			uint32_t pTime = atoi(time);
 8001aca:	68b8      	ldr	r0, [r7, #8]
 8001acc:	f002 fef2 	bl	80048b4 <atoi>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	607b      	str	r3, [r7, #4]
			if (strcmp((const char*)command, "timedht1") == 0)
 8001ad4:	4931      	ldr	r1, [pc, #196]	; (8001b9c <TASK_UART_Handler+0x188>)
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f7fe fb3a 	bl	8000150 <strcmp>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <TASK_UART_Handler+0xe8>
			{
				TASK_DHT->Period = pTime/FRAME_TICK_LEN;
 8001ae2:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <TASK_UART_Handler+0x18c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	492e      	ldr	r1, [pc, #184]	; (8001ba4 <TASK_UART_Handler+0x190>)
 8001aea:	fba1 1202 	umull	r1, r2, r1, r2
 8001aee:	0952      	lsrs	r2, r2, #5
 8001af0:	609a      	str	r2, [r3, #8]
				printf("Change period of temp time to %ld\r\n", pTime);
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	482c      	ldr	r0, [pc, #176]	; (8001ba8 <TASK_UART_Handler+0x194>)
 8001af6:	f003 fe87 	bl	8005808 <iprintf>
 8001afa:	e016      	b.n	8001b2a <TASK_UART_Handler+0x116>
			}
			else if (strcmp((const char*)command, "timedist") == 0)
 8001afc:	492b      	ldr	r1, [pc, #172]	; (8001bac <TASK_UART_Handler+0x198>)
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f7fe fb26 	bl	8000150 <strcmp>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <TASK_UART_Handler+0x110>
			{
				TASK_DIST->Period = pTime/FRAME_TICK_LEN;
 8001b0a:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <TASK_UART_Handler+0x19c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4924      	ldr	r1, [pc, #144]	; (8001ba4 <TASK_UART_Handler+0x190>)
 8001b12:	fba1 1202 	umull	r1, r2, r1, r2
 8001b16:	0952      	lsrs	r2, r2, #5
 8001b18:	609a      	str	r2, [r3, #8]
				printf("Change period of dist time to %ld\r\n", pTime);
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4825      	ldr	r0, [pc, #148]	; (8001bb4 <TASK_UART_Handler+0x1a0>)
 8001b1e:	f003 fe73 	bl	8005808 <iprintf>
 8001b22:	e002      	b.n	8001b2a <TASK_UART_Handler+0x116>
			}
			else
			{
				printf("Error Command Syntax\r\n\n");
 8001b24:	481c      	ldr	r0, [pc, #112]	; (8001b98 <TASK_UART_Handler+0x184>)
 8001b26:	f003 fed5 	bl	80058d4 <puts>
			}
			TASK_LCD->Period = TASK_DHT->Period + TASK_DIST->Period;
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <TASK_UART_Handler+0x18c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6899      	ldr	r1, [r3, #8]
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <TASK_UART_Handler+0x19c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <TASK_UART_Handler+0x1a4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	440a      	add	r2, r1
 8001b3c:	609a      	str	r2, [r3, #8]

		}
		NVIC_EnableIRQ(USART2_IRQn);
 8001b3e:	2026      	movs	r0, #38	; 0x26
 8001b40:	f7ff ff16 	bl	8001970 <__NVIC_EnableIRQ>
		printf("UART Handler OUT: %ld\r\n", uwTick);
 8001b44:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <TASK_UART_Handler+0x158>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481c      	ldr	r0, [pc, #112]	; (8001bbc <TASK_UART_Handler+0x1a8>)
 8001b4c:	f003 fe5c 	bl	8005808 <iprintf>
	}
	IsInterrup = 0;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <TASK_UART_Handler+0x14c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]

}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200003f5 	.word	0x200003f5
 8001b64:	080091c0 	.word	0x080091c0
 8001b68:	200003e0 	.word	0x200003e0
 8001b6c:	200003fc 	.word	0x200003fc
 8001b70:	080091c4 	.word	0x080091c4
 8001b74:	080091dc 	.word	0x080091dc
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	080091e4 	.word	0x080091e4
 8001b80:	08009204 	.word	0x08009204
 8001b84:	0800920c 	.word	0x0800920c
 8001b88:	0800922c 	.word	0x0800922c
 8001b8c:	08009234 	.word	0x08009234
 8001b90:	08009258 	.word	0x08009258
 8001b94:	08009260 	.word	0x08009260
 8001b98:	08009280 	.word	0x08009280
 8001b9c:	08009298 	.word	0x08009298
 8001ba0:	20000398 	.word	0x20000398
 8001ba4:	1b4e81b5 	.word	0x1b4e81b5
 8001ba8:	080092a4 	.word	0x080092a4
 8001bac:	080092c8 	.word	0x080092c8
 8001bb0:	2000039c 	.word	0x2000039c
 8001bb4:	080092d4 	.word	0x080092d4
 8001bb8:	200003a0 	.word	0x200003a0
 8001bbc:	080092f8 	.word	0x080092f8

08001bc0 <TASK_Dht_Sense>:
void TASK_Dht_Sense(){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	printf("TASK_DHT IN: %ld\r\n", uwTick);
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <TASK_Dht_Sense+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480e      	ldr	r0, [pc, #56]	; (8001c04 <TASK_Dht_Sense+0x44>)
 8001bcc:	f003 fe1c 	bl	8005808 <iprintf>
	dhtStatus = DHT11_GetData(&dht11);
 8001bd0:	480d      	ldr	r0, [pc, #52]	; (8001c08 <TASK_Dht_Sense+0x48>)
 8001bd2:	f7ff fc6f 	bl	80014b4 <DHT11_GetData>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <TASK_Dht_Sense+0x4c>)
 8001bdc:	701a      	strb	r2, [r3, #0]
	dhtTem = dht11.Temp;
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <TASK_Dht_Sense+0x48>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <TASK_Dht_Sense+0x50>)
 8001be4:	6013      	str	r3, [r2, #0]
	dhtHumi = dht11.Humi;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <TASK_Dht_Sense+0x48>)
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <TASK_Dht_Sense+0x54>)
 8001bec:	6013      	str	r3, [r2, #0]
	printf("TASK_DHT OUT: %ld\r\n", uwTick);
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <TASK_Dht_Sense+0x40>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4808      	ldr	r0, [pc, #32]	; (8001c18 <TASK_Dht_Sense+0x58>)
 8001bf6:	f003 fe07 	bl	8005808 <iprintf>
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200003fc 	.word	0x200003fc
 8001c04:	08009310 	.word	0x08009310
 8001c08:	20000364 	.word	0x20000364
 8001c0c:	200003b4 	.word	0x200003b4
 8001c10:	200003a8 	.word	0x200003a8
 8001c14:	200003ac 	.word	0x200003ac
 8001c18:	08009324 	.word	0x08009324

08001c1c <TASK_Dist_Sense>:

void TASK_Dist_Sense(){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	printf("TASK_DIST IN: %ld\r\n", uwTick);
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <TASK_Dist_Sense+0x30>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	480a      	ldr	r0, [pc, #40]	; (8001c50 <TASK_Dist_Sense+0x34>)
 8001c28:	f003 fdee 	bl	8005808 <iprintf>
	SRF05_Read(&hrf05);
 8001c2c:	4809      	ldr	r0, [pc, #36]	; (8001c54 <TASK_Dist_Sense+0x38>)
 8001c2e:	f7ff fcf7 	bl	8001620 <SRF05_Read>
	distance = hrf05.Distance;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <TASK_Dist_Sense+0x38>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <TASK_Dist_Sense+0x3c>)
 8001c38:	6013      	str	r3, [r2, #0]
	printf("TASK_DIST OUT: %ld\r\n", uwTick);
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <TASK_Dist_Sense+0x30>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4806      	ldr	r0, [pc, #24]	; (8001c5c <TASK_Dist_Sense+0x40>)
 8001c42:	f003 fde1 	bl	8005808 <iprintf>
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200003fc 	.word	0x200003fc
 8001c50:	08009338 	.word	0x08009338
 8001c54:	20000384 	.word	0x20000384
 8001c58:	200003b0 	.word	0x200003b0
 8001c5c:	0800934c 	.word	0x0800934c

08001c60 <TASK_lcd_Measurement>:


void TASK_lcd_Measurement(){
 8001c60:	b5b0      	push	{r4, r5, r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af02      	add	r7, sp, #8
	printf("TASK_LCD IN: %ld\r\n", uwTick);
 8001c66:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <TASK_lcd_Measurement+0x1a8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4867      	ldr	r0, [pc, #412]	; (8001e0c <TASK_lcd_Measurement+0x1ac>)
 8001c6e:	f003 fdcb 	bl	8005808 <iprintf>
	LCD_Clear(&lcd);
 8001c72:	4867      	ldr	r0, [pc, #412]	; (8001e10 <TASK_lcd_Measurement+0x1b0>)
 8001c74:	f7ff fe26 	bl	80018c4 <LCD_Clear>
	switch (lcdMode){
 8001c78:	4b66      	ldr	r3, [pc, #408]	; (8001e14 <TASK_lcd_Measurement+0x1b4>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	f200 80ba 	bhi.w	8001df6 <TASK_lcd_Measurement+0x196>
 8001c82:	a201      	add	r2, pc, #4	; (adr r2, 8001c88 <TASK_lcd_Measurement+0x28>)
 8001c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c88:	08001d15 	.word	0x08001d15
 8001c8c:	08001c99 	.word	0x08001c99
 8001c90:	08001cd7 	.word	0x08001cd7
 8001c94:	08001d53 	.word	0x08001d53

	case LCD_TEM:
		sprintf(temp, "T: %.2f", dhtTem);
 8001c98:	4b5f      	ldr	r3, [pc, #380]	; (8001e18 <TASK_lcd_Measurement+0x1b8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc81 	bl	80005a4 <__aeabi_f2d>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	495d      	ldr	r1, [pc, #372]	; (8001e1c <TASK_lcd_Measurement+0x1bc>)
 8001ca8:	485d      	ldr	r0, [pc, #372]	; (8001e20 <TASK_lcd_Measurement+0x1c0>)
 8001caa:	f003 fe1b 	bl	80058e4 <siprintf>
		LCD_SetCursor(&lcd, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4857      	ldr	r0, [pc, #348]	; (8001e10 <TASK_lcd_Measurement+0x1b0>)
 8001cb4:	f7ff fe16 	bl	80018e4 <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 8001cb8:	4959      	ldr	r1, [pc, #356]	; (8001e20 <TASK_lcd_Measurement+0x1c0>)
 8001cba:	4855      	ldr	r0, [pc, #340]	; (8001e10 <TASK_lcd_Measurement+0x1b0>)
 8001cbc:	f7ff fdeb 	bl	8001896 <LCD_WriteString>
		printf("Tem: %.2f\r\n", dhtTem);
 8001cc0:	4b55      	ldr	r3, [pc, #340]	; (8001e18 <TASK_lcd_Measurement+0x1b8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc6d 	bl	80005a4 <__aeabi_f2d>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4855      	ldr	r0, [pc, #340]	; (8001e24 <TASK_lcd_Measurement+0x1c4>)
 8001cd0:	f003 fd9a 	bl	8005808 <iprintf>
		break;
 8001cd4:	e08f      	b.n	8001df6 <TASK_lcd_Measurement+0x196>
	case LCD_HUMI:
		sprintf(temp, "H: %.2f", dhtHumi);
 8001cd6:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <TASK_lcd_Measurement+0x1c8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc62 	bl	80005a4 <__aeabi_f2d>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4951      	ldr	r1, [pc, #324]	; (8001e2c <TASK_lcd_Measurement+0x1cc>)
 8001ce6:	484e      	ldr	r0, [pc, #312]	; (8001e20 <TASK_lcd_Measurement+0x1c0>)
 8001ce8:	f003 fdfc 	bl	80058e4 <siprintf>
		LCD_SetCursor(&lcd, 0, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4847      	ldr	r0, [pc, #284]	; (8001e10 <TASK_lcd_Measurement+0x1b0>)
 8001cf2:	f7ff fdf7 	bl	80018e4 <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 8001cf6:	494a      	ldr	r1, [pc, #296]	; (8001e20 <TASK_lcd_Measurement+0x1c0>)
 8001cf8:	4845      	ldr	r0, [pc, #276]	; (8001e10 <TASK_lcd_Measurement+0x1b0>)
 8001cfa:	f7ff fdcc 	bl	8001896 <LCD_WriteString>
		printf("Humi: %.2f\r\n", dhtHumi); // @suppress("Float formatting support")
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <TASK_lcd_Measurement+0x1c8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc4e 	bl	80005a4 <__aeabi_f2d>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4848      	ldr	r0, [pc, #288]	; (8001e30 <TASK_lcd_Measurement+0x1d0>)
 8001d0e:	f003 fd7b 	bl	8005808 <iprintf>
		break;
 8001d12:	e070      	b.n	8001df6 <TASK_lcd_Measurement+0x196>
	case LCD_DISTANCE:
		sprintf(temp, "D: %.2f", distance);
 8001d14:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <TASK_lcd_Measurement+0x1d4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc43 	bl	80005a4 <__aeabi_f2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4945      	ldr	r1, [pc, #276]	; (8001e38 <TASK_lcd_Measurement+0x1d8>)
 8001d24:	483e      	ldr	r0, [pc, #248]	; (8001e20 <TASK_lcd_Measurement+0x1c0>)
 8001d26:	f003 fddd 	bl	80058e4 <siprintf>
		LCD_SetCursor(&lcd, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4838      	ldr	r0, [pc, #224]	; (8001e10 <TASK_lcd_Measurement+0x1b0>)
 8001d30:	f7ff fdd8 	bl	80018e4 <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 8001d34:	493a      	ldr	r1, [pc, #232]	; (8001e20 <TASK_lcd_Measurement+0x1c0>)
 8001d36:	4836      	ldr	r0, [pc, #216]	; (8001e10 <TASK_lcd_Measurement+0x1b0>)
 8001d38:	f7ff fdad 	bl	8001896 <LCD_WriteString>
		printf("Distance: %.2f\r\n", distance);
 8001d3c:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <TASK_lcd_Measurement+0x1d4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fc2f 	bl	80005a4 <__aeabi_f2d>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	483c      	ldr	r0, [pc, #240]	; (8001e3c <TASK_lcd_Measurement+0x1dc>)
 8001d4c:	f003 fd5c 	bl	8005808 <iprintf>
		break;
 8001d50:	e051      	b.n	8001df6 <TASK_lcd_Measurement+0x196>
	case LCD_FULL:
		sprintf(temp, "T: %.2f D: %.2f", dhtTem, distance);
 8001d52:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <TASK_lcd_Measurement+0x1b8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fc24 	bl	80005a4 <__aeabi_f2d>
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	460d      	mov	r5, r1
 8001d60:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <TASK_lcd_Measurement+0x1d4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fc1d 	bl	80005a4 <__aeabi_f2d>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	e9cd 2300 	strd	r2, r3, [sp]
 8001d72:	4622      	mov	r2, r4
 8001d74:	462b      	mov	r3, r5
 8001d76:	4932      	ldr	r1, [pc, #200]	; (8001e40 <TASK_lcd_Measurement+0x1e0>)
 8001d78:	4829      	ldr	r0, [pc, #164]	; (8001e20 <TASK_lcd_Measurement+0x1c0>)
 8001d7a:	f003 fdb3 	bl	80058e4 <siprintf>
		LCD_SetCursor(&lcd, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	4823      	ldr	r0, [pc, #140]	; (8001e10 <TASK_lcd_Measurement+0x1b0>)
 8001d84:	f7ff fdae 	bl	80018e4 <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 8001d88:	4925      	ldr	r1, [pc, #148]	; (8001e20 <TASK_lcd_Measurement+0x1c0>)
 8001d8a:	4821      	ldr	r0, [pc, #132]	; (8001e10 <TASK_lcd_Measurement+0x1b0>)
 8001d8c:	f7ff fd83 	bl	8001896 <LCD_WriteString>
		sprintf(h, "H: %.2f", dhtHumi);
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <TASK_lcd_Measurement+0x1c8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fc05 	bl	80005a4 <__aeabi_f2d>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4923      	ldr	r1, [pc, #140]	; (8001e2c <TASK_lcd_Measurement+0x1cc>)
 8001da0:	4828      	ldr	r0, [pc, #160]	; (8001e44 <TASK_lcd_Measurement+0x1e4>)
 8001da2:	f003 fd9f 	bl	80058e4 <siprintf>
		LCD_SetCursor(&lcd, 0, 1);
 8001da6:	2201      	movs	r2, #1
 8001da8:	2100      	movs	r1, #0
 8001daa:	4819      	ldr	r0, [pc, #100]	; (8001e10 <TASK_lcd_Measurement+0x1b0>)
 8001dac:	f7ff fd9a 	bl	80018e4 <LCD_SetCursor>
		LCD_WriteString(&lcd, h);
 8001db0:	4924      	ldr	r1, [pc, #144]	; (8001e44 <TASK_lcd_Measurement+0x1e4>)
 8001db2:	4817      	ldr	r0, [pc, #92]	; (8001e10 <TASK_lcd_Measurement+0x1b0>)
 8001db4:	f7ff fd6f 	bl	8001896 <LCD_WriteString>
		printf("Distance: %.2f\r\n", distance);
 8001db8:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <TASK_lcd_Measurement+0x1d4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fbf1 	bl	80005a4 <__aeabi_f2d>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	481d      	ldr	r0, [pc, #116]	; (8001e3c <TASK_lcd_Measurement+0x1dc>)
 8001dc8:	f003 fd1e 	bl	8005808 <iprintf>
		printf("Humidity: %.2f\r\n", dhtHumi);
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <TASK_lcd_Measurement+0x1c8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fbe7 	bl	80005a4 <__aeabi_f2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	481b      	ldr	r0, [pc, #108]	; (8001e48 <TASK_lcd_Measurement+0x1e8>)
 8001ddc:	f003 fd14 	bl	8005808 <iprintf>
		printf("Temperature: %.2f\r\n", dhtTem);
 8001de0:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <TASK_lcd_Measurement+0x1b8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fbdd 	bl	80005a4 <__aeabi_f2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4817      	ldr	r0, [pc, #92]	; (8001e4c <TASK_lcd_Measurement+0x1ec>)
 8001df0:	f003 fd0a 	bl	8005808 <iprintf>
		break;
 8001df4:	bf00      	nop
	}
	printf("TASK_LCD OUT: %ld\r\n", uwTick);
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <TASK_lcd_Measurement+0x1a8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4814      	ldr	r0, [pc, #80]	; (8001e50 <TASK_lcd_Measurement+0x1f0>)
 8001dfe:	f003 fd03 	bl	8005808 <iprintf>
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bdb0      	pop	{r4, r5, r7, pc}
 8001e08:	200003fc 	.word	0x200003fc
 8001e0c:	08009364 	.word	0x08009364
 8001e10:	20000378 	.word	0x20000378
 8001e14:	20000000 	.word	0x20000000
 8001e18:	200003a8 	.word	0x200003a8
 8001e1c:	08009378 	.word	0x08009378
 8001e20:	200003b8 	.word	0x200003b8
 8001e24:	08009380 	.word	0x08009380
 8001e28:	200003ac 	.word	0x200003ac
 8001e2c:	0800938c 	.word	0x0800938c
 8001e30:	08009394 	.word	0x08009394
 8001e34:	200003b0 	.word	0x200003b0
 8001e38:	080093a4 	.word	0x080093a4
 8001e3c:	080093ac 	.word	0x080093ac
 8001e40:	080093c0 	.word	0x080093c0
 8001e44:	200003cc 	.word	0x200003cc
 8001e48:	080093d0 	.word	0x080093d0
 8001e4c:	080093e4 	.word	0x080093e4
 8001e50:	080093f8 	.word	0x080093f8

08001e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e5a:	f000 fc29 	bl	80026b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e5e:	f000 f889 	bl	8001f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e62:	f000 f9c5 	bl	80021f0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001e66:	f000 f8cb 	bl	8002000 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001e6a:	f000 f8f7 	bl	800205c <MX_TIM1_Init>
  MX_TIM4_Init();
 8001e6e:	f000 f947 	bl	8002100 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001e72:	f000 f993 	bl	800219c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
	LCD_Init(&lcd, &hi2c2, LDC_DEFAULT_ADDRESS, 20, 4);
 8001e76:	2304      	movs	r3, #4
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2314      	movs	r3, #20
 8001e7c:	224e      	movs	r2, #78	; 0x4e
 8001e7e:	492a      	ldr	r1, [pc, #168]	; (8001f28 <main+0xd4>)
 8001e80:	482a      	ldr	r0, [pc, #168]	; (8001f2c <main+0xd8>)
 8001e82:	f7ff fc88 	bl	8001796 <LCD_Init>
	DHT11_Init(&dht11, DHT_GPIO_Port, DHT_Pin, &htim4);
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <main+0xdc>)
 8001e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e8c:	4929      	ldr	r1, [pc, #164]	; (8001f34 <main+0xe0>)
 8001e8e:	482a      	ldr	r0, [pc, #168]	; (8001f38 <main+0xe4>)
 8001e90:	f7ff faf0 	bl	8001474 <DHT11_Init>
	SRF05_Init(&hrf05, ECHO_GPIO_Port, ECHO_Pin, TRIG_GPIO_Port, TRIG_Pin);
 8001e94:	2340      	movs	r3, #64	; 0x40
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <main+0xe0>)
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	4925      	ldr	r1, [pc, #148]	; (8001f34 <main+0xe0>)
 8001e9e:	4827      	ldr	r0, [pc, #156]	; (8001f3c <main+0xe8>)
 8001ea0:	f7ff fb8e 	bl	80015c0 <SRF05_Init>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxData[rxDataId], 1);
 8001ea4:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <main+0xec>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <main+0xf0>)
 8001eac:	4413      	add	r3, r2
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4825      	ldr	r0, [pc, #148]	; (8001f48 <main+0xf4>)
 8001eb4:	f002 fba3 	bl	80045fe <HAL_UART_Receive_IT>
	printf("run\r\n");
 8001eb8:	4824      	ldr	r0, [pc, #144]	; (8001f4c <main+0xf8>)
 8001eba:	f003 fd0b 	bl	80058d4 <puts>
		hSCH_Init();
 8001ebe:	f7ff f8cd 	bl	800105c <hSCH_Init>
  /* Infinite loop */
		TASK_DHT= SCH_Add_Task((TASK_SCH *)TASK_Dht_Sense,0,1000/FRAME_TICK_LEN,1,1);
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4820      	ldr	r0, [pc, #128]	; (8001f50 <main+0xfc>)
 8001ece:	f7ff f95f 	bl	8001190 <SCH_Add_Task>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <main+0x100>)
 8001ed6:	6013      	str	r3, [r2, #0]

			TASK_DIST= SCH_Add_Task((TASK_SCH *)TASK_Dist_Sense,0,1000/FRAME_TICK_LEN,1,1);
 8001ed8:	2301      	movs	r3, #1
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2301      	movs	r3, #1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	481d      	ldr	r0, [pc, #116]	; (8001f58 <main+0x104>)
 8001ee4:	f7ff f954 	bl	8001190 <SCH_Add_Task>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <main+0x108>)
 8001eec:	6013      	str	r3, [r2, #0]

			TASK_LCD= SCH_Add_Task((TASK_SCH *)TASK_lcd_Measurement,0,1000/FRAME_TICK_LEN,1,1);
 8001eee:	2301      	movs	r3, #1
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4819      	ldr	r0, [pc, #100]	; (8001f60 <main+0x10c>)
 8001efa:	f7ff f949 	bl	8001190 <SCH_Add_Task>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <main+0x110>)
 8001f02:	6013      	str	r3, [r2, #0]

			TASK_INTERRUPT_HANDLER= SCH_Add_Task((TASK_SCH *)TASK_UART_Handler,0,1000/FRAME_TICK_LEN,1,1);
 8001f04:	2301      	movs	r3, #1
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2301      	movs	r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4816      	ldr	r0, [pc, #88]	; (8001f68 <main+0x114>)
 8001f10:	f7ff f93e 	bl	8001190 <SCH_Add_Task>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <main+0x118>)
 8001f18:	6013      	str	r3, [r2, #0]

			SCH_Start(&htim1);
 8001f1a:	4815      	ldr	r0, [pc, #84]	; (8001f70 <main+0x11c>)
 8001f1c:	f7ff f8dc 	bl	80010d8 <SCH_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  hSCH_Dispatch_Tasks();
 8001f20:	f7ff f8e6 	bl	80010f0 <hSCH_Dispatch_Tasks>
 8001f24:	e7fc      	b.n	8001f20 <main+0xcc>
 8001f26:	bf00      	nop
 8001f28:	20000238 	.word	0x20000238
 8001f2c:	20000378 	.word	0x20000378
 8001f30:	200002d4 	.word	0x200002d4
 8001f34:	40010800 	.word	0x40010800
 8001f38:	20000364 	.word	0x20000364
 8001f3c:	20000384 	.word	0x20000384
 8001f40:	200003f4 	.word	0x200003f4
 8001f44:	200003e0 	.word	0x200003e0
 8001f48:	2000031c 	.word	0x2000031c
 8001f4c:	0800940c 	.word	0x0800940c
 8001f50:	08001bc1 	.word	0x08001bc1
 8001f54:	20000398 	.word	0x20000398
 8001f58:	08001c1d 	.word	0x08001c1d
 8001f5c:	2000039c 	.word	0x2000039c
 8001f60:	08001c61 	.word	0x08001c61
 8001f64:	200003a0 	.word	0x200003a0
 8001f68:	08001a15 	.word	0x08001a15
 8001f6c:	200003a4 	.word	0x200003a4
 8001f70:	2000028c 	.word	0x2000028c

08001f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b090      	sub	sp, #64	; 0x40
 8001f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f7a:	f107 0318 	add.w	r3, r7, #24
 8001f7e:	2228      	movs	r2, #40	; 0x28
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fda6 	bl	8005ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
 8001f94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f96:	2301      	movs	r3, #1
 8001f98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001fb2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb8:	f107 0318 	add.w	r3, r7, #24
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f001 fb31 	bl	8003624 <HAL_RCC_OscConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001fc8:	f000 f96a 	bl	80022a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fcc:	230f      	movs	r3, #15
 8001fce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 fd9e 	bl	8003b28 <HAL_RCC_ClockConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ff2:	f000 f955 	bl	80022a0 <Error_Handler>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3740      	adds	r7, #64	; 0x40
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <MX_I2C2_Init+0x50>)
 8002006:	4a13      	ldr	r2, [pc, #76]	; (8002054 <MX_I2C2_Init+0x54>)
 8002008:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_I2C2_Init+0x50>)
 800200c:	4a12      	ldr	r2, [pc, #72]	; (8002058 <MX_I2C2_Init+0x58>)
 800200e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <MX_I2C2_Init+0x50>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_I2C2_Init+0x50>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_I2C2_Init+0x50>)
 800201e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002022:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <MX_I2C2_Init+0x50>)
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_I2C2_Init+0x50>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <MX_I2C2_Init+0x50>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <MX_I2C2_Init+0x50>)
 8002038:	2200      	movs	r2, #0
 800203a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800203c:	4804      	ldr	r0, [pc, #16]	; (8002050 <MX_I2C2_Init+0x50>)
 800203e:	f000 fe55 	bl	8002cec <HAL_I2C_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002048:	f000 f92a 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000238 	.word	0x20000238
 8002054:	40005800 	.word	0x40005800
 8002058:	000186a0 	.word	0x000186a0

0800205c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002070:	463b      	mov	r3, r7
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002078:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <MX_TIM1_Init+0x9c>)
 800207a:	4a20      	ldr	r2, [pc, #128]	; (80020fc <MX_TIM1_Init+0xa0>)
 800207c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 893;
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <MX_TIM1_Init+0x9c>)
 8002080:	f240 327d 	movw	r2, #893	; 0x37d
 8002084:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <MX_TIM1_Init+0x9c>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <MX_TIM1_Init+0x9c>)
 800208e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002092:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <MX_TIM1_Init+0x9c>)
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <MX_TIM1_Init+0x9c>)
 800209c:	2200      	movs	r2, #0
 800209e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <MX_TIM1_Init+0x9c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020a6:	4814      	ldr	r0, [pc, #80]	; (80020f8 <MX_TIM1_Init+0x9c>)
 80020a8:	f001 fecc 	bl	8003e44 <HAL_TIM_Base_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80020b2:	f000 f8f5 	bl	80022a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	4619      	mov	r1, r3
 80020c2:	480d      	ldr	r0, [pc, #52]	; (80020f8 <MX_TIM1_Init+0x9c>)
 80020c4:	f001 ffaa 	bl	800401c <HAL_TIM_ConfigClockSource>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80020ce:	f000 f8e7 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020da:	463b      	mov	r3, r7
 80020dc:	4619      	mov	r1, r3
 80020de:	4806      	ldr	r0, [pc, #24]	; (80020f8 <MX_TIM1_Init+0x9c>)
 80020e0:	f002 f95c 	bl	800439c <HAL_TIMEx_MasterConfigSynchronization>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80020ea:	f000 f8d9 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000028c 	.word	0x2000028c
 80020fc:	40012c00 	.word	0x40012c00

08002100 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002114:	463b      	mov	r3, r7
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <MX_TIM4_Init+0x94>)
 800211e:	4a1e      	ldr	r2, [pc, #120]	; (8002198 <MX_TIM4_Init+0x98>)
 8002120:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002122:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <MX_TIM4_Init+0x94>)
 8002124:	2253      	movs	r2, #83	; 0x53
 8002126:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002128:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <MX_TIM4_Init+0x94>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <MX_TIM4_Init+0x94>)
 8002130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002134:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <MX_TIM4_Init+0x94>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213c:	4b15      	ldr	r3, [pc, #84]	; (8002194 <MX_TIM4_Init+0x94>)
 800213e:	2200      	movs	r2, #0
 8002140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002142:	4814      	ldr	r0, [pc, #80]	; (8002194 <MX_TIM4_Init+0x94>)
 8002144:	f001 fe7e 	bl	8003e44 <HAL_TIM_Base_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800214e:	f000 f8a7 	bl	80022a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002156:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	4619      	mov	r1, r3
 800215e:	480d      	ldr	r0, [pc, #52]	; (8002194 <MX_TIM4_Init+0x94>)
 8002160:	f001 ff5c 	bl	800401c <HAL_TIM_ConfigClockSource>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800216a:	f000 f899 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002176:	463b      	mov	r3, r7
 8002178:	4619      	mov	r1, r3
 800217a:	4806      	ldr	r0, [pc, #24]	; (8002194 <MX_TIM4_Init+0x94>)
 800217c:	f002 f90e 	bl	800439c <HAL_TIMEx_MasterConfigSynchronization>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002186:	f000 f88b 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200002d4 	.word	0x200002d4
 8002198:	40000800 	.word	0x40000800

0800219c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <MX_USART2_UART_Init+0x50>)
 80021a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021c2:	220c      	movs	r2, #12
 80021c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021d4:	f002 f940 	bl	8004458 <HAL_UART_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021de:	f000 f85f 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000031c 	.word	0x2000031c
 80021ec:	40004400 	.word	0x40004400

080021f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <MX_GPIO_Init+0xa8>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	4a23      	ldr	r2, [pc, #140]	; (8002298 <MX_GPIO_Init+0xa8>)
 800220a:	f043 0320 	orr.w	r3, r3, #32
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <MX_GPIO_Init+0xa8>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <MX_GPIO_Init+0xa8>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <MX_GPIO_Init+0xa8>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <MX_GPIO_Init+0xa8>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <MX_GPIO_Init+0xa8>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	4a17      	ldr	r2, [pc, #92]	; (8002298 <MX_GPIO_Init+0xa8>)
 800223a:	f043 0308 	orr.w	r3, r3, #8
 800223e:	6193      	str	r3, [r2, #24]
 8002240:	4b15      	ldr	r3, [pc, #84]	; (8002298 <MX_GPIO_Init+0xa8>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|DHT_Pin, GPIO_PIN_RESET);
 800224c:	2200      	movs	r2, #0
 800224e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002252:	4812      	ldr	r0, [pc, #72]	; (800229c <MX_GPIO_Init+0xac>)
 8002254:	f000 fd31 	bl	8002cba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8002258:	2320      	movs	r3, #32
 800225a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	4619      	mov	r1, r3
 800226a:	480c      	ldr	r0, [pc, #48]	; (800229c <MX_GPIO_Init+0xac>)
 800226c:	f000 fb8a 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin DHT_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|DHT_Pin;
 8002270:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2302      	movs	r3, #2
 8002280:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	4619      	mov	r1, r3
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <MX_GPIO_Init+0xac>)
 800228a:	f000 fb7b 	bl	8002984 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800228e:	bf00      	nop
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	40010800 	.word	0x40010800

080022a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022a4:	b672      	cpsid	i
}
 80022a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <Error_Handler+0x8>
	...

080022ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_MspInit+0x5c>)
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	4a14      	ldr	r2, [pc, #80]	; (8002308 <HAL_MspInit+0x5c>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6193      	str	r3, [r2, #24]
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_MspInit+0x5c>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_MspInit+0x5c>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <HAL_MspInit+0x5c>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	61d3      	str	r3, [r2, #28]
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_MspInit+0x5c>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_MspInit+0x60>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_MspInit+0x60>)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	40021000 	.word	0x40021000
 800230c:	40010000 	.word	0x40010000

08002310 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a16      	ldr	r2, [pc, #88]	; (8002384 <HAL_I2C_MspInit+0x74>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d124      	bne.n	800237a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002330:	4b15      	ldr	r3, [pc, #84]	; (8002388 <HAL_I2C_MspInit+0x78>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	4a14      	ldr	r2, [pc, #80]	; (8002388 <HAL_I2C_MspInit+0x78>)
 8002336:	f043 0308 	orr.w	r3, r3, #8
 800233a:	6193      	str	r3, [r2, #24]
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_I2C_MspInit+0x78>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002348:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800234c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800234e:	2312      	movs	r3, #18
 8002350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002352:	2303      	movs	r3, #3
 8002354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002356:	f107 0310 	add.w	r3, r7, #16
 800235a:	4619      	mov	r1, r3
 800235c:	480b      	ldr	r0, [pc, #44]	; (800238c <HAL_I2C_MspInit+0x7c>)
 800235e:	f000 fb11 	bl	8002984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_I2C_MspInit+0x78>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a08      	ldr	r2, [pc, #32]	; (8002388 <HAL_I2C_MspInit+0x78>)
 8002368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800236c:	61d3      	str	r3, [r2, #28]
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_I2C_MspInit+0x78>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800237a:	bf00      	nop
 800237c:	3720      	adds	r7, #32
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40005800 	.word	0x40005800
 8002388:	40021000 	.word	0x40021000
 800238c:	40010c00 	.word	0x40010c00

08002390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <HAL_TIM_Base_MspInit+0x58>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d10c      	bne.n	80023bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_TIM_Base_MspInit+0x5c>)
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	4a11      	ldr	r2, [pc, #68]	; (80023ec <HAL_TIM_Base_MspInit+0x5c>)
 80023a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023ac:	6193      	str	r3, [r2, #24]
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_TIM_Base_MspInit+0x5c>)
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023ba:	e010      	b.n	80023de <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <HAL_TIM_Base_MspInit+0x60>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10b      	bne.n	80023de <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_TIM_Base_MspInit+0x5c>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_TIM_Base_MspInit+0x5c>)
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	61d3      	str	r3, [r2, #28]
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_TIM_Base_MspInit+0x5c>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	40012c00 	.word	0x40012c00
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40000800 	.word	0x40000800

080023f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1b      	ldr	r2, [pc, #108]	; (800247c <HAL_UART_MspInit+0x88>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d12f      	bne.n	8002474 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002414:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HAL_UART_MspInit+0x8c>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	4a19      	ldr	r2, [pc, #100]	; (8002480 <HAL_UART_MspInit+0x8c>)
 800241a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241e:	61d3      	str	r3, [r2, #28]
 8002420:	4b17      	ldr	r3, [pc, #92]	; (8002480 <HAL_UART_MspInit+0x8c>)
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <HAL_UART_MspInit+0x8c>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4a13      	ldr	r2, [pc, #76]	; (8002480 <HAL_UART_MspInit+0x8c>)
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	6193      	str	r3, [r2, #24]
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_UART_MspInit+0x8c>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002444:	2304      	movs	r3, #4
 8002446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	4619      	mov	r1, r3
 8002456:	480b      	ldr	r0, [pc, #44]	; (8002484 <HAL_UART_MspInit+0x90>)
 8002458:	f000 fa94 	bl	8002984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800245c:	2308      	movs	r3, #8
 800245e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	4619      	mov	r1, r3
 800246e:	4805      	ldr	r0, [pc, #20]	; (8002484 <HAL_UART_MspInit+0x90>)
 8002470:	f000 fa88 	bl	8002984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002474:	bf00      	nop
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40004400 	.word	0x40004400
 8002480:	40021000 	.word	0x40021000
 8002484:	40010800 	.word	0x40010800

08002488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800248c:	e7fe      	b.n	800248c <NMI_Handler+0x4>

0800248e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002492:	e7fe      	b.n	8002492 <HardFault_Handler+0x4>

08002494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <MemManage_Handler+0x4>

0800249a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800249e:	e7fe      	b.n	800249e <BusFault_Handler+0x4>

080024a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <UsageFault_Handler+0x4>

080024a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr

080024be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ce:	f000 f935 	bl	800273c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  return 1;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <_kill>:

int _kill(int pid, int sig)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024ee:	f003 fb9f 	bl	8005c30 <__errno>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2216      	movs	r2, #22
 80024f6:	601a      	str	r2, [r3, #0]
  return -1;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_exit>:

void _exit (int status)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800250c:	f04f 31ff 	mov.w	r1, #4294967295
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ffe7 	bl	80024e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002516:	e7fe      	b.n	8002516 <_exit+0x12>

08002518 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	e00a      	b.n	8002540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800252a:	f3af 8000 	nop.w
 800252e:	4601      	mov	r1, r0
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	60ba      	str	r2, [r7, #8]
 8002536:	b2ca      	uxtb	r2, r1
 8002538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	3301      	adds	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	dbf0      	blt.n	800252a <_read+0x12>
  }

  return len;
 8002548:	687b      	ldr	r3, [r7, #4]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e009      	b.n	8002578 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	60ba      	str	r2, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fa3f 	bl	80019f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	dbf1      	blt.n	8002564 <_write+0x12>
  }
  return len;
 8002580:	687b      	ldr	r3, [r7, #4]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_close>:

int _close(int file)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025b0:	605a      	str	r2, [r3, #4]
  return 0;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <_isatty>:

int _isatty(int file)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
	...

080025ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <_sbrk+0x5c>)
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <_sbrk+0x60>)
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <_sbrk+0x64>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <_sbrk+0x68>)
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	429a      	cmp	r2, r3
 800261a:	d207      	bcs.n	800262c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800261c:	f003 fb08 	bl	8005c30 <__errno>
 8002620:	4603      	mov	r3, r0
 8002622:	220c      	movs	r2, #12
 8002624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	e009      	b.n	8002640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <_sbrk+0x64>)
 800263c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20005000 	.word	0x20005000
 800264c:	00000400 	.word	0x00000400
 8002650:	200003f8 	.word	0x200003f8
 8002654:	20000550 	.word	0x20000550

08002658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002664:	f7ff fff8 	bl	8002658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002668:	480b      	ldr	r0, [pc, #44]	; (8002698 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800266a:	490c      	ldr	r1, [pc, #48]	; (800269c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800266c:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002670:	e002      	b.n	8002678 <LoopCopyDataInit>

08002672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002676:	3304      	adds	r3, #4

08002678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800267c:	d3f9      	bcc.n	8002672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267e:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002680:	4c09      	ldr	r4, [pc, #36]	; (80026a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002684:	e001      	b.n	800268a <LoopFillZerobss>

08002686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002688:	3204      	adds	r2, #4

0800268a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800268c:	d3fb      	bcc.n	8002686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800268e:	f003 fad5 	bl	8005c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002692:	f7ff fbdf 	bl	8001e54 <main>
  bx lr
 8002696:	4770      	bx	lr
  ldr r0, =_sdata
 8002698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800269c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80026a0:	080098cc 	.word	0x080098cc
  ldr r2, =_sbss
 80026a4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80026a8:	2000054c 	.word	0x2000054c

080026ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026ac:	e7fe      	b.n	80026ac <ADC1_2_IRQHandler>
	...

080026b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <HAL_Init+0x28>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <HAL_Init+0x28>)
 80026ba:	f043 0310 	orr.w	r3, r3, #16
 80026be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c0:	2003      	movs	r0, #3
 80026c2:	f000 f92b 	bl	800291c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026c6:	200f      	movs	r0, #15
 80026c8:	f000 f808 	bl	80026dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026cc:	f7ff fdee 	bl	80022ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40022000 	.word	0x40022000

080026dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_InitTick+0x54>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_InitTick+0x58>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f935 	bl	800296a <HAL_SYSTICK_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e00e      	b.n	8002728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b0f      	cmp	r3, #15
 800270e:	d80a      	bhi.n	8002726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002710:	2200      	movs	r2, #0
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	f000 f90b 	bl	8002932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800271c:	4a06      	ldr	r2, [pc, #24]	; (8002738 <HAL_InitTick+0x5c>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e000      	b.n	8002728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000004 	.word	0x20000004
 8002734:	2000000c 	.word	0x2000000c
 8002738:	20000008 	.word	0x20000008

0800273c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_IncTick+0x1c>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_IncTick+0x20>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4413      	add	r3, r2
 800274c:	4a03      	ldr	r2, [pc, #12]	; (800275c <HAL_IncTick+0x20>)
 800274e:	6013      	str	r3, [r2, #0]
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	2000000c 	.word	0x2000000c
 800275c:	200003fc 	.word	0x200003fc

08002760 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return uwTick;
 8002764:	4b02      	ldr	r3, [pc, #8]	; (8002770 <HAL_GetTick+0x10>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	200003fc 	.word	0x200003fc

08002774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800277c:	f7ff fff0 	bl	8002760 <HAL_GetTick>
 8002780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d005      	beq.n	800279a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <HAL_Delay+0x44>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800279a:	bf00      	nop
 800279c:	f7ff ffe0 	bl	8002760 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d8f7      	bhi.n	800279c <HAL_Delay+0x28>
  {
  }
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	2000000c 	.word	0x2000000c

080027bc <__NVIC_SetPriorityGrouping>:
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d8:	4013      	ands	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ee:	4a04      	ldr	r2, [pc, #16]	; (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	60d3      	str	r3, [r2, #12]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_GetPriorityGrouping>:
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <__NVIC_GetPriorityGrouping+0x18>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	f003 0307 	and.w	r3, r3, #7
}
 8002812:	4618      	mov	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	6039      	str	r1, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	2b00      	cmp	r3, #0
 8002832:	db0a      	blt.n	800284a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	490c      	ldr	r1, [pc, #48]	; (800286c <__NVIC_SetPriority+0x4c>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	0112      	lsls	r2, r2, #4
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	440b      	add	r3, r1
 8002844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002848:	e00a      	b.n	8002860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4908      	ldr	r1, [pc, #32]	; (8002870 <__NVIC_SetPriority+0x50>)
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	3b04      	subs	r3, #4
 8002858:	0112      	lsls	r2, r2, #4
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	440b      	add	r3, r1
 800285e:	761a      	strb	r2, [r3, #24]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000e100 	.word	0xe000e100
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f1c3 0307 	rsb	r3, r3, #7
 800288e:	2b04      	cmp	r3, #4
 8002890:	bf28      	it	cs
 8002892:	2304      	movcs	r3, #4
 8002894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3304      	adds	r3, #4
 800289a:	2b06      	cmp	r3, #6
 800289c:	d902      	bls.n	80028a4 <NVIC_EncodePriority+0x30>
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3b03      	subs	r3, #3
 80028a2:	e000      	b.n	80028a6 <NVIC_EncodePriority+0x32>
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	401a      	ands	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028bc:	f04f 31ff 	mov.w	r1, #4294967295
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	43d9      	mvns	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	4313      	orrs	r3, r2
         );
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e8:	d301      	bcc.n	80028ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00f      	b.n	800290e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <SysTick_Config+0x40>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f6:	210f      	movs	r1, #15
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f7ff ff90 	bl	8002820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <SysTick_Config+0x40>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <SysTick_Config+0x40>)
 8002908:	2207      	movs	r2, #7
 800290a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	e000e010 	.word	0xe000e010

0800291c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff49 	bl	80027bc <__NVIC_SetPriorityGrouping>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002944:	f7ff ff5e 	bl	8002804 <__NVIC_GetPriorityGrouping>
 8002948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f7ff ff90 	bl	8002874 <NVIC_EncodePriority>
 8002954:	4602      	mov	r2, r0
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff5f 	bl	8002820 <__NVIC_SetPriority>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ffb0 	bl	80028d8 <SysTick_Config>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002984:	b480      	push	{r7}
 8002986:	b08b      	sub	sp, #44	; 0x2c
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800298e:	2300      	movs	r3, #0
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002996:	e169      	b.n	8002c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002998:	2201      	movs	r2, #1
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	f040 8158 	bne.w	8002c66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4a9a      	ldr	r2, [pc, #616]	; (8002c24 <HAL_GPIO_Init+0x2a0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d05e      	beq.n	8002a7e <HAL_GPIO_Init+0xfa>
 80029c0:	4a98      	ldr	r2, [pc, #608]	; (8002c24 <HAL_GPIO_Init+0x2a0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d875      	bhi.n	8002ab2 <HAL_GPIO_Init+0x12e>
 80029c6:	4a98      	ldr	r2, [pc, #608]	; (8002c28 <HAL_GPIO_Init+0x2a4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d058      	beq.n	8002a7e <HAL_GPIO_Init+0xfa>
 80029cc:	4a96      	ldr	r2, [pc, #600]	; (8002c28 <HAL_GPIO_Init+0x2a4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d86f      	bhi.n	8002ab2 <HAL_GPIO_Init+0x12e>
 80029d2:	4a96      	ldr	r2, [pc, #600]	; (8002c2c <HAL_GPIO_Init+0x2a8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d052      	beq.n	8002a7e <HAL_GPIO_Init+0xfa>
 80029d8:	4a94      	ldr	r2, [pc, #592]	; (8002c2c <HAL_GPIO_Init+0x2a8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d869      	bhi.n	8002ab2 <HAL_GPIO_Init+0x12e>
 80029de:	4a94      	ldr	r2, [pc, #592]	; (8002c30 <HAL_GPIO_Init+0x2ac>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d04c      	beq.n	8002a7e <HAL_GPIO_Init+0xfa>
 80029e4:	4a92      	ldr	r2, [pc, #584]	; (8002c30 <HAL_GPIO_Init+0x2ac>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d863      	bhi.n	8002ab2 <HAL_GPIO_Init+0x12e>
 80029ea:	4a92      	ldr	r2, [pc, #584]	; (8002c34 <HAL_GPIO_Init+0x2b0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d046      	beq.n	8002a7e <HAL_GPIO_Init+0xfa>
 80029f0:	4a90      	ldr	r2, [pc, #576]	; (8002c34 <HAL_GPIO_Init+0x2b0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d85d      	bhi.n	8002ab2 <HAL_GPIO_Init+0x12e>
 80029f6:	2b12      	cmp	r3, #18
 80029f8:	d82a      	bhi.n	8002a50 <HAL_GPIO_Init+0xcc>
 80029fa:	2b12      	cmp	r3, #18
 80029fc:	d859      	bhi.n	8002ab2 <HAL_GPIO_Init+0x12e>
 80029fe:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <HAL_GPIO_Init+0x80>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002a7f 	.word	0x08002a7f
 8002a08:	08002a59 	.word	0x08002a59
 8002a0c:	08002a6b 	.word	0x08002a6b
 8002a10:	08002aad 	.word	0x08002aad
 8002a14:	08002ab3 	.word	0x08002ab3
 8002a18:	08002ab3 	.word	0x08002ab3
 8002a1c:	08002ab3 	.word	0x08002ab3
 8002a20:	08002ab3 	.word	0x08002ab3
 8002a24:	08002ab3 	.word	0x08002ab3
 8002a28:	08002ab3 	.word	0x08002ab3
 8002a2c:	08002ab3 	.word	0x08002ab3
 8002a30:	08002ab3 	.word	0x08002ab3
 8002a34:	08002ab3 	.word	0x08002ab3
 8002a38:	08002ab3 	.word	0x08002ab3
 8002a3c:	08002ab3 	.word	0x08002ab3
 8002a40:	08002ab3 	.word	0x08002ab3
 8002a44:	08002ab3 	.word	0x08002ab3
 8002a48:	08002a61 	.word	0x08002a61
 8002a4c:	08002a75 	.word	0x08002a75
 8002a50:	4a79      	ldr	r2, [pc, #484]	; (8002c38 <HAL_GPIO_Init+0x2b4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a56:	e02c      	b.n	8002ab2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	623b      	str	r3, [r7, #32]
          break;
 8002a5e:	e029      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	3304      	adds	r3, #4
 8002a66:	623b      	str	r3, [r7, #32]
          break;
 8002a68:	e024      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	3308      	adds	r3, #8
 8002a70:	623b      	str	r3, [r7, #32]
          break;
 8002a72:	e01f      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	623b      	str	r3, [r7, #32]
          break;
 8002a7c:	e01a      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d102      	bne.n	8002a8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a86:	2304      	movs	r3, #4
 8002a88:	623b      	str	r3, [r7, #32]
          break;
 8002a8a:	e013      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a94:	2308      	movs	r3, #8
 8002a96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	611a      	str	r2, [r3, #16]
          break;
 8002a9e:	e009      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	615a      	str	r2, [r3, #20]
          break;
 8002aaa:	e003      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002aac:	2300      	movs	r3, #0
 8002aae:	623b      	str	r3, [r7, #32]
          break;
 8002ab0:	e000      	b.n	8002ab4 <HAL_GPIO_Init+0x130>
          break;
 8002ab2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2bff      	cmp	r3, #255	; 0xff
 8002ab8:	d801      	bhi.n	8002abe <HAL_GPIO_Init+0x13a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	e001      	b.n	8002ac2 <HAL_GPIO_Init+0x13e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2bff      	cmp	r3, #255	; 0xff
 8002ac8:	d802      	bhi.n	8002ad0 <HAL_GPIO_Init+0x14c>
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	e002      	b.n	8002ad6 <HAL_GPIO_Init+0x152>
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	3b08      	subs	r3, #8
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	210f      	movs	r1, #15
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	6a39      	ldr	r1, [r7, #32]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	fa01 f303 	lsl.w	r3, r1, r3
 8002af0:	431a      	orrs	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80b1 	beq.w	8002c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b04:	4b4d      	ldr	r3, [pc, #308]	; (8002c3c <HAL_GPIO_Init+0x2b8>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	4a4c      	ldr	r2, [pc, #304]	; (8002c3c <HAL_GPIO_Init+0x2b8>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6193      	str	r3, [r2, #24]
 8002b10:	4b4a      	ldr	r3, [pc, #296]	; (8002c3c <HAL_GPIO_Init+0x2b8>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b1c:	4a48      	ldr	r2, [pc, #288]	; (8002c40 <HAL_GPIO_Init+0x2bc>)
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	3302      	adds	r3, #2
 8002b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	220f      	movs	r2, #15
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a40      	ldr	r2, [pc, #256]	; (8002c44 <HAL_GPIO_Init+0x2c0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d013      	beq.n	8002b70 <HAL_GPIO_Init+0x1ec>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a3f      	ldr	r2, [pc, #252]	; (8002c48 <HAL_GPIO_Init+0x2c4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00d      	beq.n	8002b6c <HAL_GPIO_Init+0x1e8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a3e      	ldr	r2, [pc, #248]	; (8002c4c <HAL_GPIO_Init+0x2c8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d007      	beq.n	8002b68 <HAL_GPIO_Init+0x1e4>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a3d      	ldr	r2, [pc, #244]	; (8002c50 <HAL_GPIO_Init+0x2cc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d101      	bne.n	8002b64 <HAL_GPIO_Init+0x1e0>
 8002b60:	2303      	movs	r3, #3
 8002b62:	e006      	b.n	8002b72 <HAL_GPIO_Init+0x1ee>
 8002b64:	2304      	movs	r3, #4
 8002b66:	e004      	b.n	8002b72 <HAL_GPIO_Init+0x1ee>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e002      	b.n	8002b72 <HAL_GPIO_Init+0x1ee>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <HAL_GPIO_Init+0x1ee>
 8002b70:	2300      	movs	r3, #0
 8002b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b74:	f002 0203 	and.w	r2, r2, #3
 8002b78:	0092      	lsls	r2, r2, #2
 8002b7a:	4093      	lsls	r3, r2
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b82:	492f      	ldr	r1, [pc, #188]	; (8002c40 <HAL_GPIO_Init+0x2bc>)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	3302      	adds	r3, #2
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d006      	beq.n	8002baa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b9c:	4b2d      	ldr	r3, [pc, #180]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	492c      	ldr	r1, [pc, #176]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002baa:	4b2a      	ldr	r3, [pc, #168]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	4928      	ldr	r1, [pc, #160]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d006      	beq.n	8002bd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4922      	ldr	r1, [pc, #136]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60cb      	str	r3, [r1, #12]
 8002bd0:	e006      	b.n	8002be0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	491e      	ldr	r1, [pc, #120]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	4918      	ldr	r1, [pc, #96]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bfa:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	4914      	ldr	r1, [pc, #80]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d021      	beq.n	8002c58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	490e      	ldr	r1, [pc, #56]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]
 8002c20:	e021      	b.n	8002c66 <HAL_GPIO_Init+0x2e2>
 8002c22:	bf00      	nop
 8002c24:	10320000 	.word	0x10320000
 8002c28:	10310000 	.word	0x10310000
 8002c2c:	10220000 	.word	0x10220000
 8002c30:	10210000 	.word	0x10210000
 8002c34:	10120000 	.word	0x10120000
 8002c38:	10110000 	.word	0x10110000
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40010000 	.word	0x40010000
 8002c44:	40010800 	.word	0x40010800
 8002c48:	40010c00 	.word	0x40010c00
 8002c4c:	40011000 	.word	0x40011000
 8002c50:	40011400 	.word	0x40011400
 8002c54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_GPIO_Init+0x304>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	4909      	ldr	r1, [pc, #36]	; (8002c88 <HAL_GPIO_Init+0x304>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	3301      	adds	r3, #1
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f47f ae8e 	bne.w	8002998 <HAL_GPIO_Init+0x14>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	372c      	adds	r7, #44	; 0x2c
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	40010400 	.word	0x40010400

08002c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	887b      	ldrh	r3, [r7, #2]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e001      	b.n	8002cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	807b      	strh	r3, [r7, #2]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cca:	787b      	ldrb	r3, [r7, #1]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd0:	887a      	ldrh	r2, [r7, #2]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cd6:	e003      	b.n	8002ce0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cd8:	887b      	ldrh	r3, [r7, #2]
 8002cda:	041a      	lsls	r2, r3, #16
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	611a      	str	r2, [r3, #16]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e12b      	b.n	8002f56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff fafc 	bl	8002310 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2224      	movs	r2, #36	; 0x24
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d50:	f001 f832 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 8002d54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4a81      	ldr	r2, [pc, #516]	; (8002f60 <HAL_I2C_Init+0x274>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d807      	bhi.n	8002d70 <HAL_I2C_Init+0x84>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a80      	ldr	r2, [pc, #512]	; (8002f64 <HAL_I2C_Init+0x278>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	bf94      	ite	ls
 8002d68:	2301      	movls	r3, #1
 8002d6a:	2300      	movhi	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e006      	b.n	8002d7e <HAL_I2C_Init+0x92>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4a7d      	ldr	r2, [pc, #500]	; (8002f68 <HAL_I2C_Init+0x27c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	bf94      	ite	ls
 8002d78:	2301      	movls	r3, #1
 8002d7a:	2300      	movhi	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0e7      	b.n	8002f56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4a78      	ldr	r2, [pc, #480]	; (8002f6c <HAL_I2C_Init+0x280>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	0c9b      	lsrs	r3, r3, #18
 8002d90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4a6a      	ldr	r2, [pc, #424]	; (8002f60 <HAL_I2C_Init+0x274>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d802      	bhi.n	8002dc0 <HAL_I2C_Init+0xd4>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	e009      	b.n	8002dd4 <HAL_I2C_Init+0xe8>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	4a69      	ldr	r2, [pc, #420]	; (8002f70 <HAL_I2C_Init+0x284>)
 8002dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002de6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	495c      	ldr	r1, [pc, #368]	; (8002f60 <HAL_I2C_Init+0x274>)
 8002df0:	428b      	cmp	r3, r1
 8002df2:	d819      	bhi.n	8002e28 <HAL_I2C_Init+0x13c>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e59      	subs	r1, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e02:	1c59      	adds	r1, r3, #1
 8002e04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e08:	400b      	ands	r3, r1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_I2C_Init+0x138>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1e59      	subs	r1, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e22:	e051      	b.n	8002ec8 <HAL_I2C_Init+0x1dc>
 8002e24:	2304      	movs	r3, #4
 8002e26:	e04f      	b.n	8002ec8 <HAL_I2C_Init+0x1dc>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d111      	bne.n	8002e54 <HAL_I2C_Init+0x168>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1e58      	subs	r0, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	440b      	add	r3, r1
 8002e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e012      	b.n	8002e7a <HAL_I2C_Init+0x18e>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1e58      	subs	r0, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	0099      	lsls	r1, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Init+0x196>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e022      	b.n	8002ec8 <HAL_I2C_Init+0x1dc>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10e      	bne.n	8002ea8 <HAL_I2C_Init+0x1bc>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1e58      	subs	r0, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	440b      	add	r3, r1
 8002e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea6:	e00f      	b.n	8002ec8 <HAL_I2C_Init+0x1dc>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	0099      	lsls	r1, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	6809      	ldr	r1, [r1, #0]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69da      	ldr	r2, [r3, #28]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6911      	ldr	r1, [r2, #16]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68d2      	ldr	r2, [r2, #12]
 8002f02:	4311      	orrs	r1, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	000186a0 	.word	0x000186a0
 8002f64:	001e847f 	.word	0x001e847f
 8002f68:	003d08ff 	.word	0x003d08ff
 8002f6c:	431bde83 	.word	0x431bde83
 8002f70:	10624dd3 	.word	0x10624dd3

08002f74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	460b      	mov	r3, r1
 8002f82:	817b      	strh	r3, [r7, #10]
 8002f84:	4613      	mov	r3, r2
 8002f86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f88:	f7ff fbea 	bl	8002760 <HAL_GetTick>
 8002f8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	f040 80e0 	bne.w	800315c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2319      	movs	r3, #25
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	4970      	ldr	r1, [pc, #448]	; (8003168 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f964 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0d3      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_I2C_Master_Transmit+0x50>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e0cc      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d007      	beq.n	8002fea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0201 	orr.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2221      	movs	r2, #33	; 0x21
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2210      	movs	r2, #16
 8003006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	893a      	ldrh	r2, [r7, #8]
 800301a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a50      	ldr	r2, [pc, #320]	; (800316c <HAL_I2C_Master_Transmit+0x1f8>)
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800302c:	8979      	ldrh	r1, [r7, #10]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	6a3a      	ldr	r2, [r7, #32]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f89c 	bl	8003170 <I2C_MasterRequestWrite>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e08d      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003058:	e066      	b.n	8003128 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	6a39      	ldr	r1, [r7, #32]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fa22 	bl	80034a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	2b04      	cmp	r3, #4
 8003070:	d107      	bne.n	8003082 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003080:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e06b      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d11b      	bne.n	80030fc <HAL_I2C_Master_Transmit+0x188>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d017      	beq.n	80030fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	6a39      	ldr	r1, [r7, #32]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fa19 	bl	8003538 <I2C_WaitOnBTFFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00d      	beq.n	8003128 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	2b04      	cmp	r3, #4
 8003112:	d107      	bne.n	8003124 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e01a      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	2b00      	cmp	r3, #0
 800312e:	d194      	bne.n	800305a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800315c:	2302      	movs	r3, #2
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	00100002 	.word	0x00100002
 800316c:	ffff0000 	.word	0xffff0000

08003170 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	460b      	mov	r3, r1
 800317e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d006      	beq.n	800319a <I2C_MasterRequestWrite+0x2a>
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d003      	beq.n	800319a <I2C_MasterRequestWrite+0x2a>
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003198:	d108      	bne.n	80031ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	e00b      	b.n	80031c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	2b12      	cmp	r3, #18
 80031b2:	d107      	bne.n	80031c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f84f 	bl	8003274 <I2C_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00d      	beq.n	80031f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ea:	d103      	bne.n	80031f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e035      	b.n	8003264 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003200:	d108      	bne.n	8003214 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003202:	897b      	ldrh	r3, [r7, #10]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003210:	611a      	str	r2, [r3, #16]
 8003212:	e01b      	b.n	800324c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003214:	897b      	ldrh	r3, [r7, #10]
 8003216:	11db      	asrs	r3, r3, #7
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f003 0306 	and.w	r3, r3, #6
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f063 030f 	orn	r3, r3, #15
 8003224:	b2da      	uxtb	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	490e      	ldr	r1, [pc, #56]	; (800326c <I2C_MasterRequestWrite+0xfc>)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f898 	bl	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e010      	b.n	8003264 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003242:	897b      	ldrh	r3, [r7, #10]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4907      	ldr	r1, [pc, #28]	; (8003270 <I2C_MasterRequestWrite+0x100>)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f888 	bl	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	00010008 	.word	0x00010008
 8003270:	00010002 	.word	0x00010002

08003274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003284:	e048      	b.n	8003318 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d044      	beq.n	8003318 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328e:	f7ff fa67 	bl	8002760 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d302      	bcc.n	80032a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d139      	bne.n	8003318 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	0c1b      	lsrs	r3, r3, #16
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d10d      	bne.n	80032ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	43da      	mvns	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4013      	ands	r3, r2
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	e00c      	b.n	80032e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	43da      	mvns	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4013      	ands	r3, r2
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d116      	bne.n	8003318 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e023      	b.n	8003360 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	0c1b      	lsrs	r3, r3, #16
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d10d      	bne.n	800333e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	43da      	mvns	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4013      	ands	r3, r2
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf0c      	ite	eq
 8003334:	2301      	moveq	r3, #1
 8003336:	2300      	movne	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	e00c      	b.n	8003358 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	43da      	mvns	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4013      	ands	r3, r2
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	429a      	cmp	r2, r3
 800335c:	d093      	beq.n	8003286 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003376:	e071      	b.n	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003386:	d123      	bne.n	80033d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003396:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f043 0204 	orr.w	r2, r3, #4
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e067      	b.n	80034a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d041      	beq.n	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d8:	f7ff f9c2 	bl	8002760 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d302      	bcc.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d136      	bne.n	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10c      	bne.n	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf14      	ite	ne
 800340a:	2301      	movne	r3, #1
 800340c:	2300      	moveq	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	e00b      	b.n	800342a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	43da      	mvns	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d016      	beq.n	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e021      	b.n	80034a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	0c1b      	lsrs	r3, r3, #16
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d10c      	bne.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	43da      	mvns	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4013      	ands	r3, r2
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e00b      	b.n	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	43da      	mvns	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4013      	ands	r3, r2
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	bf14      	ite	ne
 8003492:	2301      	movne	r3, #1
 8003494:	2300      	moveq	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	f47f af6d 	bne.w	8003378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034b4:	e034      	b.n	8003520 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f886 	bl	80035c8 <I2C_IsAcknowledgeFailed>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e034      	b.n	8003530 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d028      	beq.n	8003520 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ce:	f7ff f947 	bl	8002760 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d302      	bcc.n	80034e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d11d      	bne.n	8003520 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d016      	beq.n	8003520 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e007      	b.n	8003530 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352a:	2b80      	cmp	r3, #128	; 0x80
 800352c:	d1c3      	bne.n	80034b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003544:	e034      	b.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f83e 	bl	80035c8 <I2C_IsAcknowledgeFailed>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e034      	b.n	80035c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d028      	beq.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7ff f8ff 	bl	8002760 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d11d      	bne.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d016      	beq.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f043 0220 	orr.w	r2, r3, #32
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e007      	b.n	80035c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d1c3      	bne.n	8003546 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035de:	d11b      	bne.n	8003618 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	f043 0204 	orr.w	r2, r3, #4
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e272      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8087 	beq.w	8003752 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003644:	4b92      	ldr	r3, [pc, #584]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b04      	cmp	r3, #4
 800364e:	d00c      	beq.n	800366a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003650:	4b8f      	ldr	r3, [pc, #572]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b08      	cmp	r3, #8
 800365a:	d112      	bne.n	8003682 <HAL_RCC_OscConfig+0x5e>
 800365c:	4b8c      	ldr	r3, [pc, #560]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003668:	d10b      	bne.n	8003682 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366a:	4b89      	ldr	r3, [pc, #548]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d06c      	beq.n	8003750 <HAL_RCC_OscConfig+0x12c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d168      	bne.n	8003750 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e24c      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x76>
 800368c:	4b80      	ldr	r3, [pc, #512]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a7f      	ldr	r2, [pc, #508]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e02e      	b.n	80036f8 <HAL_RCC_OscConfig+0xd4>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x98>
 80036a2:	4b7b      	ldr	r3, [pc, #492]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a7a      	ldr	r2, [pc, #488]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b78      	ldr	r3, [pc, #480]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a77      	ldr	r2, [pc, #476]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e01d      	b.n	80036f8 <HAL_RCC_OscConfig+0xd4>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0xbc>
 80036c6:	4b72      	ldr	r3, [pc, #456]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a71      	ldr	r2, [pc, #452]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b6f      	ldr	r3, [pc, #444]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a6e      	ldr	r2, [pc, #440]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e00b      	b.n	80036f8 <HAL_RCC_OscConfig+0xd4>
 80036e0:	4b6b      	ldr	r3, [pc, #428]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6a      	ldr	r2, [pc, #424]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b68      	ldr	r3, [pc, #416]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a67      	ldr	r2, [pc, #412]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d013      	beq.n	8003728 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7ff f82e 	bl	8002760 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003708:	f7ff f82a 	bl	8002760 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e200      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b5d      	ldr	r3, [pc, #372]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0xe4>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7ff f81a 	bl	8002760 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7ff f816 	bl	8002760 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e1ec      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003742:	4b53      	ldr	r3, [pc, #332]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x10c>
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d063      	beq.n	8003826 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800375e:	4b4c      	ldr	r3, [pc, #304]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800376a:	4b49      	ldr	r3, [pc, #292]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b08      	cmp	r3, #8
 8003774:	d11c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x18c>
 8003776:	4b46      	ldr	r3, [pc, #280]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d116      	bne.n	80037b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_RCC_OscConfig+0x176>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d001      	beq.n	800379a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e1c0      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379a:	4b3d      	ldr	r3, [pc, #244]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4939      	ldr	r1, [pc, #228]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ae:	e03a      	b.n	8003826 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d020      	beq.n	80037fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b8:	4b36      	ldr	r3, [pc, #216]	; (8003894 <HAL_RCC_OscConfig+0x270>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7fe ffcf 	bl	8002760 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c6:	f7fe ffcb 	bl	8002760 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e1a1      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d8:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4927      	ldr	r1, [pc, #156]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]
 80037f8:	e015      	b.n	8003826 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <HAL_RCC_OscConfig+0x270>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fe ffae 	bl	8002760 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003808:	f7fe ffaa 	bl	8002760 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e180      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d03a      	beq.n	80038a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d019      	beq.n	800386e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383a:	4b17      	ldr	r3, [pc, #92]	; (8003898 <HAL_RCC_OscConfig+0x274>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003840:	f7fe ff8e 	bl	8002760 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003848:	f7fe ff8a 	bl	8002760 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e160      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003866:	2001      	movs	r0, #1
 8003868:	f000 face 	bl	8003e08 <RCC_Delay>
 800386c:	e01c      	b.n	80038a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_RCC_OscConfig+0x274>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003874:	f7fe ff74 	bl	8002760 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387a:	e00f      	b.n	800389c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387c:	f7fe ff70 	bl	8002760 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d908      	bls.n	800389c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e146      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	42420000 	.word	0x42420000
 8003898:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389c:	4b92      	ldr	r3, [pc, #584]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e9      	bne.n	800387c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80a6 	beq.w	8003a02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b6:	2300      	movs	r3, #0
 80038b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ba:	4b8b      	ldr	r3, [pc, #556]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10d      	bne.n	80038e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	4b88      	ldr	r3, [pc, #544]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	4a87      	ldr	r2, [pc, #540]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d0:	61d3      	str	r3, [r2, #28]
 80038d2:	4b85      	ldr	r3, [pc, #532]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038de:	2301      	movs	r3, #1
 80038e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b82      	ldr	r3, [pc, #520]	; (8003aec <HAL_RCC_OscConfig+0x4c8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d118      	bne.n	8003920 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ee:	4b7f      	ldr	r3, [pc, #508]	; (8003aec <HAL_RCC_OscConfig+0x4c8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a7e      	ldr	r2, [pc, #504]	; (8003aec <HAL_RCC_OscConfig+0x4c8>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fa:	f7fe ff31 	bl	8002760 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003902:	f7fe ff2d 	bl	8002760 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b64      	cmp	r3, #100	; 0x64
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e103      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	4b75      	ldr	r3, [pc, #468]	; (8003aec <HAL_RCC_OscConfig+0x4c8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x312>
 8003928:	4b6f      	ldr	r3, [pc, #444]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4a6e      	ldr	r2, [pc, #440]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6213      	str	r3, [r2, #32]
 8003934:	e02d      	b.n	8003992 <HAL_RCC_OscConfig+0x36e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x334>
 800393e:	4b6a      	ldr	r3, [pc, #424]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4a69      	ldr	r2, [pc, #420]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6213      	str	r3, [r2, #32]
 800394a:	4b67      	ldr	r3, [pc, #412]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4a66      	ldr	r2, [pc, #408]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	6213      	str	r3, [r2, #32]
 8003956:	e01c      	b.n	8003992 <HAL_RCC_OscConfig+0x36e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b05      	cmp	r3, #5
 800395e:	d10c      	bne.n	800397a <HAL_RCC_OscConfig+0x356>
 8003960:	4b61      	ldr	r3, [pc, #388]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	4a60      	ldr	r2, [pc, #384]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003966:	f043 0304 	orr.w	r3, r3, #4
 800396a:	6213      	str	r3, [r2, #32]
 800396c:	4b5e      	ldr	r3, [pc, #376]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	4a5d      	ldr	r2, [pc, #372]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6213      	str	r3, [r2, #32]
 8003978:	e00b      	b.n	8003992 <HAL_RCC_OscConfig+0x36e>
 800397a:	4b5b      	ldr	r3, [pc, #364]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	4a5a      	ldr	r2, [pc, #360]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	6213      	str	r3, [r2, #32]
 8003986:	4b58      	ldr	r3, [pc, #352]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	4a57      	ldr	r2, [pc, #348]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 800398c:	f023 0304 	bic.w	r3, r3, #4
 8003990:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d015      	beq.n	80039c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399a:	f7fe fee1 	bl	8002760 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fe fedd 	bl	8002760 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e0b1      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b8:	4b4b      	ldr	r3, [pc, #300]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0ee      	beq.n	80039a2 <HAL_RCC_OscConfig+0x37e>
 80039c4:	e014      	b.n	80039f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c6:	f7fe fecb 	bl	8002760 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039cc:	e00a      	b.n	80039e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ce:	f7fe fec7 	bl	8002760 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039dc:	4293      	cmp	r3, r2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e09b      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e4:	4b40      	ldr	r3, [pc, #256]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1ee      	bne.n	80039ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d105      	bne.n	8003a02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f6:	4b3c      	ldr	r3, [pc, #240]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4a3b      	ldr	r2, [pc, #236]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8087 	beq.w	8003b1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a0c:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d061      	beq.n	8003adc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d146      	bne.n	8003aae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a20:	4b33      	ldr	r3, [pc, #204]	; (8003af0 <HAL_RCC_OscConfig+0x4cc>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a26:	f7fe fe9b 	bl	8002760 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2e:	f7fe fe97 	bl	8002760 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e06d      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a40:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f0      	bne.n	8003a2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a54:	d108      	bne.n	8003a68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a56:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	4921      	ldr	r1, [pc, #132]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a68:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a19      	ldr	r1, [r3, #32]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	491b      	ldr	r1, [pc, #108]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <HAL_RCC_OscConfig+0x4cc>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a86:	f7fe fe6b 	bl	8002760 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fe fe67 	bl	8002760 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e03d      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x46a>
 8003aac:	e035      	b.n	8003b1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <HAL_RCC_OscConfig+0x4cc>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fe fe54 	bl	8002760 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fe fe50 	bl	8002760 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e026      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x498>
 8003ada:	e01e      	b.n	8003b1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d107      	bne.n	8003af4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e019      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40007000 	.word	0x40007000
 8003af0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCC_OscConfig+0x500>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d106      	bne.n	8003b16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d001      	beq.n	8003b1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40021000 	.word	0x40021000

08003b28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0d0      	b.n	8003cde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b6a      	ldr	r3, [pc, #424]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d910      	bls.n	8003b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b67      	ldr	r3, [pc, #412]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 0207 	bic.w	r2, r3, #7
 8003b52:	4965      	ldr	r1, [pc, #404]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b63      	ldr	r3, [pc, #396]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0b8      	b.n	8003cde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d020      	beq.n	8003bba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b84:	4b59      	ldr	r3, [pc, #356]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4a58      	ldr	r2, [pc, #352]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b9c:	4b53      	ldr	r3, [pc, #332]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4a52      	ldr	r2, [pc, #328]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ba6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba8:	4b50      	ldr	r3, [pc, #320]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	494d      	ldr	r1, [pc, #308]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d040      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d107      	bne.n	8003bde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	4b47      	ldr	r3, [pc, #284]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d115      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e07f      	b.n	8003cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be6:	4b41      	ldr	r3, [pc, #260]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e073      	b.n	8003cde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf6:	4b3d      	ldr	r3, [pc, #244]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e06b      	b.n	8003cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c06:	4b39      	ldr	r3, [pc, #228]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f023 0203 	bic.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4936      	ldr	r1, [pc, #216]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c18:	f7fe fda2 	bl	8002760 <HAL_GetTick>
 8003c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c20:	f7fe fd9e 	bl	8002760 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e053      	b.n	8003cde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f003 020c 	and.w	r2, r3, #12
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d1eb      	bne.n	8003c20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c48:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d210      	bcs.n	8003c78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 0207 	bic.w	r2, r3, #7
 8003c5e:	4922      	ldr	r1, [pc, #136]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e032      	b.n	8003cde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c84:	4b19      	ldr	r3, [pc, #100]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4916      	ldr	r1, [pc, #88]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ca2:	4b12      	ldr	r3, [pc, #72]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	490e      	ldr	r1, [pc, #56]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cb6:	f000 f821 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	490a      	ldr	r1, [pc, #40]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc8:	5ccb      	ldrb	r3, [r1, r3]
 8003cca:	fa22 f303 	lsr.w	r3, r2, r3
 8003cce:	4a09      	ldr	r2, [pc, #36]	; (8003cf4 <HAL_RCC_ClockConfig+0x1cc>)
 8003cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cd2:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <HAL_RCC_ClockConfig+0x1d0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe fd00 	bl	80026dc <HAL_InitTick>

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40022000 	.word	0x40022000
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	08009414 	.word	0x08009414
 8003cf4:	20000004 	.word	0x20000004
 8003cf8:	20000008 	.word	0x20000008

08003cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d16:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d002      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0x30>
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d003      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x36>
 8003d2a:	e027      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d2c:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d2e:	613b      	str	r3, [r7, #16]
      break;
 8003d30:	e027      	b.n	8003d82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	0c9b      	lsrs	r3, r3, #18
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	4a17      	ldr	r2, [pc, #92]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d3c:	5cd3      	ldrb	r3, [r2, r3]
 8003d3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d010      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	0c5b      	lsrs	r3, r3, #17
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	4a11      	ldr	r2, [pc, #68]	; (8003d9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d56:	5cd3      	ldrb	r3, [r2, r3]
 8003d58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a0d      	ldr	r2, [pc, #52]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d5e:	fb03 f202 	mul.w	r2, r3, r2
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e004      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a0c      	ldr	r2, [pc, #48]	; (8003da0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d70:	fb02 f303 	mul.w	r3, r2, r3
 8003d74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	613b      	str	r3, [r7, #16]
      break;
 8003d7a:	e002      	b.n	8003d82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d7e:	613b      	str	r3, [r7, #16]
      break;
 8003d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d82:	693b      	ldr	r3, [r7, #16]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	007a1200 	.word	0x007a1200
 8003d98:	0800942c 	.word	0x0800942c
 8003d9c:	0800943c 	.word	0x0800943c
 8003da0:	003d0900 	.word	0x003d0900

08003da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da8:	4b02      	ldr	r3, [pc, #8]	; (8003db4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	20000004 	.word	0x20000004

08003db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dbc:	f7ff fff2 	bl	8003da4 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4903      	ldr	r1, [pc, #12]	; (8003ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	08009424 	.word	0x08009424

08003de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003de4:	f7ff ffde 	bl	8003da4 <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	0adb      	lsrs	r3, r3, #11
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4903      	ldr	r1, [pc, #12]	; (8003e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	08009424 	.word	0x08009424

08003e08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e10:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <RCC_Delay+0x34>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <RCC_Delay+0x38>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	0a5b      	lsrs	r3, r3, #9
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e24:	bf00      	nop
  }
  while (Delay --);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1e5a      	subs	r2, r3, #1
 8003e2a:	60fa      	str	r2, [r7, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f9      	bne.n	8003e24 <RCC_Delay+0x1c>
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	20000004 	.word	0x20000004
 8003e40:	10624dd3 	.word	0x10624dd3

08003e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e041      	b.n	8003eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fe fa90 	bl	8002390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4610      	mov	r0, r2
 8003e84:	f000 f992 	bl	80041ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d001      	beq.n	8003efc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e032      	b.n	8003f62 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <HAL_TIM_Base_Start+0x88>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00e      	beq.n	8003f2c <HAL_TIM_Base_Start+0x48>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f16:	d009      	beq.n	8003f2c <HAL_TIM_Base_Start+0x48>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <HAL_TIM_Base_Start+0x8c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_TIM_Base_Start+0x48>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <HAL_TIM_Base_Start+0x90>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d111      	bne.n	8003f50 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d010      	beq.n	8003f60 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	e007      	b.n	8003f60 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40000800 	.word	0x40000800

08003f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d001      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e03a      	b.n	8004006 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a18      	ldr	r2, [pc, #96]	; (8004010 <HAL_TIM_Base_Start_IT+0x98>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x58>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fba:	d009      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x58>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a14      	ldr	r2, [pc, #80]	; (8004014 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x58>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a13      	ldr	r2, [pc, #76]	; (8004018 <HAL_TIM_Base_Start_IT+0xa0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d111      	bne.n	8003ff4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d010      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff2:	e007      	b.n	8004004 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	40012c00 	.word	0x40012c00
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800

0800401c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_TIM_ConfigClockSource+0x1c>
 8004034:	2302      	movs	r3, #2
 8004036:	e0b4      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x186>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004070:	d03e      	beq.n	80040f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004076:	f200 8087 	bhi.w	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407e:	f000 8086 	beq.w	800418e <HAL_TIM_ConfigClockSource+0x172>
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	d87f      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 8004088:	2b70      	cmp	r3, #112	; 0x70
 800408a:	d01a      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0xa6>
 800408c:	2b70      	cmp	r3, #112	; 0x70
 800408e:	d87b      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 8004090:	2b60      	cmp	r3, #96	; 0x60
 8004092:	d050      	beq.n	8004136 <HAL_TIM_ConfigClockSource+0x11a>
 8004094:	2b60      	cmp	r3, #96	; 0x60
 8004096:	d877      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 8004098:	2b50      	cmp	r3, #80	; 0x50
 800409a:	d03c      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0xfa>
 800409c:	2b50      	cmp	r3, #80	; 0x50
 800409e:	d873      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d058      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x13a>
 80040a4:	2b40      	cmp	r3, #64	; 0x40
 80040a6:	d86f      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040a8:	2b30      	cmp	r3, #48	; 0x30
 80040aa:	d064      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040ac:	2b30      	cmp	r3, #48	; 0x30
 80040ae:	d86b      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d060      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d867      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d05c      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040bc:	2b10      	cmp	r3, #16
 80040be:	d05a      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040c0:	e062      	b.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040d2:	f000 f944 	bl	800435e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	609a      	str	r2, [r3, #8]
      break;
 80040ee:	e04f      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004100:	f000 f92d 	bl	800435e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004112:	609a      	str	r2, [r3, #8]
      break;
 8004114:	e03c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004122:	461a      	mov	r2, r3
 8004124:	f000 f8a4 	bl	8004270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2150      	movs	r1, #80	; 0x50
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f8fb 	bl	800432a <TIM_ITRx_SetConfig>
      break;
 8004134:	e02c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004142:	461a      	mov	r2, r3
 8004144:	f000 f8c2 	bl	80042cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2160      	movs	r1, #96	; 0x60
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f8eb 	bl	800432a <TIM_ITRx_SetConfig>
      break;
 8004154:	e01c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004162:	461a      	mov	r2, r3
 8004164:	f000 f884 	bl	8004270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2140      	movs	r1, #64	; 0x40
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f8db 	bl	800432a <TIM_ITRx_SetConfig>
      break;
 8004174:	e00c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4619      	mov	r1, r3
 8004180:	4610      	mov	r0, r2
 8004182:	f000 f8d2 	bl	800432a <TIM_ITRx_SetConfig>
      break;
 8004186:	e003      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	73fb      	strb	r3, [r7, #15]
      break;
 800418c:	e000      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800418e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a29      	ldr	r2, [pc, #164]	; (8004264 <TIM_Base_SetConfig+0xb8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00b      	beq.n	80041dc <TIM_Base_SetConfig+0x30>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ca:	d007      	beq.n	80041dc <TIM_Base_SetConfig+0x30>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a26      	ldr	r2, [pc, #152]	; (8004268 <TIM_Base_SetConfig+0xbc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <TIM_Base_SetConfig+0x30>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a25      	ldr	r2, [pc, #148]	; (800426c <TIM_Base_SetConfig+0xc0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d108      	bne.n	80041ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <TIM_Base_SetConfig+0xb8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00b      	beq.n	800420e <TIM_Base_SetConfig+0x62>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fc:	d007      	beq.n	800420e <TIM_Base_SetConfig+0x62>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <TIM_Base_SetConfig+0xbc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d003      	beq.n	800420e <TIM_Base_SetConfig+0x62>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a18      	ldr	r2, [pc, #96]	; (800426c <TIM_Base_SetConfig+0xc0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d108      	bne.n	8004220 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a07      	ldr	r2, [pc, #28]	; (8004264 <TIM_Base_SetConfig+0xb8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d103      	bne.n	8004254 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	615a      	str	r2, [r3, #20]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr
 8004264:	40012c00 	.word	0x40012c00
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800

08004270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800429a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f023 030a 	bic.w	r3, r3, #10
 80042ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0210 	bic.w	r2, r3, #16
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	031b      	lsls	r3, r3, #12
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004308:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	621a      	str	r2, [r3, #32]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr

0800432a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800432a:	b480      	push	{r7}
 800432c:	b085      	sub	sp, #20
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004340:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	f043 0307 	orr.w	r3, r3, #7
 800434c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	609a      	str	r2, [r3, #8]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800435e:	b480      	push	{r7}
 8004360:	b087      	sub	sp, #28
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004378:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	021a      	lsls	r2, r3, #8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	431a      	orrs	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4313      	orrs	r3, r2
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	609a      	str	r2, [r3, #8]
}
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e046      	b.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a16      	ldr	r2, [pc, #88]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004400:	d009      	beq.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a10      	ldr	r2, [pc, #64]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d10c      	bne.n	8004430 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800441c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	4313      	orrs	r3, r2
 8004426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800

08004458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e042      	b.n	80044f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fd ffb8 	bl	80023f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2224      	movs	r2, #36	; 0x24
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800449a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f97b 	bl	8004798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b20      	cmp	r3, #32
 8004516:	d16d      	bne.n	80045f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <HAL_UART_Transmit+0x2c>
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e066      	b.n	80045f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2221      	movs	r2, #33	; 0x21
 8004532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004536:	f7fe f913 	bl	8002760 <HAL_GetTick>
 800453a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	88fa      	ldrh	r2, [r7, #6]
 8004540:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	88fa      	ldrh	r2, [r7, #6]
 8004546:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004550:	d108      	bne.n	8004564 <HAL_UART_Transmit+0x6c>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d104      	bne.n	8004564 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	e003      	b.n	800456c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004568:	2300      	movs	r3, #0
 800456a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800456c:	e02a      	b.n	80045c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f865 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e036      	b.n	80045f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800459c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	3302      	adds	r3, #2
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	e007      	b.n	80045b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	781a      	ldrb	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1cf      	bne.n	800456e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2140      	movs	r1, #64	; 0x40
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f835 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e006      	b.n	80045f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	4613      	mov	r3, r2
 800460a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b20      	cmp	r3, #32
 8004616:	d112      	bne.n	800463e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <HAL_UART_Receive_IT+0x26>
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e00b      	b.n	8004640 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	461a      	mov	r2, r3
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f875 	bl	8004724 <UART_Start_Receive_IT>
 800463a:	4603      	mov	r3, r0
 800463c:	e000      	b.n	8004640 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800463e:	2302      	movs	r3, #2
  }
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b090      	sub	sp, #64	; 0x40
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004658:	e050      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d04c      	beq.n	80046fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <UART_WaitOnFlagUntilTimeout+0x30>
 8004668:	f7fe f87a 	bl	8002760 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004674:	429a      	cmp	r2, r3
 8004676:	d241      	bcs.n	80046fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800468e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	330c      	adds	r3, #12
 8004696:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004698:	637a      	str	r2, [r7, #52]	; 0x34
 800469a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800469e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e5      	bne.n	8004678 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3314      	adds	r3, #20
 80046b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	613b      	str	r3, [r7, #16]
   return(result);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3314      	adds	r3, #20
 80046ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046cc:	623a      	str	r2, [r7, #32]
 80046ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	69f9      	ldr	r1, [r7, #28]
 80046d2:	6a3a      	ldr	r2, [r7, #32]
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e5      	bne.n	80046ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e00f      	b.n	800471c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	429a      	cmp	r2, r3
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	429a      	cmp	r2, r3
 8004718:	d09f      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3740      	adds	r7, #64	; 0x40
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	88fa      	ldrh	r2, [r7, #6]
 800473c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	88fa      	ldrh	r2, [r7, #6]
 8004742:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2222      	movs	r2, #34	; 0x22
 800474e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004768:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695a      	ldr	r2, [r3, #20]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0220 	orr.w	r2, r2, #32
 8004788:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr
	...

08004798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047d2:	f023 030c 	bic.w	r3, r3, #12
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	430b      	orrs	r3, r1
 80047de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a2c      	ldr	r2, [pc, #176]	; (80048ac <UART_SetConfig+0x114>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d103      	bne.n	8004808 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004800:	f7ff faee 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	e002      	b.n	800480e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004808:	f7ff fad6 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 800480c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	009a      	lsls	r2, r3, #2
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	4a22      	ldr	r2, [pc, #136]	; (80048b0 <UART_SetConfig+0x118>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	0119      	lsls	r1, r3, #4
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009a      	lsls	r2, r3, #2
 8004838:	441a      	add	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	fbb2 f2f3 	udiv	r2, r2, r3
 8004844:	4b1a      	ldr	r3, [pc, #104]	; (80048b0 <UART_SetConfig+0x118>)
 8004846:	fba3 0302 	umull	r0, r3, r3, r2
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	2064      	movs	r0, #100	; 0x64
 800484e:	fb00 f303 	mul.w	r3, r0, r3
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	3332      	adds	r3, #50	; 0x32
 8004858:	4a15      	ldr	r2, [pc, #84]	; (80048b0 <UART_SetConfig+0x118>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004864:	4419      	add	r1, r3
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009a      	lsls	r2, r3, #2
 8004870:	441a      	add	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	fbb2 f2f3 	udiv	r2, r2, r3
 800487c:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <UART_SetConfig+0x118>)
 800487e:	fba3 0302 	umull	r0, r3, r3, r2
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2064      	movs	r0, #100	; 0x64
 8004886:	fb00 f303 	mul.w	r3, r0, r3
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	3332      	adds	r3, #50	; 0x32
 8004890:	4a07      	ldr	r2, [pc, #28]	; (80048b0 <UART_SetConfig+0x118>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	f003 020f 	and.w	r2, r3, #15
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	440a      	add	r2, r1
 80048a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40013800 	.word	0x40013800
 80048b0:	51eb851f 	.word	0x51eb851f

080048b4 <atoi>:
 80048b4:	220a      	movs	r2, #10
 80048b6:	2100      	movs	r1, #0
 80048b8:	f000 b880 	b.w	80049bc <strtol>

080048bc <_strtol_l.constprop.0>:
 80048bc:	2b01      	cmp	r3, #1
 80048be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c2:	4686      	mov	lr, r0
 80048c4:	4690      	mov	r8, r2
 80048c6:	d001      	beq.n	80048cc <_strtol_l.constprop.0+0x10>
 80048c8:	2b24      	cmp	r3, #36	; 0x24
 80048ca:	d906      	bls.n	80048da <_strtol_l.constprop.0+0x1e>
 80048cc:	f001 f9b0 	bl	8005c30 <__errno>
 80048d0:	2316      	movs	r3, #22
 80048d2:	6003      	str	r3, [r0, #0]
 80048d4:	2000      	movs	r0, #0
 80048d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048da:	460d      	mov	r5, r1
 80048dc:	4835      	ldr	r0, [pc, #212]	; (80049b4 <_strtol_l.constprop.0+0xf8>)
 80048de:	462a      	mov	r2, r5
 80048e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048e4:	5d06      	ldrb	r6, [r0, r4]
 80048e6:	f016 0608 	ands.w	r6, r6, #8
 80048ea:	d1f8      	bne.n	80048de <_strtol_l.constprop.0+0x22>
 80048ec:	2c2d      	cmp	r4, #45	; 0x2d
 80048ee:	d12e      	bne.n	800494e <_strtol_l.constprop.0+0x92>
 80048f0:	2601      	movs	r6, #1
 80048f2:	782c      	ldrb	r4, [r5, #0]
 80048f4:	1c95      	adds	r5, r2, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d057      	beq.n	80049aa <_strtol_l.constprop.0+0xee>
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d109      	bne.n	8004912 <_strtol_l.constprop.0+0x56>
 80048fe:	2c30      	cmp	r4, #48	; 0x30
 8004900:	d107      	bne.n	8004912 <_strtol_l.constprop.0+0x56>
 8004902:	782a      	ldrb	r2, [r5, #0]
 8004904:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004908:	2a58      	cmp	r2, #88	; 0x58
 800490a:	d149      	bne.n	80049a0 <_strtol_l.constprop.0+0xe4>
 800490c:	2310      	movs	r3, #16
 800490e:	786c      	ldrb	r4, [r5, #1]
 8004910:	3502      	adds	r5, #2
 8004912:	2200      	movs	r2, #0
 8004914:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8004918:	f10c 3cff 	add.w	ip, ip, #4294967295
 800491c:	fbbc f9f3 	udiv	r9, ip, r3
 8004920:	4610      	mov	r0, r2
 8004922:	fb03 ca19 	mls	sl, r3, r9, ip
 8004926:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800492a:	2f09      	cmp	r7, #9
 800492c:	d814      	bhi.n	8004958 <_strtol_l.constprop.0+0x9c>
 800492e:	463c      	mov	r4, r7
 8004930:	42a3      	cmp	r3, r4
 8004932:	dd20      	ble.n	8004976 <_strtol_l.constprop.0+0xba>
 8004934:	1c57      	adds	r7, r2, #1
 8004936:	d007      	beq.n	8004948 <_strtol_l.constprop.0+0x8c>
 8004938:	4581      	cmp	r9, r0
 800493a:	d319      	bcc.n	8004970 <_strtol_l.constprop.0+0xb4>
 800493c:	d101      	bne.n	8004942 <_strtol_l.constprop.0+0x86>
 800493e:	45a2      	cmp	sl, r4
 8004940:	db16      	blt.n	8004970 <_strtol_l.constprop.0+0xb4>
 8004942:	2201      	movs	r2, #1
 8004944:	fb00 4003 	mla	r0, r0, r3, r4
 8004948:	f815 4b01 	ldrb.w	r4, [r5], #1
 800494c:	e7eb      	b.n	8004926 <_strtol_l.constprop.0+0x6a>
 800494e:	2c2b      	cmp	r4, #43	; 0x2b
 8004950:	bf04      	itt	eq
 8004952:	782c      	ldrbeq	r4, [r5, #0]
 8004954:	1c95      	addeq	r5, r2, #2
 8004956:	e7ce      	b.n	80048f6 <_strtol_l.constprop.0+0x3a>
 8004958:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800495c:	2f19      	cmp	r7, #25
 800495e:	d801      	bhi.n	8004964 <_strtol_l.constprop.0+0xa8>
 8004960:	3c37      	subs	r4, #55	; 0x37
 8004962:	e7e5      	b.n	8004930 <_strtol_l.constprop.0+0x74>
 8004964:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004968:	2f19      	cmp	r7, #25
 800496a:	d804      	bhi.n	8004976 <_strtol_l.constprop.0+0xba>
 800496c:	3c57      	subs	r4, #87	; 0x57
 800496e:	e7df      	b.n	8004930 <_strtol_l.constprop.0+0x74>
 8004970:	f04f 32ff 	mov.w	r2, #4294967295
 8004974:	e7e8      	b.n	8004948 <_strtol_l.constprop.0+0x8c>
 8004976:	1c53      	adds	r3, r2, #1
 8004978:	d108      	bne.n	800498c <_strtol_l.constprop.0+0xd0>
 800497a:	2322      	movs	r3, #34	; 0x22
 800497c:	4660      	mov	r0, ip
 800497e:	f8ce 3000 	str.w	r3, [lr]
 8004982:	f1b8 0f00 	cmp.w	r8, #0
 8004986:	d0a6      	beq.n	80048d6 <_strtol_l.constprop.0+0x1a>
 8004988:	1e69      	subs	r1, r5, #1
 800498a:	e006      	b.n	800499a <_strtol_l.constprop.0+0xde>
 800498c:	b106      	cbz	r6, 8004990 <_strtol_l.constprop.0+0xd4>
 800498e:	4240      	negs	r0, r0
 8004990:	f1b8 0f00 	cmp.w	r8, #0
 8004994:	d09f      	beq.n	80048d6 <_strtol_l.constprop.0+0x1a>
 8004996:	2a00      	cmp	r2, #0
 8004998:	d1f6      	bne.n	8004988 <_strtol_l.constprop.0+0xcc>
 800499a:	f8c8 1000 	str.w	r1, [r8]
 800499e:	e79a      	b.n	80048d6 <_strtol_l.constprop.0+0x1a>
 80049a0:	2430      	movs	r4, #48	; 0x30
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1b5      	bne.n	8004912 <_strtol_l.constprop.0+0x56>
 80049a6:	2308      	movs	r3, #8
 80049a8:	e7b3      	b.n	8004912 <_strtol_l.constprop.0+0x56>
 80049aa:	2c30      	cmp	r4, #48	; 0x30
 80049ac:	d0a9      	beq.n	8004902 <_strtol_l.constprop.0+0x46>
 80049ae:	230a      	movs	r3, #10
 80049b0:	e7af      	b.n	8004912 <_strtol_l.constprop.0+0x56>
 80049b2:	bf00      	nop
 80049b4:	0800943f 	.word	0x0800943f

080049b8 <_strtol_r>:
 80049b8:	f7ff bf80 	b.w	80048bc <_strtol_l.constprop.0>

080049bc <strtol>:
 80049bc:	4613      	mov	r3, r2
 80049be:	460a      	mov	r2, r1
 80049c0:	4601      	mov	r1, r0
 80049c2:	4802      	ldr	r0, [pc, #8]	; (80049cc <strtol+0x10>)
 80049c4:	6800      	ldr	r0, [r0, #0]
 80049c6:	f7ff bf79 	b.w	80048bc <_strtol_l.constprop.0>
 80049ca:	bf00      	nop
 80049cc:	20000068 	.word	0x20000068

080049d0 <__cvt>:
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d6:	461f      	mov	r7, r3
 80049d8:	bfbb      	ittet	lt
 80049da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80049de:	461f      	movlt	r7, r3
 80049e0:	2300      	movge	r3, #0
 80049e2:	232d      	movlt	r3, #45	; 0x2d
 80049e4:	b088      	sub	sp, #32
 80049e6:	4614      	mov	r4, r2
 80049e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80049ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80049ec:	7013      	strb	r3, [r2, #0]
 80049ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80049f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80049f4:	f023 0820 	bic.w	r8, r3, #32
 80049f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049fc:	d005      	beq.n	8004a0a <__cvt+0x3a>
 80049fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a02:	d100      	bne.n	8004a06 <__cvt+0x36>
 8004a04:	3501      	adds	r5, #1
 8004a06:	2302      	movs	r3, #2
 8004a08:	e000      	b.n	8004a0c <__cvt+0x3c>
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	aa07      	add	r2, sp, #28
 8004a0e:	9204      	str	r2, [sp, #16]
 8004a10:	aa06      	add	r2, sp, #24
 8004a12:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a16:	e9cd 3500 	strd	r3, r5, [sp]
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	463b      	mov	r3, r7
 8004a1e:	f001 f9ef 	bl	8005e00 <_dtoa_r>
 8004a22:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a26:	4606      	mov	r6, r0
 8004a28:	d102      	bne.n	8004a30 <__cvt+0x60>
 8004a2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a2c:	07db      	lsls	r3, r3, #31
 8004a2e:	d522      	bpl.n	8004a76 <__cvt+0xa6>
 8004a30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a34:	eb06 0905 	add.w	r9, r6, r5
 8004a38:	d110      	bne.n	8004a5c <__cvt+0x8c>
 8004a3a:	7833      	ldrb	r3, [r6, #0]
 8004a3c:	2b30      	cmp	r3, #48	; 0x30
 8004a3e:	d10a      	bne.n	8004a56 <__cvt+0x86>
 8004a40:	2200      	movs	r2, #0
 8004a42:	2300      	movs	r3, #0
 8004a44:	4620      	mov	r0, r4
 8004a46:	4639      	mov	r1, r7
 8004a48:	f7fc f86c 	bl	8000b24 <__aeabi_dcmpeq>
 8004a4c:	b918      	cbnz	r0, 8004a56 <__cvt+0x86>
 8004a4e:	f1c5 0501 	rsb	r5, r5, #1
 8004a52:	f8ca 5000 	str.w	r5, [sl]
 8004a56:	f8da 3000 	ldr.w	r3, [sl]
 8004a5a:	4499      	add	r9, r3
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2300      	movs	r3, #0
 8004a60:	4620      	mov	r0, r4
 8004a62:	4639      	mov	r1, r7
 8004a64:	f7fc f85e 	bl	8000b24 <__aeabi_dcmpeq>
 8004a68:	b108      	cbz	r0, 8004a6e <__cvt+0x9e>
 8004a6a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a6e:	2230      	movs	r2, #48	; 0x30
 8004a70:	9b07      	ldr	r3, [sp, #28]
 8004a72:	454b      	cmp	r3, r9
 8004a74:	d307      	bcc.n	8004a86 <__cvt+0xb6>
 8004a76:	4630      	mov	r0, r6
 8004a78:	9b07      	ldr	r3, [sp, #28]
 8004a7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a7c:	1b9b      	subs	r3, r3, r6
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	b008      	add	sp, #32
 8004a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a86:	1c59      	adds	r1, r3, #1
 8004a88:	9107      	str	r1, [sp, #28]
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	e7f0      	b.n	8004a70 <__cvt+0xa0>

08004a8e <__exponent>:
 8004a8e:	4603      	mov	r3, r0
 8004a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a92:	2900      	cmp	r1, #0
 8004a94:	f803 2b02 	strb.w	r2, [r3], #2
 8004a98:	bfb6      	itet	lt
 8004a9a:	222d      	movlt	r2, #45	; 0x2d
 8004a9c:	222b      	movge	r2, #43	; 0x2b
 8004a9e:	4249      	neglt	r1, r1
 8004aa0:	2909      	cmp	r1, #9
 8004aa2:	7042      	strb	r2, [r0, #1]
 8004aa4:	dd2a      	ble.n	8004afc <__exponent+0x6e>
 8004aa6:	f10d 0207 	add.w	r2, sp, #7
 8004aaa:	4617      	mov	r7, r2
 8004aac:	260a      	movs	r6, #10
 8004aae:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ab2:	4694      	mov	ip, r2
 8004ab4:	fb06 1415 	mls	r4, r6, r5, r1
 8004ab8:	3430      	adds	r4, #48	; 0x30
 8004aba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004abe:	460c      	mov	r4, r1
 8004ac0:	2c63      	cmp	r4, #99	; 0x63
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	f102 32ff 	add.w	r2, r2, #4294967295
 8004ac8:	dcf1      	bgt.n	8004aae <__exponent+0x20>
 8004aca:	3130      	adds	r1, #48	; 0x30
 8004acc:	f1ac 0402 	sub.w	r4, ip, #2
 8004ad0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ad4:	4622      	mov	r2, r4
 8004ad6:	1c41      	adds	r1, r0, #1
 8004ad8:	42ba      	cmp	r2, r7
 8004ada:	d30a      	bcc.n	8004af2 <__exponent+0x64>
 8004adc:	f10d 0209 	add.w	r2, sp, #9
 8004ae0:	eba2 020c 	sub.w	r2, r2, ip
 8004ae4:	42bc      	cmp	r4, r7
 8004ae6:	bf88      	it	hi
 8004ae8:	2200      	movhi	r2, #0
 8004aea:	4413      	add	r3, r2
 8004aec:	1a18      	subs	r0, r3, r0
 8004aee:	b003      	add	sp, #12
 8004af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004af6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004afa:	e7ed      	b.n	8004ad8 <__exponent+0x4a>
 8004afc:	2330      	movs	r3, #48	; 0x30
 8004afe:	3130      	adds	r1, #48	; 0x30
 8004b00:	7083      	strb	r3, [r0, #2]
 8004b02:	70c1      	strb	r1, [r0, #3]
 8004b04:	1d03      	adds	r3, r0, #4
 8004b06:	e7f1      	b.n	8004aec <__exponent+0x5e>

08004b08 <_printf_float>:
 8004b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0c:	b091      	sub	sp, #68	; 0x44
 8004b0e:	460c      	mov	r4, r1
 8004b10:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004b14:	4616      	mov	r6, r2
 8004b16:	461f      	mov	r7, r3
 8004b18:	4605      	mov	r5, r0
 8004b1a:	f001 f83f 	bl	8005b9c <_localeconv_r>
 8004b1e:	6803      	ldr	r3, [r0, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	9309      	str	r3, [sp, #36]	; 0x24
 8004b24:	f7fb fb1e 	bl	8000164 <strlen>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	930e      	str	r3, [sp, #56]	; 0x38
 8004b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b30:	900a      	str	r0, [sp, #40]	; 0x28
 8004b32:	3307      	adds	r3, #7
 8004b34:	f023 0307 	bic.w	r3, r3, #7
 8004b38:	f103 0208 	add.w	r2, r3, #8
 8004b3c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004b40:	f8d4 b000 	ldr.w	fp, [r4]
 8004b44:	f8c8 2000 	str.w	r2, [r8]
 8004b48:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004b4c:	4652      	mov	r2, sl
 8004b4e:	4643      	mov	r3, r8
 8004b50:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b54:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004b58:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5e:	4650      	mov	r0, sl
 8004b60:	4b9c      	ldr	r3, [pc, #624]	; (8004dd4 <_printf_float+0x2cc>)
 8004b62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b64:	f7fc f810 	bl	8000b88 <__aeabi_dcmpun>
 8004b68:	bb70      	cbnz	r0, 8004bc8 <_printf_float+0xc0>
 8004b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b6e:	4650      	mov	r0, sl
 8004b70:	4b98      	ldr	r3, [pc, #608]	; (8004dd4 <_printf_float+0x2cc>)
 8004b72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b74:	f7fb ffea 	bl	8000b4c <__aeabi_dcmple>
 8004b78:	bb30      	cbnz	r0, 8004bc8 <_printf_float+0xc0>
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	4650      	mov	r0, sl
 8004b80:	4641      	mov	r1, r8
 8004b82:	f7fb ffd9 	bl	8000b38 <__aeabi_dcmplt>
 8004b86:	b110      	cbz	r0, 8004b8e <_printf_float+0x86>
 8004b88:	232d      	movs	r3, #45	; 0x2d
 8004b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b8e:	4a92      	ldr	r2, [pc, #584]	; (8004dd8 <_printf_float+0x2d0>)
 8004b90:	4b92      	ldr	r3, [pc, #584]	; (8004ddc <_printf_float+0x2d4>)
 8004b92:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004b96:	bf94      	ite	ls
 8004b98:	4690      	movls	r8, r2
 8004b9a:	4698      	movhi	r8, r3
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	f04f 0a00 	mov.w	sl, #0
 8004ba2:	6123      	str	r3, [r4, #16]
 8004ba4:	f02b 0304 	bic.w	r3, fp, #4
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	4633      	mov	r3, r6
 8004bac:	4621      	mov	r1, r4
 8004bae:	4628      	mov	r0, r5
 8004bb0:	9700      	str	r7, [sp, #0]
 8004bb2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004bb4:	f000 f9d6 	bl	8004f64 <_printf_common>
 8004bb8:	3001      	adds	r0, #1
 8004bba:	f040 8090 	bne.w	8004cde <_printf_float+0x1d6>
 8004bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc2:	b011      	add	sp, #68	; 0x44
 8004bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc8:	4652      	mov	r2, sl
 8004bca:	4643      	mov	r3, r8
 8004bcc:	4650      	mov	r0, sl
 8004bce:	4641      	mov	r1, r8
 8004bd0:	f7fb ffda 	bl	8000b88 <__aeabi_dcmpun>
 8004bd4:	b148      	cbz	r0, 8004bea <_printf_float+0xe2>
 8004bd6:	f1b8 0f00 	cmp.w	r8, #0
 8004bda:	bfb8      	it	lt
 8004bdc:	232d      	movlt	r3, #45	; 0x2d
 8004bde:	4a80      	ldr	r2, [pc, #512]	; (8004de0 <_printf_float+0x2d8>)
 8004be0:	bfb8      	it	lt
 8004be2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004be6:	4b7f      	ldr	r3, [pc, #508]	; (8004de4 <_printf_float+0x2dc>)
 8004be8:	e7d3      	b.n	8004b92 <_printf_float+0x8a>
 8004bea:	6863      	ldr	r3, [r4, #4]
 8004bec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	d142      	bne.n	8004c7a <_printf_float+0x172>
 8004bf4:	2306      	movs	r3, #6
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	9206      	str	r2, [sp, #24]
 8004bfc:	aa0e      	add	r2, sp, #56	; 0x38
 8004bfe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004c02:	aa0d      	add	r2, sp, #52	; 0x34
 8004c04:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004c08:	9203      	str	r2, [sp, #12]
 8004c0a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004c0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004c12:	6023      	str	r3, [r4, #0]
 8004c14:	6863      	ldr	r3, [r4, #4]
 8004c16:	4652      	mov	r2, sl
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	4643      	mov	r3, r8
 8004c1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004c20:	f7ff fed6 	bl	80049d0 <__cvt>
 8004c24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c26:	4680      	mov	r8, r0
 8004c28:	2947      	cmp	r1, #71	; 0x47
 8004c2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c2c:	d108      	bne.n	8004c40 <_printf_float+0x138>
 8004c2e:	1cc8      	adds	r0, r1, #3
 8004c30:	db02      	blt.n	8004c38 <_printf_float+0x130>
 8004c32:	6863      	ldr	r3, [r4, #4]
 8004c34:	4299      	cmp	r1, r3
 8004c36:	dd40      	ble.n	8004cba <_printf_float+0x1b2>
 8004c38:	f1a9 0902 	sub.w	r9, r9, #2
 8004c3c:	fa5f f989 	uxtb.w	r9, r9
 8004c40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c44:	d81f      	bhi.n	8004c86 <_printf_float+0x17e>
 8004c46:	464a      	mov	r2, r9
 8004c48:	3901      	subs	r1, #1
 8004c4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c4e:	910d      	str	r1, [sp, #52]	; 0x34
 8004c50:	f7ff ff1d 	bl	8004a8e <__exponent>
 8004c54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c56:	4682      	mov	sl, r0
 8004c58:	1813      	adds	r3, r2, r0
 8004c5a:	2a01      	cmp	r2, #1
 8004c5c:	6123      	str	r3, [r4, #16]
 8004c5e:	dc02      	bgt.n	8004c66 <_printf_float+0x15e>
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	07d2      	lsls	r2, r2, #31
 8004c64:	d501      	bpl.n	8004c6a <_printf_float+0x162>
 8004c66:	3301      	adds	r3, #1
 8004c68:	6123      	str	r3, [r4, #16]
 8004c6a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d09b      	beq.n	8004baa <_printf_float+0xa2>
 8004c72:	232d      	movs	r3, #45	; 0x2d
 8004c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c78:	e797      	b.n	8004baa <_printf_float+0xa2>
 8004c7a:	2947      	cmp	r1, #71	; 0x47
 8004c7c:	d1bc      	bne.n	8004bf8 <_printf_float+0xf0>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1ba      	bne.n	8004bf8 <_printf_float+0xf0>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e7b7      	b.n	8004bf6 <_printf_float+0xee>
 8004c86:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004c8a:	d118      	bne.n	8004cbe <_printf_float+0x1b6>
 8004c8c:	2900      	cmp	r1, #0
 8004c8e:	6863      	ldr	r3, [r4, #4]
 8004c90:	dd0b      	ble.n	8004caa <_printf_float+0x1a2>
 8004c92:	6121      	str	r1, [r4, #16]
 8004c94:	b913      	cbnz	r3, 8004c9c <_printf_float+0x194>
 8004c96:	6822      	ldr	r2, [r4, #0]
 8004c98:	07d0      	lsls	r0, r2, #31
 8004c9a:	d502      	bpl.n	8004ca2 <_printf_float+0x19a>
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	440b      	add	r3, r1
 8004ca0:	6123      	str	r3, [r4, #16]
 8004ca2:	f04f 0a00 	mov.w	sl, #0
 8004ca6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ca8:	e7df      	b.n	8004c6a <_printf_float+0x162>
 8004caa:	b913      	cbnz	r3, 8004cb2 <_printf_float+0x1aa>
 8004cac:	6822      	ldr	r2, [r4, #0]
 8004cae:	07d2      	lsls	r2, r2, #31
 8004cb0:	d501      	bpl.n	8004cb6 <_printf_float+0x1ae>
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	e7f4      	b.n	8004ca0 <_printf_float+0x198>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e7f2      	b.n	8004ca0 <_printf_float+0x198>
 8004cba:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cc0:	4299      	cmp	r1, r3
 8004cc2:	db05      	blt.n	8004cd0 <_printf_float+0x1c8>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	6121      	str	r1, [r4, #16]
 8004cc8:	07d8      	lsls	r0, r3, #31
 8004cca:	d5ea      	bpl.n	8004ca2 <_printf_float+0x19a>
 8004ccc:	1c4b      	adds	r3, r1, #1
 8004cce:	e7e7      	b.n	8004ca0 <_printf_float+0x198>
 8004cd0:	2900      	cmp	r1, #0
 8004cd2:	bfcc      	ite	gt
 8004cd4:	2201      	movgt	r2, #1
 8004cd6:	f1c1 0202 	rsble	r2, r1, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	e7e0      	b.n	8004ca0 <_printf_float+0x198>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	055a      	lsls	r2, r3, #21
 8004ce2:	d407      	bmi.n	8004cf4 <_printf_float+0x1ec>
 8004ce4:	6923      	ldr	r3, [r4, #16]
 8004ce6:	4642      	mov	r2, r8
 8004ce8:	4631      	mov	r1, r6
 8004cea:	4628      	mov	r0, r5
 8004cec:	47b8      	blx	r7
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d12b      	bne.n	8004d4a <_printf_float+0x242>
 8004cf2:	e764      	b.n	8004bbe <_printf_float+0xb6>
 8004cf4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004cf8:	f240 80dd 	bls.w	8004eb6 <_printf_float+0x3ae>
 8004cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d00:	2200      	movs	r2, #0
 8004d02:	2300      	movs	r3, #0
 8004d04:	f7fb ff0e 	bl	8000b24 <__aeabi_dcmpeq>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d033      	beq.n	8004d74 <_printf_float+0x26c>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	4631      	mov	r1, r6
 8004d10:	4628      	mov	r0, r5
 8004d12:	4a35      	ldr	r2, [pc, #212]	; (8004de8 <_printf_float+0x2e0>)
 8004d14:	47b8      	blx	r7
 8004d16:	3001      	adds	r0, #1
 8004d18:	f43f af51 	beq.w	8004bbe <_printf_float+0xb6>
 8004d1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d20:	429a      	cmp	r2, r3
 8004d22:	db02      	blt.n	8004d2a <_printf_float+0x222>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	07d8      	lsls	r0, r3, #31
 8004d28:	d50f      	bpl.n	8004d4a <_printf_float+0x242>
 8004d2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4628      	mov	r0, r5
 8004d32:	47b8      	blx	r7
 8004d34:	3001      	adds	r0, #1
 8004d36:	f43f af42 	beq.w	8004bbe <_printf_float+0xb6>
 8004d3a:	f04f 0800 	mov.w	r8, #0
 8004d3e:	f104 091a 	add.w	r9, r4, #26
 8004d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d44:	3b01      	subs	r3, #1
 8004d46:	4543      	cmp	r3, r8
 8004d48:	dc09      	bgt.n	8004d5e <_printf_float+0x256>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	079b      	lsls	r3, r3, #30
 8004d4e:	f100 8104 	bmi.w	8004f5a <_printf_float+0x452>
 8004d52:	68e0      	ldr	r0, [r4, #12]
 8004d54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d56:	4298      	cmp	r0, r3
 8004d58:	bfb8      	it	lt
 8004d5a:	4618      	movlt	r0, r3
 8004d5c:	e731      	b.n	8004bc2 <_printf_float+0xba>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	464a      	mov	r2, r9
 8004d62:	4631      	mov	r1, r6
 8004d64:	4628      	mov	r0, r5
 8004d66:	47b8      	blx	r7
 8004d68:	3001      	adds	r0, #1
 8004d6a:	f43f af28 	beq.w	8004bbe <_printf_float+0xb6>
 8004d6e:	f108 0801 	add.w	r8, r8, #1
 8004d72:	e7e6      	b.n	8004d42 <_printf_float+0x23a>
 8004d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	dc38      	bgt.n	8004dec <_printf_float+0x2e4>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4628      	mov	r0, r5
 8004d80:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <_printf_float+0x2e0>)
 8004d82:	47b8      	blx	r7
 8004d84:	3001      	adds	r0, #1
 8004d86:	f43f af1a 	beq.w	8004bbe <_printf_float+0xb6>
 8004d8a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	d102      	bne.n	8004d98 <_printf_float+0x290>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	07d9      	lsls	r1, r3, #31
 8004d96:	d5d8      	bpl.n	8004d4a <_printf_float+0x242>
 8004d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	4628      	mov	r0, r5
 8004da0:	47b8      	blx	r7
 8004da2:	3001      	adds	r0, #1
 8004da4:	f43f af0b 	beq.w	8004bbe <_printf_float+0xb6>
 8004da8:	f04f 0900 	mov.w	r9, #0
 8004dac:	f104 0a1a 	add.w	sl, r4, #26
 8004db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004db2:	425b      	negs	r3, r3
 8004db4:	454b      	cmp	r3, r9
 8004db6:	dc01      	bgt.n	8004dbc <_printf_float+0x2b4>
 8004db8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dba:	e794      	b.n	8004ce6 <_printf_float+0x1de>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4652      	mov	r2, sl
 8004dc0:	4631      	mov	r1, r6
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	47b8      	blx	r7
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	f43f aef9 	beq.w	8004bbe <_printf_float+0xb6>
 8004dcc:	f109 0901 	add.w	r9, r9, #1
 8004dd0:	e7ee      	b.n	8004db0 <_printf_float+0x2a8>
 8004dd2:	bf00      	nop
 8004dd4:	7fefffff 	.word	0x7fefffff
 8004dd8:	0800953f 	.word	0x0800953f
 8004ddc:	08009543 	.word	0x08009543
 8004de0:	08009547 	.word	0x08009547
 8004de4:	0800954b 	.word	0x0800954b
 8004de8:	0800954f 	.word	0x0800954f
 8004dec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004df0:	429a      	cmp	r2, r3
 8004df2:	bfa8      	it	ge
 8004df4:	461a      	movge	r2, r3
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	4691      	mov	r9, r2
 8004dfa:	dc37      	bgt.n	8004e6c <_printf_float+0x364>
 8004dfc:	f04f 0b00 	mov.w	fp, #0
 8004e00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e04:	f104 021a 	add.w	r2, r4, #26
 8004e08:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004e0c:	ebaa 0309 	sub.w	r3, sl, r9
 8004e10:	455b      	cmp	r3, fp
 8004e12:	dc33      	bgt.n	8004e7c <_printf_float+0x374>
 8004e14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	db3b      	blt.n	8004e94 <_printf_float+0x38c>
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	07da      	lsls	r2, r3, #31
 8004e20:	d438      	bmi.n	8004e94 <_printf_float+0x38c>
 8004e22:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004e26:	eba2 0903 	sub.w	r9, r2, r3
 8004e2a:	eba2 020a 	sub.w	r2, r2, sl
 8004e2e:	4591      	cmp	r9, r2
 8004e30:	bfa8      	it	ge
 8004e32:	4691      	movge	r9, r2
 8004e34:	f1b9 0f00 	cmp.w	r9, #0
 8004e38:	dc34      	bgt.n	8004ea4 <_printf_float+0x39c>
 8004e3a:	f04f 0800 	mov.w	r8, #0
 8004e3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e42:	f104 0a1a 	add.w	sl, r4, #26
 8004e46:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	eba3 0309 	sub.w	r3, r3, r9
 8004e50:	4543      	cmp	r3, r8
 8004e52:	f77f af7a 	ble.w	8004d4a <_printf_float+0x242>
 8004e56:	2301      	movs	r3, #1
 8004e58:	4652      	mov	r2, sl
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f aeac 	beq.w	8004bbe <_printf_float+0xb6>
 8004e66:	f108 0801 	add.w	r8, r8, #1
 8004e6a:	e7ec      	b.n	8004e46 <_printf_float+0x33e>
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	4631      	mov	r1, r6
 8004e70:	4642      	mov	r2, r8
 8004e72:	4628      	mov	r0, r5
 8004e74:	47b8      	blx	r7
 8004e76:	3001      	adds	r0, #1
 8004e78:	d1c0      	bne.n	8004dfc <_printf_float+0x2f4>
 8004e7a:	e6a0      	b.n	8004bbe <_printf_float+0xb6>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e84:	47b8      	blx	r7
 8004e86:	3001      	adds	r0, #1
 8004e88:	f43f ae99 	beq.w	8004bbe <_printf_float+0xb6>
 8004e8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e8e:	f10b 0b01 	add.w	fp, fp, #1
 8004e92:	e7b9      	b.n	8004e08 <_printf_float+0x300>
 8004e94:	4631      	mov	r1, r6
 8004e96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	47b8      	blx	r7
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d1bf      	bne.n	8004e22 <_printf_float+0x31a>
 8004ea2:	e68c      	b.n	8004bbe <_printf_float+0xb6>
 8004ea4:	464b      	mov	r3, r9
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	eb08 020a 	add.w	r2, r8, sl
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d1c2      	bne.n	8004e3a <_printf_float+0x332>
 8004eb4:	e683      	b.n	8004bbe <_printf_float+0xb6>
 8004eb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eb8:	2a01      	cmp	r2, #1
 8004eba:	dc01      	bgt.n	8004ec0 <_printf_float+0x3b8>
 8004ebc:	07db      	lsls	r3, r3, #31
 8004ebe:	d539      	bpl.n	8004f34 <_printf_float+0x42c>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	4642      	mov	r2, r8
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	47b8      	blx	r7
 8004eca:	3001      	adds	r0, #1
 8004ecc:	f43f ae77 	beq.w	8004bbe <_printf_float+0xb6>
 8004ed0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ed4:	4631      	mov	r1, r6
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	47b8      	blx	r7
 8004eda:	3001      	adds	r0, #1
 8004edc:	f43f ae6f 	beq.w	8004bbe <_printf_float+0xb6>
 8004ee0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004eec:	f7fb fe1a 	bl	8000b24 <__aeabi_dcmpeq>
 8004ef0:	b9d8      	cbnz	r0, 8004f2a <_printf_float+0x422>
 8004ef2:	f109 33ff 	add.w	r3, r9, #4294967295
 8004ef6:	f108 0201 	add.w	r2, r8, #1
 8004efa:	4631      	mov	r1, r6
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b8      	blx	r7
 8004f00:	3001      	adds	r0, #1
 8004f02:	d10e      	bne.n	8004f22 <_printf_float+0x41a>
 8004f04:	e65b      	b.n	8004bbe <_printf_float+0xb6>
 8004f06:	2301      	movs	r3, #1
 8004f08:	464a      	mov	r2, r9
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f ae54 	beq.w	8004bbe <_printf_float+0xb6>
 8004f16:	f108 0801 	add.w	r8, r8, #1
 8004f1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	4543      	cmp	r3, r8
 8004f20:	dcf1      	bgt.n	8004f06 <_printf_float+0x3fe>
 8004f22:	4653      	mov	r3, sl
 8004f24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f28:	e6de      	b.n	8004ce8 <_printf_float+0x1e0>
 8004f2a:	f04f 0800 	mov.w	r8, #0
 8004f2e:	f104 091a 	add.w	r9, r4, #26
 8004f32:	e7f2      	b.n	8004f1a <_printf_float+0x412>
 8004f34:	2301      	movs	r3, #1
 8004f36:	4642      	mov	r2, r8
 8004f38:	e7df      	b.n	8004efa <_printf_float+0x3f2>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	464a      	mov	r2, r9
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b8      	blx	r7
 8004f44:	3001      	adds	r0, #1
 8004f46:	f43f ae3a 	beq.w	8004bbe <_printf_float+0xb6>
 8004f4a:	f108 0801 	add.w	r8, r8, #1
 8004f4e:	68e3      	ldr	r3, [r4, #12]
 8004f50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f52:	1a5b      	subs	r3, r3, r1
 8004f54:	4543      	cmp	r3, r8
 8004f56:	dcf0      	bgt.n	8004f3a <_printf_float+0x432>
 8004f58:	e6fb      	b.n	8004d52 <_printf_float+0x24a>
 8004f5a:	f04f 0800 	mov.w	r8, #0
 8004f5e:	f104 0919 	add.w	r9, r4, #25
 8004f62:	e7f4      	b.n	8004f4e <_printf_float+0x446>

08004f64 <_printf_common>:
 8004f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	4616      	mov	r6, r2
 8004f6a:	4699      	mov	r9, r3
 8004f6c:	688a      	ldr	r2, [r1, #8]
 8004f6e:	690b      	ldr	r3, [r1, #16]
 8004f70:	4607      	mov	r7, r0
 8004f72:	4293      	cmp	r3, r2
 8004f74:	bfb8      	it	lt
 8004f76:	4613      	movlt	r3, r2
 8004f78:	6033      	str	r3, [r6, #0]
 8004f7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f7e:	460c      	mov	r4, r1
 8004f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f84:	b10a      	cbz	r2, 8004f8a <_printf_common+0x26>
 8004f86:	3301      	adds	r3, #1
 8004f88:	6033      	str	r3, [r6, #0]
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	0699      	lsls	r1, r3, #26
 8004f8e:	bf42      	ittt	mi
 8004f90:	6833      	ldrmi	r3, [r6, #0]
 8004f92:	3302      	addmi	r3, #2
 8004f94:	6033      	strmi	r3, [r6, #0]
 8004f96:	6825      	ldr	r5, [r4, #0]
 8004f98:	f015 0506 	ands.w	r5, r5, #6
 8004f9c:	d106      	bne.n	8004fac <_printf_common+0x48>
 8004f9e:	f104 0a19 	add.w	sl, r4, #25
 8004fa2:	68e3      	ldr	r3, [r4, #12]
 8004fa4:	6832      	ldr	r2, [r6, #0]
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	42ab      	cmp	r3, r5
 8004faa:	dc2b      	bgt.n	8005004 <_printf_common+0xa0>
 8004fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fb0:	1e13      	subs	r3, r2, #0
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	bf18      	it	ne
 8004fb6:	2301      	movne	r3, #1
 8004fb8:	0692      	lsls	r2, r2, #26
 8004fba:	d430      	bmi.n	800501e <_printf_common+0xba>
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fc4:	47c0      	blx	r8
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d023      	beq.n	8005012 <_printf_common+0xae>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	6922      	ldr	r2, [r4, #16]
 8004fce:	f003 0306 	and.w	r3, r3, #6
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	bf14      	ite	ne
 8004fd6:	2500      	movne	r5, #0
 8004fd8:	6833      	ldreq	r3, [r6, #0]
 8004fda:	f04f 0600 	mov.w	r6, #0
 8004fde:	bf08      	it	eq
 8004fe0:	68e5      	ldreq	r5, [r4, #12]
 8004fe2:	f104 041a 	add.w	r4, r4, #26
 8004fe6:	bf08      	it	eq
 8004fe8:	1aed      	subeq	r5, r5, r3
 8004fea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004fee:	bf08      	it	eq
 8004ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	bfc4      	itt	gt
 8004ff8:	1a9b      	subgt	r3, r3, r2
 8004ffa:	18ed      	addgt	r5, r5, r3
 8004ffc:	42b5      	cmp	r5, r6
 8004ffe:	d11a      	bne.n	8005036 <_printf_common+0xd2>
 8005000:	2000      	movs	r0, #0
 8005002:	e008      	b.n	8005016 <_printf_common+0xb2>
 8005004:	2301      	movs	r3, #1
 8005006:	4652      	mov	r2, sl
 8005008:	4649      	mov	r1, r9
 800500a:	4638      	mov	r0, r7
 800500c:	47c0      	blx	r8
 800500e:	3001      	adds	r0, #1
 8005010:	d103      	bne.n	800501a <_printf_common+0xb6>
 8005012:	f04f 30ff 	mov.w	r0, #4294967295
 8005016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501a:	3501      	adds	r5, #1
 800501c:	e7c1      	b.n	8004fa2 <_printf_common+0x3e>
 800501e:	2030      	movs	r0, #48	; 0x30
 8005020:	18e1      	adds	r1, r4, r3
 8005022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800502c:	4422      	add	r2, r4
 800502e:	3302      	adds	r3, #2
 8005030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005034:	e7c2      	b.n	8004fbc <_printf_common+0x58>
 8005036:	2301      	movs	r3, #1
 8005038:	4622      	mov	r2, r4
 800503a:	4649      	mov	r1, r9
 800503c:	4638      	mov	r0, r7
 800503e:	47c0      	blx	r8
 8005040:	3001      	adds	r0, #1
 8005042:	d0e6      	beq.n	8005012 <_printf_common+0xae>
 8005044:	3601      	adds	r6, #1
 8005046:	e7d9      	b.n	8004ffc <_printf_common+0x98>

08005048 <_printf_i>:
 8005048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800504c:	7e0f      	ldrb	r7, [r1, #24]
 800504e:	4691      	mov	r9, r2
 8005050:	2f78      	cmp	r7, #120	; 0x78
 8005052:	4680      	mov	r8, r0
 8005054:	460c      	mov	r4, r1
 8005056:	469a      	mov	sl, r3
 8005058:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800505a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800505e:	d807      	bhi.n	8005070 <_printf_i+0x28>
 8005060:	2f62      	cmp	r7, #98	; 0x62
 8005062:	d80a      	bhi.n	800507a <_printf_i+0x32>
 8005064:	2f00      	cmp	r7, #0
 8005066:	f000 80d5 	beq.w	8005214 <_printf_i+0x1cc>
 800506a:	2f58      	cmp	r7, #88	; 0x58
 800506c:	f000 80c1 	beq.w	80051f2 <_printf_i+0x1aa>
 8005070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005078:	e03a      	b.n	80050f0 <_printf_i+0xa8>
 800507a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800507e:	2b15      	cmp	r3, #21
 8005080:	d8f6      	bhi.n	8005070 <_printf_i+0x28>
 8005082:	a101      	add	r1, pc, #4	; (adr r1, 8005088 <_printf_i+0x40>)
 8005084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005088:	080050e1 	.word	0x080050e1
 800508c:	080050f5 	.word	0x080050f5
 8005090:	08005071 	.word	0x08005071
 8005094:	08005071 	.word	0x08005071
 8005098:	08005071 	.word	0x08005071
 800509c:	08005071 	.word	0x08005071
 80050a0:	080050f5 	.word	0x080050f5
 80050a4:	08005071 	.word	0x08005071
 80050a8:	08005071 	.word	0x08005071
 80050ac:	08005071 	.word	0x08005071
 80050b0:	08005071 	.word	0x08005071
 80050b4:	080051fb 	.word	0x080051fb
 80050b8:	08005121 	.word	0x08005121
 80050bc:	080051b5 	.word	0x080051b5
 80050c0:	08005071 	.word	0x08005071
 80050c4:	08005071 	.word	0x08005071
 80050c8:	0800521d 	.word	0x0800521d
 80050cc:	08005071 	.word	0x08005071
 80050d0:	08005121 	.word	0x08005121
 80050d4:	08005071 	.word	0x08005071
 80050d8:	08005071 	.word	0x08005071
 80050dc:	080051bd 	.word	0x080051bd
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	1d1a      	adds	r2, r3, #4
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	602a      	str	r2, [r5, #0]
 80050e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050f0:	2301      	movs	r3, #1
 80050f2:	e0a0      	b.n	8005236 <_printf_i+0x1ee>
 80050f4:	6820      	ldr	r0, [r4, #0]
 80050f6:	682b      	ldr	r3, [r5, #0]
 80050f8:	0607      	lsls	r7, r0, #24
 80050fa:	f103 0104 	add.w	r1, r3, #4
 80050fe:	6029      	str	r1, [r5, #0]
 8005100:	d501      	bpl.n	8005106 <_printf_i+0xbe>
 8005102:	681e      	ldr	r6, [r3, #0]
 8005104:	e003      	b.n	800510e <_printf_i+0xc6>
 8005106:	0646      	lsls	r6, r0, #25
 8005108:	d5fb      	bpl.n	8005102 <_printf_i+0xba>
 800510a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800510e:	2e00      	cmp	r6, #0
 8005110:	da03      	bge.n	800511a <_printf_i+0xd2>
 8005112:	232d      	movs	r3, #45	; 0x2d
 8005114:	4276      	negs	r6, r6
 8005116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800511a:	230a      	movs	r3, #10
 800511c:	4859      	ldr	r0, [pc, #356]	; (8005284 <_printf_i+0x23c>)
 800511e:	e012      	b.n	8005146 <_printf_i+0xfe>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	6820      	ldr	r0, [r4, #0]
 8005124:	1d19      	adds	r1, r3, #4
 8005126:	6029      	str	r1, [r5, #0]
 8005128:	0605      	lsls	r5, r0, #24
 800512a:	d501      	bpl.n	8005130 <_printf_i+0xe8>
 800512c:	681e      	ldr	r6, [r3, #0]
 800512e:	e002      	b.n	8005136 <_printf_i+0xee>
 8005130:	0641      	lsls	r1, r0, #25
 8005132:	d5fb      	bpl.n	800512c <_printf_i+0xe4>
 8005134:	881e      	ldrh	r6, [r3, #0]
 8005136:	2f6f      	cmp	r7, #111	; 0x6f
 8005138:	bf0c      	ite	eq
 800513a:	2308      	moveq	r3, #8
 800513c:	230a      	movne	r3, #10
 800513e:	4851      	ldr	r0, [pc, #324]	; (8005284 <_printf_i+0x23c>)
 8005140:	2100      	movs	r1, #0
 8005142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005146:	6865      	ldr	r5, [r4, #4]
 8005148:	2d00      	cmp	r5, #0
 800514a:	bfa8      	it	ge
 800514c:	6821      	ldrge	r1, [r4, #0]
 800514e:	60a5      	str	r5, [r4, #8]
 8005150:	bfa4      	itt	ge
 8005152:	f021 0104 	bicge.w	r1, r1, #4
 8005156:	6021      	strge	r1, [r4, #0]
 8005158:	b90e      	cbnz	r6, 800515e <_printf_i+0x116>
 800515a:	2d00      	cmp	r5, #0
 800515c:	d04b      	beq.n	80051f6 <_printf_i+0x1ae>
 800515e:	4615      	mov	r5, r2
 8005160:	fbb6 f1f3 	udiv	r1, r6, r3
 8005164:	fb03 6711 	mls	r7, r3, r1, r6
 8005168:	5dc7      	ldrb	r7, [r0, r7]
 800516a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800516e:	4637      	mov	r7, r6
 8005170:	42bb      	cmp	r3, r7
 8005172:	460e      	mov	r6, r1
 8005174:	d9f4      	bls.n	8005160 <_printf_i+0x118>
 8005176:	2b08      	cmp	r3, #8
 8005178:	d10b      	bne.n	8005192 <_printf_i+0x14a>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	07de      	lsls	r6, r3, #31
 800517e:	d508      	bpl.n	8005192 <_printf_i+0x14a>
 8005180:	6923      	ldr	r3, [r4, #16]
 8005182:	6861      	ldr	r1, [r4, #4]
 8005184:	4299      	cmp	r1, r3
 8005186:	bfde      	ittt	le
 8005188:	2330      	movle	r3, #48	; 0x30
 800518a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800518e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005192:	1b52      	subs	r2, r2, r5
 8005194:	6122      	str	r2, [r4, #16]
 8005196:	464b      	mov	r3, r9
 8005198:	4621      	mov	r1, r4
 800519a:	4640      	mov	r0, r8
 800519c:	f8cd a000 	str.w	sl, [sp]
 80051a0:	aa03      	add	r2, sp, #12
 80051a2:	f7ff fedf 	bl	8004f64 <_printf_common>
 80051a6:	3001      	adds	r0, #1
 80051a8:	d14a      	bne.n	8005240 <_printf_i+0x1f8>
 80051aa:	f04f 30ff 	mov.w	r0, #4294967295
 80051ae:	b004      	add	sp, #16
 80051b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	f043 0320 	orr.w	r3, r3, #32
 80051ba:	6023      	str	r3, [r4, #0]
 80051bc:	2778      	movs	r7, #120	; 0x78
 80051be:	4832      	ldr	r0, [pc, #200]	; (8005288 <_printf_i+0x240>)
 80051c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	6829      	ldr	r1, [r5, #0]
 80051c8:	061f      	lsls	r7, r3, #24
 80051ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80051ce:	d402      	bmi.n	80051d6 <_printf_i+0x18e>
 80051d0:	065f      	lsls	r7, r3, #25
 80051d2:	bf48      	it	mi
 80051d4:	b2b6      	uxthmi	r6, r6
 80051d6:	07df      	lsls	r7, r3, #31
 80051d8:	bf48      	it	mi
 80051da:	f043 0320 	orrmi.w	r3, r3, #32
 80051de:	6029      	str	r1, [r5, #0]
 80051e0:	bf48      	it	mi
 80051e2:	6023      	strmi	r3, [r4, #0]
 80051e4:	b91e      	cbnz	r6, 80051ee <_printf_i+0x1a6>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	f023 0320 	bic.w	r3, r3, #32
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	2310      	movs	r3, #16
 80051f0:	e7a6      	b.n	8005140 <_printf_i+0xf8>
 80051f2:	4824      	ldr	r0, [pc, #144]	; (8005284 <_printf_i+0x23c>)
 80051f4:	e7e4      	b.n	80051c0 <_printf_i+0x178>
 80051f6:	4615      	mov	r5, r2
 80051f8:	e7bd      	b.n	8005176 <_printf_i+0x12e>
 80051fa:	682b      	ldr	r3, [r5, #0]
 80051fc:	6826      	ldr	r6, [r4, #0]
 80051fe:	1d18      	adds	r0, r3, #4
 8005200:	6961      	ldr	r1, [r4, #20]
 8005202:	6028      	str	r0, [r5, #0]
 8005204:	0635      	lsls	r5, r6, #24
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	d501      	bpl.n	800520e <_printf_i+0x1c6>
 800520a:	6019      	str	r1, [r3, #0]
 800520c:	e002      	b.n	8005214 <_printf_i+0x1cc>
 800520e:	0670      	lsls	r0, r6, #25
 8005210:	d5fb      	bpl.n	800520a <_printf_i+0x1c2>
 8005212:	8019      	strh	r1, [r3, #0]
 8005214:	2300      	movs	r3, #0
 8005216:	4615      	mov	r5, r2
 8005218:	6123      	str	r3, [r4, #16]
 800521a:	e7bc      	b.n	8005196 <_printf_i+0x14e>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	2100      	movs	r1, #0
 8005220:	1d1a      	adds	r2, r3, #4
 8005222:	602a      	str	r2, [r5, #0]
 8005224:	681d      	ldr	r5, [r3, #0]
 8005226:	6862      	ldr	r2, [r4, #4]
 8005228:	4628      	mov	r0, r5
 800522a:	f000 fd2d 	bl	8005c88 <memchr>
 800522e:	b108      	cbz	r0, 8005234 <_printf_i+0x1ec>
 8005230:	1b40      	subs	r0, r0, r5
 8005232:	6060      	str	r0, [r4, #4]
 8005234:	6863      	ldr	r3, [r4, #4]
 8005236:	6123      	str	r3, [r4, #16]
 8005238:	2300      	movs	r3, #0
 800523a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800523e:	e7aa      	b.n	8005196 <_printf_i+0x14e>
 8005240:	462a      	mov	r2, r5
 8005242:	4649      	mov	r1, r9
 8005244:	4640      	mov	r0, r8
 8005246:	6923      	ldr	r3, [r4, #16]
 8005248:	47d0      	blx	sl
 800524a:	3001      	adds	r0, #1
 800524c:	d0ad      	beq.n	80051aa <_printf_i+0x162>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	079b      	lsls	r3, r3, #30
 8005252:	d413      	bmi.n	800527c <_printf_i+0x234>
 8005254:	68e0      	ldr	r0, [r4, #12]
 8005256:	9b03      	ldr	r3, [sp, #12]
 8005258:	4298      	cmp	r0, r3
 800525a:	bfb8      	it	lt
 800525c:	4618      	movlt	r0, r3
 800525e:	e7a6      	b.n	80051ae <_printf_i+0x166>
 8005260:	2301      	movs	r3, #1
 8005262:	4632      	mov	r2, r6
 8005264:	4649      	mov	r1, r9
 8005266:	4640      	mov	r0, r8
 8005268:	47d0      	blx	sl
 800526a:	3001      	adds	r0, #1
 800526c:	d09d      	beq.n	80051aa <_printf_i+0x162>
 800526e:	3501      	adds	r5, #1
 8005270:	68e3      	ldr	r3, [r4, #12]
 8005272:	9903      	ldr	r1, [sp, #12]
 8005274:	1a5b      	subs	r3, r3, r1
 8005276:	42ab      	cmp	r3, r5
 8005278:	dcf2      	bgt.n	8005260 <_printf_i+0x218>
 800527a:	e7eb      	b.n	8005254 <_printf_i+0x20c>
 800527c:	2500      	movs	r5, #0
 800527e:	f104 0619 	add.w	r6, r4, #25
 8005282:	e7f5      	b.n	8005270 <_printf_i+0x228>
 8005284:	08009551 	.word	0x08009551
 8005288:	08009562 	.word	0x08009562

0800528c <_scanf_float>:
 800528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005290:	b087      	sub	sp, #28
 8005292:	9303      	str	r3, [sp, #12]
 8005294:	688b      	ldr	r3, [r1, #8]
 8005296:	4617      	mov	r7, r2
 8005298:	1e5a      	subs	r2, r3, #1
 800529a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800529e:	bf85      	ittet	hi
 80052a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80052a4:	195b      	addhi	r3, r3, r5
 80052a6:	2300      	movls	r3, #0
 80052a8:	9302      	strhi	r3, [sp, #8]
 80052aa:	bf88      	it	hi
 80052ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80052b0:	468b      	mov	fp, r1
 80052b2:	f04f 0500 	mov.w	r5, #0
 80052b6:	bf8c      	ite	hi
 80052b8:	608b      	strhi	r3, [r1, #8]
 80052ba:	9302      	strls	r3, [sp, #8]
 80052bc:	680b      	ldr	r3, [r1, #0]
 80052be:	4680      	mov	r8, r0
 80052c0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80052c4:	f84b 3b1c 	str.w	r3, [fp], #28
 80052c8:	460c      	mov	r4, r1
 80052ca:	465e      	mov	r6, fp
 80052cc:	46aa      	mov	sl, r5
 80052ce:	46a9      	mov	r9, r5
 80052d0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80052d4:	9501      	str	r5, [sp, #4]
 80052d6:	68a2      	ldr	r2, [r4, #8]
 80052d8:	b152      	cbz	r2, 80052f0 <_scanf_float+0x64>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b4e      	cmp	r3, #78	; 0x4e
 80052e0:	d864      	bhi.n	80053ac <_scanf_float+0x120>
 80052e2:	2b40      	cmp	r3, #64	; 0x40
 80052e4:	d83c      	bhi.n	8005360 <_scanf_float+0xd4>
 80052e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80052ea:	b2c8      	uxtb	r0, r1
 80052ec:	280e      	cmp	r0, #14
 80052ee:	d93a      	bls.n	8005366 <_scanf_float+0xda>
 80052f0:	f1b9 0f00 	cmp.w	r9, #0
 80052f4:	d003      	beq.n	80052fe <_scanf_float+0x72>
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005302:	f1ba 0f01 	cmp.w	sl, #1
 8005306:	f200 8113 	bhi.w	8005530 <_scanf_float+0x2a4>
 800530a:	455e      	cmp	r6, fp
 800530c:	f200 8105 	bhi.w	800551a <_scanf_float+0x28e>
 8005310:	2501      	movs	r5, #1
 8005312:	4628      	mov	r0, r5
 8005314:	b007      	add	sp, #28
 8005316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800531e:	2a0d      	cmp	r2, #13
 8005320:	d8e6      	bhi.n	80052f0 <_scanf_float+0x64>
 8005322:	a101      	add	r1, pc, #4	; (adr r1, 8005328 <_scanf_float+0x9c>)
 8005324:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005328:	08005467 	.word	0x08005467
 800532c:	080052f1 	.word	0x080052f1
 8005330:	080052f1 	.word	0x080052f1
 8005334:	080052f1 	.word	0x080052f1
 8005338:	080054c7 	.word	0x080054c7
 800533c:	0800549f 	.word	0x0800549f
 8005340:	080052f1 	.word	0x080052f1
 8005344:	080052f1 	.word	0x080052f1
 8005348:	08005475 	.word	0x08005475
 800534c:	080052f1 	.word	0x080052f1
 8005350:	080052f1 	.word	0x080052f1
 8005354:	080052f1 	.word	0x080052f1
 8005358:	080052f1 	.word	0x080052f1
 800535c:	0800542d 	.word	0x0800542d
 8005360:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005364:	e7db      	b.n	800531e <_scanf_float+0x92>
 8005366:	290e      	cmp	r1, #14
 8005368:	d8c2      	bhi.n	80052f0 <_scanf_float+0x64>
 800536a:	a001      	add	r0, pc, #4	; (adr r0, 8005370 <_scanf_float+0xe4>)
 800536c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005370:	0800541f 	.word	0x0800541f
 8005374:	080052f1 	.word	0x080052f1
 8005378:	0800541f 	.word	0x0800541f
 800537c:	080054b3 	.word	0x080054b3
 8005380:	080052f1 	.word	0x080052f1
 8005384:	080053cd 	.word	0x080053cd
 8005388:	08005409 	.word	0x08005409
 800538c:	08005409 	.word	0x08005409
 8005390:	08005409 	.word	0x08005409
 8005394:	08005409 	.word	0x08005409
 8005398:	08005409 	.word	0x08005409
 800539c:	08005409 	.word	0x08005409
 80053a0:	08005409 	.word	0x08005409
 80053a4:	08005409 	.word	0x08005409
 80053a8:	08005409 	.word	0x08005409
 80053ac:	2b6e      	cmp	r3, #110	; 0x6e
 80053ae:	d809      	bhi.n	80053c4 <_scanf_float+0x138>
 80053b0:	2b60      	cmp	r3, #96	; 0x60
 80053b2:	d8b2      	bhi.n	800531a <_scanf_float+0x8e>
 80053b4:	2b54      	cmp	r3, #84	; 0x54
 80053b6:	d077      	beq.n	80054a8 <_scanf_float+0x21c>
 80053b8:	2b59      	cmp	r3, #89	; 0x59
 80053ba:	d199      	bne.n	80052f0 <_scanf_float+0x64>
 80053bc:	2d07      	cmp	r5, #7
 80053be:	d197      	bne.n	80052f0 <_scanf_float+0x64>
 80053c0:	2508      	movs	r5, #8
 80053c2:	e029      	b.n	8005418 <_scanf_float+0x18c>
 80053c4:	2b74      	cmp	r3, #116	; 0x74
 80053c6:	d06f      	beq.n	80054a8 <_scanf_float+0x21c>
 80053c8:	2b79      	cmp	r3, #121	; 0x79
 80053ca:	e7f6      	b.n	80053ba <_scanf_float+0x12e>
 80053cc:	6821      	ldr	r1, [r4, #0]
 80053ce:	05c8      	lsls	r0, r1, #23
 80053d0:	d51a      	bpl.n	8005408 <_scanf_float+0x17c>
 80053d2:	9b02      	ldr	r3, [sp, #8]
 80053d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80053d8:	6021      	str	r1, [r4, #0]
 80053da:	f109 0901 	add.w	r9, r9, #1
 80053de:	b11b      	cbz	r3, 80053e8 <_scanf_float+0x15c>
 80053e0:	3b01      	subs	r3, #1
 80053e2:	3201      	adds	r2, #1
 80053e4:	9302      	str	r3, [sp, #8]
 80053e6:	60a2      	str	r2, [r4, #8]
 80053e8:	68a3      	ldr	r3, [r4, #8]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	60a3      	str	r3, [r4, #8]
 80053ee:	6923      	ldr	r3, [r4, #16]
 80053f0:	3301      	adds	r3, #1
 80053f2:	6123      	str	r3, [r4, #16]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	607b      	str	r3, [r7, #4]
 80053fc:	f340 8084 	ble.w	8005508 <_scanf_float+0x27c>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	3301      	adds	r3, #1
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	e766      	b.n	80052d6 <_scanf_float+0x4a>
 8005408:	eb1a 0f05 	cmn.w	sl, r5
 800540c:	f47f af70 	bne.w	80052f0 <_scanf_float+0x64>
 8005410:	6822      	ldr	r2, [r4, #0]
 8005412:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005416:	6022      	str	r2, [r4, #0]
 8005418:	f806 3b01 	strb.w	r3, [r6], #1
 800541c:	e7e4      	b.n	80053e8 <_scanf_float+0x15c>
 800541e:	6822      	ldr	r2, [r4, #0]
 8005420:	0610      	lsls	r0, r2, #24
 8005422:	f57f af65 	bpl.w	80052f0 <_scanf_float+0x64>
 8005426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800542a:	e7f4      	b.n	8005416 <_scanf_float+0x18a>
 800542c:	f1ba 0f00 	cmp.w	sl, #0
 8005430:	d10e      	bne.n	8005450 <_scanf_float+0x1c4>
 8005432:	f1b9 0f00 	cmp.w	r9, #0
 8005436:	d10e      	bne.n	8005456 <_scanf_float+0x1ca>
 8005438:	6822      	ldr	r2, [r4, #0]
 800543a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800543e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005442:	d108      	bne.n	8005456 <_scanf_float+0x1ca>
 8005444:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005448:	f04f 0a01 	mov.w	sl, #1
 800544c:	6022      	str	r2, [r4, #0]
 800544e:	e7e3      	b.n	8005418 <_scanf_float+0x18c>
 8005450:	f1ba 0f02 	cmp.w	sl, #2
 8005454:	d055      	beq.n	8005502 <_scanf_float+0x276>
 8005456:	2d01      	cmp	r5, #1
 8005458:	d002      	beq.n	8005460 <_scanf_float+0x1d4>
 800545a:	2d04      	cmp	r5, #4
 800545c:	f47f af48 	bne.w	80052f0 <_scanf_float+0x64>
 8005460:	3501      	adds	r5, #1
 8005462:	b2ed      	uxtb	r5, r5
 8005464:	e7d8      	b.n	8005418 <_scanf_float+0x18c>
 8005466:	f1ba 0f01 	cmp.w	sl, #1
 800546a:	f47f af41 	bne.w	80052f0 <_scanf_float+0x64>
 800546e:	f04f 0a02 	mov.w	sl, #2
 8005472:	e7d1      	b.n	8005418 <_scanf_float+0x18c>
 8005474:	b97d      	cbnz	r5, 8005496 <_scanf_float+0x20a>
 8005476:	f1b9 0f00 	cmp.w	r9, #0
 800547a:	f47f af3c 	bne.w	80052f6 <_scanf_float+0x6a>
 800547e:	6822      	ldr	r2, [r4, #0]
 8005480:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005484:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005488:	f47f af39 	bne.w	80052fe <_scanf_float+0x72>
 800548c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005490:	2501      	movs	r5, #1
 8005492:	6022      	str	r2, [r4, #0]
 8005494:	e7c0      	b.n	8005418 <_scanf_float+0x18c>
 8005496:	2d03      	cmp	r5, #3
 8005498:	d0e2      	beq.n	8005460 <_scanf_float+0x1d4>
 800549a:	2d05      	cmp	r5, #5
 800549c:	e7de      	b.n	800545c <_scanf_float+0x1d0>
 800549e:	2d02      	cmp	r5, #2
 80054a0:	f47f af26 	bne.w	80052f0 <_scanf_float+0x64>
 80054a4:	2503      	movs	r5, #3
 80054a6:	e7b7      	b.n	8005418 <_scanf_float+0x18c>
 80054a8:	2d06      	cmp	r5, #6
 80054aa:	f47f af21 	bne.w	80052f0 <_scanf_float+0x64>
 80054ae:	2507      	movs	r5, #7
 80054b0:	e7b2      	b.n	8005418 <_scanf_float+0x18c>
 80054b2:	6822      	ldr	r2, [r4, #0]
 80054b4:	0591      	lsls	r1, r2, #22
 80054b6:	f57f af1b 	bpl.w	80052f0 <_scanf_float+0x64>
 80054ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80054be:	6022      	str	r2, [r4, #0]
 80054c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80054c4:	e7a8      	b.n	8005418 <_scanf_float+0x18c>
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80054cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80054d0:	d006      	beq.n	80054e0 <_scanf_float+0x254>
 80054d2:	0550      	lsls	r0, r2, #21
 80054d4:	f57f af0c 	bpl.w	80052f0 <_scanf_float+0x64>
 80054d8:	f1b9 0f00 	cmp.w	r9, #0
 80054dc:	f43f af0f 	beq.w	80052fe <_scanf_float+0x72>
 80054e0:	0591      	lsls	r1, r2, #22
 80054e2:	bf58      	it	pl
 80054e4:	9901      	ldrpl	r1, [sp, #4]
 80054e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80054ea:	bf58      	it	pl
 80054ec:	eba9 0101 	subpl.w	r1, r9, r1
 80054f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80054f4:	f04f 0900 	mov.w	r9, #0
 80054f8:	bf58      	it	pl
 80054fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80054fe:	6022      	str	r2, [r4, #0]
 8005500:	e78a      	b.n	8005418 <_scanf_float+0x18c>
 8005502:	f04f 0a03 	mov.w	sl, #3
 8005506:	e787      	b.n	8005418 <_scanf_float+0x18c>
 8005508:	4639      	mov	r1, r7
 800550a:	4640      	mov	r0, r8
 800550c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005510:	4798      	blx	r3
 8005512:	2800      	cmp	r0, #0
 8005514:	f43f aedf 	beq.w	80052d6 <_scanf_float+0x4a>
 8005518:	e6ea      	b.n	80052f0 <_scanf_float+0x64>
 800551a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800551e:	463a      	mov	r2, r7
 8005520:	4640      	mov	r0, r8
 8005522:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005526:	4798      	blx	r3
 8005528:	6923      	ldr	r3, [r4, #16]
 800552a:	3b01      	subs	r3, #1
 800552c:	6123      	str	r3, [r4, #16]
 800552e:	e6ec      	b.n	800530a <_scanf_float+0x7e>
 8005530:	1e6b      	subs	r3, r5, #1
 8005532:	2b06      	cmp	r3, #6
 8005534:	d825      	bhi.n	8005582 <_scanf_float+0x2f6>
 8005536:	2d02      	cmp	r5, #2
 8005538:	d836      	bhi.n	80055a8 <_scanf_float+0x31c>
 800553a:	455e      	cmp	r6, fp
 800553c:	f67f aee8 	bls.w	8005310 <_scanf_float+0x84>
 8005540:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005544:	463a      	mov	r2, r7
 8005546:	4640      	mov	r0, r8
 8005548:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800554c:	4798      	blx	r3
 800554e:	6923      	ldr	r3, [r4, #16]
 8005550:	3b01      	subs	r3, #1
 8005552:	6123      	str	r3, [r4, #16]
 8005554:	e7f1      	b.n	800553a <_scanf_float+0x2ae>
 8005556:	9802      	ldr	r0, [sp, #8]
 8005558:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800555c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005560:	463a      	mov	r2, r7
 8005562:	9002      	str	r0, [sp, #8]
 8005564:	4640      	mov	r0, r8
 8005566:	4798      	blx	r3
 8005568:	6923      	ldr	r3, [r4, #16]
 800556a:	3b01      	subs	r3, #1
 800556c:	6123      	str	r3, [r4, #16]
 800556e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005572:	fa5f fa8a 	uxtb.w	sl, sl
 8005576:	f1ba 0f02 	cmp.w	sl, #2
 800557a:	d1ec      	bne.n	8005556 <_scanf_float+0x2ca>
 800557c:	3d03      	subs	r5, #3
 800557e:	b2ed      	uxtb	r5, r5
 8005580:	1b76      	subs	r6, r6, r5
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	05da      	lsls	r2, r3, #23
 8005586:	d52f      	bpl.n	80055e8 <_scanf_float+0x35c>
 8005588:	055b      	lsls	r3, r3, #21
 800558a:	d510      	bpl.n	80055ae <_scanf_float+0x322>
 800558c:	455e      	cmp	r6, fp
 800558e:	f67f aebf 	bls.w	8005310 <_scanf_float+0x84>
 8005592:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005596:	463a      	mov	r2, r7
 8005598:	4640      	mov	r0, r8
 800559a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800559e:	4798      	blx	r3
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	6123      	str	r3, [r4, #16]
 80055a6:	e7f1      	b.n	800558c <_scanf_float+0x300>
 80055a8:	46aa      	mov	sl, r5
 80055aa:	9602      	str	r6, [sp, #8]
 80055ac:	e7df      	b.n	800556e <_scanf_float+0x2e2>
 80055ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	2965      	cmp	r1, #101	; 0x65
 80055b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80055ba:	f106 35ff 	add.w	r5, r6, #4294967295
 80055be:	6123      	str	r3, [r4, #16]
 80055c0:	d00c      	beq.n	80055dc <_scanf_float+0x350>
 80055c2:	2945      	cmp	r1, #69	; 0x45
 80055c4:	d00a      	beq.n	80055dc <_scanf_float+0x350>
 80055c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055ca:	463a      	mov	r2, r7
 80055cc:	4640      	mov	r0, r8
 80055ce:	4798      	blx	r3
 80055d0:	6923      	ldr	r3, [r4, #16]
 80055d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	1eb5      	subs	r5, r6, #2
 80055da:	6123      	str	r3, [r4, #16]
 80055dc:	463a      	mov	r2, r7
 80055de:	4640      	mov	r0, r8
 80055e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055e4:	4798      	blx	r3
 80055e6:	462e      	mov	r6, r5
 80055e8:	6825      	ldr	r5, [r4, #0]
 80055ea:	f015 0510 	ands.w	r5, r5, #16
 80055ee:	d155      	bne.n	800569c <_scanf_float+0x410>
 80055f0:	7035      	strb	r5, [r6, #0]
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055fc:	d11d      	bne.n	800563a <_scanf_float+0x3ae>
 80055fe:	9b01      	ldr	r3, [sp, #4]
 8005600:	454b      	cmp	r3, r9
 8005602:	eba3 0209 	sub.w	r2, r3, r9
 8005606:	d125      	bne.n	8005654 <_scanf_float+0x3c8>
 8005608:	2200      	movs	r2, #0
 800560a:	4659      	mov	r1, fp
 800560c:	4640      	mov	r0, r8
 800560e:	f002 fd8b 	bl	8008128 <_strtod_r>
 8005612:	9b03      	ldr	r3, [sp, #12]
 8005614:	f8d4 c000 	ldr.w	ip, [r4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f01c 0f02 	tst.w	ip, #2
 800561e:	4606      	mov	r6, r0
 8005620:	460f      	mov	r7, r1
 8005622:	f103 0204 	add.w	r2, r3, #4
 8005626:	d020      	beq.n	800566a <_scanf_float+0x3de>
 8005628:	9903      	ldr	r1, [sp, #12]
 800562a:	600a      	str	r2, [r1, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	e9c3 6700 	strd	r6, r7, [r3]
 8005632:	68e3      	ldr	r3, [r4, #12]
 8005634:	3301      	adds	r3, #1
 8005636:	60e3      	str	r3, [r4, #12]
 8005638:	e66b      	b.n	8005312 <_scanf_float+0x86>
 800563a:	9b04      	ldr	r3, [sp, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0e3      	beq.n	8005608 <_scanf_float+0x37c>
 8005640:	9905      	ldr	r1, [sp, #20]
 8005642:	230a      	movs	r3, #10
 8005644:	462a      	mov	r2, r5
 8005646:	4640      	mov	r0, r8
 8005648:	3101      	adds	r1, #1
 800564a:	f7ff f9b5 	bl	80049b8 <_strtol_r>
 800564e:	9b04      	ldr	r3, [sp, #16]
 8005650:	9e05      	ldr	r6, [sp, #20]
 8005652:	1ac2      	subs	r2, r0, r3
 8005654:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005658:	429e      	cmp	r6, r3
 800565a:	bf28      	it	cs
 800565c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005660:	4630      	mov	r0, r6
 8005662:	490f      	ldr	r1, [pc, #60]	; (80056a0 <_scanf_float+0x414>)
 8005664:	f000 f93e 	bl	80058e4 <siprintf>
 8005668:	e7ce      	b.n	8005608 <_scanf_float+0x37c>
 800566a:	f01c 0f04 	tst.w	ip, #4
 800566e:	d1db      	bne.n	8005628 <_scanf_float+0x39c>
 8005670:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005674:	f8cc 2000 	str.w	r2, [ip]
 8005678:	f8d3 8000 	ldr.w	r8, [r3]
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	f7fb fa82 	bl	8000b88 <__aeabi_dcmpun>
 8005684:	b128      	cbz	r0, 8005692 <_scanf_float+0x406>
 8005686:	4807      	ldr	r0, [pc, #28]	; (80056a4 <_scanf_float+0x418>)
 8005688:	f000 fb0c 	bl	8005ca4 <nanf>
 800568c:	f8c8 0000 	str.w	r0, [r8]
 8005690:	e7cf      	b.n	8005632 <_scanf_float+0x3a6>
 8005692:	4630      	mov	r0, r6
 8005694:	4639      	mov	r1, r7
 8005696:	f7fb fad5 	bl	8000c44 <__aeabi_d2f>
 800569a:	e7f7      	b.n	800568c <_scanf_float+0x400>
 800569c:	2500      	movs	r5, #0
 800569e:	e638      	b.n	8005312 <_scanf_float+0x86>
 80056a0:	08009573 	.word	0x08009573
 80056a4:	08009624 	.word	0x08009624

080056a8 <std>:
 80056a8:	2300      	movs	r3, #0
 80056aa:	b510      	push	{r4, lr}
 80056ac:	4604      	mov	r4, r0
 80056ae:	e9c0 3300 	strd	r3, r3, [r0]
 80056b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056b6:	6083      	str	r3, [r0, #8]
 80056b8:	8181      	strh	r1, [r0, #12]
 80056ba:	6643      	str	r3, [r0, #100]	; 0x64
 80056bc:	81c2      	strh	r2, [r0, #14]
 80056be:	6183      	str	r3, [r0, #24]
 80056c0:	4619      	mov	r1, r3
 80056c2:	2208      	movs	r2, #8
 80056c4:	305c      	adds	r0, #92	; 0x5c
 80056c6:	f000 fa05 	bl	8005ad4 <memset>
 80056ca:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <std+0x38>)
 80056cc:	6224      	str	r4, [r4, #32]
 80056ce:	6263      	str	r3, [r4, #36]	; 0x24
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <std+0x3c>)
 80056d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80056d4:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <std+0x40>)
 80056d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056d8:	4b04      	ldr	r3, [pc, #16]	; (80056ec <std+0x44>)
 80056da:	6323      	str	r3, [r4, #48]	; 0x30
 80056dc:	bd10      	pop	{r4, pc}
 80056de:	bf00      	nop
 80056e0:	08005925 	.word	0x08005925
 80056e4:	08005947 	.word	0x08005947
 80056e8:	0800597f 	.word	0x0800597f
 80056ec:	080059a3 	.word	0x080059a3

080056f0 <stdio_exit_handler>:
 80056f0:	4a02      	ldr	r2, [pc, #8]	; (80056fc <stdio_exit_handler+0xc>)
 80056f2:	4903      	ldr	r1, [pc, #12]	; (8005700 <stdio_exit_handler+0x10>)
 80056f4:	4803      	ldr	r0, [pc, #12]	; (8005704 <stdio_exit_handler+0x14>)
 80056f6:	f000 b869 	b.w	80057cc <_fwalk_sglue>
 80056fa:	bf00      	nop
 80056fc:	20000010 	.word	0x20000010
 8005700:	0800876d 	.word	0x0800876d
 8005704:	2000001c 	.word	0x2000001c

08005708 <cleanup_stdio>:
 8005708:	6841      	ldr	r1, [r0, #4]
 800570a:	4b0c      	ldr	r3, [pc, #48]	; (800573c <cleanup_stdio+0x34>)
 800570c:	b510      	push	{r4, lr}
 800570e:	4299      	cmp	r1, r3
 8005710:	4604      	mov	r4, r0
 8005712:	d001      	beq.n	8005718 <cleanup_stdio+0x10>
 8005714:	f003 f82a 	bl	800876c <_fflush_r>
 8005718:	68a1      	ldr	r1, [r4, #8]
 800571a:	4b09      	ldr	r3, [pc, #36]	; (8005740 <cleanup_stdio+0x38>)
 800571c:	4299      	cmp	r1, r3
 800571e:	d002      	beq.n	8005726 <cleanup_stdio+0x1e>
 8005720:	4620      	mov	r0, r4
 8005722:	f003 f823 	bl	800876c <_fflush_r>
 8005726:	68e1      	ldr	r1, [r4, #12]
 8005728:	4b06      	ldr	r3, [pc, #24]	; (8005744 <cleanup_stdio+0x3c>)
 800572a:	4299      	cmp	r1, r3
 800572c:	d004      	beq.n	8005738 <cleanup_stdio+0x30>
 800572e:	4620      	mov	r0, r4
 8005730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005734:	f003 b81a 	b.w	800876c <_fflush_r>
 8005738:	bd10      	pop	{r4, pc}
 800573a:	bf00      	nop
 800573c:	20000400 	.word	0x20000400
 8005740:	20000468 	.word	0x20000468
 8005744:	200004d0 	.word	0x200004d0

08005748 <global_stdio_init.part.0>:
 8005748:	b510      	push	{r4, lr}
 800574a:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <global_stdio_init.part.0+0x30>)
 800574c:	4c0b      	ldr	r4, [pc, #44]	; (800577c <global_stdio_init.part.0+0x34>)
 800574e:	4a0c      	ldr	r2, [pc, #48]	; (8005780 <global_stdio_init.part.0+0x38>)
 8005750:	4620      	mov	r0, r4
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	2104      	movs	r1, #4
 8005756:	2200      	movs	r2, #0
 8005758:	f7ff ffa6 	bl	80056a8 <std>
 800575c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005760:	2201      	movs	r2, #1
 8005762:	2109      	movs	r1, #9
 8005764:	f7ff ffa0 	bl	80056a8 <std>
 8005768:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800576c:	2202      	movs	r2, #2
 800576e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005772:	2112      	movs	r1, #18
 8005774:	f7ff bf98 	b.w	80056a8 <std>
 8005778:	20000538 	.word	0x20000538
 800577c:	20000400 	.word	0x20000400
 8005780:	080056f1 	.word	0x080056f1

08005784 <__sfp_lock_acquire>:
 8005784:	4801      	ldr	r0, [pc, #4]	; (800578c <__sfp_lock_acquire+0x8>)
 8005786:	f000 ba7d 	b.w	8005c84 <__retarget_lock_acquire_recursive>
 800578a:	bf00      	nop
 800578c:	20000541 	.word	0x20000541

08005790 <__sfp_lock_release>:
 8005790:	4801      	ldr	r0, [pc, #4]	; (8005798 <__sfp_lock_release+0x8>)
 8005792:	f000 ba78 	b.w	8005c86 <__retarget_lock_release_recursive>
 8005796:	bf00      	nop
 8005798:	20000541 	.word	0x20000541

0800579c <__sinit>:
 800579c:	b510      	push	{r4, lr}
 800579e:	4604      	mov	r4, r0
 80057a0:	f7ff fff0 	bl	8005784 <__sfp_lock_acquire>
 80057a4:	6a23      	ldr	r3, [r4, #32]
 80057a6:	b11b      	cbz	r3, 80057b0 <__sinit+0x14>
 80057a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ac:	f7ff bff0 	b.w	8005790 <__sfp_lock_release>
 80057b0:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <__sinit+0x28>)
 80057b2:	6223      	str	r3, [r4, #32]
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <__sinit+0x2c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f5      	bne.n	80057a8 <__sinit+0xc>
 80057bc:	f7ff ffc4 	bl	8005748 <global_stdio_init.part.0>
 80057c0:	e7f2      	b.n	80057a8 <__sinit+0xc>
 80057c2:	bf00      	nop
 80057c4:	08005709 	.word	0x08005709
 80057c8:	20000538 	.word	0x20000538

080057cc <_fwalk_sglue>:
 80057cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d0:	4607      	mov	r7, r0
 80057d2:	4688      	mov	r8, r1
 80057d4:	4614      	mov	r4, r2
 80057d6:	2600      	movs	r6, #0
 80057d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057dc:	f1b9 0901 	subs.w	r9, r9, #1
 80057e0:	d505      	bpl.n	80057ee <_fwalk_sglue+0x22>
 80057e2:	6824      	ldr	r4, [r4, #0]
 80057e4:	2c00      	cmp	r4, #0
 80057e6:	d1f7      	bne.n	80057d8 <_fwalk_sglue+0xc>
 80057e8:	4630      	mov	r0, r6
 80057ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ee:	89ab      	ldrh	r3, [r5, #12]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d907      	bls.n	8005804 <_fwalk_sglue+0x38>
 80057f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057f8:	3301      	adds	r3, #1
 80057fa:	d003      	beq.n	8005804 <_fwalk_sglue+0x38>
 80057fc:	4629      	mov	r1, r5
 80057fe:	4638      	mov	r0, r7
 8005800:	47c0      	blx	r8
 8005802:	4306      	orrs	r6, r0
 8005804:	3568      	adds	r5, #104	; 0x68
 8005806:	e7e9      	b.n	80057dc <_fwalk_sglue+0x10>

08005808 <iprintf>:
 8005808:	b40f      	push	{r0, r1, r2, r3}
 800580a:	b507      	push	{r0, r1, r2, lr}
 800580c:	4906      	ldr	r1, [pc, #24]	; (8005828 <iprintf+0x20>)
 800580e:	ab04      	add	r3, sp, #16
 8005810:	6808      	ldr	r0, [r1, #0]
 8005812:	f853 2b04 	ldr.w	r2, [r3], #4
 8005816:	6881      	ldr	r1, [r0, #8]
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	f002 fe0b 	bl	8008434 <_vfiprintf_r>
 800581e:	b003      	add	sp, #12
 8005820:	f85d eb04 	ldr.w	lr, [sp], #4
 8005824:	b004      	add	sp, #16
 8005826:	4770      	bx	lr
 8005828:	20000068 	.word	0x20000068

0800582c <_puts_r>:
 800582c:	6a03      	ldr	r3, [r0, #32]
 800582e:	b570      	push	{r4, r5, r6, lr}
 8005830:	4605      	mov	r5, r0
 8005832:	460e      	mov	r6, r1
 8005834:	6884      	ldr	r4, [r0, #8]
 8005836:	b90b      	cbnz	r3, 800583c <_puts_r+0x10>
 8005838:	f7ff ffb0 	bl	800579c <__sinit>
 800583c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800583e:	07db      	lsls	r3, r3, #31
 8005840:	d405      	bmi.n	800584e <_puts_r+0x22>
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	0598      	lsls	r0, r3, #22
 8005846:	d402      	bmi.n	800584e <_puts_r+0x22>
 8005848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800584a:	f000 fa1b 	bl	8005c84 <__retarget_lock_acquire_recursive>
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	0719      	lsls	r1, r3, #28
 8005852:	d513      	bpl.n	800587c <_puts_r+0x50>
 8005854:	6923      	ldr	r3, [r4, #16]
 8005856:	b18b      	cbz	r3, 800587c <_puts_r+0x50>
 8005858:	3e01      	subs	r6, #1
 800585a:	68a3      	ldr	r3, [r4, #8]
 800585c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005860:	3b01      	subs	r3, #1
 8005862:	60a3      	str	r3, [r4, #8]
 8005864:	b9e9      	cbnz	r1, 80058a2 <_puts_r+0x76>
 8005866:	2b00      	cmp	r3, #0
 8005868:	da2e      	bge.n	80058c8 <_puts_r+0x9c>
 800586a:	4622      	mov	r2, r4
 800586c:	210a      	movs	r1, #10
 800586e:	4628      	mov	r0, r5
 8005870:	f000 f89b 	bl	80059aa <__swbuf_r>
 8005874:	3001      	adds	r0, #1
 8005876:	d007      	beq.n	8005888 <_puts_r+0x5c>
 8005878:	250a      	movs	r5, #10
 800587a:	e007      	b.n	800588c <_puts_r+0x60>
 800587c:	4621      	mov	r1, r4
 800587e:	4628      	mov	r0, r5
 8005880:	f000 f8d0 	bl	8005a24 <__swsetup_r>
 8005884:	2800      	cmp	r0, #0
 8005886:	d0e7      	beq.n	8005858 <_puts_r+0x2c>
 8005888:	f04f 35ff 	mov.w	r5, #4294967295
 800588c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800588e:	07da      	lsls	r2, r3, #31
 8005890:	d405      	bmi.n	800589e <_puts_r+0x72>
 8005892:	89a3      	ldrh	r3, [r4, #12]
 8005894:	059b      	lsls	r3, r3, #22
 8005896:	d402      	bmi.n	800589e <_puts_r+0x72>
 8005898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800589a:	f000 f9f4 	bl	8005c86 <__retarget_lock_release_recursive>
 800589e:	4628      	mov	r0, r5
 80058a0:	bd70      	pop	{r4, r5, r6, pc}
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da04      	bge.n	80058b0 <_puts_r+0x84>
 80058a6:	69a2      	ldr	r2, [r4, #24]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	dc06      	bgt.n	80058ba <_puts_r+0x8e>
 80058ac:	290a      	cmp	r1, #10
 80058ae:	d004      	beq.n	80058ba <_puts_r+0x8e>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	6022      	str	r2, [r4, #0]
 80058b6:	7019      	strb	r1, [r3, #0]
 80058b8:	e7cf      	b.n	800585a <_puts_r+0x2e>
 80058ba:	4622      	mov	r2, r4
 80058bc:	4628      	mov	r0, r5
 80058be:	f000 f874 	bl	80059aa <__swbuf_r>
 80058c2:	3001      	adds	r0, #1
 80058c4:	d1c9      	bne.n	800585a <_puts_r+0x2e>
 80058c6:	e7df      	b.n	8005888 <_puts_r+0x5c>
 80058c8:	250a      	movs	r5, #10
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	6022      	str	r2, [r4, #0]
 80058d0:	701d      	strb	r5, [r3, #0]
 80058d2:	e7db      	b.n	800588c <_puts_r+0x60>

080058d4 <puts>:
 80058d4:	4b02      	ldr	r3, [pc, #8]	; (80058e0 <puts+0xc>)
 80058d6:	4601      	mov	r1, r0
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	f7ff bfa7 	b.w	800582c <_puts_r>
 80058de:	bf00      	nop
 80058e0:	20000068 	.word	0x20000068

080058e4 <siprintf>:
 80058e4:	b40e      	push	{r1, r2, r3}
 80058e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058ea:	b500      	push	{lr}
 80058ec:	b09c      	sub	sp, #112	; 0x70
 80058ee:	ab1d      	add	r3, sp, #116	; 0x74
 80058f0:	9002      	str	r0, [sp, #8]
 80058f2:	9006      	str	r0, [sp, #24]
 80058f4:	9107      	str	r1, [sp, #28]
 80058f6:	9104      	str	r1, [sp, #16]
 80058f8:	4808      	ldr	r0, [pc, #32]	; (800591c <siprintf+0x38>)
 80058fa:	4909      	ldr	r1, [pc, #36]	; (8005920 <siprintf+0x3c>)
 80058fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005900:	9105      	str	r1, [sp, #20]
 8005902:	6800      	ldr	r0, [r0, #0]
 8005904:	a902      	add	r1, sp, #8
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	f002 fc6e 	bl	80081e8 <_svfiprintf_r>
 800590c:	2200      	movs	r2, #0
 800590e:	9b02      	ldr	r3, [sp, #8]
 8005910:	701a      	strb	r2, [r3, #0]
 8005912:	b01c      	add	sp, #112	; 0x70
 8005914:	f85d eb04 	ldr.w	lr, [sp], #4
 8005918:	b003      	add	sp, #12
 800591a:	4770      	bx	lr
 800591c:	20000068 	.word	0x20000068
 8005920:	ffff0208 	.word	0xffff0208

08005924 <__sread>:
 8005924:	b510      	push	{r4, lr}
 8005926:	460c      	mov	r4, r1
 8005928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800592c:	f000 f95c 	bl	8005be8 <_read_r>
 8005930:	2800      	cmp	r0, #0
 8005932:	bfab      	itete	ge
 8005934:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005936:	89a3      	ldrhlt	r3, [r4, #12]
 8005938:	181b      	addge	r3, r3, r0
 800593a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800593e:	bfac      	ite	ge
 8005940:	6563      	strge	r3, [r4, #84]	; 0x54
 8005942:	81a3      	strhlt	r3, [r4, #12]
 8005944:	bd10      	pop	{r4, pc}

08005946 <__swrite>:
 8005946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800594a:	461f      	mov	r7, r3
 800594c:	898b      	ldrh	r3, [r1, #12]
 800594e:	4605      	mov	r5, r0
 8005950:	05db      	lsls	r3, r3, #23
 8005952:	460c      	mov	r4, r1
 8005954:	4616      	mov	r6, r2
 8005956:	d505      	bpl.n	8005964 <__swrite+0x1e>
 8005958:	2302      	movs	r3, #2
 800595a:	2200      	movs	r2, #0
 800595c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005960:	f000 f930 	bl	8005bc4 <_lseek_r>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	4632      	mov	r2, r6
 8005968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800596c:	81a3      	strh	r3, [r4, #12]
 800596e:	4628      	mov	r0, r5
 8005970:	463b      	mov	r3, r7
 8005972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800597a:	f000 b947 	b.w	8005c0c <_write_r>

0800597e <__sseek>:
 800597e:	b510      	push	{r4, lr}
 8005980:	460c      	mov	r4, r1
 8005982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005986:	f000 f91d 	bl	8005bc4 <_lseek_r>
 800598a:	1c43      	adds	r3, r0, #1
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	bf15      	itete	ne
 8005990:	6560      	strne	r0, [r4, #84]	; 0x54
 8005992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800599a:	81a3      	strheq	r3, [r4, #12]
 800599c:	bf18      	it	ne
 800599e:	81a3      	strhne	r3, [r4, #12]
 80059a0:	bd10      	pop	{r4, pc}

080059a2 <__sclose>:
 80059a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a6:	f000 b8fd 	b.w	8005ba4 <_close_r>

080059aa <__swbuf_r>:
 80059aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ac:	460e      	mov	r6, r1
 80059ae:	4614      	mov	r4, r2
 80059b0:	4605      	mov	r5, r0
 80059b2:	b118      	cbz	r0, 80059bc <__swbuf_r+0x12>
 80059b4:	6a03      	ldr	r3, [r0, #32]
 80059b6:	b90b      	cbnz	r3, 80059bc <__swbuf_r+0x12>
 80059b8:	f7ff fef0 	bl	800579c <__sinit>
 80059bc:	69a3      	ldr	r3, [r4, #24]
 80059be:	60a3      	str	r3, [r4, #8]
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	071a      	lsls	r2, r3, #28
 80059c4:	d525      	bpl.n	8005a12 <__swbuf_r+0x68>
 80059c6:	6923      	ldr	r3, [r4, #16]
 80059c8:	b31b      	cbz	r3, 8005a12 <__swbuf_r+0x68>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	6922      	ldr	r2, [r4, #16]
 80059ce:	b2f6      	uxtb	r6, r6
 80059d0:	1a98      	subs	r0, r3, r2
 80059d2:	6963      	ldr	r3, [r4, #20]
 80059d4:	4637      	mov	r7, r6
 80059d6:	4283      	cmp	r3, r0
 80059d8:	dc04      	bgt.n	80059e4 <__swbuf_r+0x3a>
 80059da:	4621      	mov	r1, r4
 80059dc:	4628      	mov	r0, r5
 80059de:	f002 fec5 	bl	800876c <_fflush_r>
 80059e2:	b9e0      	cbnz	r0, 8005a1e <__swbuf_r+0x74>
 80059e4:	68a3      	ldr	r3, [r4, #8]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	60a3      	str	r3, [r4, #8]
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	6022      	str	r2, [r4, #0]
 80059f0:	701e      	strb	r6, [r3, #0]
 80059f2:	6962      	ldr	r2, [r4, #20]
 80059f4:	1c43      	adds	r3, r0, #1
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d004      	beq.n	8005a04 <__swbuf_r+0x5a>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	07db      	lsls	r3, r3, #31
 80059fe:	d506      	bpl.n	8005a0e <__swbuf_r+0x64>
 8005a00:	2e0a      	cmp	r6, #10
 8005a02:	d104      	bne.n	8005a0e <__swbuf_r+0x64>
 8005a04:	4621      	mov	r1, r4
 8005a06:	4628      	mov	r0, r5
 8005a08:	f002 feb0 	bl	800876c <_fflush_r>
 8005a0c:	b938      	cbnz	r0, 8005a1e <__swbuf_r+0x74>
 8005a0e:	4638      	mov	r0, r7
 8005a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a12:	4621      	mov	r1, r4
 8005a14:	4628      	mov	r0, r5
 8005a16:	f000 f805 	bl	8005a24 <__swsetup_r>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d0d5      	beq.n	80059ca <__swbuf_r+0x20>
 8005a1e:	f04f 37ff 	mov.w	r7, #4294967295
 8005a22:	e7f4      	b.n	8005a0e <__swbuf_r+0x64>

08005a24 <__swsetup_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4b2a      	ldr	r3, [pc, #168]	; (8005ad0 <__swsetup_r+0xac>)
 8005a28:	4605      	mov	r5, r0
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	b118      	cbz	r0, 8005a38 <__swsetup_r+0x14>
 8005a30:	6a03      	ldr	r3, [r0, #32]
 8005a32:	b90b      	cbnz	r3, 8005a38 <__swsetup_r+0x14>
 8005a34:	f7ff feb2 	bl	800579c <__sinit>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a3e:	0718      	lsls	r0, r3, #28
 8005a40:	d422      	bmi.n	8005a88 <__swsetup_r+0x64>
 8005a42:	06d9      	lsls	r1, r3, #27
 8005a44:	d407      	bmi.n	8005a56 <__swsetup_r+0x32>
 8005a46:	2309      	movs	r3, #9
 8005a48:	602b      	str	r3, [r5, #0]
 8005a4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a52:	81a3      	strh	r3, [r4, #12]
 8005a54:	e034      	b.n	8005ac0 <__swsetup_r+0x9c>
 8005a56:	0758      	lsls	r0, r3, #29
 8005a58:	d512      	bpl.n	8005a80 <__swsetup_r+0x5c>
 8005a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a5c:	b141      	cbz	r1, 8005a70 <__swsetup_r+0x4c>
 8005a5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a62:	4299      	cmp	r1, r3
 8005a64:	d002      	beq.n	8005a6c <__swsetup_r+0x48>
 8005a66:	4628      	mov	r0, r5
 8005a68:	f000 ffae 	bl	80069c8 <_free_r>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	6363      	str	r3, [r4, #52]	; 0x34
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a76:	81a3      	strh	r3, [r4, #12]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6063      	str	r3, [r4, #4]
 8005a7c:	6923      	ldr	r3, [r4, #16]
 8005a7e:	6023      	str	r3, [r4, #0]
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	f043 0308 	orr.w	r3, r3, #8
 8005a86:	81a3      	strh	r3, [r4, #12]
 8005a88:	6923      	ldr	r3, [r4, #16]
 8005a8a:	b94b      	cbnz	r3, 8005aa0 <__swsetup_r+0x7c>
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a96:	d003      	beq.n	8005aa0 <__swsetup_r+0x7c>
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f002 fec5 	bl	800882a <__smakebuf_r>
 8005aa0:	89a0      	ldrh	r0, [r4, #12]
 8005aa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005aa6:	f010 0301 	ands.w	r3, r0, #1
 8005aaa:	d00a      	beq.n	8005ac2 <__swsetup_r+0x9e>
 8005aac:	2300      	movs	r3, #0
 8005aae:	60a3      	str	r3, [r4, #8]
 8005ab0:	6963      	ldr	r3, [r4, #20]
 8005ab2:	425b      	negs	r3, r3
 8005ab4:	61a3      	str	r3, [r4, #24]
 8005ab6:	6923      	ldr	r3, [r4, #16]
 8005ab8:	b943      	cbnz	r3, 8005acc <__swsetup_r+0xa8>
 8005aba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005abe:	d1c4      	bne.n	8005a4a <__swsetup_r+0x26>
 8005ac0:	bd38      	pop	{r3, r4, r5, pc}
 8005ac2:	0781      	lsls	r1, r0, #30
 8005ac4:	bf58      	it	pl
 8005ac6:	6963      	ldrpl	r3, [r4, #20]
 8005ac8:	60a3      	str	r3, [r4, #8]
 8005aca:	e7f4      	b.n	8005ab6 <__swsetup_r+0x92>
 8005acc:	2000      	movs	r0, #0
 8005ace:	e7f7      	b.n	8005ac0 <__swsetup_r+0x9c>
 8005ad0:	20000068 	.word	0x20000068

08005ad4 <memset>:
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	4402      	add	r2, r0
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d100      	bne.n	8005ade <memset+0xa>
 8005adc:	4770      	bx	lr
 8005ade:	f803 1b01 	strb.w	r1, [r3], #1
 8005ae2:	e7f9      	b.n	8005ad8 <memset+0x4>

08005ae4 <strtok>:
 8005ae4:	4b16      	ldr	r3, [pc, #88]	; (8005b40 <strtok+0x5c>)
 8005ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aea:	681f      	ldr	r7, [r3, #0]
 8005aec:	4605      	mov	r5, r0
 8005aee:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8005af0:	460e      	mov	r6, r1
 8005af2:	b9ec      	cbnz	r4, 8005b30 <strtok+0x4c>
 8005af4:	2050      	movs	r0, #80	; 0x50
 8005af6:	f000 ffaf 	bl	8006a58 <malloc>
 8005afa:	4602      	mov	r2, r0
 8005afc:	6478      	str	r0, [r7, #68]	; 0x44
 8005afe:	b920      	cbnz	r0, 8005b0a <strtok+0x26>
 8005b00:	215b      	movs	r1, #91	; 0x5b
 8005b02:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <strtok+0x60>)
 8005b04:	4810      	ldr	r0, [pc, #64]	; (8005b48 <strtok+0x64>)
 8005b06:	f000 f8d1 	bl	8005cac <__assert_func>
 8005b0a:	e9c0 4400 	strd	r4, r4, [r0]
 8005b0e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005b12:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005b16:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005b1a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005b1e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005b22:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005b26:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005b2a:	6184      	str	r4, [r0, #24]
 8005b2c:	7704      	strb	r4, [r0, #28]
 8005b2e:	6244      	str	r4, [r0, #36]	; 0x24
 8005b30:	4631      	mov	r1, r6
 8005b32:	4628      	mov	r0, r5
 8005b34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b36:	2301      	movs	r3, #1
 8005b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b3c:	f000 b806 	b.w	8005b4c <__strtok_r>
 8005b40:	20000068 	.word	0x20000068
 8005b44:	08009578 	.word	0x08009578
 8005b48:	0800958f 	.word	0x0800958f

08005b4c <__strtok_r>:
 8005b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b4e:	b908      	cbnz	r0, 8005b54 <__strtok_r+0x8>
 8005b50:	6810      	ldr	r0, [r2, #0]
 8005b52:	b188      	cbz	r0, 8005b78 <__strtok_r+0x2c>
 8005b54:	4604      	mov	r4, r0
 8005b56:	460f      	mov	r7, r1
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005b5e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005b62:	b91e      	cbnz	r6, 8005b6c <__strtok_r+0x20>
 8005b64:	b965      	cbnz	r5, 8005b80 <__strtok_r+0x34>
 8005b66:	4628      	mov	r0, r5
 8005b68:	6015      	str	r5, [r2, #0]
 8005b6a:	e005      	b.n	8005b78 <__strtok_r+0x2c>
 8005b6c:	42b5      	cmp	r5, r6
 8005b6e:	d1f6      	bne.n	8005b5e <__strtok_r+0x12>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1f0      	bne.n	8005b56 <__strtok_r+0xa>
 8005b74:	6014      	str	r4, [r2, #0]
 8005b76:	7003      	strb	r3, [r0, #0]
 8005b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b7a:	461c      	mov	r4, r3
 8005b7c:	e00c      	b.n	8005b98 <__strtok_r+0x4c>
 8005b7e:	b915      	cbnz	r5, 8005b86 <__strtok_r+0x3a>
 8005b80:	460e      	mov	r6, r1
 8005b82:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b86:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005b8a:	42ab      	cmp	r3, r5
 8005b8c:	d1f7      	bne.n	8005b7e <__strtok_r+0x32>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0f3      	beq.n	8005b7a <__strtok_r+0x2e>
 8005b92:	2300      	movs	r3, #0
 8005b94:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005b98:	6014      	str	r4, [r2, #0]
 8005b9a:	e7ed      	b.n	8005b78 <__strtok_r+0x2c>

08005b9c <_localeconv_r>:
 8005b9c:	4800      	ldr	r0, [pc, #0]	; (8005ba0 <_localeconv_r+0x4>)
 8005b9e:	4770      	bx	lr
 8005ba0:	2000015c 	.word	0x2000015c

08005ba4 <_close_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	4d05      	ldr	r5, [pc, #20]	; (8005bc0 <_close_r+0x1c>)
 8005baa:	4604      	mov	r4, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	602b      	str	r3, [r5, #0]
 8005bb0:	f7fc fceb 	bl	800258a <_close>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d102      	bne.n	8005bbe <_close_r+0x1a>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	b103      	cbz	r3, 8005bbe <_close_r+0x1a>
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	2000053c 	.word	0x2000053c

08005bc4 <_lseek_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	4608      	mov	r0, r1
 8005bca:	4611      	mov	r1, r2
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4d05      	ldr	r5, [pc, #20]	; (8005be4 <_lseek_r+0x20>)
 8005bd0:	602a      	str	r2, [r5, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f7fc fcfd 	bl	80025d2 <_lseek>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_lseek_r+0x1e>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_lseek_r+0x1e>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	2000053c 	.word	0x2000053c

08005be8 <_read_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4604      	mov	r4, r0
 8005bec:	4608      	mov	r0, r1
 8005bee:	4611      	mov	r1, r2
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	4d05      	ldr	r5, [pc, #20]	; (8005c08 <_read_r+0x20>)
 8005bf4:	602a      	str	r2, [r5, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f7fc fc8e 	bl	8002518 <_read>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_read_r+0x1e>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_read_r+0x1e>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	2000053c 	.word	0x2000053c

08005c0c <_write_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4604      	mov	r4, r0
 8005c10:	4608      	mov	r0, r1
 8005c12:	4611      	mov	r1, r2
 8005c14:	2200      	movs	r2, #0
 8005c16:	4d05      	ldr	r5, [pc, #20]	; (8005c2c <_write_r+0x20>)
 8005c18:	602a      	str	r2, [r5, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f7fc fc99 	bl	8002552 <_write>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_write_r+0x1e>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_write_r+0x1e>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	2000053c 	.word	0x2000053c

08005c30 <__errno>:
 8005c30:	4b01      	ldr	r3, [pc, #4]	; (8005c38 <__errno+0x8>)
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20000068 	.word	0x20000068

08005c3c <__libc_init_array>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	2600      	movs	r6, #0
 8005c40:	4d0c      	ldr	r5, [pc, #48]	; (8005c74 <__libc_init_array+0x38>)
 8005c42:	4c0d      	ldr	r4, [pc, #52]	; (8005c78 <__libc_init_array+0x3c>)
 8005c44:	1b64      	subs	r4, r4, r5
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	42a6      	cmp	r6, r4
 8005c4a:	d109      	bne.n	8005c60 <__libc_init_array+0x24>
 8005c4c:	f003 faac 	bl	80091a8 <_init>
 8005c50:	2600      	movs	r6, #0
 8005c52:	4d0a      	ldr	r5, [pc, #40]	; (8005c7c <__libc_init_array+0x40>)
 8005c54:	4c0a      	ldr	r4, [pc, #40]	; (8005c80 <__libc_init_array+0x44>)
 8005c56:	1b64      	subs	r4, r4, r5
 8005c58:	10a4      	asrs	r4, r4, #2
 8005c5a:	42a6      	cmp	r6, r4
 8005c5c:	d105      	bne.n	8005c6a <__libc_init_array+0x2e>
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
 8005c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c64:	4798      	blx	r3
 8005c66:	3601      	adds	r6, #1
 8005c68:	e7ee      	b.n	8005c48 <__libc_init_array+0xc>
 8005c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6e:	4798      	blx	r3
 8005c70:	3601      	adds	r6, #1
 8005c72:	e7f2      	b.n	8005c5a <__libc_init_array+0x1e>
 8005c74:	080098c4 	.word	0x080098c4
 8005c78:	080098c4 	.word	0x080098c4
 8005c7c:	080098c4 	.word	0x080098c4
 8005c80:	080098c8 	.word	0x080098c8

08005c84 <__retarget_lock_acquire_recursive>:
 8005c84:	4770      	bx	lr

08005c86 <__retarget_lock_release_recursive>:
 8005c86:	4770      	bx	lr

08005c88 <memchr>:
 8005c88:	4603      	mov	r3, r0
 8005c8a:	b510      	push	{r4, lr}
 8005c8c:	b2c9      	uxtb	r1, r1
 8005c8e:	4402      	add	r2, r0
 8005c90:	4293      	cmp	r3, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	d101      	bne.n	8005c9a <memchr+0x12>
 8005c96:	2000      	movs	r0, #0
 8005c98:	e003      	b.n	8005ca2 <memchr+0x1a>
 8005c9a:	7804      	ldrb	r4, [r0, #0]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	428c      	cmp	r4, r1
 8005ca0:	d1f6      	bne.n	8005c90 <memchr+0x8>
 8005ca2:	bd10      	pop	{r4, pc}

08005ca4 <nanf>:
 8005ca4:	4800      	ldr	r0, [pc, #0]	; (8005ca8 <nanf+0x4>)
 8005ca6:	4770      	bx	lr
 8005ca8:	7fc00000 	.word	0x7fc00000

08005cac <__assert_func>:
 8005cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cae:	4614      	mov	r4, r2
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <__assert_func+0x2c>)
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68d8      	ldr	r0, [r3, #12]
 8005cba:	b14c      	cbz	r4, 8005cd0 <__assert_func+0x24>
 8005cbc:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <__assert_func+0x30>)
 8005cbe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005cc2:	9100      	str	r1, [sp, #0]
 8005cc4:	462b      	mov	r3, r5
 8005cc6:	4906      	ldr	r1, [pc, #24]	; (8005ce0 <__assert_func+0x34>)
 8005cc8:	f002 fd78 	bl	80087bc <fiprintf>
 8005ccc:	f002 fe5c 	bl	8008988 <abort>
 8005cd0:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <__assert_func+0x38>)
 8005cd2:	461c      	mov	r4, r3
 8005cd4:	e7f3      	b.n	8005cbe <__assert_func+0x12>
 8005cd6:	bf00      	nop
 8005cd8:	20000068 	.word	0x20000068
 8005cdc:	080095e9 	.word	0x080095e9
 8005ce0:	080095f6 	.word	0x080095f6
 8005ce4:	08009624 	.word	0x08009624

08005ce8 <quorem>:
 8005ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	6903      	ldr	r3, [r0, #16]
 8005cee:	690c      	ldr	r4, [r1, #16]
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	42a3      	cmp	r3, r4
 8005cf4:	db7f      	blt.n	8005df6 <quorem+0x10e>
 8005cf6:	3c01      	subs	r4, #1
 8005cf8:	f100 0514 	add.w	r5, r0, #20
 8005cfc:	f101 0814 	add.w	r8, r1, #20
 8005d00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	429a      	cmp	r2, r3
 8005d12:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d16:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d1a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d1e:	d331      	bcc.n	8005d84 <quorem+0x9c>
 8005d20:	f04f 0e00 	mov.w	lr, #0
 8005d24:	4640      	mov	r0, r8
 8005d26:	46ac      	mov	ip, r5
 8005d28:	46f2      	mov	sl, lr
 8005d2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d2e:	b293      	uxth	r3, r2
 8005d30:	fb06 e303 	mla	r3, r6, r3, lr
 8005d34:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d38:	0c1a      	lsrs	r2, r3, #16
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	fb06 220e 	mla	r2, r6, lr, r2
 8005d40:	ebaa 0303 	sub.w	r3, sl, r3
 8005d44:	f8dc a000 	ldr.w	sl, [ip]
 8005d48:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d4c:	fa1f fa8a 	uxth.w	sl, sl
 8005d50:	4453      	add	r3, sl
 8005d52:	f8dc a000 	ldr.w	sl, [ip]
 8005d56:	b292      	uxth	r2, r2
 8005d58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d66:	4581      	cmp	r9, r0
 8005d68:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d6c:	f84c 3b04 	str.w	r3, [ip], #4
 8005d70:	d2db      	bcs.n	8005d2a <quorem+0x42>
 8005d72:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d76:	b92b      	cbnz	r3, 8005d84 <quorem+0x9c>
 8005d78:	9b01      	ldr	r3, [sp, #4]
 8005d7a:	3b04      	subs	r3, #4
 8005d7c:	429d      	cmp	r5, r3
 8005d7e:	461a      	mov	r2, r3
 8005d80:	d32d      	bcc.n	8005dde <quorem+0xf6>
 8005d82:	613c      	str	r4, [r7, #16]
 8005d84:	4638      	mov	r0, r7
 8005d86:	f001 f9df 	bl	8007148 <__mcmp>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	db23      	blt.n	8005dd6 <quorem+0xee>
 8005d8e:	4629      	mov	r1, r5
 8005d90:	2000      	movs	r0, #0
 8005d92:	3601      	adds	r6, #1
 8005d94:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d98:	f8d1 c000 	ldr.w	ip, [r1]
 8005d9c:	b293      	uxth	r3, r2
 8005d9e:	1ac3      	subs	r3, r0, r3
 8005da0:	0c12      	lsrs	r2, r2, #16
 8005da2:	fa1f f08c 	uxth.w	r0, ip
 8005da6:	4403      	add	r3, r0
 8005da8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005dac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005db6:	45c1      	cmp	r9, r8
 8005db8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005dbc:	f841 3b04 	str.w	r3, [r1], #4
 8005dc0:	d2e8      	bcs.n	8005d94 <quorem+0xac>
 8005dc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dca:	b922      	cbnz	r2, 8005dd6 <quorem+0xee>
 8005dcc:	3b04      	subs	r3, #4
 8005dce:	429d      	cmp	r5, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	d30a      	bcc.n	8005dea <quorem+0x102>
 8005dd4:	613c      	str	r4, [r7, #16]
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	b003      	add	sp, #12
 8005dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dde:	6812      	ldr	r2, [r2, #0]
 8005de0:	3b04      	subs	r3, #4
 8005de2:	2a00      	cmp	r2, #0
 8005de4:	d1cd      	bne.n	8005d82 <quorem+0x9a>
 8005de6:	3c01      	subs	r4, #1
 8005de8:	e7c8      	b.n	8005d7c <quorem+0x94>
 8005dea:	6812      	ldr	r2, [r2, #0]
 8005dec:	3b04      	subs	r3, #4
 8005dee:	2a00      	cmp	r2, #0
 8005df0:	d1f0      	bne.n	8005dd4 <quorem+0xec>
 8005df2:	3c01      	subs	r4, #1
 8005df4:	e7eb      	b.n	8005dce <quorem+0xe6>
 8005df6:	2000      	movs	r0, #0
 8005df8:	e7ee      	b.n	8005dd8 <quorem+0xf0>
 8005dfa:	0000      	movs	r0, r0
 8005dfc:	0000      	movs	r0, r0
	...

08005e00 <_dtoa_r>:
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	4616      	mov	r6, r2
 8005e06:	461f      	mov	r7, r3
 8005e08:	69c4      	ldr	r4, [r0, #28]
 8005e0a:	b099      	sub	sp, #100	; 0x64
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005e12:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005e16:	b974      	cbnz	r4, 8005e36 <_dtoa_r+0x36>
 8005e18:	2010      	movs	r0, #16
 8005e1a:	f000 fe1d 	bl	8006a58 <malloc>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	61e8      	str	r0, [r5, #28]
 8005e22:	b920      	cbnz	r0, 8005e2e <_dtoa_r+0x2e>
 8005e24:	21ef      	movs	r1, #239	; 0xef
 8005e26:	4bac      	ldr	r3, [pc, #688]	; (80060d8 <_dtoa_r+0x2d8>)
 8005e28:	48ac      	ldr	r0, [pc, #688]	; (80060dc <_dtoa_r+0x2dc>)
 8005e2a:	f7ff ff3f 	bl	8005cac <__assert_func>
 8005e2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e32:	6004      	str	r4, [r0, #0]
 8005e34:	60c4      	str	r4, [r0, #12]
 8005e36:	69eb      	ldr	r3, [r5, #28]
 8005e38:	6819      	ldr	r1, [r3, #0]
 8005e3a:	b151      	cbz	r1, 8005e52 <_dtoa_r+0x52>
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	2301      	movs	r3, #1
 8005e40:	4093      	lsls	r3, r2
 8005e42:	604a      	str	r2, [r1, #4]
 8005e44:	608b      	str	r3, [r1, #8]
 8005e46:	4628      	mov	r0, r5
 8005e48:	f000 fefa 	bl	8006c40 <_Bfree>
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	69eb      	ldr	r3, [r5, #28]
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	1e3b      	subs	r3, r7, #0
 8005e54:	bfaf      	iteee	ge
 8005e56:	2300      	movge	r3, #0
 8005e58:	2201      	movlt	r2, #1
 8005e5a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e5e:	9305      	strlt	r3, [sp, #20]
 8005e60:	bfa8      	it	ge
 8005e62:	f8c8 3000 	strge.w	r3, [r8]
 8005e66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005e6a:	4b9d      	ldr	r3, [pc, #628]	; (80060e0 <_dtoa_r+0x2e0>)
 8005e6c:	bfb8      	it	lt
 8005e6e:	f8c8 2000 	strlt.w	r2, [r8]
 8005e72:	ea33 0309 	bics.w	r3, r3, r9
 8005e76:	d119      	bne.n	8005eac <_dtoa_r+0xac>
 8005e78:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e84:	4333      	orrs	r3, r6
 8005e86:	f000 8589 	beq.w	800699c <_dtoa_r+0xb9c>
 8005e8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e8c:	b953      	cbnz	r3, 8005ea4 <_dtoa_r+0xa4>
 8005e8e:	4b95      	ldr	r3, [pc, #596]	; (80060e4 <_dtoa_r+0x2e4>)
 8005e90:	e023      	b.n	8005eda <_dtoa_r+0xda>
 8005e92:	4b95      	ldr	r3, [pc, #596]	; (80060e8 <_dtoa_r+0x2e8>)
 8005e94:	9303      	str	r3, [sp, #12]
 8005e96:	3308      	adds	r3, #8
 8005e98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	9803      	ldr	r0, [sp, #12]
 8005e9e:	b019      	add	sp, #100	; 0x64
 8005ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea4:	4b8f      	ldr	r3, [pc, #572]	; (80060e4 <_dtoa_r+0x2e4>)
 8005ea6:	9303      	str	r3, [sp, #12]
 8005ea8:	3303      	adds	r3, #3
 8005eaa:	e7f5      	b.n	8005e98 <_dtoa_r+0x98>
 8005eac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005eb0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f7fa fe32 	bl	8000b24 <__aeabi_dcmpeq>
 8005ec0:	4680      	mov	r8, r0
 8005ec2:	b160      	cbz	r0, 8005ede <_dtoa_r+0xde>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8562 	beq.w	8006996 <_dtoa_r+0xb96>
 8005ed2:	4b86      	ldr	r3, [pc, #536]	; (80060ec <_dtoa_r+0x2ec>)
 8005ed4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	9303      	str	r3, [sp, #12]
 8005edc:	e7de      	b.n	8005e9c <_dtoa_r+0x9c>
 8005ede:	ab16      	add	r3, sp, #88	; 0x58
 8005ee0:	9301      	str	r3, [sp, #4]
 8005ee2:	ab17      	add	r3, sp, #92	; 0x5c
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005eec:	f001 fa3c 	bl	8007368 <__d2b>
 8005ef0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005ef4:	4682      	mov	sl, r0
 8005ef6:	2c00      	cmp	r4, #0
 8005ef8:	d07e      	beq.n	8005ff8 <_dtoa_r+0x1f8>
 8005efa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f00:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f08:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005f0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005f10:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005f14:	4619      	mov	r1, r3
 8005f16:	2200      	movs	r2, #0
 8005f18:	4b75      	ldr	r3, [pc, #468]	; (80060f0 <_dtoa_r+0x2f0>)
 8005f1a:	f7fa f9e3 	bl	80002e4 <__aeabi_dsub>
 8005f1e:	a368      	add	r3, pc, #416	; (adr r3, 80060c0 <_dtoa_r+0x2c0>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa fb96 	bl	8000654 <__aeabi_dmul>
 8005f28:	a367      	add	r3, pc, #412	; (adr r3, 80060c8 <_dtoa_r+0x2c8>)
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	f7fa f9db 	bl	80002e8 <__adddf3>
 8005f32:	4606      	mov	r6, r0
 8005f34:	4620      	mov	r0, r4
 8005f36:	460f      	mov	r7, r1
 8005f38:	f7fa fb22 	bl	8000580 <__aeabi_i2d>
 8005f3c:	a364      	add	r3, pc, #400	; (adr r3, 80060d0 <_dtoa_r+0x2d0>)
 8005f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f42:	f7fa fb87 	bl	8000654 <__aeabi_dmul>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	4639      	mov	r1, r7
 8005f4e:	f7fa f9cb 	bl	80002e8 <__adddf3>
 8005f52:	4606      	mov	r6, r0
 8005f54:	460f      	mov	r7, r1
 8005f56:	f7fa fe2d 	bl	8000bb4 <__aeabi_d2iz>
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	4683      	mov	fp, r0
 8005f5e:	2300      	movs	r3, #0
 8005f60:	4630      	mov	r0, r6
 8005f62:	4639      	mov	r1, r7
 8005f64:	f7fa fde8 	bl	8000b38 <__aeabi_dcmplt>
 8005f68:	b148      	cbz	r0, 8005f7e <_dtoa_r+0x17e>
 8005f6a:	4658      	mov	r0, fp
 8005f6c:	f7fa fb08 	bl	8000580 <__aeabi_i2d>
 8005f70:	4632      	mov	r2, r6
 8005f72:	463b      	mov	r3, r7
 8005f74:	f7fa fdd6 	bl	8000b24 <__aeabi_dcmpeq>
 8005f78:	b908      	cbnz	r0, 8005f7e <_dtoa_r+0x17e>
 8005f7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f7e:	f1bb 0f16 	cmp.w	fp, #22
 8005f82:	d857      	bhi.n	8006034 <_dtoa_r+0x234>
 8005f84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f88:	4b5a      	ldr	r3, [pc, #360]	; (80060f4 <_dtoa_r+0x2f4>)
 8005f8a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f92:	f7fa fdd1 	bl	8000b38 <__aeabi_dcmplt>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d04e      	beq.n	8006038 <_dtoa_r+0x238>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005fa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fa2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005fa4:	1b1b      	subs	r3, r3, r4
 8005fa6:	1e5a      	subs	r2, r3, #1
 8005fa8:	bf46      	itte	mi
 8005faa:	f1c3 0901 	rsbmi	r9, r3, #1
 8005fae:	2300      	movmi	r3, #0
 8005fb0:	f04f 0900 	movpl.w	r9, #0
 8005fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8005fb6:	bf48      	it	mi
 8005fb8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005fba:	f1bb 0f00 	cmp.w	fp, #0
 8005fbe:	db3d      	blt.n	800603c <_dtoa_r+0x23c>
 8005fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005fc6:	445b      	add	r3, fp
 8005fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fca:	2300      	movs	r3, #0
 8005fcc:	930a      	str	r3, [sp, #40]	; 0x28
 8005fce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fd0:	2b09      	cmp	r3, #9
 8005fd2:	d867      	bhi.n	80060a4 <_dtoa_r+0x2a4>
 8005fd4:	2b05      	cmp	r3, #5
 8005fd6:	bfc4      	itt	gt
 8005fd8:	3b04      	subgt	r3, #4
 8005fda:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005fdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fde:	bfc8      	it	gt
 8005fe0:	2400      	movgt	r4, #0
 8005fe2:	f1a3 0302 	sub.w	r3, r3, #2
 8005fe6:	bfd8      	it	le
 8005fe8:	2401      	movle	r4, #1
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	f200 8086 	bhi.w	80060fc <_dtoa_r+0x2fc>
 8005ff0:	e8df f003 	tbb	[pc, r3]
 8005ff4:	5637392c 	.word	0x5637392c
 8005ff8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005ffc:	441c      	add	r4, r3
 8005ffe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006002:	2b20      	cmp	r3, #32
 8006004:	bfc1      	itttt	gt
 8006006:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800600a:	fa09 f903 	lslgt.w	r9, r9, r3
 800600e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006012:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006016:	bfd6      	itet	le
 8006018:	f1c3 0320 	rsble	r3, r3, #32
 800601c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006020:	fa06 f003 	lslle.w	r0, r6, r3
 8006024:	f7fa fa9c 	bl	8000560 <__aeabi_ui2d>
 8006028:	2201      	movs	r2, #1
 800602a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800602e:	3c01      	subs	r4, #1
 8006030:	9213      	str	r2, [sp, #76]	; 0x4c
 8006032:	e76f      	b.n	8005f14 <_dtoa_r+0x114>
 8006034:	2301      	movs	r3, #1
 8006036:	e7b3      	b.n	8005fa0 <_dtoa_r+0x1a0>
 8006038:	900f      	str	r0, [sp, #60]	; 0x3c
 800603a:	e7b2      	b.n	8005fa2 <_dtoa_r+0x1a2>
 800603c:	f1cb 0300 	rsb	r3, fp, #0
 8006040:	930a      	str	r3, [sp, #40]	; 0x28
 8006042:	2300      	movs	r3, #0
 8006044:	eba9 090b 	sub.w	r9, r9, fp
 8006048:	930e      	str	r3, [sp, #56]	; 0x38
 800604a:	e7c0      	b.n	8005fce <_dtoa_r+0x1ce>
 800604c:	2300      	movs	r3, #0
 800604e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006050:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006052:	2b00      	cmp	r3, #0
 8006054:	dc55      	bgt.n	8006102 <_dtoa_r+0x302>
 8006056:	2301      	movs	r3, #1
 8006058:	461a      	mov	r2, r3
 800605a:	9306      	str	r3, [sp, #24]
 800605c:	9308      	str	r3, [sp, #32]
 800605e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006060:	e00b      	b.n	800607a <_dtoa_r+0x27a>
 8006062:	2301      	movs	r3, #1
 8006064:	e7f3      	b.n	800604e <_dtoa_r+0x24e>
 8006066:	2300      	movs	r3, #0
 8006068:	930b      	str	r3, [sp, #44]	; 0x2c
 800606a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800606c:	445b      	add	r3, fp
 800606e:	9306      	str	r3, [sp, #24]
 8006070:	3301      	adds	r3, #1
 8006072:	2b01      	cmp	r3, #1
 8006074:	9308      	str	r3, [sp, #32]
 8006076:	bfb8      	it	lt
 8006078:	2301      	movlt	r3, #1
 800607a:	2100      	movs	r1, #0
 800607c:	2204      	movs	r2, #4
 800607e:	69e8      	ldr	r0, [r5, #28]
 8006080:	f102 0614 	add.w	r6, r2, #20
 8006084:	429e      	cmp	r6, r3
 8006086:	d940      	bls.n	800610a <_dtoa_r+0x30a>
 8006088:	6041      	str	r1, [r0, #4]
 800608a:	4628      	mov	r0, r5
 800608c:	f000 fd98 	bl	8006bc0 <_Balloc>
 8006090:	9003      	str	r0, [sp, #12]
 8006092:	2800      	cmp	r0, #0
 8006094:	d13c      	bne.n	8006110 <_dtoa_r+0x310>
 8006096:	4602      	mov	r2, r0
 8006098:	f240 11af 	movw	r1, #431	; 0x1af
 800609c:	4b16      	ldr	r3, [pc, #88]	; (80060f8 <_dtoa_r+0x2f8>)
 800609e:	e6c3      	b.n	8005e28 <_dtoa_r+0x28>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e7e1      	b.n	8006068 <_dtoa_r+0x268>
 80060a4:	2401      	movs	r4, #1
 80060a6:	2300      	movs	r3, #0
 80060a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80060aa:	9322      	str	r3, [sp, #136]	; 0x88
 80060ac:	f04f 33ff 	mov.w	r3, #4294967295
 80060b0:	2200      	movs	r2, #0
 80060b2:	9306      	str	r3, [sp, #24]
 80060b4:	9308      	str	r3, [sp, #32]
 80060b6:	2312      	movs	r3, #18
 80060b8:	e7d1      	b.n	800605e <_dtoa_r+0x25e>
 80060ba:	bf00      	nop
 80060bc:	f3af 8000 	nop.w
 80060c0:	636f4361 	.word	0x636f4361
 80060c4:	3fd287a7 	.word	0x3fd287a7
 80060c8:	8b60c8b3 	.word	0x8b60c8b3
 80060cc:	3fc68a28 	.word	0x3fc68a28
 80060d0:	509f79fb 	.word	0x509f79fb
 80060d4:	3fd34413 	.word	0x3fd34413
 80060d8:	08009578 	.word	0x08009578
 80060dc:	08009632 	.word	0x08009632
 80060e0:	7ff00000 	.word	0x7ff00000
 80060e4:	0800962e 	.word	0x0800962e
 80060e8:	08009625 	.word	0x08009625
 80060ec:	08009550 	.word	0x08009550
 80060f0:	3ff80000 	.word	0x3ff80000
 80060f4:	08009720 	.word	0x08009720
 80060f8:	0800968a 	.word	0x0800968a
 80060fc:	2301      	movs	r3, #1
 80060fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006100:	e7d4      	b.n	80060ac <_dtoa_r+0x2ac>
 8006102:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006104:	9306      	str	r3, [sp, #24]
 8006106:	9308      	str	r3, [sp, #32]
 8006108:	e7b7      	b.n	800607a <_dtoa_r+0x27a>
 800610a:	3101      	adds	r1, #1
 800610c:	0052      	lsls	r2, r2, #1
 800610e:	e7b7      	b.n	8006080 <_dtoa_r+0x280>
 8006110:	69eb      	ldr	r3, [r5, #28]
 8006112:	9a03      	ldr	r2, [sp, #12]
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	9b08      	ldr	r3, [sp, #32]
 8006118:	2b0e      	cmp	r3, #14
 800611a:	f200 80a8 	bhi.w	800626e <_dtoa_r+0x46e>
 800611e:	2c00      	cmp	r4, #0
 8006120:	f000 80a5 	beq.w	800626e <_dtoa_r+0x46e>
 8006124:	f1bb 0f00 	cmp.w	fp, #0
 8006128:	dd34      	ble.n	8006194 <_dtoa_r+0x394>
 800612a:	4b9a      	ldr	r3, [pc, #616]	; (8006394 <_dtoa_r+0x594>)
 800612c:	f00b 020f 	and.w	r2, fp, #15
 8006130:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006134:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006138:	e9d3 3400 	ldrd	r3, r4, [r3]
 800613c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006140:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006144:	d016      	beq.n	8006174 <_dtoa_r+0x374>
 8006146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800614a:	4b93      	ldr	r3, [pc, #588]	; (8006398 <_dtoa_r+0x598>)
 800614c:	2703      	movs	r7, #3
 800614e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006152:	f7fa fba9 	bl	80008a8 <__aeabi_ddiv>
 8006156:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800615a:	f004 040f 	and.w	r4, r4, #15
 800615e:	4e8e      	ldr	r6, [pc, #568]	; (8006398 <_dtoa_r+0x598>)
 8006160:	b954      	cbnz	r4, 8006178 <_dtoa_r+0x378>
 8006162:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006166:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800616a:	f7fa fb9d 	bl	80008a8 <__aeabi_ddiv>
 800616e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006172:	e029      	b.n	80061c8 <_dtoa_r+0x3c8>
 8006174:	2702      	movs	r7, #2
 8006176:	e7f2      	b.n	800615e <_dtoa_r+0x35e>
 8006178:	07e1      	lsls	r1, r4, #31
 800617a:	d508      	bpl.n	800618e <_dtoa_r+0x38e>
 800617c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006180:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006184:	f7fa fa66 	bl	8000654 <__aeabi_dmul>
 8006188:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800618c:	3701      	adds	r7, #1
 800618e:	1064      	asrs	r4, r4, #1
 8006190:	3608      	adds	r6, #8
 8006192:	e7e5      	b.n	8006160 <_dtoa_r+0x360>
 8006194:	f000 80a5 	beq.w	80062e2 <_dtoa_r+0x4e2>
 8006198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800619c:	f1cb 0400 	rsb	r4, fp, #0
 80061a0:	4b7c      	ldr	r3, [pc, #496]	; (8006394 <_dtoa_r+0x594>)
 80061a2:	f004 020f 	and.w	r2, r4, #15
 80061a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f7fa fa51 	bl	8000654 <__aeabi_dmul>
 80061b2:	2702      	movs	r7, #2
 80061b4:	2300      	movs	r3, #0
 80061b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061ba:	4e77      	ldr	r6, [pc, #476]	; (8006398 <_dtoa_r+0x598>)
 80061bc:	1124      	asrs	r4, r4, #4
 80061be:	2c00      	cmp	r4, #0
 80061c0:	f040 8084 	bne.w	80062cc <_dtoa_r+0x4cc>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1d2      	bne.n	800616e <_dtoa_r+0x36e>
 80061c8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80061cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80061d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 8087 	beq.w	80062e6 <_dtoa_r+0x4e6>
 80061d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061dc:	2200      	movs	r2, #0
 80061de:	4b6f      	ldr	r3, [pc, #444]	; (800639c <_dtoa_r+0x59c>)
 80061e0:	f7fa fcaa 	bl	8000b38 <__aeabi_dcmplt>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d07e      	beq.n	80062e6 <_dtoa_r+0x4e6>
 80061e8:	9b08      	ldr	r3, [sp, #32]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d07b      	beq.n	80062e6 <_dtoa_r+0x4e6>
 80061ee:	9b06      	ldr	r3, [sp, #24]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	dd38      	ble.n	8006266 <_dtoa_r+0x466>
 80061f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061f8:	2200      	movs	r2, #0
 80061fa:	4b69      	ldr	r3, [pc, #420]	; (80063a0 <_dtoa_r+0x5a0>)
 80061fc:	f7fa fa2a 	bl	8000654 <__aeabi_dmul>
 8006200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006204:	9c06      	ldr	r4, [sp, #24]
 8006206:	f10b 38ff 	add.w	r8, fp, #4294967295
 800620a:	3701      	adds	r7, #1
 800620c:	4638      	mov	r0, r7
 800620e:	f7fa f9b7 	bl	8000580 <__aeabi_i2d>
 8006212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006216:	f7fa fa1d 	bl	8000654 <__aeabi_dmul>
 800621a:	2200      	movs	r2, #0
 800621c:	4b61      	ldr	r3, [pc, #388]	; (80063a4 <_dtoa_r+0x5a4>)
 800621e:	f7fa f863 	bl	80002e8 <__adddf3>
 8006222:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006226:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800622a:	9611      	str	r6, [sp, #68]	; 0x44
 800622c:	2c00      	cmp	r4, #0
 800622e:	d15d      	bne.n	80062ec <_dtoa_r+0x4ec>
 8006230:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006234:	2200      	movs	r2, #0
 8006236:	4b5c      	ldr	r3, [pc, #368]	; (80063a8 <_dtoa_r+0x5a8>)
 8006238:	f7fa f854 	bl	80002e4 <__aeabi_dsub>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006244:	4633      	mov	r3, r6
 8006246:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006248:	f7fa fc94 	bl	8000b74 <__aeabi_dcmpgt>
 800624c:	2800      	cmp	r0, #0
 800624e:	f040 8295 	bne.w	800677c <_dtoa_r+0x97c>
 8006252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006256:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006258:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800625c:	f7fa fc6c 	bl	8000b38 <__aeabi_dcmplt>
 8006260:	2800      	cmp	r0, #0
 8006262:	f040 8289 	bne.w	8006778 <_dtoa_r+0x978>
 8006266:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800626a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800626e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006270:	2b00      	cmp	r3, #0
 8006272:	f2c0 8151 	blt.w	8006518 <_dtoa_r+0x718>
 8006276:	f1bb 0f0e 	cmp.w	fp, #14
 800627a:	f300 814d 	bgt.w	8006518 <_dtoa_r+0x718>
 800627e:	4b45      	ldr	r3, [pc, #276]	; (8006394 <_dtoa_r+0x594>)
 8006280:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006284:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006288:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800628c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800628e:	2b00      	cmp	r3, #0
 8006290:	f280 80da 	bge.w	8006448 <_dtoa_r+0x648>
 8006294:	9b08      	ldr	r3, [sp, #32]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f300 80d6 	bgt.w	8006448 <_dtoa_r+0x648>
 800629c:	f040 826b 	bne.w	8006776 <_dtoa_r+0x976>
 80062a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062a4:	2200      	movs	r2, #0
 80062a6:	4b40      	ldr	r3, [pc, #256]	; (80063a8 <_dtoa_r+0x5a8>)
 80062a8:	f7fa f9d4 	bl	8000654 <__aeabi_dmul>
 80062ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062b0:	f7fa fc56 	bl	8000b60 <__aeabi_dcmpge>
 80062b4:	9c08      	ldr	r4, [sp, #32]
 80062b6:	4626      	mov	r6, r4
 80062b8:	2800      	cmp	r0, #0
 80062ba:	f040 8241 	bne.w	8006740 <_dtoa_r+0x940>
 80062be:	2331      	movs	r3, #49	; 0x31
 80062c0:	9f03      	ldr	r7, [sp, #12]
 80062c2:	f10b 0b01 	add.w	fp, fp, #1
 80062c6:	f807 3b01 	strb.w	r3, [r7], #1
 80062ca:	e23d      	b.n	8006748 <_dtoa_r+0x948>
 80062cc:	07e2      	lsls	r2, r4, #31
 80062ce:	d505      	bpl.n	80062dc <_dtoa_r+0x4dc>
 80062d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062d4:	f7fa f9be 	bl	8000654 <__aeabi_dmul>
 80062d8:	2301      	movs	r3, #1
 80062da:	3701      	adds	r7, #1
 80062dc:	1064      	asrs	r4, r4, #1
 80062de:	3608      	adds	r6, #8
 80062e0:	e76d      	b.n	80061be <_dtoa_r+0x3be>
 80062e2:	2702      	movs	r7, #2
 80062e4:	e770      	b.n	80061c8 <_dtoa_r+0x3c8>
 80062e6:	46d8      	mov	r8, fp
 80062e8:	9c08      	ldr	r4, [sp, #32]
 80062ea:	e78f      	b.n	800620c <_dtoa_r+0x40c>
 80062ec:	9903      	ldr	r1, [sp, #12]
 80062ee:	4b29      	ldr	r3, [pc, #164]	; (8006394 <_dtoa_r+0x594>)
 80062f0:	4421      	add	r1, r4
 80062f2:	9112      	str	r1, [sp, #72]	; 0x48
 80062f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062fa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80062fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006302:	2900      	cmp	r1, #0
 8006304:	d054      	beq.n	80063b0 <_dtoa_r+0x5b0>
 8006306:	2000      	movs	r0, #0
 8006308:	4928      	ldr	r1, [pc, #160]	; (80063ac <_dtoa_r+0x5ac>)
 800630a:	f7fa facd 	bl	80008a8 <__aeabi_ddiv>
 800630e:	463b      	mov	r3, r7
 8006310:	4632      	mov	r2, r6
 8006312:	f7f9 ffe7 	bl	80002e4 <__aeabi_dsub>
 8006316:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800631a:	9f03      	ldr	r7, [sp, #12]
 800631c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006320:	f7fa fc48 	bl	8000bb4 <__aeabi_d2iz>
 8006324:	4604      	mov	r4, r0
 8006326:	f7fa f92b 	bl	8000580 <__aeabi_i2d>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006332:	f7f9 ffd7 	bl	80002e4 <__aeabi_dsub>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	3430      	adds	r4, #48	; 0x30
 800633c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006340:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006344:	f807 4b01 	strb.w	r4, [r7], #1
 8006348:	f7fa fbf6 	bl	8000b38 <__aeabi_dcmplt>
 800634c:	2800      	cmp	r0, #0
 800634e:	d173      	bne.n	8006438 <_dtoa_r+0x638>
 8006350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006354:	2000      	movs	r0, #0
 8006356:	4911      	ldr	r1, [pc, #68]	; (800639c <_dtoa_r+0x59c>)
 8006358:	f7f9 ffc4 	bl	80002e4 <__aeabi_dsub>
 800635c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006360:	f7fa fbea 	bl	8000b38 <__aeabi_dcmplt>
 8006364:	2800      	cmp	r0, #0
 8006366:	f040 80b6 	bne.w	80064d6 <_dtoa_r+0x6d6>
 800636a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800636c:	429f      	cmp	r7, r3
 800636e:	f43f af7a 	beq.w	8006266 <_dtoa_r+0x466>
 8006372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006376:	2200      	movs	r2, #0
 8006378:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <_dtoa_r+0x5a0>)
 800637a:	f7fa f96b 	bl	8000654 <__aeabi_dmul>
 800637e:	2200      	movs	r2, #0
 8006380:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <_dtoa_r+0x5a0>)
 800638a:	f7fa f963 	bl	8000654 <__aeabi_dmul>
 800638e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006392:	e7c3      	b.n	800631c <_dtoa_r+0x51c>
 8006394:	08009720 	.word	0x08009720
 8006398:	080096f8 	.word	0x080096f8
 800639c:	3ff00000 	.word	0x3ff00000
 80063a0:	40240000 	.word	0x40240000
 80063a4:	401c0000 	.word	0x401c0000
 80063a8:	40140000 	.word	0x40140000
 80063ac:	3fe00000 	.word	0x3fe00000
 80063b0:	4630      	mov	r0, r6
 80063b2:	4639      	mov	r1, r7
 80063b4:	f7fa f94e 	bl	8000654 <__aeabi_dmul>
 80063b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063be:	9c03      	ldr	r4, [sp, #12]
 80063c0:	9314      	str	r3, [sp, #80]	; 0x50
 80063c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063c6:	f7fa fbf5 	bl	8000bb4 <__aeabi_d2iz>
 80063ca:	9015      	str	r0, [sp, #84]	; 0x54
 80063cc:	f7fa f8d8 	bl	8000580 <__aeabi_i2d>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063d8:	f7f9 ff84 	bl	80002e4 <__aeabi_dsub>
 80063dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063de:	4606      	mov	r6, r0
 80063e0:	3330      	adds	r3, #48	; 0x30
 80063e2:	f804 3b01 	strb.w	r3, [r4], #1
 80063e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063e8:	460f      	mov	r7, r1
 80063ea:	429c      	cmp	r4, r3
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	d124      	bne.n	800643c <_dtoa_r+0x63c>
 80063f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063f6:	4baf      	ldr	r3, [pc, #700]	; (80066b4 <_dtoa_r+0x8b4>)
 80063f8:	f7f9 ff76 	bl	80002e8 <__adddf3>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4630      	mov	r0, r6
 8006402:	4639      	mov	r1, r7
 8006404:	f7fa fbb6 	bl	8000b74 <__aeabi_dcmpgt>
 8006408:	2800      	cmp	r0, #0
 800640a:	d163      	bne.n	80064d4 <_dtoa_r+0x6d4>
 800640c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006410:	2000      	movs	r0, #0
 8006412:	49a8      	ldr	r1, [pc, #672]	; (80066b4 <_dtoa_r+0x8b4>)
 8006414:	f7f9 ff66 	bl	80002e4 <__aeabi_dsub>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4630      	mov	r0, r6
 800641e:	4639      	mov	r1, r7
 8006420:	f7fa fb8a 	bl	8000b38 <__aeabi_dcmplt>
 8006424:	2800      	cmp	r0, #0
 8006426:	f43f af1e 	beq.w	8006266 <_dtoa_r+0x466>
 800642a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800642c:	1e7b      	subs	r3, r7, #1
 800642e:	9314      	str	r3, [sp, #80]	; 0x50
 8006430:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006434:	2b30      	cmp	r3, #48	; 0x30
 8006436:	d0f8      	beq.n	800642a <_dtoa_r+0x62a>
 8006438:	46c3      	mov	fp, r8
 800643a:	e03b      	b.n	80064b4 <_dtoa_r+0x6b4>
 800643c:	4b9e      	ldr	r3, [pc, #632]	; (80066b8 <_dtoa_r+0x8b8>)
 800643e:	f7fa f909 	bl	8000654 <__aeabi_dmul>
 8006442:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006446:	e7bc      	b.n	80063c2 <_dtoa_r+0x5c2>
 8006448:	9f03      	ldr	r7, [sp, #12]
 800644a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800644e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006452:	4640      	mov	r0, r8
 8006454:	4649      	mov	r1, r9
 8006456:	f7fa fa27 	bl	80008a8 <__aeabi_ddiv>
 800645a:	f7fa fbab 	bl	8000bb4 <__aeabi_d2iz>
 800645e:	4604      	mov	r4, r0
 8006460:	f7fa f88e 	bl	8000580 <__aeabi_i2d>
 8006464:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006468:	f7fa f8f4 	bl	8000654 <__aeabi_dmul>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	f7f9 ff36 	bl	80002e4 <__aeabi_dsub>
 8006478:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800647c:	f807 6b01 	strb.w	r6, [r7], #1
 8006480:	9e03      	ldr	r6, [sp, #12]
 8006482:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006486:	1bbe      	subs	r6, r7, r6
 8006488:	45b4      	cmp	ip, r6
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	d136      	bne.n	80064fe <_dtoa_r+0x6fe>
 8006490:	f7f9 ff2a 	bl	80002e8 <__adddf3>
 8006494:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006498:	4680      	mov	r8, r0
 800649a:	4689      	mov	r9, r1
 800649c:	f7fa fb6a 	bl	8000b74 <__aeabi_dcmpgt>
 80064a0:	bb58      	cbnz	r0, 80064fa <_dtoa_r+0x6fa>
 80064a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064a6:	4640      	mov	r0, r8
 80064a8:	4649      	mov	r1, r9
 80064aa:	f7fa fb3b 	bl	8000b24 <__aeabi_dcmpeq>
 80064ae:	b108      	cbz	r0, 80064b4 <_dtoa_r+0x6b4>
 80064b0:	07e3      	lsls	r3, r4, #31
 80064b2:	d422      	bmi.n	80064fa <_dtoa_r+0x6fa>
 80064b4:	4651      	mov	r1, sl
 80064b6:	4628      	mov	r0, r5
 80064b8:	f000 fbc2 	bl	8006c40 <_Bfree>
 80064bc:	2300      	movs	r3, #0
 80064be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80064c0:	703b      	strb	r3, [r7, #0]
 80064c2:	f10b 0301 	add.w	r3, fp, #1
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f43f ace6 	beq.w	8005e9c <_dtoa_r+0x9c>
 80064d0:	601f      	str	r7, [r3, #0]
 80064d2:	e4e3      	b.n	8005e9c <_dtoa_r+0x9c>
 80064d4:	4627      	mov	r7, r4
 80064d6:	463b      	mov	r3, r7
 80064d8:	461f      	mov	r7, r3
 80064da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064de:	2a39      	cmp	r2, #57	; 0x39
 80064e0:	d107      	bne.n	80064f2 <_dtoa_r+0x6f2>
 80064e2:	9a03      	ldr	r2, [sp, #12]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d1f7      	bne.n	80064d8 <_dtoa_r+0x6d8>
 80064e8:	2230      	movs	r2, #48	; 0x30
 80064ea:	9903      	ldr	r1, [sp, #12]
 80064ec:	f108 0801 	add.w	r8, r8, #1
 80064f0:	700a      	strb	r2, [r1, #0]
 80064f2:	781a      	ldrb	r2, [r3, #0]
 80064f4:	3201      	adds	r2, #1
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	e79e      	b.n	8006438 <_dtoa_r+0x638>
 80064fa:	46d8      	mov	r8, fp
 80064fc:	e7eb      	b.n	80064d6 <_dtoa_r+0x6d6>
 80064fe:	2200      	movs	r2, #0
 8006500:	4b6d      	ldr	r3, [pc, #436]	; (80066b8 <_dtoa_r+0x8b8>)
 8006502:	f7fa f8a7 	bl	8000654 <__aeabi_dmul>
 8006506:	2200      	movs	r2, #0
 8006508:	2300      	movs	r3, #0
 800650a:	4680      	mov	r8, r0
 800650c:	4689      	mov	r9, r1
 800650e:	f7fa fb09 	bl	8000b24 <__aeabi_dcmpeq>
 8006512:	2800      	cmp	r0, #0
 8006514:	d09b      	beq.n	800644e <_dtoa_r+0x64e>
 8006516:	e7cd      	b.n	80064b4 <_dtoa_r+0x6b4>
 8006518:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800651a:	2a00      	cmp	r2, #0
 800651c:	f000 80c4 	beq.w	80066a8 <_dtoa_r+0x8a8>
 8006520:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006522:	2a01      	cmp	r2, #1
 8006524:	f300 80a8 	bgt.w	8006678 <_dtoa_r+0x878>
 8006528:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800652a:	2a00      	cmp	r2, #0
 800652c:	f000 80a0 	beq.w	8006670 <_dtoa_r+0x870>
 8006530:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006534:	464f      	mov	r7, r9
 8006536:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800653a:	2101      	movs	r1, #1
 800653c:	441a      	add	r2, r3
 800653e:	4628      	mov	r0, r5
 8006540:	4499      	add	r9, r3
 8006542:	9209      	str	r2, [sp, #36]	; 0x24
 8006544:	f000 fc7c 	bl	8006e40 <__i2b>
 8006548:	4606      	mov	r6, r0
 800654a:	b15f      	cbz	r7, 8006564 <_dtoa_r+0x764>
 800654c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654e:	2b00      	cmp	r3, #0
 8006550:	dd08      	ble.n	8006564 <_dtoa_r+0x764>
 8006552:	42bb      	cmp	r3, r7
 8006554:	bfa8      	it	ge
 8006556:	463b      	movge	r3, r7
 8006558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800655a:	eba9 0903 	sub.w	r9, r9, r3
 800655e:	1aff      	subs	r7, r7, r3
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	9309      	str	r3, [sp, #36]	; 0x24
 8006564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006566:	b1f3      	cbz	r3, 80065a6 <_dtoa_r+0x7a6>
 8006568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 80a0 	beq.w	80066b0 <_dtoa_r+0x8b0>
 8006570:	2c00      	cmp	r4, #0
 8006572:	dd10      	ble.n	8006596 <_dtoa_r+0x796>
 8006574:	4631      	mov	r1, r6
 8006576:	4622      	mov	r2, r4
 8006578:	4628      	mov	r0, r5
 800657a:	f000 fd1f 	bl	8006fbc <__pow5mult>
 800657e:	4652      	mov	r2, sl
 8006580:	4601      	mov	r1, r0
 8006582:	4606      	mov	r6, r0
 8006584:	4628      	mov	r0, r5
 8006586:	f000 fc71 	bl	8006e6c <__multiply>
 800658a:	4680      	mov	r8, r0
 800658c:	4651      	mov	r1, sl
 800658e:	4628      	mov	r0, r5
 8006590:	f000 fb56 	bl	8006c40 <_Bfree>
 8006594:	46c2      	mov	sl, r8
 8006596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006598:	1b1a      	subs	r2, r3, r4
 800659a:	d004      	beq.n	80065a6 <_dtoa_r+0x7a6>
 800659c:	4651      	mov	r1, sl
 800659e:	4628      	mov	r0, r5
 80065a0:	f000 fd0c 	bl	8006fbc <__pow5mult>
 80065a4:	4682      	mov	sl, r0
 80065a6:	2101      	movs	r1, #1
 80065a8:	4628      	mov	r0, r5
 80065aa:	f000 fc49 	bl	8006e40 <__i2b>
 80065ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065b0:	4604      	mov	r4, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f340 8082 	ble.w	80066bc <_dtoa_r+0x8bc>
 80065b8:	461a      	mov	r2, r3
 80065ba:	4601      	mov	r1, r0
 80065bc:	4628      	mov	r0, r5
 80065be:	f000 fcfd 	bl	8006fbc <__pow5mult>
 80065c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065c4:	4604      	mov	r4, r0
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	dd7b      	ble.n	80066c2 <_dtoa_r+0x8c2>
 80065ca:	f04f 0800 	mov.w	r8, #0
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065d4:	6918      	ldr	r0, [r3, #16]
 80065d6:	f000 fbe5 	bl	8006da4 <__hi0bits>
 80065da:	f1c0 0020 	rsb	r0, r0, #32
 80065de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e0:	4418      	add	r0, r3
 80065e2:	f010 001f 	ands.w	r0, r0, #31
 80065e6:	f000 8092 	beq.w	800670e <_dtoa_r+0x90e>
 80065ea:	f1c0 0320 	rsb	r3, r0, #32
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	f340 8085 	ble.w	80066fe <_dtoa_r+0x8fe>
 80065f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f6:	f1c0 001c 	rsb	r0, r0, #28
 80065fa:	4403      	add	r3, r0
 80065fc:	4481      	add	r9, r0
 80065fe:	4407      	add	r7, r0
 8006600:	9309      	str	r3, [sp, #36]	; 0x24
 8006602:	f1b9 0f00 	cmp.w	r9, #0
 8006606:	dd05      	ble.n	8006614 <_dtoa_r+0x814>
 8006608:	4651      	mov	r1, sl
 800660a:	464a      	mov	r2, r9
 800660c:	4628      	mov	r0, r5
 800660e:	f000 fd2f 	bl	8007070 <__lshift>
 8006612:	4682      	mov	sl, r0
 8006614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006616:	2b00      	cmp	r3, #0
 8006618:	dd05      	ble.n	8006626 <_dtoa_r+0x826>
 800661a:	4621      	mov	r1, r4
 800661c:	461a      	mov	r2, r3
 800661e:	4628      	mov	r0, r5
 8006620:	f000 fd26 	bl	8007070 <__lshift>
 8006624:	4604      	mov	r4, r0
 8006626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d072      	beq.n	8006712 <_dtoa_r+0x912>
 800662c:	4621      	mov	r1, r4
 800662e:	4650      	mov	r0, sl
 8006630:	f000 fd8a 	bl	8007148 <__mcmp>
 8006634:	2800      	cmp	r0, #0
 8006636:	da6c      	bge.n	8006712 <_dtoa_r+0x912>
 8006638:	2300      	movs	r3, #0
 800663a:	4651      	mov	r1, sl
 800663c:	220a      	movs	r2, #10
 800663e:	4628      	mov	r0, r5
 8006640:	f000 fb20 	bl	8006c84 <__multadd>
 8006644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006646:	4682      	mov	sl, r0
 8006648:	f10b 3bff 	add.w	fp, fp, #4294967295
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 81ac 	beq.w	80069aa <_dtoa_r+0xbaa>
 8006652:	2300      	movs	r3, #0
 8006654:	4631      	mov	r1, r6
 8006656:	220a      	movs	r2, #10
 8006658:	4628      	mov	r0, r5
 800665a:	f000 fb13 	bl	8006c84 <__multadd>
 800665e:	9b06      	ldr	r3, [sp, #24]
 8006660:	4606      	mov	r6, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	f300 8093 	bgt.w	800678e <_dtoa_r+0x98e>
 8006668:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800666a:	2b02      	cmp	r3, #2
 800666c:	dc59      	bgt.n	8006722 <_dtoa_r+0x922>
 800666e:	e08e      	b.n	800678e <_dtoa_r+0x98e>
 8006670:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006672:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006676:	e75d      	b.n	8006534 <_dtoa_r+0x734>
 8006678:	9b08      	ldr	r3, [sp, #32]
 800667a:	1e5c      	subs	r4, r3, #1
 800667c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800667e:	42a3      	cmp	r3, r4
 8006680:	bfbf      	itttt	lt
 8006682:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006684:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006686:	1ae3      	sublt	r3, r4, r3
 8006688:	18d2      	addlt	r2, r2, r3
 800668a:	bfa8      	it	ge
 800668c:	1b1c      	subge	r4, r3, r4
 800668e:	9b08      	ldr	r3, [sp, #32]
 8006690:	bfbe      	ittt	lt
 8006692:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006694:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006696:	2400      	movlt	r4, #0
 8006698:	2b00      	cmp	r3, #0
 800669a:	bfb5      	itete	lt
 800669c:	eba9 0703 	sublt.w	r7, r9, r3
 80066a0:	464f      	movge	r7, r9
 80066a2:	2300      	movlt	r3, #0
 80066a4:	9b08      	ldrge	r3, [sp, #32]
 80066a6:	e747      	b.n	8006538 <_dtoa_r+0x738>
 80066a8:	464f      	mov	r7, r9
 80066aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80066ae:	e74c      	b.n	800654a <_dtoa_r+0x74a>
 80066b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066b2:	e773      	b.n	800659c <_dtoa_r+0x79c>
 80066b4:	3fe00000 	.word	0x3fe00000
 80066b8:	40240000 	.word	0x40240000
 80066bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066be:	2b01      	cmp	r3, #1
 80066c0:	dc18      	bgt.n	80066f4 <_dtoa_r+0x8f4>
 80066c2:	9b04      	ldr	r3, [sp, #16]
 80066c4:	b9b3      	cbnz	r3, 80066f4 <_dtoa_r+0x8f4>
 80066c6:	9b05      	ldr	r3, [sp, #20]
 80066c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066cc:	b993      	cbnz	r3, 80066f4 <_dtoa_r+0x8f4>
 80066ce:	9b05      	ldr	r3, [sp, #20]
 80066d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066d4:	0d1b      	lsrs	r3, r3, #20
 80066d6:	051b      	lsls	r3, r3, #20
 80066d8:	b17b      	cbz	r3, 80066fa <_dtoa_r+0x8fa>
 80066da:	f04f 0801 	mov.w	r8, #1
 80066de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e0:	f109 0901 	add.w	r9, r9, #1
 80066e4:	3301      	adds	r3, #1
 80066e6:	9309      	str	r3, [sp, #36]	; 0x24
 80066e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f47f af6f 	bne.w	80065ce <_dtoa_r+0x7ce>
 80066f0:	2001      	movs	r0, #1
 80066f2:	e774      	b.n	80065de <_dtoa_r+0x7de>
 80066f4:	f04f 0800 	mov.w	r8, #0
 80066f8:	e7f6      	b.n	80066e8 <_dtoa_r+0x8e8>
 80066fa:	4698      	mov	r8, r3
 80066fc:	e7f4      	b.n	80066e8 <_dtoa_r+0x8e8>
 80066fe:	d080      	beq.n	8006602 <_dtoa_r+0x802>
 8006700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006702:	331c      	adds	r3, #28
 8006704:	441a      	add	r2, r3
 8006706:	4499      	add	r9, r3
 8006708:	441f      	add	r7, r3
 800670a:	9209      	str	r2, [sp, #36]	; 0x24
 800670c:	e779      	b.n	8006602 <_dtoa_r+0x802>
 800670e:	4603      	mov	r3, r0
 8006710:	e7f6      	b.n	8006700 <_dtoa_r+0x900>
 8006712:	9b08      	ldr	r3, [sp, #32]
 8006714:	2b00      	cmp	r3, #0
 8006716:	dc34      	bgt.n	8006782 <_dtoa_r+0x982>
 8006718:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800671a:	2b02      	cmp	r3, #2
 800671c:	dd31      	ble.n	8006782 <_dtoa_r+0x982>
 800671e:	9b08      	ldr	r3, [sp, #32]
 8006720:	9306      	str	r3, [sp, #24]
 8006722:	9b06      	ldr	r3, [sp, #24]
 8006724:	b963      	cbnz	r3, 8006740 <_dtoa_r+0x940>
 8006726:	4621      	mov	r1, r4
 8006728:	2205      	movs	r2, #5
 800672a:	4628      	mov	r0, r5
 800672c:	f000 faaa 	bl	8006c84 <__multadd>
 8006730:	4601      	mov	r1, r0
 8006732:	4604      	mov	r4, r0
 8006734:	4650      	mov	r0, sl
 8006736:	f000 fd07 	bl	8007148 <__mcmp>
 800673a:	2800      	cmp	r0, #0
 800673c:	f73f adbf 	bgt.w	80062be <_dtoa_r+0x4be>
 8006740:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006742:	9f03      	ldr	r7, [sp, #12]
 8006744:	ea6f 0b03 	mvn.w	fp, r3
 8006748:	f04f 0800 	mov.w	r8, #0
 800674c:	4621      	mov	r1, r4
 800674e:	4628      	mov	r0, r5
 8006750:	f000 fa76 	bl	8006c40 <_Bfree>
 8006754:	2e00      	cmp	r6, #0
 8006756:	f43f aead 	beq.w	80064b4 <_dtoa_r+0x6b4>
 800675a:	f1b8 0f00 	cmp.w	r8, #0
 800675e:	d005      	beq.n	800676c <_dtoa_r+0x96c>
 8006760:	45b0      	cmp	r8, r6
 8006762:	d003      	beq.n	800676c <_dtoa_r+0x96c>
 8006764:	4641      	mov	r1, r8
 8006766:	4628      	mov	r0, r5
 8006768:	f000 fa6a 	bl	8006c40 <_Bfree>
 800676c:	4631      	mov	r1, r6
 800676e:	4628      	mov	r0, r5
 8006770:	f000 fa66 	bl	8006c40 <_Bfree>
 8006774:	e69e      	b.n	80064b4 <_dtoa_r+0x6b4>
 8006776:	2400      	movs	r4, #0
 8006778:	4626      	mov	r6, r4
 800677a:	e7e1      	b.n	8006740 <_dtoa_r+0x940>
 800677c:	46c3      	mov	fp, r8
 800677e:	4626      	mov	r6, r4
 8006780:	e59d      	b.n	80062be <_dtoa_r+0x4be>
 8006782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 80c8 	beq.w	800691a <_dtoa_r+0xb1a>
 800678a:	9b08      	ldr	r3, [sp, #32]
 800678c:	9306      	str	r3, [sp, #24]
 800678e:	2f00      	cmp	r7, #0
 8006790:	dd05      	ble.n	800679e <_dtoa_r+0x99e>
 8006792:	4631      	mov	r1, r6
 8006794:	463a      	mov	r2, r7
 8006796:	4628      	mov	r0, r5
 8006798:	f000 fc6a 	bl	8007070 <__lshift>
 800679c:	4606      	mov	r6, r0
 800679e:	f1b8 0f00 	cmp.w	r8, #0
 80067a2:	d05b      	beq.n	800685c <_dtoa_r+0xa5c>
 80067a4:	4628      	mov	r0, r5
 80067a6:	6871      	ldr	r1, [r6, #4]
 80067a8:	f000 fa0a 	bl	8006bc0 <_Balloc>
 80067ac:	4607      	mov	r7, r0
 80067ae:	b928      	cbnz	r0, 80067bc <_dtoa_r+0x9bc>
 80067b0:	4602      	mov	r2, r0
 80067b2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80067b6:	4b81      	ldr	r3, [pc, #516]	; (80069bc <_dtoa_r+0xbbc>)
 80067b8:	f7ff bb36 	b.w	8005e28 <_dtoa_r+0x28>
 80067bc:	6932      	ldr	r2, [r6, #16]
 80067be:	f106 010c 	add.w	r1, r6, #12
 80067c2:	3202      	adds	r2, #2
 80067c4:	0092      	lsls	r2, r2, #2
 80067c6:	300c      	adds	r0, #12
 80067c8:	f002 f8ca 	bl	8008960 <memcpy>
 80067cc:	2201      	movs	r2, #1
 80067ce:	4639      	mov	r1, r7
 80067d0:	4628      	mov	r0, r5
 80067d2:	f000 fc4d 	bl	8007070 <__lshift>
 80067d6:	46b0      	mov	r8, r6
 80067d8:	4606      	mov	r6, r0
 80067da:	9b03      	ldr	r3, [sp, #12]
 80067dc:	9a03      	ldr	r2, [sp, #12]
 80067de:	3301      	adds	r3, #1
 80067e0:	9308      	str	r3, [sp, #32]
 80067e2:	9b06      	ldr	r3, [sp, #24]
 80067e4:	4413      	add	r3, r2
 80067e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80067e8:	9b04      	ldr	r3, [sp, #16]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	930a      	str	r3, [sp, #40]	; 0x28
 80067f0:	9b08      	ldr	r3, [sp, #32]
 80067f2:	4621      	mov	r1, r4
 80067f4:	3b01      	subs	r3, #1
 80067f6:	4650      	mov	r0, sl
 80067f8:	9304      	str	r3, [sp, #16]
 80067fa:	f7ff fa75 	bl	8005ce8 <quorem>
 80067fe:	4641      	mov	r1, r8
 8006800:	9006      	str	r0, [sp, #24]
 8006802:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006806:	4650      	mov	r0, sl
 8006808:	f000 fc9e 	bl	8007148 <__mcmp>
 800680c:	4632      	mov	r2, r6
 800680e:	9009      	str	r0, [sp, #36]	; 0x24
 8006810:	4621      	mov	r1, r4
 8006812:	4628      	mov	r0, r5
 8006814:	f000 fcb4 	bl	8007180 <__mdiff>
 8006818:	68c2      	ldr	r2, [r0, #12]
 800681a:	4607      	mov	r7, r0
 800681c:	bb02      	cbnz	r2, 8006860 <_dtoa_r+0xa60>
 800681e:	4601      	mov	r1, r0
 8006820:	4650      	mov	r0, sl
 8006822:	f000 fc91 	bl	8007148 <__mcmp>
 8006826:	4602      	mov	r2, r0
 8006828:	4639      	mov	r1, r7
 800682a:	4628      	mov	r0, r5
 800682c:	920c      	str	r2, [sp, #48]	; 0x30
 800682e:	f000 fa07 	bl	8006c40 <_Bfree>
 8006832:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006834:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006836:	9f08      	ldr	r7, [sp, #32]
 8006838:	ea43 0102 	orr.w	r1, r3, r2
 800683c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800683e:	4319      	orrs	r1, r3
 8006840:	d110      	bne.n	8006864 <_dtoa_r+0xa64>
 8006842:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006846:	d029      	beq.n	800689c <_dtoa_r+0xa9c>
 8006848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684a:	2b00      	cmp	r3, #0
 800684c:	dd02      	ble.n	8006854 <_dtoa_r+0xa54>
 800684e:	9b06      	ldr	r3, [sp, #24]
 8006850:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006854:	9b04      	ldr	r3, [sp, #16]
 8006856:	f883 9000 	strb.w	r9, [r3]
 800685a:	e777      	b.n	800674c <_dtoa_r+0x94c>
 800685c:	4630      	mov	r0, r6
 800685e:	e7ba      	b.n	80067d6 <_dtoa_r+0x9d6>
 8006860:	2201      	movs	r2, #1
 8006862:	e7e1      	b.n	8006828 <_dtoa_r+0xa28>
 8006864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	db04      	blt.n	8006874 <_dtoa_r+0xa74>
 800686a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800686c:	430b      	orrs	r3, r1
 800686e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006870:	430b      	orrs	r3, r1
 8006872:	d120      	bne.n	80068b6 <_dtoa_r+0xab6>
 8006874:	2a00      	cmp	r2, #0
 8006876:	dded      	ble.n	8006854 <_dtoa_r+0xa54>
 8006878:	4651      	mov	r1, sl
 800687a:	2201      	movs	r2, #1
 800687c:	4628      	mov	r0, r5
 800687e:	f000 fbf7 	bl	8007070 <__lshift>
 8006882:	4621      	mov	r1, r4
 8006884:	4682      	mov	sl, r0
 8006886:	f000 fc5f 	bl	8007148 <__mcmp>
 800688a:	2800      	cmp	r0, #0
 800688c:	dc03      	bgt.n	8006896 <_dtoa_r+0xa96>
 800688e:	d1e1      	bne.n	8006854 <_dtoa_r+0xa54>
 8006890:	f019 0f01 	tst.w	r9, #1
 8006894:	d0de      	beq.n	8006854 <_dtoa_r+0xa54>
 8006896:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800689a:	d1d8      	bne.n	800684e <_dtoa_r+0xa4e>
 800689c:	2339      	movs	r3, #57	; 0x39
 800689e:	9a04      	ldr	r2, [sp, #16]
 80068a0:	7013      	strb	r3, [r2, #0]
 80068a2:	463b      	mov	r3, r7
 80068a4:	461f      	mov	r7, r3
 80068a6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	2a39      	cmp	r2, #57	; 0x39
 80068ae:	d06b      	beq.n	8006988 <_dtoa_r+0xb88>
 80068b0:	3201      	adds	r2, #1
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	e74a      	b.n	800674c <_dtoa_r+0x94c>
 80068b6:	2a00      	cmp	r2, #0
 80068b8:	dd07      	ble.n	80068ca <_dtoa_r+0xaca>
 80068ba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80068be:	d0ed      	beq.n	800689c <_dtoa_r+0xa9c>
 80068c0:	9a04      	ldr	r2, [sp, #16]
 80068c2:	f109 0301 	add.w	r3, r9, #1
 80068c6:	7013      	strb	r3, [r2, #0]
 80068c8:	e740      	b.n	800674c <_dtoa_r+0x94c>
 80068ca:	9b08      	ldr	r3, [sp, #32]
 80068cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068ce:	f803 9c01 	strb.w	r9, [r3, #-1]
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d042      	beq.n	800695c <_dtoa_r+0xb5c>
 80068d6:	4651      	mov	r1, sl
 80068d8:	2300      	movs	r3, #0
 80068da:	220a      	movs	r2, #10
 80068dc:	4628      	mov	r0, r5
 80068de:	f000 f9d1 	bl	8006c84 <__multadd>
 80068e2:	45b0      	cmp	r8, r6
 80068e4:	4682      	mov	sl, r0
 80068e6:	f04f 0300 	mov.w	r3, #0
 80068ea:	f04f 020a 	mov.w	r2, #10
 80068ee:	4641      	mov	r1, r8
 80068f0:	4628      	mov	r0, r5
 80068f2:	d107      	bne.n	8006904 <_dtoa_r+0xb04>
 80068f4:	f000 f9c6 	bl	8006c84 <__multadd>
 80068f8:	4680      	mov	r8, r0
 80068fa:	4606      	mov	r6, r0
 80068fc:	9b08      	ldr	r3, [sp, #32]
 80068fe:	3301      	adds	r3, #1
 8006900:	9308      	str	r3, [sp, #32]
 8006902:	e775      	b.n	80067f0 <_dtoa_r+0x9f0>
 8006904:	f000 f9be 	bl	8006c84 <__multadd>
 8006908:	4631      	mov	r1, r6
 800690a:	4680      	mov	r8, r0
 800690c:	2300      	movs	r3, #0
 800690e:	220a      	movs	r2, #10
 8006910:	4628      	mov	r0, r5
 8006912:	f000 f9b7 	bl	8006c84 <__multadd>
 8006916:	4606      	mov	r6, r0
 8006918:	e7f0      	b.n	80068fc <_dtoa_r+0xafc>
 800691a:	9b08      	ldr	r3, [sp, #32]
 800691c:	9306      	str	r3, [sp, #24]
 800691e:	9f03      	ldr	r7, [sp, #12]
 8006920:	4621      	mov	r1, r4
 8006922:	4650      	mov	r0, sl
 8006924:	f7ff f9e0 	bl	8005ce8 <quorem>
 8006928:	9b03      	ldr	r3, [sp, #12]
 800692a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800692e:	f807 9b01 	strb.w	r9, [r7], #1
 8006932:	1afa      	subs	r2, r7, r3
 8006934:	9b06      	ldr	r3, [sp, #24]
 8006936:	4293      	cmp	r3, r2
 8006938:	dd07      	ble.n	800694a <_dtoa_r+0xb4a>
 800693a:	4651      	mov	r1, sl
 800693c:	2300      	movs	r3, #0
 800693e:	220a      	movs	r2, #10
 8006940:	4628      	mov	r0, r5
 8006942:	f000 f99f 	bl	8006c84 <__multadd>
 8006946:	4682      	mov	sl, r0
 8006948:	e7ea      	b.n	8006920 <_dtoa_r+0xb20>
 800694a:	9b06      	ldr	r3, [sp, #24]
 800694c:	f04f 0800 	mov.w	r8, #0
 8006950:	2b00      	cmp	r3, #0
 8006952:	bfcc      	ite	gt
 8006954:	461f      	movgt	r7, r3
 8006956:	2701      	movle	r7, #1
 8006958:	9b03      	ldr	r3, [sp, #12]
 800695a:	441f      	add	r7, r3
 800695c:	4651      	mov	r1, sl
 800695e:	2201      	movs	r2, #1
 8006960:	4628      	mov	r0, r5
 8006962:	f000 fb85 	bl	8007070 <__lshift>
 8006966:	4621      	mov	r1, r4
 8006968:	4682      	mov	sl, r0
 800696a:	f000 fbed 	bl	8007148 <__mcmp>
 800696e:	2800      	cmp	r0, #0
 8006970:	dc97      	bgt.n	80068a2 <_dtoa_r+0xaa2>
 8006972:	d102      	bne.n	800697a <_dtoa_r+0xb7a>
 8006974:	f019 0f01 	tst.w	r9, #1
 8006978:	d193      	bne.n	80068a2 <_dtoa_r+0xaa2>
 800697a:	463b      	mov	r3, r7
 800697c:	461f      	mov	r7, r3
 800697e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006982:	2a30      	cmp	r2, #48	; 0x30
 8006984:	d0fa      	beq.n	800697c <_dtoa_r+0xb7c>
 8006986:	e6e1      	b.n	800674c <_dtoa_r+0x94c>
 8006988:	9a03      	ldr	r2, [sp, #12]
 800698a:	429a      	cmp	r2, r3
 800698c:	d18a      	bne.n	80068a4 <_dtoa_r+0xaa4>
 800698e:	2331      	movs	r3, #49	; 0x31
 8006990:	f10b 0b01 	add.w	fp, fp, #1
 8006994:	e797      	b.n	80068c6 <_dtoa_r+0xac6>
 8006996:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <_dtoa_r+0xbc0>)
 8006998:	f7ff ba9f 	b.w	8005eda <_dtoa_r+0xda>
 800699c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f47f aa77 	bne.w	8005e92 <_dtoa_r+0x92>
 80069a4:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <_dtoa_r+0xbc4>)
 80069a6:	f7ff ba98 	b.w	8005eda <_dtoa_r+0xda>
 80069aa:	9b06      	ldr	r3, [sp, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	dcb6      	bgt.n	800691e <_dtoa_r+0xb1e>
 80069b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	f73f aeb5 	bgt.w	8006722 <_dtoa_r+0x922>
 80069b8:	e7b1      	b.n	800691e <_dtoa_r+0xb1e>
 80069ba:	bf00      	nop
 80069bc:	0800968a 	.word	0x0800968a
 80069c0:	0800954f 	.word	0x0800954f
 80069c4:	08009625 	.word	0x08009625

080069c8 <_free_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4605      	mov	r5, r0
 80069cc:	2900      	cmp	r1, #0
 80069ce:	d040      	beq.n	8006a52 <_free_r+0x8a>
 80069d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d4:	1f0c      	subs	r4, r1, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	bfb8      	it	lt
 80069da:	18e4      	addlt	r4, r4, r3
 80069dc:	f000 f8e4 	bl	8006ba8 <__malloc_lock>
 80069e0:	4a1c      	ldr	r2, [pc, #112]	; (8006a54 <_free_r+0x8c>)
 80069e2:	6813      	ldr	r3, [r2, #0]
 80069e4:	b933      	cbnz	r3, 80069f4 <_free_r+0x2c>
 80069e6:	6063      	str	r3, [r4, #4]
 80069e8:	6014      	str	r4, [r2, #0]
 80069ea:	4628      	mov	r0, r5
 80069ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069f0:	f000 b8e0 	b.w	8006bb4 <__malloc_unlock>
 80069f4:	42a3      	cmp	r3, r4
 80069f6:	d908      	bls.n	8006a0a <_free_r+0x42>
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	1821      	adds	r1, r4, r0
 80069fc:	428b      	cmp	r3, r1
 80069fe:	bf01      	itttt	eq
 8006a00:	6819      	ldreq	r1, [r3, #0]
 8006a02:	685b      	ldreq	r3, [r3, #4]
 8006a04:	1809      	addeq	r1, r1, r0
 8006a06:	6021      	streq	r1, [r4, #0]
 8006a08:	e7ed      	b.n	80069e6 <_free_r+0x1e>
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	b10b      	cbz	r3, 8006a14 <_free_r+0x4c>
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	d9fa      	bls.n	8006a0a <_free_r+0x42>
 8006a14:	6811      	ldr	r1, [r2, #0]
 8006a16:	1850      	adds	r0, r2, r1
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	d10b      	bne.n	8006a34 <_free_r+0x6c>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	4401      	add	r1, r0
 8006a20:	1850      	adds	r0, r2, r1
 8006a22:	4283      	cmp	r3, r0
 8006a24:	6011      	str	r1, [r2, #0]
 8006a26:	d1e0      	bne.n	80069ea <_free_r+0x22>
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4408      	add	r0, r1
 8006a2e:	6010      	str	r0, [r2, #0]
 8006a30:	6053      	str	r3, [r2, #4]
 8006a32:	e7da      	b.n	80069ea <_free_r+0x22>
 8006a34:	d902      	bls.n	8006a3c <_free_r+0x74>
 8006a36:	230c      	movs	r3, #12
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	e7d6      	b.n	80069ea <_free_r+0x22>
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	1821      	adds	r1, r4, r0
 8006a40:	428b      	cmp	r3, r1
 8006a42:	bf01      	itttt	eq
 8006a44:	6819      	ldreq	r1, [r3, #0]
 8006a46:	685b      	ldreq	r3, [r3, #4]
 8006a48:	1809      	addeq	r1, r1, r0
 8006a4a:	6021      	streq	r1, [r4, #0]
 8006a4c:	6063      	str	r3, [r4, #4]
 8006a4e:	6054      	str	r4, [r2, #4]
 8006a50:	e7cb      	b.n	80069ea <_free_r+0x22>
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	20000544 	.word	0x20000544

08006a58 <malloc>:
 8006a58:	4b02      	ldr	r3, [pc, #8]	; (8006a64 <malloc+0xc>)
 8006a5a:	4601      	mov	r1, r0
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	f000 b823 	b.w	8006aa8 <_malloc_r>
 8006a62:	bf00      	nop
 8006a64:	20000068 	.word	0x20000068

08006a68 <sbrk_aligned>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	4e0e      	ldr	r6, [pc, #56]	; (8006aa4 <sbrk_aligned+0x3c>)
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	6831      	ldr	r1, [r6, #0]
 8006a70:	4605      	mov	r5, r0
 8006a72:	b911      	cbnz	r1, 8006a7a <sbrk_aligned+0x12>
 8006a74:	f001 ff64 	bl	8008940 <_sbrk_r>
 8006a78:	6030      	str	r0, [r6, #0]
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f001 ff5f 	bl	8008940 <_sbrk_r>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	d00a      	beq.n	8006a9c <sbrk_aligned+0x34>
 8006a86:	1cc4      	adds	r4, r0, #3
 8006a88:	f024 0403 	bic.w	r4, r4, #3
 8006a8c:	42a0      	cmp	r0, r4
 8006a8e:	d007      	beq.n	8006aa0 <sbrk_aligned+0x38>
 8006a90:	1a21      	subs	r1, r4, r0
 8006a92:	4628      	mov	r0, r5
 8006a94:	f001 ff54 	bl	8008940 <_sbrk_r>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d101      	bne.n	8006aa0 <sbrk_aligned+0x38>
 8006a9c:	f04f 34ff 	mov.w	r4, #4294967295
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}
 8006aa4:	20000548 	.word	0x20000548

08006aa8 <_malloc_r>:
 8006aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aac:	1ccd      	adds	r5, r1, #3
 8006aae:	f025 0503 	bic.w	r5, r5, #3
 8006ab2:	3508      	adds	r5, #8
 8006ab4:	2d0c      	cmp	r5, #12
 8006ab6:	bf38      	it	cc
 8006ab8:	250c      	movcc	r5, #12
 8006aba:	2d00      	cmp	r5, #0
 8006abc:	4607      	mov	r7, r0
 8006abe:	db01      	blt.n	8006ac4 <_malloc_r+0x1c>
 8006ac0:	42a9      	cmp	r1, r5
 8006ac2:	d905      	bls.n	8006ad0 <_malloc_r+0x28>
 8006ac4:	230c      	movs	r3, #12
 8006ac6:	2600      	movs	r6, #0
 8006ac8:	603b      	str	r3, [r7, #0]
 8006aca:	4630      	mov	r0, r6
 8006acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ad0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ba4 <_malloc_r+0xfc>
 8006ad4:	f000 f868 	bl	8006ba8 <__malloc_lock>
 8006ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8006adc:	461c      	mov	r4, r3
 8006ade:	bb5c      	cbnz	r4, 8006b38 <_malloc_r+0x90>
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	f7ff ffc0 	bl	8006a68 <sbrk_aligned>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	4604      	mov	r4, r0
 8006aec:	d155      	bne.n	8006b9a <_malloc_r+0xf2>
 8006aee:	f8d8 4000 	ldr.w	r4, [r8]
 8006af2:	4626      	mov	r6, r4
 8006af4:	2e00      	cmp	r6, #0
 8006af6:	d145      	bne.n	8006b84 <_malloc_r+0xdc>
 8006af8:	2c00      	cmp	r4, #0
 8006afa:	d048      	beq.n	8006b8e <_malloc_r+0xe6>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	4631      	mov	r1, r6
 8006b00:	4638      	mov	r0, r7
 8006b02:	eb04 0903 	add.w	r9, r4, r3
 8006b06:	f001 ff1b 	bl	8008940 <_sbrk_r>
 8006b0a:	4581      	cmp	r9, r0
 8006b0c:	d13f      	bne.n	8006b8e <_malloc_r+0xe6>
 8006b0e:	6821      	ldr	r1, [r4, #0]
 8006b10:	4638      	mov	r0, r7
 8006b12:	1a6d      	subs	r5, r5, r1
 8006b14:	4629      	mov	r1, r5
 8006b16:	f7ff ffa7 	bl	8006a68 <sbrk_aligned>
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d037      	beq.n	8006b8e <_malloc_r+0xe6>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	442b      	add	r3, r5
 8006b22:	6023      	str	r3, [r4, #0]
 8006b24:	f8d8 3000 	ldr.w	r3, [r8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d038      	beq.n	8006b9e <_malloc_r+0xf6>
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	42a2      	cmp	r2, r4
 8006b30:	d12b      	bne.n	8006b8a <_malloc_r+0xe2>
 8006b32:	2200      	movs	r2, #0
 8006b34:	605a      	str	r2, [r3, #4]
 8006b36:	e00f      	b.n	8006b58 <_malloc_r+0xb0>
 8006b38:	6822      	ldr	r2, [r4, #0]
 8006b3a:	1b52      	subs	r2, r2, r5
 8006b3c:	d41f      	bmi.n	8006b7e <_malloc_r+0xd6>
 8006b3e:	2a0b      	cmp	r2, #11
 8006b40:	d917      	bls.n	8006b72 <_malloc_r+0xca>
 8006b42:	1961      	adds	r1, r4, r5
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	6025      	str	r5, [r4, #0]
 8006b48:	bf18      	it	ne
 8006b4a:	6059      	strne	r1, [r3, #4]
 8006b4c:	6863      	ldr	r3, [r4, #4]
 8006b4e:	bf08      	it	eq
 8006b50:	f8c8 1000 	streq.w	r1, [r8]
 8006b54:	5162      	str	r2, [r4, r5]
 8006b56:	604b      	str	r3, [r1, #4]
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f104 060b 	add.w	r6, r4, #11
 8006b5e:	f000 f829 	bl	8006bb4 <__malloc_unlock>
 8006b62:	f026 0607 	bic.w	r6, r6, #7
 8006b66:	1d23      	adds	r3, r4, #4
 8006b68:	1af2      	subs	r2, r6, r3
 8006b6a:	d0ae      	beq.n	8006aca <_malloc_r+0x22>
 8006b6c:	1b9b      	subs	r3, r3, r6
 8006b6e:	50a3      	str	r3, [r4, r2]
 8006b70:	e7ab      	b.n	8006aca <_malloc_r+0x22>
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	6862      	ldr	r2, [r4, #4]
 8006b76:	d1dd      	bne.n	8006b34 <_malloc_r+0x8c>
 8006b78:	f8c8 2000 	str.w	r2, [r8]
 8006b7c:	e7ec      	b.n	8006b58 <_malloc_r+0xb0>
 8006b7e:	4623      	mov	r3, r4
 8006b80:	6864      	ldr	r4, [r4, #4]
 8006b82:	e7ac      	b.n	8006ade <_malloc_r+0x36>
 8006b84:	4634      	mov	r4, r6
 8006b86:	6876      	ldr	r6, [r6, #4]
 8006b88:	e7b4      	b.n	8006af4 <_malloc_r+0x4c>
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	e7cc      	b.n	8006b28 <_malloc_r+0x80>
 8006b8e:	230c      	movs	r3, #12
 8006b90:	4638      	mov	r0, r7
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	f000 f80e 	bl	8006bb4 <__malloc_unlock>
 8006b98:	e797      	b.n	8006aca <_malloc_r+0x22>
 8006b9a:	6025      	str	r5, [r4, #0]
 8006b9c:	e7dc      	b.n	8006b58 <_malloc_r+0xb0>
 8006b9e:	605b      	str	r3, [r3, #4]
 8006ba0:	deff      	udf	#255	; 0xff
 8006ba2:	bf00      	nop
 8006ba4:	20000544 	.word	0x20000544

08006ba8 <__malloc_lock>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <__malloc_lock+0x8>)
 8006baa:	f7ff b86b 	b.w	8005c84 <__retarget_lock_acquire_recursive>
 8006bae:	bf00      	nop
 8006bb0:	20000540 	.word	0x20000540

08006bb4 <__malloc_unlock>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	; (8006bbc <__malloc_unlock+0x8>)
 8006bb6:	f7ff b866 	b.w	8005c86 <__retarget_lock_release_recursive>
 8006bba:	bf00      	nop
 8006bbc:	20000540 	.word	0x20000540

08006bc0 <_Balloc>:
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	69c6      	ldr	r6, [r0, #28]
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	460d      	mov	r5, r1
 8006bc8:	b976      	cbnz	r6, 8006be8 <_Balloc+0x28>
 8006bca:	2010      	movs	r0, #16
 8006bcc:	f7ff ff44 	bl	8006a58 <malloc>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	61e0      	str	r0, [r4, #28]
 8006bd4:	b920      	cbnz	r0, 8006be0 <_Balloc+0x20>
 8006bd6:	216b      	movs	r1, #107	; 0x6b
 8006bd8:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <_Balloc+0x78>)
 8006bda:	4818      	ldr	r0, [pc, #96]	; (8006c3c <_Balloc+0x7c>)
 8006bdc:	f7ff f866 	bl	8005cac <__assert_func>
 8006be0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006be4:	6006      	str	r6, [r0, #0]
 8006be6:	60c6      	str	r6, [r0, #12]
 8006be8:	69e6      	ldr	r6, [r4, #28]
 8006bea:	68f3      	ldr	r3, [r6, #12]
 8006bec:	b183      	cbz	r3, 8006c10 <_Balloc+0x50>
 8006bee:	69e3      	ldr	r3, [r4, #28]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bf6:	b9b8      	cbnz	r0, 8006c28 <_Balloc+0x68>
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	fa01 f605 	lsl.w	r6, r1, r5
 8006bfe:	1d72      	adds	r2, r6, #5
 8006c00:	4620      	mov	r0, r4
 8006c02:	0092      	lsls	r2, r2, #2
 8006c04:	f001 fec7 	bl	8008996 <_calloc_r>
 8006c08:	b160      	cbz	r0, 8006c24 <_Balloc+0x64>
 8006c0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c0e:	e00e      	b.n	8006c2e <_Balloc+0x6e>
 8006c10:	2221      	movs	r2, #33	; 0x21
 8006c12:	2104      	movs	r1, #4
 8006c14:	4620      	mov	r0, r4
 8006c16:	f001 febe 	bl	8008996 <_calloc_r>
 8006c1a:	69e3      	ldr	r3, [r4, #28]
 8006c1c:	60f0      	str	r0, [r6, #12]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e4      	bne.n	8006bee <_Balloc+0x2e>
 8006c24:	2000      	movs	r0, #0
 8006c26:	bd70      	pop	{r4, r5, r6, pc}
 8006c28:	6802      	ldr	r2, [r0, #0]
 8006c2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c34:	e7f7      	b.n	8006c26 <_Balloc+0x66>
 8006c36:	bf00      	nop
 8006c38:	08009578 	.word	0x08009578
 8006c3c:	0800969b 	.word	0x0800969b

08006c40 <_Bfree>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	69c6      	ldr	r6, [r0, #28]
 8006c44:	4605      	mov	r5, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	b976      	cbnz	r6, 8006c68 <_Bfree+0x28>
 8006c4a:	2010      	movs	r0, #16
 8006c4c:	f7ff ff04 	bl	8006a58 <malloc>
 8006c50:	4602      	mov	r2, r0
 8006c52:	61e8      	str	r0, [r5, #28]
 8006c54:	b920      	cbnz	r0, 8006c60 <_Bfree+0x20>
 8006c56:	218f      	movs	r1, #143	; 0x8f
 8006c58:	4b08      	ldr	r3, [pc, #32]	; (8006c7c <_Bfree+0x3c>)
 8006c5a:	4809      	ldr	r0, [pc, #36]	; (8006c80 <_Bfree+0x40>)
 8006c5c:	f7ff f826 	bl	8005cac <__assert_func>
 8006c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c64:	6006      	str	r6, [r0, #0]
 8006c66:	60c6      	str	r6, [r0, #12]
 8006c68:	b13c      	cbz	r4, 8006c7a <_Bfree+0x3a>
 8006c6a:	69eb      	ldr	r3, [r5, #28]
 8006c6c:	6862      	ldr	r2, [r4, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c74:	6021      	str	r1, [r4, #0]
 8006c76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	08009578 	.word	0x08009578
 8006c80:	0800969b 	.word	0x0800969b

08006c84 <__multadd>:
 8006c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c88:	4607      	mov	r7, r0
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	461e      	mov	r6, r3
 8006c8e:	2000      	movs	r0, #0
 8006c90:	690d      	ldr	r5, [r1, #16]
 8006c92:	f101 0c14 	add.w	ip, r1, #20
 8006c96:	f8dc 3000 	ldr.w	r3, [ip]
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	b299      	uxth	r1, r3
 8006c9e:	fb02 6101 	mla	r1, r2, r1, r6
 8006ca2:	0c1e      	lsrs	r6, r3, #16
 8006ca4:	0c0b      	lsrs	r3, r1, #16
 8006ca6:	fb02 3306 	mla	r3, r2, r6, r3
 8006caa:	b289      	uxth	r1, r1
 8006cac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cb0:	4285      	cmp	r5, r0
 8006cb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cb6:	f84c 1b04 	str.w	r1, [ip], #4
 8006cba:	dcec      	bgt.n	8006c96 <__multadd+0x12>
 8006cbc:	b30e      	cbz	r6, 8006d02 <__multadd+0x7e>
 8006cbe:	68a3      	ldr	r3, [r4, #8]
 8006cc0:	42ab      	cmp	r3, r5
 8006cc2:	dc19      	bgt.n	8006cf8 <__multadd+0x74>
 8006cc4:	6861      	ldr	r1, [r4, #4]
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	3101      	adds	r1, #1
 8006cca:	f7ff ff79 	bl	8006bc0 <_Balloc>
 8006cce:	4680      	mov	r8, r0
 8006cd0:	b928      	cbnz	r0, 8006cde <__multadd+0x5a>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	21ba      	movs	r1, #186	; 0xba
 8006cd6:	4b0c      	ldr	r3, [pc, #48]	; (8006d08 <__multadd+0x84>)
 8006cd8:	480c      	ldr	r0, [pc, #48]	; (8006d0c <__multadd+0x88>)
 8006cda:	f7fe ffe7 	bl	8005cac <__assert_func>
 8006cde:	6922      	ldr	r2, [r4, #16]
 8006ce0:	f104 010c 	add.w	r1, r4, #12
 8006ce4:	3202      	adds	r2, #2
 8006ce6:	0092      	lsls	r2, r2, #2
 8006ce8:	300c      	adds	r0, #12
 8006cea:	f001 fe39 	bl	8008960 <memcpy>
 8006cee:	4621      	mov	r1, r4
 8006cf0:	4638      	mov	r0, r7
 8006cf2:	f7ff ffa5 	bl	8006c40 <_Bfree>
 8006cf6:	4644      	mov	r4, r8
 8006cf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cfc:	3501      	adds	r5, #1
 8006cfe:	615e      	str	r6, [r3, #20]
 8006d00:	6125      	str	r5, [r4, #16]
 8006d02:	4620      	mov	r0, r4
 8006d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d08:	0800968a 	.word	0x0800968a
 8006d0c:	0800969b 	.word	0x0800969b

08006d10 <__s2b>:
 8006d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d14:	4615      	mov	r5, r2
 8006d16:	2209      	movs	r2, #9
 8006d18:	461f      	mov	r7, r3
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d22:	4606      	mov	r6, r0
 8006d24:	2201      	movs	r2, #1
 8006d26:	2100      	movs	r1, #0
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	db09      	blt.n	8006d40 <__s2b+0x30>
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f7ff ff47 	bl	8006bc0 <_Balloc>
 8006d32:	b940      	cbnz	r0, 8006d46 <__s2b+0x36>
 8006d34:	4602      	mov	r2, r0
 8006d36:	21d3      	movs	r1, #211	; 0xd3
 8006d38:	4b18      	ldr	r3, [pc, #96]	; (8006d9c <__s2b+0x8c>)
 8006d3a:	4819      	ldr	r0, [pc, #100]	; (8006da0 <__s2b+0x90>)
 8006d3c:	f7fe ffb6 	bl	8005cac <__assert_func>
 8006d40:	0052      	lsls	r2, r2, #1
 8006d42:	3101      	adds	r1, #1
 8006d44:	e7f0      	b.n	8006d28 <__s2b+0x18>
 8006d46:	9b08      	ldr	r3, [sp, #32]
 8006d48:	2d09      	cmp	r5, #9
 8006d4a:	6143      	str	r3, [r0, #20]
 8006d4c:	f04f 0301 	mov.w	r3, #1
 8006d50:	6103      	str	r3, [r0, #16]
 8006d52:	dd16      	ble.n	8006d82 <__s2b+0x72>
 8006d54:	f104 0909 	add.w	r9, r4, #9
 8006d58:	46c8      	mov	r8, r9
 8006d5a:	442c      	add	r4, r5
 8006d5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006d60:	4601      	mov	r1, r0
 8006d62:	220a      	movs	r2, #10
 8006d64:	4630      	mov	r0, r6
 8006d66:	3b30      	subs	r3, #48	; 0x30
 8006d68:	f7ff ff8c 	bl	8006c84 <__multadd>
 8006d6c:	45a0      	cmp	r8, r4
 8006d6e:	d1f5      	bne.n	8006d5c <__s2b+0x4c>
 8006d70:	f1a5 0408 	sub.w	r4, r5, #8
 8006d74:	444c      	add	r4, r9
 8006d76:	1b2d      	subs	r5, r5, r4
 8006d78:	1963      	adds	r3, r4, r5
 8006d7a:	42bb      	cmp	r3, r7
 8006d7c:	db04      	blt.n	8006d88 <__s2b+0x78>
 8006d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d82:	2509      	movs	r5, #9
 8006d84:	340a      	adds	r4, #10
 8006d86:	e7f6      	b.n	8006d76 <__s2b+0x66>
 8006d88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d8c:	4601      	mov	r1, r0
 8006d8e:	220a      	movs	r2, #10
 8006d90:	4630      	mov	r0, r6
 8006d92:	3b30      	subs	r3, #48	; 0x30
 8006d94:	f7ff ff76 	bl	8006c84 <__multadd>
 8006d98:	e7ee      	b.n	8006d78 <__s2b+0x68>
 8006d9a:	bf00      	nop
 8006d9c:	0800968a 	.word	0x0800968a
 8006da0:	0800969b 	.word	0x0800969b

08006da4 <__hi0bits>:
 8006da4:	0c02      	lsrs	r2, r0, #16
 8006da6:	0412      	lsls	r2, r2, #16
 8006da8:	4603      	mov	r3, r0
 8006daa:	b9ca      	cbnz	r2, 8006de0 <__hi0bits+0x3c>
 8006dac:	0403      	lsls	r3, r0, #16
 8006dae:	2010      	movs	r0, #16
 8006db0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006db4:	bf04      	itt	eq
 8006db6:	021b      	lsleq	r3, r3, #8
 8006db8:	3008      	addeq	r0, #8
 8006dba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006dbe:	bf04      	itt	eq
 8006dc0:	011b      	lsleq	r3, r3, #4
 8006dc2:	3004      	addeq	r0, #4
 8006dc4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006dc8:	bf04      	itt	eq
 8006dca:	009b      	lsleq	r3, r3, #2
 8006dcc:	3002      	addeq	r0, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	db05      	blt.n	8006dde <__hi0bits+0x3a>
 8006dd2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006dd6:	f100 0001 	add.w	r0, r0, #1
 8006dda:	bf08      	it	eq
 8006ddc:	2020      	moveq	r0, #32
 8006dde:	4770      	bx	lr
 8006de0:	2000      	movs	r0, #0
 8006de2:	e7e5      	b.n	8006db0 <__hi0bits+0xc>

08006de4 <__lo0bits>:
 8006de4:	6803      	ldr	r3, [r0, #0]
 8006de6:	4602      	mov	r2, r0
 8006de8:	f013 0007 	ands.w	r0, r3, #7
 8006dec:	d00b      	beq.n	8006e06 <__lo0bits+0x22>
 8006dee:	07d9      	lsls	r1, r3, #31
 8006df0:	d421      	bmi.n	8006e36 <__lo0bits+0x52>
 8006df2:	0798      	lsls	r0, r3, #30
 8006df4:	bf49      	itett	mi
 8006df6:	085b      	lsrmi	r3, r3, #1
 8006df8:	089b      	lsrpl	r3, r3, #2
 8006dfa:	2001      	movmi	r0, #1
 8006dfc:	6013      	strmi	r3, [r2, #0]
 8006dfe:	bf5c      	itt	pl
 8006e00:	2002      	movpl	r0, #2
 8006e02:	6013      	strpl	r3, [r2, #0]
 8006e04:	4770      	bx	lr
 8006e06:	b299      	uxth	r1, r3
 8006e08:	b909      	cbnz	r1, 8006e0e <__lo0bits+0x2a>
 8006e0a:	2010      	movs	r0, #16
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	b2d9      	uxtb	r1, r3
 8006e10:	b909      	cbnz	r1, 8006e16 <__lo0bits+0x32>
 8006e12:	3008      	adds	r0, #8
 8006e14:	0a1b      	lsrs	r3, r3, #8
 8006e16:	0719      	lsls	r1, r3, #28
 8006e18:	bf04      	itt	eq
 8006e1a:	091b      	lsreq	r3, r3, #4
 8006e1c:	3004      	addeq	r0, #4
 8006e1e:	0799      	lsls	r1, r3, #30
 8006e20:	bf04      	itt	eq
 8006e22:	089b      	lsreq	r3, r3, #2
 8006e24:	3002      	addeq	r0, #2
 8006e26:	07d9      	lsls	r1, r3, #31
 8006e28:	d403      	bmi.n	8006e32 <__lo0bits+0x4e>
 8006e2a:	085b      	lsrs	r3, r3, #1
 8006e2c:	f100 0001 	add.w	r0, r0, #1
 8006e30:	d003      	beq.n	8006e3a <__lo0bits+0x56>
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	4770      	bx	lr
 8006e36:	2000      	movs	r0, #0
 8006e38:	4770      	bx	lr
 8006e3a:	2020      	movs	r0, #32
 8006e3c:	4770      	bx	lr
	...

08006e40 <__i2b>:
 8006e40:	b510      	push	{r4, lr}
 8006e42:	460c      	mov	r4, r1
 8006e44:	2101      	movs	r1, #1
 8006e46:	f7ff febb 	bl	8006bc0 <_Balloc>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	b928      	cbnz	r0, 8006e5a <__i2b+0x1a>
 8006e4e:	f240 1145 	movw	r1, #325	; 0x145
 8006e52:	4b04      	ldr	r3, [pc, #16]	; (8006e64 <__i2b+0x24>)
 8006e54:	4804      	ldr	r0, [pc, #16]	; (8006e68 <__i2b+0x28>)
 8006e56:	f7fe ff29 	bl	8005cac <__assert_func>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	6144      	str	r4, [r0, #20]
 8006e5e:	6103      	str	r3, [r0, #16]
 8006e60:	bd10      	pop	{r4, pc}
 8006e62:	bf00      	nop
 8006e64:	0800968a 	.word	0x0800968a
 8006e68:	0800969b 	.word	0x0800969b

08006e6c <__multiply>:
 8006e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e70:	4691      	mov	r9, r2
 8006e72:	690a      	ldr	r2, [r1, #16]
 8006e74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e78:	460c      	mov	r4, r1
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	bfbe      	ittt	lt
 8006e7e:	460b      	movlt	r3, r1
 8006e80:	464c      	movlt	r4, r9
 8006e82:	4699      	movlt	r9, r3
 8006e84:	6927      	ldr	r7, [r4, #16]
 8006e86:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e8a:	68a3      	ldr	r3, [r4, #8]
 8006e8c:	6861      	ldr	r1, [r4, #4]
 8006e8e:	eb07 060a 	add.w	r6, r7, sl
 8006e92:	42b3      	cmp	r3, r6
 8006e94:	b085      	sub	sp, #20
 8006e96:	bfb8      	it	lt
 8006e98:	3101      	addlt	r1, #1
 8006e9a:	f7ff fe91 	bl	8006bc0 <_Balloc>
 8006e9e:	b930      	cbnz	r0, 8006eae <__multiply+0x42>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ea6:	4b43      	ldr	r3, [pc, #268]	; (8006fb4 <__multiply+0x148>)
 8006ea8:	4843      	ldr	r0, [pc, #268]	; (8006fb8 <__multiply+0x14c>)
 8006eaa:	f7fe feff 	bl	8005cac <__assert_func>
 8006eae:	f100 0514 	add.w	r5, r0, #20
 8006eb2:	462b      	mov	r3, r5
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006eba:	4543      	cmp	r3, r8
 8006ebc:	d321      	bcc.n	8006f02 <__multiply+0x96>
 8006ebe:	f104 0314 	add.w	r3, r4, #20
 8006ec2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ec6:	f109 0314 	add.w	r3, r9, #20
 8006eca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ece:	9202      	str	r2, [sp, #8]
 8006ed0:	1b3a      	subs	r2, r7, r4
 8006ed2:	3a15      	subs	r2, #21
 8006ed4:	f022 0203 	bic.w	r2, r2, #3
 8006ed8:	3204      	adds	r2, #4
 8006eda:	f104 0115 	add.w	r1, r4, #21
 8006ede:	428f      	cmp	r7, r1
 8006ee0:	bf38      	it	cc
 8006ee2:	2204      	movcc	r2, #4
 8006ee4:	9201      	str	r2, [sp, #4]
 8006ee6:	9a02      	ldr	r2, [sp, #8]
 8006ee8:	9303      	str	r3, [sp, #12]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d80c      	bhi.n	8006f08 <__multiply+0x9c>
 8006eee:	2e00      	cmp	r6, #0
 8006ef0:	dd03      	ble.n	8006efa <__multiply+0x8e>
 8006ef2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d05a      	beq.n	8006fb0 <__multiply+0x144>
 8006efa:	6106      	str	r6, [r0, #16]
 8006efc:	b005      	add	sp, #20
 8006efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f02:	f843 2b04 	str.w	r2, [r3], #4
 8006f06:	e7d8      	b.n	8006eba <__multiply+0x4e>
 8006f08:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f0c:	f1ba 0f00 	cmp.w	sl, #0
 8006f10:	d023      	beq.n	8006f5a <__multiply+0xee>
 8006f12:	46a9      	mov	r9, r5
 8006f14:	f04f 0c00 	mov.w	ip, #0
 8006f18:	f104 0e14 	add.w	lr, r4, #20
 8006f1c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f20:	f8d9 1000 	ldr.w	r1, [r9]
 8006f24:	fa1f fb82 	uxth.w	fp, r2
 8006f28:	b289      	uxth	r1, r1
 8006f2a:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f2e:	4461      	add	r1, ip
 8006f30:	f8d9 c000 	ldr.w	ip, [r9]
 8006f34:	0c12      	lsrs	r2, r2, #16
 8006f36:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006f3a:	fb0a c202 	mla	r2, sl, r2, ip
 8006f3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f42:	b289      	uxth	r1, r1
 8006f44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f48:	4577      	cmp	r7, lr
 8006f4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f4e:	f849 1b04 	str.w	r1, [r9], #4
 8006f52:	d8e3      	bhi.n	8006f1c <__multiply+0xb0>
 8006f54:	9a01      	ldr	r2, [sp, #4]
 8006f56:	f845 c002 	str.w	ip, [r5, r2]
 8006f5a:	9a03      	ldr	r2, [sp, #12]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f62:	f1b9 0f00 	cmp.w	r9, #0
 8006f66:	d021      	beq.n	8006fac <__multiply+0x140>
 8006f68:	46ae      	mov	lr, r5
 8006f6a:	f04f 0a00 	mov.w	sl, #0
 8006f6e:	6829      	ldr	r1, [r5, #0]
 8006f70:	f104 0c14 	add.w	ip, r4, #20
 8006f74:	f8bc b000 	ldrh.w	fp, [ip]
 8006f78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f7c:	b289      	uxth	r1, r1
 8006f7e:	fb09 220b 	mla	r2, r9, fp, r2
 8006f82:	4452      	add	r2, sl
 8006f84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f88:	f84e 1b04 	str.w	r1, [lr], #4
 8006f8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006f90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f94:	f8be 1000 	ldrh.w	r1, [lr]
 8006f98:	4567      	cmp	r7, ip
 8006f9a:	fb09 110a 	mla	r1, r9, sl, r1
 8006f9e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006fa2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006fa6:	d8e5      	bhi.n	8006f74 <__multiply+0x108>
 8006fa8:	9a01      	ldr	r2, [sp, #4]
 8006faa:	50a9      	str	r1, [r5, r2]
 8006fac:	3504      	adds	r5, #4
 8006fae:	e79a      	b.n	8006ee6 <__multiply+0x7a>
 8006fb0:	3e01      	subs	r6, #1
 8006fb2:	e79c      	b.n	8006eee <__multiply+0x82>
 8006fb4:	0800968a 	.word	0x0800968a
 8006fb8:	0800969b 	.word	0x0800969b

08006fbc <__pow5mult>:
 8006fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc0:	4615      	mov	r5, r2
 8006fc2:	f012 0203 	ands.w	r2, r2, #3
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	460f      	mov	r7, r1
 8006fca:	d007      	beq.n	8006fdc <__pow5mult+0x20>
 8006fcc:	4c25      	ldr	r4, [pc, #148]	; (8007064 <__pow5mult+0xa8>)
 8006fce:	3a01      	subs	r2, #1
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fd6:	f7ff fe55 	bl	8006c84 <__multadd>
 8006fda:	4607      	mov	r7, r0
 8006fdc:	10ad      	asrs	r5, r5, #2
 8006fde:	d03d      	beq.n	800705c <__pow5mult+0xa0>
 8006fe0:	69f4      	ldr	r4, [r6, #28]
 8006fe2:	b97c      	cbnz	r4, 8007004 <__pow5mult+0x48>
 8006fe4:	2010      	movs	r0, #16
 8006fe6:	f7ff fd37 	bl	8006a58 <malloc>
 8006fea:	4602      	mov	r2, r0
 8006fec:	61f0      	str	r0, [r6, #28]
 8006fee:	b928      	cbnz	r0, 8006ffc <__pow5mult+0x40>
 8006ff0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006ff4:	4b1c      	ldr	r3, [pc, #112]	; (8007068 <__pow5mult+0xac>)
 8006ff6:	481d      	ldr	r0, [pc, #116]	; (800706c <__pow5mult+0xb0>)
 8006ff8:	f7fe fe58 	bl	8005cac <__assert_func>
 8006ffc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007000:	6004      	str	r4, [r0, #0]
 8007002:	60c4      	str	r4, [r0, #12]
 8007004:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007008:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800700c:	b94c      	cbnz	r4, 8007022 <__pow5mult+0x66>
 800700e:	f240 2171 	movw	r1, #625	; 0x271
 8007012:	4630      	mov	r0, r6
 8007014:	f7ff ff14 	bl	8006e40 <__i2b>
 8007018:	2300      	movs	r3, #0
 800701a:	4604      	mov	r4, r0
 800701c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007020:	6003      	str	r3, [r0, #0]
 8007022:	f04f 0900 	mov.w	r9, #0
 8007026:	07eb      	lsls	r3, r5, #31
 8007028:	d50a      	bpl.n	8007040 <__pow5mult+0x84>
 800702a:	4639      	mov	r1, r7
 800702c:	4622      	mov	r2, r4
 800702e:	4630      	mov	r0, r6
 8007030:	f7ff ff1c 	bl	8006e6c <__multiply>
 8007034:	4680      	mov	r8, r0
 8007036:	4639      	mov	r1, r7
 8007038:	4630      	mov	r0, r6
 800703a:	f7ff fe01 	bl	8006c40 <_Bfree>
 800703e:	4647      	mov	r7, r8
 8007040:	106d      	asrs	r5, r5, #1
 8007042:	d00b      	beq.n	800705c <__pow5mult+0xa0>
 8007044:	6820      	ldr	r0, [r4, #0]
 8007046:	b938      	cbnz	r0, 8007058 <__pow5mult+0x9c>
 8007048:	4622      	mov	r2, r4
 800704a:	4621      	mov	r1, r4
 800704c:	4630      	mov	r0, r6
 800704e:	f7ff ff0d 	bl	8006e6c <__multiply>
 8007052:	6020      	str	r0, [r4, #0]
 8007054:	f8c0 9000 	str.w	r9, [r0]
 8007058:	4604      	mov	r4, r0
 800705a:	e7e4      	b.n	8007026 <__pow5mult+0x6a>
 800705c:	4638      	mov	r0, r7
 800705e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007062:	bf00      	nop
 8007064:	080097e8 	.word	0x080097e8
 8007068:	08009578 	.word	0x08009578
 800706c:	0800969b 	.word	0x0800969b

08007070 <__lshift>:
 8007070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007074:	460c      	mov	r4, r1
 8007076:	4607      	mov	r7, r0
 8007078:	4691      	mov	r9, r2
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	6849      	ldr	r1, [r1, #4]
 800707e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007082:	68a3      	ldr	r3, [r4, #8]
 8007084:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007088:	f108 0601 	add.w	r6, r8, #1
 800708c:	42b3      	cmp	r3, r6
 800708e:	db0b      	blt.n	80070a8 <__lshift+0x38>
 8007090:	4638      	mov	r0, r7
 8007092:	f7ff fd95 	bl	8006bc0 <_Balloc>
 8007096:	4605      	mov	r5, r0
 8007098:	b948      	cbnz	r0, 80070ae <__lshift+0x3e>
 800709a:	4602      	mov	r2, r0
 800709c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80070a0:	4b27      	ldr	r3, [pc, #156]	; (8007140 <__lshift+0xd0>)
 80070a2:	4828      	ldr	r0, [pc, #160]	; (8007144 <__lshift+0xd4>)
 80070a4:	f7fe fe02 	bl	8005cac <__assert_func>
 80070a8:	3101      	adds	r1, #1
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	e7ee      	b.n	800708c <__lshift+0x1c>
 80070ae:	2300      	movs	r3, #0
 80070b0:	f100 0114 	add.w	r1, r0, #20
 80070b4:	f100 0210 	add.w	r2, r0, #16
 80070b8:	4618      	mov	r0, r3
 80070ba:	4553      	cmp	r3, sl
 80070bc:	db33      	blt.n	8007126 <__lshift+0xb6>
 80070be:	6920      	ldr	r0, [r4, #16]
 80070c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070c4:	f104 0314 	add.w	r3, r4, #20
 80070c8:	f019 091f 	ands.w	r9, r9, #31
 80070cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070d4:	d02b      	beq.n	800712e <__lshift+0xbe>
 80070d6:	468a      	mov	sl, r1
 80070d8:	2200      	movs	r2, #0
 80070da:	f1c9 0e20 	rsb	lr, r9, #32
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	fa00 f009 	lsl.w	r0, r0, r9
 80070e4:	4310      	orrs	r0, r2
 80070e6:	f84a 0b04 	str.w	r0, [sl], #4
 80070ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ee:	459c      	cmp	ip, r3
 80070f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80070f4:	d8f3      	bhi.n	80070de <__lshift+0x6e>
 80070f6:	ebac 0304 	sub.w	r3, ip, r4
 80070fa:	3b15      	subs	r3, #21
 80070fc:	f023 0303 	bic.w	r3, r3, #3
 8007100:	3304      	adds	r3, #4
 8007102:	f104 0015 	add.w	r0, r4, #21
 8007106:	4584      	cmp	ip, r0
 8007108:	bf38      	it	cc
 800710a:	2304      	movcc	r3, #4
 800710c:	50ca      	str	r2, [r1, r3]
 800710e:	b10a      	cbz	r2, 8007114 <__lshift+0xa4>
 8007110:	f108 0602 	add.w	r6, r8, #2
 8007114:	3e01      	subs	r6, #1
 8007116:	4638      	mov	r0, r7
 8007118:	4621      	mov	r1, r4
 800711a:	612e      	str	r6, [r5, #16]
 800711c:	f7ff fd90 	bl	8006c40 <_Bfree>
 8007120:	4628      	mov	r0, r5
 8007122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007126:	f842 0f04 	str.w	r0, [r2, #4]!
 800712a:	3301      	adds	r3, #1
 800712c:	e7c5      	b.n	80070ba <__lshift+0x4a>
 800712e:	3904      	subs	r1, #4
 8007130:	f853 2b04 	ldr.w	r2, [r3], #4
 8007134:	459c      	cmp	ip, r3
 8007136:	f841 2f04 	str.w	r2, [r1, #4]!
 800713a:	d8f9      	bhi.n	8007130 <__lshift+0xc0>
 800713c:	e7ea      	b.n	8007114 <__lshift+0xa4>
 800713e:	bf00      	nop
 8007140:	0800968a 	.word	0x0800968a
 8007144:	0800969b 	.word	0x0800969b

08007148 <__mcmp>:
 8007148:	4603      	mov	r3, r0
 800714a:	690a      	ldr	r2, [r1, #16]
 800714c:	6900      	ldr	r0, [r0, #16]
 800714e:	b530      	push	{r4, r5, lr}
 8007150:	1a80      	subs	r0, r0, r2
 8007152:	d10d      	bne.n	8007170 <__mcmp+0x28>
 8007154:	3314      	adds	r3, #20
 8007156:	3114      	adds	r1, #20
 8007158:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800715c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007160:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007164:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007168:	4295      	cmp	r5, r2
 800716a:	d002      	beq.n	8007172 <__mcmp+0x2a>
 800716c:	d304      	bcc.n	8007178 <__mcmp+0x30>
 800716e:	2001      	movs	r0, #1
 8007170:	bd30      	pop	{r4, r5, pc}
 8007172:	42a3      	cmp	r3, r4
 8007174:	d3f4      	bcc.n	8007160 <__mcmp+0x18>
 8007176:	e7fb      	b.n	8007170 <__mcmp+0x28>
 8007178:	f04f 30ff 	mov.w	r0, #4294967295
 800717c:	e7f8      	b.n	8007170 <__mcmp+0x28>
	...

08007180 <__mdiff>:
 8007180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007184:	460d      	mov	r5, r1
 8007186:	4607      	mov	r7, r0
 8007188:	4611      	mov	r1, r2
 800718a:	4628      	mov	r0, r5
 800718c:	4614      	mov	r4, r2
 800718e:	f7ff ffdb 	bl	8007148 <__mcmp>
 8007192:	1e06      	subs	r6, r0, #0
 8007194:	d111      	bne.n	80071ba <__mdiff+0x3a>
 8007196:	4631      	mov	r1, r6
 8007198:	4638      	mov	r0, r7
 800719a:	f7ff fd11 	bl	8006bc0 <_Balloc>
 800719e:	4602      	mov	r2, r0
 80071a0:	b928      	cbnz	r0, 80071ae <__mdiff+0x2e>
 80071a2:	f240 2137 	movw	r1, #567	; 0x237
 80071a6:	4b3a      	ldr	r3, [pc, #232]	; (8007290 <__mdiff+0x110>)
 80071a8:	483a      	ldr	r0, [pc, #232]	; (8007294 <__mdiff+0x114>)
 80071aa:	f7fe fd7f 	bl	8005cac <__assert_func>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80071b4:	4610      	mov	r0, r2
 80071b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ba:	bfa4      	itt	ge
 80071bc:	4623      	movge	r3, r4
 80071be:	462c      	movge	r4, r5
 80071c0:	4638      	mov	r0, r7
 80071c2:	6861      	ldr	r1, [r4, #4]
 80071c4:	bfa6      	itte	ge
 80071c6:	461d      	movge	r5, r3
 80071c8:	2600      	movge	r6, #0
 80071ca:	2601      	movlt	r6, #1
 80071cc:	f7ff fcf8 	bl	8006bc0 <_Balloc>
 80071d0:	4602      	mov	r2, r0
 80071d2:	b918      	cbnz	r0, 80071dc <__mdiff+0x5c>
 80071d4:	f240 2145 	movw	r1, #581	; 0x245
 80071d8:	4b2d      	ldr	r3, [pc, #180]	; (8007290 <__mdiff+0x110>)
 80071da:	e7e5      	b.n	80071a8 <__mdiff+0x28>
 80071dc:	f102 0814 	add.w	r8, r2, #20
 80071e0:	46c2      	mov	sl, r8
 80071e2:	f04f 0c00 	mov.w	ip, #0
 80071e6:	6927      	ldr	r7, [r4, #16]
 80071e8:	60c6      	str	r6, [r0, #12]
 80071ea:	692e      	ldr	r6, [r5, #16]
 80071ec:	f104 0014 	add.w	r0, r4, #20
 80071f0:	f105 0914 	add.w	r9, r5, #20
 80071f4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80071f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80071fc:	3410      	adds	r4, #16
 80071fe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007202:	f859 3b04 	ldr.w	r3, [r9], #4
 8007206:	fa1f f18b 	uxth.w	r1, fp
 800720a:	4461      	add	r1, ip
 800720c:	fa1f fc83 	uxth.w	ip, r3
 8007210:	0c1b      	lsrs	r3, r3, #16
 8007212:	eba1 010c 	sub.w	r1, r1, ip
 8007216:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800721a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800721e:	b289      	uxth	r1, r1
 8007220:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007224:	454e      	cmp	r6, r9
 8007226:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800722a:	f84a 1b04 	str.w	r1, [sl], #4
 800722e:	d8e6      	bhi.n	80071fe <__mdiff+0x7e>
 8007230:	1b73      	subs	r3, r6, r5
 8007232:	3b15      	subs	r3, #21
 8007234:	f023 0303 	bic.w	r3, r3, #3
 8007238:	3515      	adds	r5, #21
 800723a:	3304      	adds	r3, #4
 800723c:	42ae      	cmp	r6, r5
 800723e:	bf38      	it	cc
 8007240:	2304      	movcc	r3, #4
 8007242:	4418      	add	r0, r3
 8007244:	4443      	add	r3, r8
 8007246:	461e      	mov	r6, r3
 8007248:	4605      	mov	r5, r0
 800724a:	4575      	cmp	r5, lr
 800724c:	d30e      	bcc.n	800726c <__mdiff+0xec>
 800724e:	f10e 0103 	add.w	r1, lr, #3
 8007252:	1a09      	subs	r1, r1, r0
 8007254:	f021 0103 	bic.w	r1, r1, #3
 8007258:	3803      	subs	r0, #3
 800725a:	4586      	cmp	lr, r0
 800725c:	bf38      	it	cc
 800725e:	2100      	movcc	r1, #0
 8007260:	440b      	add	r3, r1
 8007262:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007266:	b189      	cbz	r1, 800728c <__mdiff+0x10c>
 8007268:	6117      	str	r7, [r2, #16]
 800726a:	e7a3      	b.n	80071b4 <__mdiff+0x34>
 800726c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007270:	fa1f f188 	uxth.w	r1, r8
 8007274:	4461      	add	r1, ip
 8007276:	140c      	asrs	r4, r1, #16
 8007278:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800727c:	b289      	uxth	r1, r1
 800727e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007282:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007286:	f846 1b04 	str.w	r1, [r6], #4
 800728a:	e7de      	b.n	800724a <__mdiff+0xca>
 800728c:	3f01      	subs	r7, #1
 800728e:	e7e8      	b.n	8007262 <__mdiff+0xe2>
 8007290:	0800968a 	.word	0x0800968a
 8007294:	0800969b 	.word	0x0800969b

08007298 <__ulp>:
 8007298:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <__ulp+0x3c>)
 800729a:	400b      	ands	r3, r1
 800729c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	dc08      	bgt.n	80072b6 <__ulp+0x1e>
 80072a4:	425b      	negs	r3, r3
 80072a6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80072aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80072ae:	da04      	bge.n	80072ba <__ulp+0x22>
 80072b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80072b4:	4113      	asrs	r3, r2
 80072b6:	2200      	movs	r2, #0
 80072b8:	e008      	b.n	80072cc <__ulp+0x34>
 80072ba:	f1a2 0314 	sub.w	r3, r2, #20
 80072be:	2b1e      	cmp	r3, #30
 80072c0:	bfd6      	itet	le
 80072c2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80072c6:	2201      	movgt	r2, #1
 80072c8:	40da      	lsrle	r2, r3
 80072ca:	2300      	movs	r3, #0
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	7ff00000 	.word	0x7ff00000

080072d8 <__b2d>:
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	6905      	ldr	r5, [r0, #16]
 80072dc:	f100 0714 	add.w	r7, r0, #20
 80072e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80072e4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80072e8:	1f2e      	subs	r6, r5, #4
 80072ea:	4620      	mov	r0, r4
 80072ec:	f7ff fd5a 	bl	8006da4 <__hi0bits>
 80072f0:	f1c0 0220 	rsb	r2, r0, #32
 80072f4:	280a      	cmp	r0, #10
 80072f6:	4603      	mov	r3, r0
 80072f8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007364 <__b2d+0x8c>
 80072fc:	600a      	str	r2, [r1, #0]
 80072fe:	dc12      	bgt.n	8007326 <__b2d+0x4e>
 8007300:	f1c0 0e0b 	rsb	lr, r0, #11
 8007304:	fa24 f20e 	lsr.w	r2, r4, lr
 8007308:	42b7      	cmp	r7, r6
 800730a:	ea42 010c 	orr.w	r1, r2, ip
 800730e:	bf2c      	ite	cs
 8007310:	2200      	movcs	r2, #0
 8007312:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007316:	3315      	adds	r3, #21
 8007318:	fa04 f303 	lsl.w	r3, r4, r3
 800731c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007320:	431a      	orrs	r2, r3
 8007322:	4610      	mov	r0, r2
 8007324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007326:	42b7      	cmp	r7, r6
 8007328:	bf2e      	itee	cs
 800732a:	2200      	movcs	r2, #0
 800732c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007330:	f1a5 0608 	subcc.w	r6, r5, #8
 8007334:	3b0b      	subs	r3, #11
 8007336:	d012      	beq.n	800735e <__b2d+0x86>
 8007338:	f1c3 0520 	rsb	r5, r3, #32
 800733c:	fa22 f105 	lsr.w	r1, r2, r5
 8007340:	409c      	lsls	r4, r3
 8007342:	430c      	orrs	r4, r1
 8007344:	42be      	cmp	r6, r7
 8007346:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800734a:	bf94      	ite	ls
 800734c:	2400      	movls	r4, #0
 800734e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007352:	409a      	lsls	r2, r3
 8007354:	40ec      	lsrs	r4, r5
 8007356:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800735a:	4322      	orrs	r2, r4
 800735c:	e7e1      	b.n	8007322 <__b2d+0x4a>
 800735e:	ea44 010c 	orr.w	r1, r4, ip
 8007362:	e7de      	b.n	8007322 <__b2d+0x4a>
 8007364:	3ff00000 	.word	0x3ff00000

08007368 <__d2b>:
 8007368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800736a:	2101      	movs	r1, #1
 800736c:	4617      	mov	r7, r2
 800736e:	461c      	mov	r4, r3
 8007370:	9e08      	ldr	r6, [sp, #32]
 8007372:	f7ff fc25 	bl	8006bc0 <_Balloc>
 8007376:	4605      	mov	r5, r0
 8007378:	b930      	cbnz	r0, 8007388 <__d2b+0x20>
 800737a:	4602      	mov	r2, r0
 800737c:	f240 310f 	movw	r1, #783	; 0x30f
 8007380:	4b22      	ldr	r3, [pc, #136]	; (800740c <__d2b+0xa4>)
 8007382:	4823      	ldr	r0, [pc, #140]	; (8007410 <__d2b+0xa8>)
 8007384:	f7fe fc92 	bl	8005cac <__assert_func>
 8007388:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800738c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007390:	bb24      	cbnz	r4, 80073dc <__d2b+0x74>
 8007392:	2f00      	cmp	r7, #0
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	d026      	beq.n	80073e6 <__d2b+0x7e>
 8007398:	4668      	mov	r0, sp
 800739a:	9700      	str	r7, [sp, #0]
 800739c:	f7ff fd22 	bl	8006de4 <__lo0bits>
 80073a0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073a4:	b1e8      	cbz	r0, 80073e2 <__d2b+0x7a>
 80073a6:	f1c0 0320 	rsb	r3, r0, #32
 80073aa:	fa02 f303 	lsl.w	r3, r2, r3
 80073ae:	430b      	orrs	r3, r1
 80073b0:	40c2      	lsrs	r2, r0
 80073b2:	616b      	str	r3, [r5, #20]
 80073b4:	9201      	str	r2, [sp, #4]
 80073b6:	9b01      	ldr	r3, [sp, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	bf14      	ite	ne
 80073bc:	2102      	movne	r1, #2
 80073be:	2101      	moveq	r1, #1
 80073c0:	61ab      	str	r3, [r5, #24]
 80073c2:	6129      	str	r1, [r5, #16]
 80073c4:	b1bc      	cbz	r4, 80073f6 <__d2b+0x8e>
 80073c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80073ca:	4404      	add	r4, r0
 80073cc:	6034      	str	r4, [r6, #0]
 80073ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d4:	6018      	str	r0, [r3, #0]
 80073d6:	4628      	mov	r0, r5
 80073d8:	b003      	add	sp, #12
 80073da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073e0:	e7d7      	b.n	8007392 <__d2b+0x2a>
 80073e2:	6169      	str	r1, [r5, #20]
 80073e4:	e7e7      	b.n	80073b6 <__d2b+0x4e>
 80073e6:	a801      	add	r0, sp, #4
 80073e8:	f7ff fcfc 	bl	8006de4 <__lo0bits>
 80073ec:	9b01      	ldr	r3, [sp, #4]
 80073ee:	2101      	movs	r1, #1
 80073f0:	616b      	str	r3, [r5, #20]
 80073f2:	3020      	adds	r0, #32
 80073f4:	e7e5      	b.n	80073c2 <__d2b+0x5a>
 80073f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073fa:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80073fe:	6030      	str	r0, [r6, #0]
 8007400:	6918      	ldr	r0, [r3, #16]
 8007402:	f7ff fccf 	bl	8006da4 <__hi0bits>
 8007406:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800740a:	e7e2      	b.n	80073d2 <__d2b+0x6a>
 800740c:	0800968a 	.word	0x0800968a
 8007410:	0800969b 	.word	0x0800969b

08007414 <__ratio>:
 8007414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	4688      	mov	r8, r1
 800741a:	4669      	mov	r1, sp
 800741c:	4681      	mov	r9, r0
 800741e:	f7ff ff5b 	bl	80072d8 <__b2d>
 8007422:	460f      	mov	r7, r1
 8007424:	4604      	mov	r4, r0
 8007426:	460d      	mov	r5, r1
 8007428:	4640      	mov	r0, r8
 800742a:	a901      	add	r1, sp, #4
 800742c:	f7ff ff54 	bl	80072d8 <__b2d>
 8007430:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007434:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007438:	468b      	mov	fp, r1
 800743a:	eba3 0c02 	sub.w	ip, r3, r2
 800743e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007442:	1a9b      	subs	r3, r3, r2
 8007444:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007448:	2b00      	cmp	r3, #0
 800744a:	bfd5      	itete	le
 800744c:	460a      	movle	r2, r1
 800744e:	462a      	movgt	r2, r5
 8007450:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007454:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007458:	bfd8      	it	le
 800745a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800745e:	465b      	mov	r3, fp
 8007460:	4602      	mov	r2, r0
 8007462:	4639      	mov	r1, r7
 8007464:	4620      	mov	r0, r4
 8007466:	f7f9 fa1f 	bl	80008a8 <__aeabi_ddiv>
 800746a:	b003      	add	sp, #12
 800746c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007470 <__copybits>:
 8007470:	3901      	subs	r1, #1
 8007472:	b570      	push	{r4, r5, r6, lr}
 8007474:	1149      	asrs	r1, r1, #5
 8007476:	6914      	ldr	r4, [r2, #16]
 8007478:	3101      	adds	r1, #1
 800747a:	f102 0314 	add.w	r3, r2, #20
 800747e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007482:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007486:	1f05      	subs	r5, r0, #4
 8007488:	42a3      	cmp	r3, r4
 800748a:	d30c      	bcc.n	80074a6 <__copybits+0x36>
 800748c:	1aa3      	subs	r3, r4, r2
 800748e:	3b11      	subs	r3, #17
 8007490:	f023 0303 	bic.w	r3, r3, #3
 8007494:	3211      	adds	r2, #17
 8007496:	42a2      	cmp	r2, r4
 8007498:	bf88      	it	hi
 800749a:	2300      	movhi	r3, #0
 800749c:	4418      	add	r0, r3
 800749e:	2300      	movs	r3, #0
 80074a0:	4288      	cmp	r0, r1
 80074a2:	d305      	bcc.n	80074b0 <__copybits+0x40>
 80074a4:	bd70      	pop	{r4, r5, r6, pc}
 80074a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80074aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80074ae:	e7eb      	b.n	8007488 <__copybits+0x18>
 80074b0:	f840 3b04 	str.w	r3, [r0], #4
 80074b4:	e7f4      	b.n	80074a0 <__copybits+0x30>

080074b6 <__any_on>:
 80074b6:	f100 0214 	add.w	r2, r0, #20
 80074ba:	6900      	ldr	r0, [r0, #16]
 80074bc:	114b      	asrs	r3, r1, #5
 80074be:	4298      	cmp	r0, r3
 80074c0:	b510      	push	{r4, lr}
 80074c2:	db11      	blt.n	80074e8 <__any_on+0x32>
 80074c4:	dd0a      	ble.n	80074dc <__any_on+0x26>
 80074c6:	f011 011f 	ands.w	r1, r1, #31
 80074ca:	d007      	beq.n	80074dc <__any_on+0x26>
 80074cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80074d0:	fa24 f001 	lsr.w	r0, r4, r1
 80074d4:	fa00 f101 	lsl.w	r1, r0, r1
 80074d8:	428c      	cmp	r4, r1
 80074da:	d10b      	bne.n	80074f4 <__any_on+0x3e>
 80074dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d803      	bhi.n	80074ec <__any_on+0x36>
 80074e4:	2000      	movs	r0, #0
 80074e6:	bd10      	pop	{r4, pc}
 80074e8:	4603      	mov	r3, r0
 80074ea:	e7f7      	b.n	80074dc <__any_on+0x26>
 80074ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074f0:	2900      	cmp	r1, #0
 80074f2:	d0f5      	beq.n	80074e0 <__any_on+0x2a>
 80074f4:	2001      	movs	r0, #1
 80074f6:	e7f6      	b.n	80074e6 <__any_on+0x30>

080074f8 <sulp>:
 80074f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074fc:	460f      	mov	r7, r1
 80074fe:	4690      	mov	r8, r2
 8007500:	f7ff feca 	bl	8007298 <__ulp>
 8007504:	4604      	mov	r4, r0
 8007506:	460d      	mov	r5, r1
 8007508:	f1b8 0f00 	cmp.w	r8, #0
 800750c:	d011      	beq.n	8007532 <sulp+0x3a>
 800750e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007512:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007516:	2b00      	cmp	r3, #0
 8007518:	dd0b      	ble.n	8007532 <sulp+0x3a>
 800751a:	2400      	movs	r4, #0
 800751c:	051b      	lsls	r3, r3, #20
 800751e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007522:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007526:	4622      	mov	r2, r4
 8007528:	462b      	mov	r3, r5
 800752a:	f7f9 f893 	bl	8000654 <__aeabi_dmul>
 800752e:	4604      	mov	r4, r0
 8007530:	460d      	mov	r5, r1
 8007532:	4620      	mov	r0, r4
 8007534:	4629      	mov	r1, r5
 8007536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800753a:	0000      	movs	r0, r0
 800753c:	0000      	movs	r0, r0
	...

08007540 <_strtod_l>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	b09f      	sub	sp, #124	; 0x7c
 8007546:	9217      	str	r2, [sp, #92]	; 0x5c
 8007548:	2200      	movs	r2, #0
 800754a:	4604      	mov	r4, r0
 800754c:	921a      	str	r2, [sp, #104]	; 0x68
 800754e:	460d      	mov	r5, r1
 8007550:	f04f 0800 	mov.w	r8, #0
 8007554:	f04f 0900 	mov.w	r9, #0
 8007558:	460a      	mov	r2, r1
 800755a:	9219      	str	r2, [sp, #100]	; 0x64
 800755c:	7811      	ldrb	r1, [r2, #0]
 800755e:	292b      	cmp	r1, #43	; 0x2b
 8007560:	d04a      	beq.n	80075f8 <_strtod_l+0xb8>
 8007562:	d838      	bhi.n	80075d6 <_strtod_l+0x96>
 8007564:	290d      	cmp	r1, #13
 8007566:	d832      	bhi.n	80075ce <_strtod_l+0x8e>
 8007568:	2908      	cmp	r1, #8
 800756a:	d832      	bhi.n	80075d2 <_strtod_l+0x92>
 800756c:	2900      	cmp	r1, #0
 800756e:	d03b      	beq.n	80075e8 <_strtod_l+0xa8>
 8007570:	2200      	movs	r2, #0
 8007572:	920e      	str	r2, [sp, #56]	; 0x38
 8007574:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007576:	7832      	ldrb	r2, [r6, #0]
 8007578:	2a30      	cmp	r2, #48	; 0x30
 800757a:	f040 80b2 	bne.w	80076e2 <_strtod_l+0x1a2>
 800757e:	7872      	ldrb	r2, [r6, #1]
 8007580:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007584:	2a58      	cmp	r2, #88	; 0x58
 8007586:	d16e      	bne.n	8007666 <_strtod_l+0x126>
 8007588:	9302      	str	r3, [sp, #8]
 800758a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800758c:	4620      	mov	r0, r4
 800758e:	9301      	str	r3, [sp, #4]
 8007590:	ab1a      	add	r3, sp, #104	; 0x68
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	4a8c      	ldr	r2, [pc, #560]	; (80077c8 <_strtod_l+0x288>)
 8007596:	ab1b      	add	r3, sp, #108	; 0x6c
 8007598:	a919      	add	r1, sp, #100	; 0x64
 800759a:	f001 fa79 	bl	8008a90 <__gethex>
 800759e:	f010 070f 	ands.w	r7, r0, #15
 80075a2:	4605      	mov	r5, r0
 80075a4:	d005      	beq.n	80075b2 <_strtod_l+0x72>
 80075a6:	2f06      	cmp	r7, #6
 80075a8:	d128      	bne.n	80075fc <_strtod_l+0xbc>
 80075aa:	2300      	movs	r3, #0
 80075ac:	3601      	adds	r6, #1
 80075ae:	9619      	str	r6, [sp, #100]	; 0x64
 80075b0:	930e      	str	r3, [sp, #56]	; 0x38
 80075b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f040 85a0 	bne.w	80080fa <_strtod_l+0xbba>
 80075ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075bc:	b1cb      	cbz	r3, 80075f2 <_strtod_l+0xb2>
 80075be:	4642      	mov	r2, r8
 80075c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80075c4:	4610      	mov	r0, r2
 80075c6:	4619      	mov	r1, r3
 80075c8:	b01f      	add	sp, #124	; 0x7c
 80075ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ce:	2920      	cmp	r1, #32
 80075d0:	d1ce      	bne.n	8007570 <_strtod_l+0x30>
 80075d2:	3201      	adds	r2, #1
 80075d4:	e7c1      	b.n	800755a <_strtod_l+0x1a>
 80075d6:	292d      	cmp	r1, #45	; 0x2d
 80075d8:	d1ca      	bne.n	8007570 <_strtod_l+0x30>
 80075da:	2101      	movs	r1, #1
 80075dc:	910e      	str	r1, [sp, #56]	; 0x38
 80075de:	1c51      	adds	r1, r2, #1
 80075e0:	9119      	str	r1, [sp, #100]	; 0x64
 80075e2:	7852      	ldrb	r2, [r2, #1]
 80075e4:	2a00      	cmp	r2, #0
 80075e6:	d1c5      	bne.n	8007574 <_strtod_l+0x34>
 80075e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075ea:	9519      	str	r5, [sp, #100]	; 0x64
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f040 8582 	bne.w	80080f6 <_strtod_l+0xbb6>
 80075f2:	4642      	mov	r2, r8
 80075f4:	464b      	mov	r3, r9
 80075f6:	e7e5      	b.n	80075c4 <_strtod_l+0x84>
 80075f8:	2100      	movs	r1, #0
 80075fa:	e7ef      	b.n	80075dc <_strtod_l+0x9c>
 80075fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80075fe:	b13a      	cbz	r2, 8007610 <_strtod_l+0xd0>
 8007600:	2135      	movs	r1, #53	; 0x35
 8007602:	a81c      	add	r0, sp, #112	; 0x70
 8007604:	f7ff ff34 	bl	8007470 <__copybits>
 8007608:	4620      	mov	r0, r4
 800760a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800760c:	f7ff fb18 	bl	8006c40 <_Bfree>
 8007610:	3f01      	subs	r7, #1
 8007612:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007614:	2f04      	cmp	r7, #4
 8007616:	d806      	bhi.n	8007626 <_strtod_l+0xe6>
 8007618:	e8df f007 	tbb	[pc, r7]
 800761c:	201d0314 	.word	0x201d0314
 8007620:	14          	.byte	0x14
 8007621:	00          	.byte	0x00
 8007622:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007626:	05e9      	lsls	r1, r5, #23
 8007628:	bf48      	it	mi
 800762a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800762e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007632:	0d1b      	lsrs	r3, r3, #20
 8007634:	051b      	lsls	r3, r3, #20
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1bb      	bne.n	80075b2 <_strtod_l+0x72>
 800763a:	f7fe faf9 	bl	8005c30 <__errno>
 800763e:	2322      	movs	r3, #34	; 0x22
 8007640:	6003      	str	r3, [r0, #0]
 8007642:	e7b6      	b.n	80075b2 <_strtod_l+0x72>
 8007644:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007648:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800764c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007650:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007654:	e7e7      	b.n	8007626 <_strtod_l+0xe6>
 8007656:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80077cc <_strtod_l+0x28c>
 800765a:	e7e4      	b.n	8007626 <_strtod_l+0xe6>
 800765c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007660:	f04f 38ff 	mov.w	r8, #4294967295
 8007664:	e7df      	b.n	8007626 <_strtod_l+0xe6>
 8007666:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	9219      	str	r2, [sp, #100]	; 0x64
 800766c:	785b      	ldrb	r3, [r3, #1]
 800766e:	2b30      	cmp	r3, #48	; 0x30
 8007670:	d0f9      	beq.n	8007666 <_strtod_l+0x126>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d09d      	beq.n	80075b2 <_strtod_l+0x72>
 8007676:	2301      	movs	r3, #1
 8007678:	f04f 0a00 	mov.w	sl, #0
 800767c:	220a      	movs	r2, #10
 800767e:	46d3      	mov	fp, sl
 8007680:	9305      	str	r3, [sp, #20]
 8007682:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007684:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007688:	930b      	str	r3, [sp, #44]	; 0x2c
 800768a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800768c:	7806      	ldrb	r6, [r0, #0]
 800768e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007692:	b2d9      	uxtb	r1, r3
 8007694:	2909      	cmp	r1, #9
 8007696:	d926      	bls.n	80076e6 <_strtod_l+0x1a6>
 8007698:	2201      	movs	r2, #1
 800769a:	494d      	ldr	r1, [pc, #308]	; (80077d0 <_strtod_l+0x290>)
 800769c:	f001 f91b 	bl	80088d6 <strncmp>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d030      	beq.n	8007706 <_strtod_l+0x1c6>
 80076a4:	2000      	movs	r0, #0
 80076a6:	4632      	mov	r2, r6
 80076a8:	4603      	mov	r3, r0
 80076aa:	465e      	mov	r6, fp
 80076ac:	9008      	str	r0, [sp, #32]
 80076ae:	2a65      	cmp	r2, #101	; 0x65
 80076b0:	d001      	beq.n	80076b6 <_strtod_l+0x176>
 80076b2:	2a45      	cmp	r2, #69	; 0x45
 80076b4:	d113      	bne.n	80076de <_strtod_l+0x19e>
 80076b6:	b91e      	cbnz	r6, 80076c0 <_strtod_l+0x180>
 80076b8:	9a05      	ldr	r2, [sp, #20]
 80076ba:	4302      	orrs	r2, r0
 80076bc:	d094      	beq.n	80075e8 <_strtod_l+0xa8>
 80076be:	2600      	movs	r6, #0
 80076c0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80076c2:	1c6a      	adds	r2, r5, #1
 80076c4:	9219      	str	r2, [sp, #100]	; 0x64
 80076c6:	786a      	ldrb	r2, [r5, #1]
 80076c8:	2a2b      	cmp	r2, #43	; 0x2b
 80076ca:	d074      	beq.n	80077b6 <_strtod_l+0x276>
 80076cc:	2a2d      	cmp	r2, #45	; 0x2d
 80076ce:	d078      	beq.n	80077c2 <_strtod_l+0x282>
 80076d0:	f04f 0c00 	mov.w	ip, #0
 80076d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80076d8:	2909      	cmp	r1, #9
 80076da:	d97f      	bls.n	80077dc <_strtod_l+0x29c>
 80076dc:	9519      	str	r5, [sp, #100]	; 0x64
 80076de:	2700      	movs	r7, #0
 80076e0:	e09e      	b.n	8007820 <_strtod_l+0x2e0>
 80076e2:	2300      	movs	r3, #0
 80076e4:	e7c8      	b.n	8007678 <_strtod_l+0x138>
 80076e6:	f1bb 0f08 	cmp.w	fp, #8
 80076ea:	bfd8      	it	le
 80076ec:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80076ee:	f100 0001 	add.w	r0, r0, #1
 80076f2:	bfd6      	itet	le
 80076f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80076f8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80076fc:	930a      	strle	r3, [sp, #40]	; 0x28
 80076fe:	f10b 0b01 	add.w	fp, fp, #1
 8007702:	9019      	str	r0, [sp, #100]	; 0x64
 8007704:	e7c1      	b.n	800768a <_strtod_l+0x14a>
 8007706:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	9219      	str	r2, [sp, #100]	; 0x64
 800770c:	785a      	ldrb	r2, [r3, #1]
 800770e:	f1bb 0f00 	cmp.w	fp, #0
 8007712:	d037      	beq.n	8007784 <_strtod_l+0x244>
 8007714:	465e      	mov	r6, fp
 8007716:	9008      	str	r0, [sp, #32]
 8007718:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800771c:	2b09      	cmp	r3, #9
 800771e:	d912      	bls.n	8007746 <_strtod_l+0x206>
 8007720:	2301      	movs	r3, #1
 8007722:	e7c4      	b.n	80076ae <_strtod_l+0x16e>
 8007724:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007726:	3001      	adds	r0, #1
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	9219      	str	r2, [sp, #100]	; 0x64
 800772c:	785a      	ldrb	r2, [r3, #1]
 800772e:	2a30      	cmp	r2, #48	; 0x30
 8007730:	d0f8      	beq.n	8007724 <_strtod_l+0x1e4>
 8007732:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007736:	2b08      	cmp	r3, #8
 8007738:	f200 84e4 	bhi.w	8008104 <_strtod_l+0xbc4>
 800773c:	9008      	str	r0, [sp, #32]
 800773e:	2000      	movs	r0, #0
 8007740:	4606      	mov	r6, r0
 8007742:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007744:	930b      	str	r3, [sp, #44]	; 0x2c
 8007746:	3a30      	subs	r2, #48	; 0x30
 8007748:	f100 0301 	add.w	r3, r0, #1
 800774c:	d014      	beq.n	8007778 <_strtod_l+0x238>
 800774e:	9908      	ldr	r1, [sp, #32]
 8007750:	eb00 0c06 	add.w	ip, r0, r6
 8007754:	4419      	add	r1, r3
 8007756:	9108      	str	r1, [sp, #32]
 8007758:	4633      	mov	r3, r6
 800775a:	210a      	movs	r1, #10
 800775c:	4563      	cmp	r3, ip
 800775e:	d113      	bne.n	8007788 <_strtod_l+0x248>
 8007760:	1833      	adds	r3, r6, r0
 8007762:	2b08      	cmp	r3, #8
 8007764:	f106 0601 	add.w	r6, r6, #1
 8007768:	4406      	add	r6, r0
 800776a:	dc1a      	bgt.n	80077a2 <_strtod_l+0x262>
 800776c:	230a      	movs	r3, #10
 800776e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007770:	fb03 2301 	mla	r3, r3, r1, r2
 8007774:	930a      	str	r3, [sp, #40]	; 0x28
 8007776:	2300      	movs	r3, #0
 8007778:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800777a:	4618      	mov	r0, r3
 800777c:	1c51      	adds	r1, r2, #1
 800777e:	9119      	str	r1, [sp, #100]	; 0x64
 8007780:	7852      	ldrb	r2, [r2, #1]
 8007782:	e7c9      	b.n	8007718 <_strtod_l+0x1d8>
 8007784:	4658      	mov	r0, fp
 8007786:	e7d2      	b.n	800772e <_strtod_l+0x1ee>
 8007788:	2b08      	cmp	r3, #8
 800778a:	f103 0301 	add.w	r3, r3, #1
 800778e:	dc03      	bgt.n	8007798 <_strtod_l+0x258>
 8007790:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007792:	434f      	muls	r7, r1
 8007794:	970a      	str	r7, [sp, #40]	; 0x28
 8007796:	e7e1      	b.n	800775c <_strtod_l+0x21c>
 8007798:	2b10      	cmp	r3, #16
 800779a:	bfd8      	it	le
 800779c:	fb01 fa0a 	mulle.w	sl, r1, sl
 80077a0:	e7dc      	b.n	800775c <_strtod_l+0x21c>
 80077a2:	2e10      	cmp	r6, #16
 80077a4:	bfdc      	itt	le
 80077a6:	230a      	movle	r3, #10
 80077a8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80077ac:	e7e3      	b.n	8007776 <_strtod_l+0x236>
 80077ae:	2300      	movs	r3, #0
 80077b0:	9308      	str	r3, [sp, #32]
 80077b2:	2301      	movs	r3, #1
 80077b4:	e780      	b.n	80076b8 <_strtod_l+0x178>
 80077b6:	f04f 0c00 	mov.w	ip, #0
 80077ba:	1caa      	adds	r2, r5, #2
 80077bc:	9219      	str	r2, [sp, #100]	; 0x64
 80077be:	78aa      	ldrb	r2, [r5, #2]
 80077c0:	e788      	b.n	80076d4 <_strtod_l+0x194>
 80077c2:	f04f 0c01 	mov.w	ip, #1
 80077c6:	e7f8      	b.n	80077ba <_strtod_l+0x27a>
 80077c8:	080097f8 	.word	0x080097f8
 80077cc:	7ff00000 	.word	0x7ff00000
 80077d0:	080097f4 	.word	0x080097f4
 80077d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077d6:	1c51      	adds	r1, r2, #1
 80077d8:	9119      	str	r1, [sp, #100]	; 0x64
 80077da:	7852      	ldrb	r2, [r2, #1]
 80077dc:	2a30      	cmp	r2, #48	; 0x30
 80077de:	d0f9      	beq.n	80077d4 <_strtod_l+0x294>
 80077e0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80077e4:	2908      	cmp	r1, #8
 80077e6:	f63f af7a 	bhi.w	80076de <_strtod_l+0x19e>
 80077ea:	3a30      	subs	r2, #48	; 0x30
 80077ec:	9209      	str	r2, [sp, #36]	; 0x24
 80077ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077f0:	920c      	str	r2, [sp, #48]	; 0x30
 80077f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077f4:	1c57      	adds	r7, r2, #1
 80077f6:	9719      	str	r7, [sp, #100]	; 0x64
 80077f8:	7852      	ldrb	r2, [r2, #1]
 80077fa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80077fe:	f1be 0f09 	cmp.w	lr, #9
 8007802:	d938      	bls.n	8007876 <_strtod_l+0x336>
 8007804:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007806:	1a7f      	subs	r7, r7, r1
 8007808:	2f08      	cmp	r7, #8
 800780a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800780e:	dc03      	bgt.n	8007818 <_strtod_l+0x2d8>
 8007810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007812:	428f      	cmp	r7, r1
 8007814:	bfa8      	it	ge
 8007816:	460f      	movge	r7, r1
 8007818:	f1bc 0f00 	cmp.w	ip, #0
 800781c:	d000      	beq.n	8007820 <_strtod_l+0x2e0>
 800781e:	427f      	negs	r7, r7
 8007820:	2e00      	cmp	r6, #0
 8007822:	d14f      	bne.n	80078c4 <_strtod_l+0x384>
 8007824:	9905      	ldr	r1, [sp, #20]
 8007826:	4301      	orrs	r1, r0
 8007828:	f47f aec3 	bne.w	80075b2 <_strtod_l+0x72>
 800782c:	2b00      	cmp	r3, #0
 800782e:	f47f aedb 	bne.w	80075e8 <_strtod_l+0xa8>
 8007832:	2a69      	cmp	r2, #105	; 0x69
 8007834:	d029      	beq.n	800788a <_strtod_l+0x34a>
 8007836:	dc26      	bgt.n	8007886 <_strtod_l+0x346>
 8007838:	2a49      	cmp	r2, #73	; 0x49
 800783a:	d026      	beq.n	800788a <_strtod_l+0x34a>
 800783c:	2a4e      	cmp	r2, #78	; 0x4e
 800783e:	f47f aed3 	bne.w	80075e8 <_strtod_l+0xa8>
 8007842:	499a      	ldr	r1, [pc, #616]	; (8007aac <_strtod_l+0x56c>)
 8007844:	a819      	add	r0, sp, #100	; 0x64
 8007846:	f001 fb65 	bl	8008f14 <__match>
 800784a:	2800      	cmp	r0, #0
 800784c:	f43f aecc 	beq.w	80075e8 <_strtod_l+0xa8>
 8007850:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2b28      	cmp	r3, #40	; 0x28
 8007856:	d12f      	bne.n	80078b8 <_strtod_l+0x378>
 8007858:	4995      	ldr	r1, [pc, #596]	; (8007ab0 <_strtod_l+0x570>)
 800785a:	aa1c      	add	r2, sp, #112	; 0x70
 800785c:	a819      	add	r0, sp, #100	; 0x64
 800785e:	f001 fb6d 	bl	8008f3c <__hexnan>
 8007862:	2805      	cmp	r0, #5
 8007864:	d128      	bne.n	80078b8 <_strtod_l+0x378>
 8007866:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007868:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800786c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007870:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007874:	e69d      	b.n	80075b2 <_strtod_l+0x72>
 8007876:	210a      	movs	r1, #10
 8007878:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800787a:	fb01 2107 	mla	r1, r1, r7, r2
 800787e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007882:	9209      	str	r2, [sp, #36]	; 0x24
 8007884:	e7b5      	b.n	80077f2 <_strtod_l+0x2b2>
 8007886:	2a6e      	cmp	r2, #110	; 0x6e
 8007888:	e7d9      	b.n	800783e <_strtod_l+0x2fe>
 800788a:	498a      	ldr	r1, [pc, #552]	; (8007ab4 <_strtod_l+0x574>)
 800788c:	a819      	add	r0, sp, #100	; 0x64
 800788e:	f001 fb41 	bl	8008f14 <__match>
 8007892:	2800      	cmp	r0, #0
 8007894:	f43f aea8 	beq.w	80075e8 <_strtod_l+0xa8>
 8007898:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800789a:	4987      	ldr	r1, [pc, #540]	; (8007ab8 <_strtod_l+0x578>)
 800789c:	3b01      	subs	r3, #1
 800789e:	a819      	add	r0, sp, #100	; 0x64
 80078a0:	9319      	str	r3, [sp, #100]	; 0x64
 80078a2:	f001 fb37 	bl	8008f14 <__match>
 80078a6:	b910      	cbnz	r0, 80078ae <_strtod_l+0x36e>
 80078a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078aa:	3301      	adds	r3, #1
 80078ac:	9319      	str	r3, [sp, #100]	; 0x64
 80078ae:	f04f 0800 	mov.w	r8, #0
 80078b2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007abc <_strtod_l+0x57c>
 80078b6:	e67c      	b.n	80075b2 <_strtod_l+0x72>
 80078b8:	4881      	ldr	r0, [pc, #516]	; (8007ac0 <_strtod_l+0x580>)
 80078ba:	f001 f85f 	bl	800897c <nan>
 80078be:	4680      	mov	r8, r0
 80078c0:	4689      	mov	r9, r1
 80078c2:	e676      	b.n	80075b2 <_strtod_l+0x72>
 80078c4:	9b08      	ldr	r3, [sp, #32]
 80078c6:	f1bb 0f00 	cmp.w	fp, #0
 80078ca:	bf08      	it	eq
 80078cc:	46b3      	moveq	fp, r6
 80078ce:	1afb      	subs	r3, r7, r3
 80078d0:	2e10      	cmp	r6, #16
 80078d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078d4:	4635      	mov	r5, r6
 80078d6:	9309      	str	r3, [sp, #36]	; 0x24
 80078d8:	bfa8      	it	ge
 80078da:	2510      	movge	r5, #16
 80078dc:	f7f8 fe40 	bl	8000560 <__aeabi_ui2d>
 80078e0:	2e09      	cmp	r6, #9
 80078e2:	4680      	mov	r8, r0
 80078e4:	4689      	mov	r9, r1
 80078e6:	dd13      	ble.n	8007910 <_strtod_l+0x3d0>
 80078e8:	4b76      	ldr	r3, [pc, #472]	; (8007ac4 <_strtod_l+0x584>)
 80078ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80078ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80078f2:	f7f8 feaf 	bl	8000654 <__aeabi_dmul>
 80078f6:	4680      	mov	r8, r0
 80078f8:	4650      	mov	r0, sl
 80078fa:	4689      	mov	r9, r1
 80078fc:	f7f8 fe30 	bl	8000560 <__aeabi_ui2d>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4640      	mov	r0, r8
 8007906:	4649      	mov	r1, r9
 8007908:	f7f8 fcee 	bl	80002e8 <__adddf3>
 800790c:	4680      	mov	r8, r0
 800790e:	4689      	mov	r9, r1
 8007910:	2e0f      	cmp	r6, #15
 8007912:	dc36      	bgt.n	8007982 <_strtod_l+0x442>
 8007914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007916:	2b00      	cmp	r3, #0
 8007918:	f43f ae4b 	beq.w	80075b2 <_strtod_l+0x72>
 800791c:	dd22      	ble.n	8007964 <_strtod_l+0x424>
 800791e:	2b16      	cmp	r3, #22
 8007920:	dc09      	bgt.n	8007936 <_strtod_l+0x3f6>
 8007922:	4968      	ldr	r1, [pc, #416]	; (8007ac4 <_strtod_l+0x584>)
 8007924:	4642      	mov	r2, r8
 8007926:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800792a:	464b      	mov	r3, r9
 800792c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007930:	f7f8 fe90 	bl	8000654 <__aeabi_dmul>
 8007934:	e7c3      	b.n	80078be <_strtod_l+0x37e>
 8007936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007938:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800793c:	4293      	cmp	r3, r2
 800793e:	db20      	blt.n	8007982 <_strtod_l+0x442>
 8007940:	4c60      	ldr	r4, [pc, #384]	; (8007ac4 <_strtod_l+0x584>)
 8007942:	f1c6 060f 	rsb	r6, r6, #15
 8007946:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800794a:	4642      	mov	r2, r8
 800794c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007950:	464b      	mov	r3, r9
 8007952:	f7f8 fe7f 	bl	8000654 <__aeabi_dmul>
 8007956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007958:	1b9e      	subs	r6, r3, r6
 800795a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800795e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007962:	e7e5      	b.n	8007930 <_strtod_l+0x3f0>
 8007964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007966:	3316      	adds	r3, #22
 8007968:	db0b      	blt.n	8007982 <_strtod_l+0x442>
 800796a:	9b08      	ldr	r3, [sp, #32]
 800796c:	4640      	mov	r0, r8
 800796e:	1bdf      	subs	r7, r3, r7
 8007970:	4b54      	ldr	r3, [pc, #336]	; (8007ac4 <_strtod_l+0x584>)
 8007972:	4649      	mov	r1, r9
 8007974:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800797c:	f7f8 ff94 	bl	80008a8 <__aeabi_ddiv>
 8007980:	e79d      	b.n	80078be <_strtod_l+0x37e>
 8007982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007984:	1b75      	subs	r5, r6, r5
 8007986:	441d      	add	r5, r3
 8007988:	2d00      	cmp	r5, #0
 800798a:	dd70      	ble.n	8007a6e <_strtod_l+0x52e>
 800798c:	f015 030f 	ands.w	r3, r5, #15
 8007990:	d00a      	beq.n	80079a8 <_strtod_l+0x468>
 8007992:	494c      	ldr	r1, [pc, #304]	; (8007ac4 <_strtod_l+0x584>)
 8007994:	4642      	mov	r2, r8
 8007996:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800799a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800799e:	464b      	mov	r3, r9
 80079a0:	f7f8 fe58 	bl	8000654 <__aeabi_dmul>
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	f035 050f 	bics.w	r5, r5, #15
 80079ac:	d04d      	beq.n	8007a4a <_strtod_l+0x50a>
 80079ae:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80079b2:	dd22      	ble.n	80079fa <_strtod_l+0x4ba>
 80079b4:	2600      	movs	r6, #0
 80079b6:	46b3      	mov	fp, r6
 80079b8:	960b      	str	r6, [sp, #44]	; 0x2c
 80079ba:	9608      	str	r6, [sp, #32]
 80079bc:	2322      	movs	r3, #34	; 0x22
 80079be:	f04f 0800 	mov.w	r8, #0
 80079c2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007abc <_strtod_l+0x57c>
 80079c6:	6023      	str	r3, [r4, #0]
 80079c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f43f adf1 	beq.w	80075b2 <_strtod_l+0x72>
 80079d0:	4620      	mov	r0, r4
 80079d2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079d4:	f7ff f934 	bl	8006c40 <_Bfree>
 80079d8:	4620      	mov	r0, r4
 80079da:	9908      	ldr	r1, [sp, #32]
 80079dc:	f7ff f930 	bl	8006c40 <_Bfree>
 80079e0:	4659      	mov	r1, fp
 80079e2:	4620      	mov	r0, r4
 80079e4:	f7ff f92c 	bl	8006c40 <_Bfree>
 80079e8:	4620      	mov	r0, r4
 80079ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079ec:	f7ff f928 	bl	8006c40 <_Bfree>
 80079f0:	4631      	mov	r1, r6
 80079f2:	4620      	mov	r0, r4
 80079f4:	f7ff f924 	bl	8006c40 <_Bfree>
 80079f8:	e5db      	b.n	80075b2 <_strtod_l+0x72>
 80079fa:	4b33      	ldr	r3, [pc, #204]	; (8007ac8 <_strtod_l+0x588>)
 80079fc:	4640      	mov	r0, r8
 80079fe:	9305      	str	r3, [sp, #20]
 8007a00:	2300      	movs	r3, #0
 8007a02:	4649      	mov	r1, r9
 8007a04:	469a      	mov	sl, r3
 8007a06:	112d      	asrs	r5, r5, #4
 8007a08:	2d01      	cmp	r5, #1
 8007a0a:	dc21      	bgt.n	8007a50 <_strtod_l+0x510>
 8007a0c:	b10b      	cbz	r3, 8007a12 <_strtod_l+0x4d2>
 8007a0e:	4680      	mov	r8, r0
 8007a10:	4689      	mov	r9, r1
 8007a12:	492d      	ldr	r1, [pc, #180]	; (8007ac8 <_strtod_l+0x588>)
 8007a14:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007a18:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007a1c:	4642      	mov	r2, r8
 8007a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a22:	464b      	mov	r3, r9
 8007a24:	f7f8 fe16 	bl	8000654 <__aeabi_dmul>
 8007a28:	4b24      	ldr	r3, [pc, #144]	; (8007abc <_strtod_l+0x57c>)
 8007a2a:	460a      	mov	r2, r1
 8007a2c:	400b      	ands	r3, r1
 8007a2e:	4927      	ldr	r1, [pc, #156]	; (8007acc <_strtod_l+0x58c>)
 8007a30:	4680      	mov	r8, r0
 8007a32:	428b      	cmp	r3, r1
 8007a34:	d8be      	bhi.n	80079b4 <_strtod_l+0x474>
 8007a36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007a3a:	428b      	cmp	r3, r1
 8007a3c:	bf86      	itte	hi
 8007a3e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007a42:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007ad0 <_strtod_l+0x590>
 8007a46:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9305      	str	r3, [sp, #20]
 8007a4e:	e07b      	b.n	8007b48 <_strtod_l+0x608>
 8007a50:	07ea      	lsls	r2, r5, #31
 8007a52:	d505      	bpl.n	8007a60 <_strtod_l+0x520>
 8007a54:	9b05      	ldr	r3, [sp, #20]
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f7f8 fdfb 	bl	8000654 <__aeabi_dmul>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	9a05      	ldr	r2, [sp, #20]
 8007a62:	f10a 0a01 	add.w	sl, sl, #1
 8007a66:	3208      	adds	r2, #8
 8007a68:	106d      	asrs	r5, r5, #1
 8007a6a:	9205      	str	r2, [sp, #20]
 8007a6c:	e7cc      	b.n	8007a08 <_strtod_l+0x4c8>
 8007a6e:	d0ec      	beq.n	8007a4a <_strtod_l+0x50a>
 8007a70:	426d      	negs	r5, r5
 8007a72:	f015 020f 	ands.w	r2, r5, #15
 8007a76:	d00a      	beq.n	8007a8e <_strtod_l+0x54e>
 8007a78:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <_strtod_l+0x584>)
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a80:	4649      	mov	r1, r9
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	f7f8 ff0f 	bl	80008a8 <__aeabi_ddiv>
 8007a8a:	4680      	mov	r8, r0
 8007a8c:	4689      	mov	r9, r1
 8007a8e:	112d      	asrs	r5, r5, #4
 8007a90:	d0db      	beq.n	8007a4a <_strtod_l+0x50a>
 8007a92:	2d1f      	cmp	r5, #31
 8007a94:	dd1e      	ble.n	8007ad4 <_strtod_l+0x594>
 8007a96:	2600      	movs	r6, #0
 8007a98:	46b3      	mov	fp, r6
 8007a9a:	960b      	str	r6, [sp, #44]	; 0x2c
 8007a9c:	9608      	str	r6, [sp, #32]
 8007a9e:	2322      	movs	r3, #34	; 0x22
 8007aa0:	f04f 0800 	mov.w	r8, #0
 8007aa4:	f04f 0900 	mov.w	r9, #0
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	e78d      	b.n	80079c8 <_strtod_l+0x488>
 8007aac:	0800954c 	.word	0x0800954c
 8007ab0:	0800980c 	.word	0x0800980c
 8007ab4:	08009544 	.word	0x08009544
 8007ab8:	08009628 	.word	0x08009628
 8007abc:	7ff00000 	.word	0x7ff00000
 8007ac0:	08009624 	.word	0x08009624
 8007ac4:	08009720 	.word	0x08009720
 8007ac8:	080096f8 	.word	0x080096f8
 8007acc:	7ca00000 	.word	0x7ca00000
 8007ad0:	7fefffff 	.word	0x7fefffff
 8007ad4:	f015 0310 	ands.w	r3, r5, #16
 8007ad8:	bf18      	it	ne
 8007ada:	236a      	movne	r3, #106	; 0x6a
 8007adc:	4640      	mov	r0, r8
 8007ade:	9305      	str	r3, [sp, #20]
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007db0 <_strtod_l+0x870>
 8007ae8:	07ea      	lsls	r2, r5, #31
 8007aea:	d504      	bpl.n	8007af6 <_strtod_l+0x5b6>
 8007aec:	e9da 2300 	ldrd	r2, r3, [sl]
 8007af0:	f7f8 fdb0 	bl	8000654 <__aeabi_dmul>
 8007af4:	2301      	movs	r3, #1
 8007af6:	106d      	asrs	r5, r5, #1
 8007af8:	f10a 0a08 	add.w	sl, sl, #8
 8007afc:	d1f4      	bne.n	8007ae8 <_strtod_l+0x5a8>
 8007afe:	b10b      	cbz	r3, 8007b04 <_strtod_l+0x5c4>
 8007b00:	4680      	mov	r8, r0
 8007b02:	4689      	mov	r9, r1
 8007b04:	9b05      	ldr	r3, [sp, #20]
 8007b06:	b1bb      	cbz	r3, 8007b38 <_strtod_l+0x5f8>
 8007b08:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007b0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	4649      	mov	r1, r9
 8007b14:	dd10      	ble.n	8007b38 <_strtod_l+0x5f8>
 8007b16:	2b1f      	cmp	r3, #31
 8007b18:	f340 8128 	ble.w	8007d6c <_strtod_l+0x82c>
 8007b1c:	2b34      	cmp	r3, #52	; 0x34
 8007b1e:	bfd8      	it	le
 8007b20:	f04f 33ff 	movle.w	r3, #4294967295
 8007b24:	f04f 0800 	mov.w	r8, #0
 8007b28:	bfcf      	iteee	gt
 8007b2a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007b2e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007b32:	4093      	lslle	r3, r2
 8007b34:	ea03 0901 	andle.w	r9, r3, r1
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	4649      	mov	r1, r9
 8007b40:	f7f8 fff0 	bl	8000b24 <__aeabi_dcmpeq>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d1a6      	bne.n	8007a96 <_strtod_l+0x556>
 8007b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b4a:	465a      	mov	r2, fp
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	4620      	mov	r0, r4
 8007b50:	4633      	mov	r3, r6
 8007b52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b54:	f7ff f8dc 	bl	8006d10 <__s2b>
 8007b58:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	f43f af2a 	beq.w	80079b4 <_strtod_l+0x474>
 8007b60:	2600      	movs	r6, #0
 8007b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b64:	9b08      	ldr	r3, [sp, #32]
 8007b66:	2a00      	cmp	r2, #0
 8007b68:	eba3 0307 	sub.w	r3, r3, r7
 8007b6c:	bfa8      	it	ge
 8007b6e:	2300      	movge	r3, #0
 8007b70:	46b3      	mov	fp, r6
 8007b72:	9312      	str	r3, [sp, #72]	; 0x48
 8007b74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007b78:	9316      	str	r3, [sp, #88]	; 0x58
 8007b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	6859      	ldr	r1, [r3, #4]
 8007b80:	f7ff f81e 	bl	8006bc0 <_Balloc>
 8007b84:	9008      	str	r0, [sp, #32]
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f43f af18 	beq.w	80079bc <_strtod_l+0x47c>
 8007b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b8e:	300c      	adds	r0, #12
 8007b90:	691a      	ldr	r2, [r3, #16]
 8007b92:	f103 010c 	add.w	r1, r3, #12
 8007b96:	3202      	adds	r2, #2
 8007b98:	0092      	lsls	r2, r2, #2
 8007b9a:	f000 fee1 	bl	8008960 <memcpy>
 8007b9e:	ab1c      	add	r3, sp, #112	; 0x70
 8007ba0:	9301      	str	r3, [sp, #4]
 8007ba2:	ab1b      	add	r3, sp, #108	; 0x6c
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	464b      	mov	r3, r9
 8007baa:	4620      	mov	r0, r4
 8007bac:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007bb0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007bb4:	f7ff fbd8 	bl	8007368 <__d2b>
 8007bb8:	901a      	str	r0, [sp, #104]	; 0x68
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	f43f aefe 	beq.w	80079bc <_strtod_l+0x47c>
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f7ff f93c 	bl	8006e40 <__i2b>
 8007bc8:	4683      	mov	fp, r0
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f43f aef6 	beq.w	80079bc <_strtod_l+0x47c>
 8007bd0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007bd2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007bd4:	2f00      	cmp	r7, #0
 8007bd6:	bfab      	itete	ge
 8007bd8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007bda:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007bdc:	eb07 0a03 	addge.w	sl, r7, r3
 8007be0:	1bdd      	sublt	r5, r3, r7
 8007be2:	9b05      	ldr	r3, [sp, #20]
 8007be4:	bfa8      	it	ge
 8007be6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007be8:	eba7 0703 	sub.w	r7, r7, r3
 8007bec:	4417      	add	r7, r2
 8007bee:	4b71      	ldr	r3, [pc, #452]	; (8007db4 <_strtod_l+0x874>)
 8007bf0:	f107 37ff 	add.w	r7, r7, #4294967295
 8007bf4:	bfb8      	it	lt
 8007bf6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007bfa:	429f      	cmp	r7, r3
 8007bfc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007c00:	f280 80c7 	bge.w	8007d92 <_strtod_l+0x852>
 8007c04:	1bdb      	subs	r3, r3, r7
 8007c06:	2b1f      	cmp	r3, #31
 8007c08:	f04f 0101 	mov.w	r1, #1
 8007c0c:	eba2 0203 	sub.w	r2, r2, r3
 8007c10:	f300 80b3 	bgt.w	8007d7a <_strtod_l+0x83a>
 8007c14:	fa01 f303 	lsl.w	r3, r1, r3
 8007c18:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	9310      	str	r3, [sp, #64]	; 0x40
 8007c1e:	eb0a 0702 	add.w	r7, sl, r2
 8007c22:	9b05      	ldr	r3, [sp, #20]
 8007c24:	45ba      	cmp	sl, r7
 8007c26:	4415      	add	r5, r2
 8007c28:	441d      	add	r5, r3
 8007c2a:	4653      	mov	r3, sl
 8007c2c:	bfa8      	it	ge
 8007c2e:	463b      	movge	r3, r7
 8007c30:	42ab      	cmp	r3, r5
 8007c32:	bfa8      	it	ge
 8007c34:	462b      	movge	r3, r5
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	bfc2      	ittt	gt
 8007c3a:	1aff      	subgt	r7, r7, r3
 8007c3c:	1aed      	subgt	r5, r5, r3
 8007c3e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007c42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dd17      	ble.n	8007c78 <_strtod_l+0x738>
 8007c48:	4659      	mov	r1, fp
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f7ff f9b5 	bl	8006fbc <__pow5mult>
 8007c52:	4683      	mov	fp, r0
 8007c54:	2800      	cmp	r0, #0
 8007c56:	f43f aeb1 	beq.w	80079bc <_strtod_l+0x47c>
 8007c5a:	4601      	mov	r1, r0
 8007c5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f7ff f904 	bl	8006e6c <__multiply>
 8007c64:	900a      	str	r0, [sp, #40]	; 0x28
 8007c66:	2800      	cmp	r0, #0
 8007c68:	f43f aea8 	beq.w	80079bc <_strtod_l+0x47c>
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007c70:	f7fe ffe6 	bl	8006c40 <_Bfree>
 8007c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c76:	931a      	str	r3, [sp, #104]	; 0x68
 8007c78:	2f00      	cmp	r7, #0
 8007c7a:	f300 808f 	bgt.w	8007d9c <_strtod_l+0x85c>
 8007c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	dd08      	ble.n	8007c96 <_strtod_l+0x756>
 8007c84:	4620      	mov	r0, r4
 8007c86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c88:	9908      	ldr	r1, [sp, #32]
 8007c8a:	f7ff f997 	bl	8006fbc <__pow5mult>
 8007c8e:	9008      	str	r0, [sp, #32]
 8007c90:	2800      	cmp	r0, #0
 8007c92:	f43f ae93 	beq.w	80079bc <_strtod_l+0x47c>
 8007c96:	2d00      	cmp	r5, #0
 8007c98:	dd08      	ble.n	8007cac <_strtod_l+0x76c>
 8007c9a:	462a      	mov	r2, r5
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	9908      	ldr	r1, [sp, #32]
 8007ca0:	f7ff f9e6 	bl	8007070 <__lshift>
 8007ca4:	9008      	str	r0, [sp, #32]
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	f43f ae88 	beq.w	80079bc <_strtod_l+0x47c>
 8007cac:	f1ba 0f00 	cmp.w	sl, #0
 8007cb0:	dd08      	ble.n	8007cc4 <_strtod_l+0x784>
 8007cb2:	4659      	mov	r1, fp
 8007cb4:	4652      	mov	r2, sl
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7ff f9da 	bl	8007070 <__lshift>
 8007cbc:	4683      	mov	fp, r0
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	f43f ae7c 	beq.w	80079bc <_strtod_l+0x47c>
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	9a08      	ldr	r2, [sp, #32]
 8007cc8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007cca:	f7ff fa59 	bl	8007180 <__mdiff>
 8007cce:	4606      	mov	r6, r0
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	f43f ae73 	beq.w	80079bc <_strtod_l+0x47c>
 8007cd6:	2500      	movs	r5, #0
 8007cd8:	68c3      	ldr	r3, [r0, #12]
 8007cda:	4659      	mov	r1, fp
 8007cdc:	60c5      	str	r5, [r0, #12]
 8007cde:	930a      	str	r3, [sp, #40]	; 0x28
 8007ce0:	f7ff fa32 	bl	8007148 <__mcmp>
 8007ce4:	42a8      	cmp	r0, r5
 8007ce6:	da6b      	bge.n	8007dc0 <_strtod_l+0x880>
 8007ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cea:	ea53 0308 	orrs.w	r3, r3, r8
 8007cee:	f040 808f 	bne.w	8007e10 <_strtod_l+0x8d0>
 8007cf2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f040 808a 	bne.w	8007e10 <_strtod_l+0x8d0>
 8007cfc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d00:	0d1b      	lsrs	r3, r3, #20
 8007d02:	051b      	lsls	r3, r3, #20
 8007d04:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007d08:	f240 8082 	bls.w	8007e10 <_strtod_l+0x8d0>
 8007d0c:	6973      	ldr	r3, [r6, #20]
 8007d0e:	b913      	cbnz	r3, 8007d16 <_strtod_l+0x7d6>
 8007d10:	6933      	ldr	r3, [r6, #16]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	dd7c      	ble.n	8007e10 <_strtod_l+0x8d0>
 8007d16:	4631      	mov	r1, r6
 8007d18:	2201      	movs	r2, #1
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f7ff f9a8 	bl	8007070 <__lshift>
 8007d20:	4659      	mov	r1, fp
 8007d22:	4606      	mov	r6, r0
 8007d24:	f7ff fa10 	bl	8007148 <__mcmp>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	dd71      	ble.n	8007e10 <_strtod_l+0x8d0>
 8007d2c:	9905      	ldr	r1, [sp, #20]
 8007d2e:	464b      	mov	r3, r9
 8007d30:	4a21      	ldr	r2, [pc, #132]	; (8007db8 <_strtod_l+0x878>)
 8007d32:	2900      	cmp	r1, #0
 8007d34:	f000 808d 	beq.w	8007e52 <_strtod_l+0x912>
 8007d38:	ea02 0109 	and.w	r1, r2, r9
 8007d3c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007d40:	f300 8087 	bgt.w	8007e52 <_strtod_l+0x912>
 8007d44:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007d48:	f77f aea9 	ble.w	8007a9e <_strtod_l+0x55e>
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	4649      	mov	r1, r9
 8007d50:	4b1a      	ldr	r3, [pc, #104]	; (8007dbc <_strtod_l+0x87c>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	f7f8 fc7e 	bl	8000654 <__aeabi_dmul>
 8007d58:	4b17      	ldr	r3, [pc, #92]	; (8007db8 <_strtod_l+0x878>)
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	400b      	ands	r3, r1
 8007d5e:	4689      	mov	r9, r1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f47f ae35 	bne.w	80079d0 <_strtod_l+0x490>
 8007d66:	2322      	movs	r3, #34	; 0x22
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	e631      	b.n	80079d0 <_strtod_l+0x490>
 8007d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d70:	fa02 f303 	lsl.w	r3, r2, r3
 8007d74:	ea03 0808 	and.w	r8, r3, r8
 8007d78:	e6de      	b.n	8007b38 <_strtod_l+0x5f8>
 8007d7a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007d7e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007d82:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007d86:	37e2      	adds	r7, #226	; 0xe2
 8007d88:	fa01 f307 	lsl.w	r3, r1, r7
 8007d8c:	9310      	str	r3, [sp, #64]	; 0x40
 8007d8e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007d90:	e745      	b.n	8007c1e <_strtod_l+0x6de>
 8007d92:	2300      	movs	r3, #0
 8007d94:	9310      	str	r3, [sp, #64]	; 0x40
 8007d96:	2301      	movs	r3, #1
 8007d98:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d9a:	e740      	b.n	8007c1e <_strtod_l+0x6de>
 8007d9c:	463a      	mov	r2, r7
 8007d9e:	4620      	mov	r0, r4
 8007da0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007da2:	f7ff f965 	bl	8007070 <__lshift>
 8007da6:	901a      	str	r0, [sp, #104]	; 0x68
 8007da8:	2800      	cmp	r0, #0
 8007daa:	f47f af68 	bne.w	8007c7e <_strtod_l+0x73e>
 8007dae:	e605      	b.n	80079bc <_strtod_l+0x47c>
 8007db0:	08009820 	.word	0x08009820
 8007db4:	fffffc02 	.word	0xfffffc02
 8007db8:	7ff00000 	.word	0x7ff00000
 8007dbc:	39500000 	.word	0x39500000
 8007dc0:	46ca      	mov	sl, r9
 8007dc2:	d165      	bne.n	8007e90 <_strtod_l+0x950>
 8007dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dca:	b352      	cbz	r2, 8007e22 <_strtod_l+0x8e2>
 8007dcc:	4a9e      	ldr	r2, [pc, #632]	; (8008048 <_strtod_l+0xb08>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d12a      	bne.n	8007e28 <_strtod_l+0x8e8>
 8007dd2:	9b05      	ldr	r3, [sp, #20]
 8007dd4:	4641      	mov	r1, r8
 8007dd6:	b1fb      	cbz	r3, 8007e18 <_strtod_l+0x8d8>
 8007dd8:	4b9c      	ldr	r3, [pc, #624]	; (800804c <_strtod_l+0xb0c>)
 8007dda:	f04f 32ff 	mov.w	r2, #4294967295
 8007dde:	ea09 0303 	and.w	r3, r9, r3
 8007de2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007de6:	d81a      	bhi.n	8007e1e <_strtod_l+0x8de>
 8007de8:	0d1b      	lsrs	r3, r3, #20
 8007dea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007dee:	fa02 f303 	lsl.w	r3, r2, r3
 8007df2:	4299      	cmp	r1, r3
 8007df4:	d118      	bne.n	8007e28 <_strtod_l+0x8e8>
 8007df6:	4b96      	ldr	r3, [pc, #600]	; (8008050 <_strtod_l+0xb10>)
 8007df8:	459a      	cmp	sl, r3
 8007dfa:	d102      	bne.n	8007e02 <_strtod_l+0x8c2>
 8007dfc:	3101      	adds	r1, #1
 8007dfe:	f43f addd 	beq.w	80079bc <_strtod_l+0x47c>
 8007e02:	f04f 0800 	mov.w	r8, #0
 8007e06:	4b91      	ldr	r3, [pc, #580]	; (800804c <_strtod_l+0xb0c>)
 8007e08:	ea0a 0303 	and.w	r3, sl, r3
 8007e0c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007e10:	9b05      	ldr	r3, [sp, #20]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d19a      	bne.n	8007d4c <_strtod_l+0x80c>
 8007e16:	e5db      	b.n	80079d0 <_strtod_l+0x490>
 8007e18:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1c:	e7e9      	b.n	8007df2 <_strtod_l+0x8b2>
 8007e1e:	4613      	mov	r3, r2
 8007e20:	e7e7      	b.n	8007df2 <_strtod_l+0x8b2>
 8007e22:	ea53 0308 	orrs.w	r3, r3, r8
 8007e26:	d081      	beq.n	8007d2c <_strtod_l+0x7ec>
 8007e28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e2a:	b1e3      	cbz	r3, 8007e66 <_strtod_l+0x926>
 8007e2c:	ea13 0f0a 	tst.w	r3, sl
 8007e30:	d0ee      	beq.n	8007e10 <_strtod_l+0x8d0>
 8007e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e34:	4640      	mov	r0, r8
 8007e36:	4649      	mov	r1, r9
 8007e38:	9a05      	ldr	r2, [sp, #20]
 8007e3a:	b1c3      	cbz	r3, 8007e6e <_strtod_l+0x92e>
 8007e3c:	f7ff fb5c 	bl	80074f8 <sulp>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007e46:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e48:	f7f8 fa4e 	bl	80002e8 <__adddf3>
 8007e4c:	4680      	mov	r8, r0
 8007e4e:	4689      	mov	r9, r1
 8007e50:	e7de      	b.n	8007e10 <_strtod_l+0x8d0>
 8007e52:	4013      	ands	r3, r2
 8007e54:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007e58:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007e5c:	f04f 38ff 	mov.w	r8, #4294967295
 8007e60:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007e64:	e7d4      	b.n	8007e10 <_strtod_l+0x8d0>
 8007e66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e68:	ea13 0f08 	tst.w	r3, r8
 8007e6c:	e7e0      	b.n	8007e30 <_strtod_l+0x8f0>
 8007e6e:	f7ff fb43 	bl	80074f8 <sulp>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007e78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e7a:	f7f8 fa33 	bl	80002e4 <__aeabi_dsub>
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2300      	movs	r3, #0
 8007e82:	4680      	mov	r8, r0
 8007e84:	4689      	mov	r9, r1
 8007e86:	f7f8 fe4d 	bl	8000b24 <__aeabi_dcmpeq>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d0c0      	beq.n	8007e10 <_strtod_l+0x8d0>
 8007e8e:	e606      	b.n	8007a9e <_strtod_l+0x55e>
 8007e90:	4659      	mov	r1, fp
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7ff fabe 	bl	8007414 <__ratio>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ea6:	f7f8 fe51 	bl	8000b4c <__aeabi_dcmple>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d06f      	beq.n	8007f8e <_strtod_l+0xa4e>
 8007eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d17c      	bne.n	8007fae <_strtod_l+0xa6e>
 8007eb4:	f1b8 0f00 	cmp.w	r8, #0
 8007eb8:	d159      	bne.n	8007f6e <_strtod_l+0xa2e>
 8007eba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d17b      	bne.n	8007fba <_strtod_l+0xa7a>
 8007ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	4b62      	ldr	r3, [pc, #392]	; (8008054 <_strtod_l+0xb14>)
 8007eca:	f7f8 fe35 	bl	8000b38 <__aeabi_dcmplt>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d15a      	bne.n	8007f88 <_strtod_l+0xa48>
 8007ed2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	4b5f      	ldr	r3, [pc, #380]	; (8008058 <_strtod_l+0xb18>)
 8007eda:	f7f8 fbbb 	bl	8000654 <__aeabi_dmul>
 8007ede:	4605      	mov	r5, r0
 8007ee0:	460f      	mov	r7, r1
 8007ee2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007ee6:	9506      	str	r5, [sp, #24]
 8007ee8:	9307      	str	r3, [sp, #28]
 8007eea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eee:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007ef2:	4b56      	ldr	r3, [pc, #344]	; (800804c <_strtod_l+0xb0c>)
 8007ef4:	4a55      	ldr	r2, [pc, #340]	; (800804c <_strtod_l+0xb0c>)
 8007ef6:	ea0a 0303 	and.w	r3, sl, r3
 8007efa:	9313      	str	r3, [sp, #76]	; 0x4c
 8007efc:	4b57      	ldr	r3, [pc, #348]	; (800805c <_strtod_l+0xb1c>)
 8007efe:	ea0a 0202 	and.w	r2, sl, r2
 8007f02:	429a      	cmp	r2, r3
 8007f04:	f040 80b0 	bne.w	8008068 <_strtod_l+0xb28>
 8007f08:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	4649      	mov	r1, r9
 8007f10:	f7ff f9c2 	bl	8007298 <__ulp>
 8007f14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f18:	f7f8 fb9c 	bl	8000654 <__aeabi_dmul>
 8007f1c:	4642      	mov	r2, r8
 8007f1e:	464b      	mov	r3, r9
 8007f20:	f7f8 f9e2 	bl	80002e8 <__adddf3>
 8007f24:	f8df a124 	ldr.w	sl, [pc, #292]	; 800804c <_strtod_l+0xb0c>
 8007f28:	4a4d      	ldr	r2, [pc, #308]	; (8008060 <_strtod_l+0xb20>)
 8007f2a:	ea01 0a0a 	and.w	sl, r1, sl
 8007f2e:	4592      	cmp	sl, r2
 8007f30:	4680      	mov	r8, r0
 8007f32:	d948      	bls.n	8007fc6 <_strtod_l+0xa86>
 8007f34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f36:	4b46      	ldr	r3, [pc, #280]	; (8008050 <_strtod_l+0xb10>)
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d103      	bne.n	8007f44 <_strtod_l+0xa04>
 8007f3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f3e:	3301      	adds	r3, #1
 8007f40:	f43f ad3c 	beq.w	80079bc <_strtod_l+0x47c>
 8007f44:	f04f 38ff 	mov.w	r8, #4294967295
 8007f48:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008050 <_strtod_l+0xb10>
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f50:	f7fe fe76 	bl	8006c40 <_Bfree>
 8007f54:	4620      	mov	r0, r4
 8007f56:	9908      	ldr	r1, [sp, #32]
 8007f58:	f7fe fe72 	bl	8006c40 <_Bfree>
 8007f5c:	4659      	mov	r1, fp
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f7fe fe6e 	bl	8006c40 <_Bfree>
 8007f64:	4631      	mov	r1, r6
 8007f66:	4620      	mov	r0, r4
 8007f68:	f7fe fe6a 	bl	8006c40 <_Bfree>
 8007f6c:	e605      	b.n	8007b7a <_strtod_l+0x63a>
 8007f6e:	f1b8 0f01 	cmp.w	r8, #1
 8007f72:	d103      	bne.n	8007f7c <_strtod_l+0xa3c>
 8007f74:	f1b9 0f00 	cmp.w	r9, #0
 8007f78:	f43f ad91 	beq.w	8007a9e <_strtod_l+0x55e>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	4b39      	ldr	r3, [pc, #228]	; (8008064 <_strtod_l+0xb24>)
 8007f80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007f82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f86:	e016      	b.n	8007fb6 <_strtod_l+0xa76>
 8007f88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007f8a:	4f33      	ldr	r7, [pc, #204]	; (8008058 <_strtod_l+0xb18>)
 8007f8c:	e7a9      	b.n	8007ee2 <_strtod_l+0x9a2>
 8007f8e:	4b32      	ldr	r3, [pc, #200]	; (8008058 <_strtod_l+0xb18>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f96:	f7f8 fb5d 	bl	8000654 <__aeabi_dmul>
 8007f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9c:	4605      	mov	r5, r0
 8007f9e:	460f      	mov	r7, r1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d09e      	beq.n	8007ee2 <_strtod_l+0x9a2>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007fac:	e79d      	b.n	8007eea <_strtod_l+0x9aa>
 8007fae:	2200      	movs	r2, #0
 8007fb0:	4b28      	ldr	r3, [pc, #160]	; (8008054 <_strtod_l+0xb14>)
 8007fb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007fb6:	4f27      	ldr	r7, [pc, #156]	; (8008054 <_strtod_l+0xb14>)
 8007fb8:	e797      	b.n	8007eea <_strtod_l+0x9aa>
 8007fba:	2200      	movs	r2, #0
 8007fbc:	4b29      	ldr	r3, [pc, #164]	; (8008064 <_strtod_l+0xb24>)
 8007fbe:	4645      	mov	r5, r8
 8007fc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007fc4:	e7f7      	b.n	8007fb6 <_strtod_l+0xa76>
 8007fc6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007fca:	9b05      	ldr	r3, [sp, #20]
 8007fcc:	46ca      	mov	sl, r9
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1bc      	bne.n	8007f4c <_strtod_l+0xa0c>
 8007fd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007fd6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007fd8:	0d1b      	lsrs	r3, r3, #20
 8007fda:	051b      	lsls	r3, r3, #20
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d1b5      	bne.n	8007f4c <_strtod_l+0xa0c>
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	f7f9 f802 	bl	8000fec <__aeabi_d2lz>
 8007fe8:	f7f8 fb06 	bl	80005f8 <__aeabi_l2d>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	f7f8 f976 	bl	80002e4 <__aeabi_dsub>
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8008000:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008006:	ea4a 0a08 	orr.w	sl, sl, r8
 800800a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800800e:	d06c      	beq.n	80080ea <_strtod_l+0xbaa>
 8008010:	a309      	add	r3, pc, #36	; (adr r3, 8008038 <_strtod_l+0xaf8>)
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	f7f8 fd8f 	bl	8000b38 <__aeabi_dcmplt>
 800801a:	2800      	cmp	r0, #0
 800801c:	f47f acd8 	bne.w	80079d0 <_strtod_l+0x490>
 8008020:	a307      	add	r3, pc, #28	; (adr r3, 8008040 <_strtod_l+0xb00>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800802a:	f7f8 fda3 	bl	8000b74 <__aeabi_dcmpgt>
 800802e:	2800      	cmp	r0, #0
 8008030:	d08c      	beq.n	8007f4c <_strtod_l+0xa0c>
 8008032:	e4cd      	b.n	80079d0 <_strtod_l+0x490>
 8008034:	f3af 8000 	nop.w
 8008038:	94a03595 	.word	0x94a03595
 800803c:	3fdfffff 	.word	0x3fdfffff
 8008040:	35afe535 	.word	0x35afe535
 8008044:	3fe00000 	.word	0x3fe00000
 8008048:	000fffff 	.word	0x000fffff
 800804c:	7ff00000 	.word	0x7ff00000
 8008050:	7fefffff 	.word	0x7fefffff
 8008054:	3ff00000 	.word	0x3ff00000
 8008058:	3fe00000 	.word	0x3fe00000
 800805c:	7fe00000 	.word	0x7fe00000
 8008060:	7c9fffff 	.word	0x7c9fffff
 8008064:	bff00000 	.word	0xbff00000
 8008068:	9b05      	ldr	r3, [sp, #20]
 800806a:	b333      	cbz	r3, 80080ba <_strtod_l+0xb7a>
 800806c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800806e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008072:	d822      	bhi.n	80080ba <_strtod_l+0xb7a>
 8008074:	a328      	add	r3, pc, #160	; (adr r3, 8008118 <_strtod_l+0xbd8>)
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	4628      	mov	r0, r5
 800807c:	4639      	mov	r1, r7
 800807e:	f7f8 fd65 	bl	8000b4c <__aeabi_dcmple>
 8008082:	b1a0      	cbz	r0, 80080ae <_strtod_l+0xb6e>
 8008084:	4639      	mov	r1, r7
 8008086:	4628      	mov	r0, r5
 8008088:	f7f8 fdbc 	bl	8000c04 <__aeabi_d2uiz>
 800808c:	2801      	cmp	r0, #1
 800808e:	bf38      	it	cc
 8008090:	2001      	movcc	r0, #1
 8008092:	f7f8 fa65 	bl	8000560 <__aeabi_ui2d>
 8008096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008098:	4605      	mov	r5, r0
 800809a:	460f      	mov	r7, r1
 800809c:	bb03      	cbnz	r3, 80080e0 <_strtod_l+0xba0>
 800809e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080a2:	9014      	str	r0, [sp, #80]	; 0x50
 80080a4:	9315      	str	r3, [sp, #84]	; 0x54
 80080a6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80080aa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80080ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80080b2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80080b6:	1a9b      	subs	r3, r3, r2
 80080b8:	9311      	str	r3, [sp, #68]	; 0x44
 80080ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80080bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80080be:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80080c2:	f7ff f8e9 	bl	8007298 <__ulp>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4640      	mov	r0, r8
 80080cc:	4649      	mov	r1, r9
 80080ce:	f7f8 fac1 	bl	8000654 <__aeabi_dmul>
 80080d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080d6:	f7f8 f907 	bl	80002e8 <__adddf3>
 80080da:	4680      	mov	r8, r0
 80080dc:	4689      	mov	r9, r1
 80080de:	e774      	b.n	8007fca <_strtod_l+0xa8a>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80080e8:	e7dd      	b.n	80080a6 <_strtod_l+0xb66>
 80080ea:	a30d      	add	r3, pc, #52	; (adr r3, 8008120 <_strtod_l+0xbe0>)
 80080ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f0:	f7f8 fd22 	bl	8000b38 <__aeabi_dcmplt>
 80080f4:	e79b      	b.n	800802e <_strtod_l+0xaee>
 80080f6:	2300      	movs	r3, #0
 80080f8:	930e      	str	r3, [sp, #56]	; 0x38
 80080fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	f7ff ba5b 	b.w	80075ba <_strtod_l+0x7a>
 8008104:	2a65      	cmp	r2, #101	; 0x65
 8008106:	f43f ab52 	beq.w	80077ae <_strtod_l+0x26e>
 800810a:	2a45      	cmp	r2, #69	; 0x45
 800810c:	f43f ab4f 	beq.w	80077ae <_strtod_l+0x26e>
 8008110:	2301      	movs	r3, #1
 8008112:	f7ff bb87 	b.w	8007824 <_strtod_l+0x2e4>
 8008116:	bf00      	nop
 8008118:	ffc00000 	.word	0xffc00000
 800811c:	41dfffff 	.word	0x41dfffff
 8008120:	94a03595 	.word	0x94a03595
 8008124:	3fcfffff 	.word	0x3fcfffff

08008128 <_strtod_r>:
 8008128:	4b01      	ldr	r3, [pc, #4]	; (8008130 <_strtod_r+0x8>)
 800812a:	f7ff ba09 	b.w	8007540 <_strtod_l>
 800812e:	bf00      	nop
 8008130:	2000006c 	.word	0x2000006c

08008134 <__ssputs_r>:
 8008134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	461f      	mov	r7, r3
 800813a:	688e      	ldr	r6, [r1, #8]
 800813c:	4682      	mov	sl, r0
 800813e:	42be      	cmp	r6, r7
 8008140:	460c      	mov	r4, r1
 8008142:	4690      	mov	r8, r2
 8008144:	680b      	ldr	r3, [r1, #0]
 8008146:	d82c      	bhi.n	80081a2 <__ssputs_r+0x6e>
 8008148:	898a      	ldrh	r2, [r1, #12]
 800814a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800814e:	d026      	beq.n	800819e <__ssputs_r+0x6a>
 8008150:	6965      	ldr	r5, [r4, #20]
 8008152:	6909      	ldr	r1, [r1, #16]
 8008154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008158:	eba3 0901 	sub.w	r9, r3, r1
 800815c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008160:	1c7b      	adds	r3, r7, #1
 8008162:	444b      	add	r3, r9
 8008164:	106d      	asrs	r5, r5, #1
 8008166:	429d      	cmp	r5, r3
 8008168:	bf38      	it	cc
 800816a:	461d      	movcc	r5, r3
 800816c:	0553      	lsls	r3, r2, #21
 800816e:	d527      	bpl.n	80081c0 <__ssputs_r+0x8c>
 8008170:	4629      	mov	r1, r5
 8008172:	f7fe fc99 	bl	8006aa8 <_malloc_r>
 8008176:	4606      	mov	r6, r0
 8008178:	b360      	cbz	r0, 80081d4 <__ssputs_r+0xa0>
 800817a:	464a      	mov	r2, r9
 800817c:	6921      	ldr	r1, [r4, #16]
 800817e:	f000 fbef 	bl	8008960 <memcpy>
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800818c:	81a3      	strh	r3, [r4, #12]
 800818e:	6126      	str	r6, [r4, #16]
 8008190:	444e      	add	r6, r9
 8008192:	6026      	str	r6, [r4, #0]
 8008194:	463e      	mov	r6, r7
 8008196:	6165      	str	r5, [r4, #20]
 8008198:	eba5 0509 	sub.w	r5, r5, r9
 800819c:	60a5      	str	r5, [r4, #8]
 800819e:	42be      	cmp	r6, r7
 80081a0:	d900      	bls.n	80081a4 <__ssputs_r+0x70>
 80081a2:	463e      	mov	r6, r7
 80081a4:	4632      	mov	r2, r6
 80081a6:	4641      	mov	r1, r8
 80081a8:	6820      	ldr	r0, [r4, #0]
 80081aa:	f000 fb7a 	bl	80088a2 <memmove>
 80081ae:	2000      	movs	r0, #0
 80081b0:	68a3      	ldr	r3, [r4, #8]
 80081b2:	1b9b      	subs	r3, r3, r6
 80081b4:	60a3      	str	r3, [r4, #8]
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	4433      	add	r3, r6
 80081ba:	6023      	str	r3, [r4, #0]
 80081bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c0:	462a      	mov	r2, r5
 80081c2:	f000 ff68 	bl	8009096 <_realloc_r>
 80081c6:	4606      	mov	r6, r0
 80081c8:	2800      	cmp	r0, #0
 80081ca:	d1e0      	bne.n	800818e <__ssputs_r+0x5a>
 80081cc:	4650      	mov	r0, sl
 80081ce:	6921      	ldr	r1, [r4, #16]
 80081d0:	f7fe fbfa 	bl	80069c8 <_free_r>
 80081d4:	230c      	movs	r3, #12
 80081d6:	f8ca 3000 	str.w	r3, [sl]
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e4:	81a3      	strh	r3, [r4, #12]
 80081e6:	e7e9      	b.n	80081bc <__ssputs_r+0x88>

080081e8 <_svfiprintf_r>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	4698      	mov	r8, r3
 80081ee:	898b      	ldrh	r3, [r1, #12]
 80081f0:	4607      	mov	r7, r0
 80081f2:	061b      	lsls	r3, r3, #24
 80081f4:	460d      	mov	r5, r1
 80081f6:	4614      	mov	r4, r2
 80081f8:	b09d      	sub	sp, #116	; 0x74
 80081fa:	d50e      	bpl.n	800821a <_svfiprintf_r+0x32>
 80081fc:	690b      	ldr	r3, [r1, #16]
 80081fe:	b963      	cbnz	r3, 800821a <_svfiprintf_r+0x32>
 8008200:	2140      	movs	r1, #64	; 0x40
 8008202:	f7fe fc51 	bl	8006aa8 <_malloc_r>
 8008206:	6028      	str	r0, [r5, #0]
 8008208:	6128      	str	r0, [r5, #16]
 800820a:	b920      	cbnz	r0, 8008216 <_svfiprintf_r+0x2e>
 800820c:	230c      	movs	r3, #12
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	f04f 30ff 	mov.w	r0, #4294967295
 8008214:	e0d0      	b.n	80083b8 <_svfiprintf_r+0x1d0>
 8008216:	2340      	movs	r3, #64	; 0x40
 8008218:	616b      	str	r3, [r5, #20]
 800821a:	2300      	movs	r3, #0
 800821c:	9309      	str	r3, [sp, #36]	; 0x24
 800821e:	2320      	movs	r3, #32
 8008220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008224:	2330      	movs	r3, #48	; 0x30
 8008226:	f04f 0901 	mov.w	r9, #1
 800822a:	f8cd 800c 	str.w	r8, [sp, #12]
 800822e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80083d0 <_svfiprintf_r+0x1e8>
 8008232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008236:	4623      	mov	r3, r4
 8008238:	469a      	mov	sl, r3
 800823a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800823e:	b10a      	cbz	r2, 8008244 <_svfiprintf_r+0x5c>
 8008240:	2a25      	cmp	r2, #37	; 0x25
 8008242:	d1f9      	bne.n	8008238 <_svfiprintf_r+0x50>
 8008244:	ebba 0b04 	subs.w	fp, sl, r4
 8008248:	d00b      	beq.n	8008262 <_svfiprintf_r+0x7a>
 800824a:	465b      	mov	r3, fp
 800824c:	4622      	mov	r2, r4
 800824e:	4629      	mov	r1, r5
 8008250:	4638      	mov	r0, r7
 8008252:	f7ff ff6f 	bl	8008134 <__ssputs_r>
 8008256:	3001      	adds	r0, #1
 8008258:	f000 80a9 	beq.w	80083ae <_svfiprintf_r+0x1c6>
 800825c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800825e:	445a      	add	r2, fp
 8008260:	9209      	str	r2, [sp, #36]	; 0x24
 8008262:	f89a 3000 	ldrb.w	r3, [sl]
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 80a1 	beq.w	80083ae <_svfiprintf_r+0x1c6>
 800826c:	2300      	movs	r3, #0
 800826e:	f04f 32ff 	mov.w	r2, #4294967295
 8008272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008276:	f10a 0a01 	add.w	sl, sl, #1
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	9307      	str	r3, [sp, #28]
 800827e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008282:	931a      	str	r3, [sp, #104]	; 0x68
 8008284:	4654      	mov	r4, sl
 8008286:	2205      	movs	r2, #5
 8008288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828c:	4850      	ldr	r0, [pc, #320]	; (80083d0 <_svfiprintf_r+0x1e8>)
 800828e:	f7fd fcfb 	bl	8005c88 <memchr>
 8008292:	9a04      	ldr	r2, [sp, #16]
 8008294:	b9d8      	cbnz	r0, 80082ce <_svfiprintf_r+0xe6>
 8008296:	06d0      	lsls	r0, r2, #27
 8008298:	bf44      	itt	mi
 800829a:	2320      	movmi	r3, #32
 800829c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a0:	0711      	lsls	r1, r2, #28
 80082a2:	bf44      	itt	mi
 80082a4:	232b      	movmi	r3, #43	; 0x2b
 80082a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082aa:	f89a 3000 	ldrb.w	r3, [sl]
 80082ae:	2b2a      	cmp	r3, #42	; 0x2a
 80082b0:	d015      	beq.n	80082de <_svfiprintf_r+0xf6>
 80082b2:	4654      	mov	r4, sl
 80082b4:	2000      	movs	r0, #0
 80082b6:	f04f 0c0a 	mov.w	ip, #10
 80082ba:	9a07      	ldr	r2, [sp, #28]
 80082bc:	4621      	mov	r1, r4
 80082be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082c2:	3b30      	subs	r3, #48	; 0x30
 80082c4:	2b09      	cmp	r3, #9
 80082c6:	d94d      	bls.n	8008364 <_svfiprintf_r+0x17c>
 80082c8:	b1b0      	cbz	r0, 80082f8 <_svfiprintf_r+0x110>
 80082ca:	9207      	str	r2, [sp, #28]
 80082cc:	e014      	b.n	80082f8 <_svfiprintf_r+0x110>
 80082ce:	eba0 0308 	sub.w	r3, r0, r8
 80082d2:	fa09 f303 	lsl.w	r3, r9, r3
 80082d6:	4313      	orrs	r3, r2
 80082d8:	46a2      	mov	sl, r4
 80082da:	9304      	str	r3, [sp, #16]
 80082dc:	e7d2      	b.n	8008284 <_svfiprintf_r+0x9c>
 80082de:	9b03      	ldr	r3, [sp, #12]
 80082e0:	1d19      	adds	r1, r3, #4
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	9103      	str	r1, [sp, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bfbb      	ittet	lt
 80082ea:	425b      	neglt	r3, r3
 80082ec:	f042 0202 	orrlt.w	r2, r2, #2
 80082f0:	9307      	strge	r3, [sp, #28]
 80082f2:	9307      	strlt	r3, [sp, #28]
 80082f4:	bfb8      	it	lt
 80082f6:	9204      	strlt	r2, [sp, #16]
 80082f8:	7823      	ldrb	r3, [r4, #0]
 80082fa:	2b2e      	cmp	r3, #46	; 0x2e
 80082fc:	d10c      	bne.n	8008318 <_svfiprintf_r+0x130>
 80082fe:	7863      	ldrb	r3, [r4, #1]
 8008300:	2b2a      	cmp	r3, #42	; 0x2a
 8008302:	d134      	bne.n	800836e <_svfiprintf_r+0x186>
 8008304:	9b03      	ldr	r3, [sp, #12]
 8008306:	3402      	adds	r4, #2
 8008308:	1d1a      	adds	r2, r3, #4
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	9203      	str	r2, [sp, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	bfb8      	it	lt
 8008312:	f04f 33ff 	movlt.w	r3, #4294967295
 8008316:	9305      	str	r3, [sp, #20]
 8008318:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80083d4 <_svfiprintf_r+0x1ec>
 800831c:	2203      	movs	r2, #3
 800831e:	4650      	mov	r0, sl
 8008320:	7821      	ldrb	r1, [r4, #0]
 8008322:	f7fd fcb1 	bl	8005c88 <memchr>
 8008326:	b138      	cbz	r0, 8008338 <_svfiprintf_r+0x150>
 8008328:	2240      	movs	r2, #64	; 0x40
 800832a:	9b04      	ldr	r3, [sp, #16]
 800832c:	eba0 000a 	sub.w	r0, r0, sl
 8008330:	4082      	lsls	r2, r0
 8008332:	4313      	orrs	r3, r2
 8008334:	3401      	adds	r4, #1
 8008336:	9304      	str	r3, [sp, #16]
 8008338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800833c:	2206      	movs	r2, #6
 800833e:	4826      	ldr	r0, [pc, #152]	; (80083d8 <_svfiprintf_r+0x1f0>)
 8008340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008344:	f7fd fca0 	bl	8005c88 <memchr>
 8008348:	2800      	cmp	r0, #0
 800834a:	d038      	beq.n	80083be <_svfiprintf_r+0x1d6>
 800834c:	4b23      	ldr	r3, [pc, #140]	; (80083dc <_svfiprintf_r+0x1f4>)
 800834e:	bb1b      	cbnz	r3, 8008398 <_svfiprintf_r+0x1b0>
 8008350:	9b03      	ldr	r3, [sp, #12]
 8008352:	3307      	adds	r3, #7
 8008354:	f023 0307 	bic.w	r3, r3, #7
 8008358:	3308      	adds	r3, #8
 800835a:	9303      	str	r3, [sp, #12]
 800835c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835e:	4433      	add	r3, r6
 8008360:	9309      	str	r3, [sp, #36]	; 0x24
 8008362:	e768      	b.n	8008236 <_svfiprintf_r+0x4e>
 8008364:	460c      	mov	r4, r1
 8008366:	2001      	movs	r0, #1
 8008368:	fb0c 3202 	mla	r2, ip, r2, r3
 800836c:	e7a6      	b.n	80082bc <_svfiprintf_r+0xd4>
 800836e:	2300      	movs	r3, #0
 8008370:	f04f 0c0a 	mov.w	ip, #10
 8008374:	4619      	mov	r1, r3
 8008376:	3401      	adds	r4, #1
 8008378:	9305      	str	r3, [sp, #20]
 800837a:	4620      	mov	r0, r4
 800837c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008380:	3a30      	subs	r2, #48	; 0x30
 8008382:	2a09      	cmp	r2, #9
 8008384:	d903      	bls.n	800838e <_svfiprintf_r+0x1a6>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0c6      	beq.n	8008318 <_svfiprintf_r+0x130>
 800838a:	9105      	str	r1, [sp, #20]
 800838c:	e7c4      	b.n	8008318 <_svfiprintf_r+0x130>
 800838e:	4604      	mov	r4, r0
 8008390:	2301      	movs	r3, #1
 8008392:	fb0c 2101 	mla	r1, ip, r1, r2
 8008396:	e7f0      	b.n	800837a <_svfiprintf_r+0x192>
 8008398:	ab03      	add	r3, sp, #12
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	462a      	mov	r2, r5
 800839e:	4638      	mov	r0, r7
 80083a0:	4b0f      	ldr	r3, [pc, #60]	; (80083e0 <_svfiprintf_r+0x1f8>)
 80083a2:	a904      	add	r1, sp, #16
 80083a4:	f7fc fbb0 	bl	8004b08 <_printf_float>
 80083a8:	1c42      	adds	r2, r0, #1
 80083aa:	4606      	mov	r6, r0
 80083ac:	d1d6      	bne.n	800835c <_svfiprintf_r+0x174>
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	065b      	lsls	r3, r3, #25
 80083b2:	f53f af2d 	bmi.w	8008210 <_svfiprintf_r+0x28>
 80083b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083b8:	b01d      	add	sp, #116	; 0x74
 80083ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083be:	ab03      	add	r3, sp, #12
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	462a      	mov	r2, r5
 80083c4:	4638      	mov	r0, r7
 80083c6:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <_svfiprintf_r+0x1f8>)
 80083c8:	a904      	add	r1, sp, #16
 80083ca:	f7fc fe3d 	bl	8005048 <_printf_i>
 80083ce:	e7eb      	b.n	80083a8 <_svfiprintf_r+0x1c0>
 80083d0:	08009848 	.word	0x08009848
 80083d4:	0800984e 	.word	0x0800984e
 80083d8:	08009852 	.word	0x08009852
 80083dc:	08004b09 	.word	0x08004b09
 80083e0:	08008135 	.word	0x08008135

080083e4 <__sfputc_r>:
 80083e4:	6893      	ldr	r3, [r2, #8]
 80083e6:	b410      	push	{r4}
 80083e8:	3b01      	subs	r3, #1
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	6093      	str	r3, [r2, #8]
 80083ee:	da07      	bge.n	8008400 <__sfputc_r+0x1c>
 80083f0:	6994      	ldr	r4, [r2, #24]
 80083f2:	42a3      	cmp	r3, r4
 80083f4:	db01      	blt.n	80083fa <__sfputc_r+0x16>
 80083f6:	290a      	cmp	r1, #10
 80083f8:	d102      	bne.n	8008400 <__sfputc_r+0x1c>
 80083fa:	bc10      	pop	{r4}
 80083fc:	f7fd bad5 	b.w	80059aa <__swbuf_r>
 8008400:	6813      	ldr	r3, [r2, #0]
 8008402:	1c58      	adds	r0, r3, #1
 8008404:	6010      	str	r0, [r2, #0]
 8008406:	7019      	strb	r1, [r3, #0]
 8008408:	4608      	mov	r0, r1
 800840a:	bc10      	pop	{r4}
 800840c:	4770      	bx	lr

0800840e <__sfputs_r>:
 800840e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008410:	4606      	mov	r6, r0
 8008412:	460f      	mov	r7, r1
 8008414:	4614      	mov	r4, r2
 8008416:	18d5      	adds	r5, r2, r3
 8008418:	42ac      	cmp	r4, r5
 800841a:	d101      	bne.n	8008420 <__sfputs_r+0x12>
 800841c:	2000      	movs	r0, #0
 800841e:	e007      	b.n	8008430 <__sfputs_r+0x22>
 8008420:	463a      	mov	r2, r7
 8008422:	4630      	mov	r0, r6
 8008424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008428:	f7ff ffdc 	bl	80083e4 <__sfputc_r>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d1f3      	bne.n	8008418 <__sfputs_r+0xa>
 8008430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008434 <_vfiprintf_r>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	460d      	mov	r5, r1
 800843a:	4614      	mov	r4, r2
 800843c:	4698      	mov	r8, r3
 800843e:	4606      	mov	r6, r0
 8008440:	b09d      	sub	sp, #116	; 0x74
 8008442:	b118      	cbz	r0, 800844c <_vfiprintf_r+0x18>
 8008444:	6a03      	ldr	r3, [r0, #32]
 8008446:	b90b      	cbnz	r3, 800844c <_vfiprintf_r+0x18>
 8008448:	f7fd f9a8 	bl	800579c <__sinit>
 800844c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800844e:	07d9      	lsls	r1, r3, #31
 8008450:	d405      	bmi.n	800845e <_vfiprintf_r+0x2a>
 8008452:	89ab      	ldrh	r3, [r5, #12]
 8008454:	059a      	lsls	r2, r3, #22
 8008456:	d402      	bmi.n	800845e <_vfiprintf_r+0x2a>
 8008458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800845a:	f7fd fc13 	bl	8005c84 <__retarget_lock_acquire_recursive>
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	071b      	lsls	r3, r3, #28
 8008462:	d501      	bpl.n	8008468 <_vfiprintf_r+0x34>
 8008464:	692b      	ldr	r3, [r5, #16]
 8008466:	b99b      	cbnz	r3, 8008490 <_vfiprintf_r+0x5c>
 8008468:	4629      	mov	r1, r5
 800846a:	4630      	mov	r0, r6
 800846c:	f7fd fada 	bl	8005a24 <__swsetup_r>
 8008470:	b170      	cbz	r0, 8008490 <_vfiprintf_r+0x5c>
 8008472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008474:	07dc      	lsls	r4, r3, #31
 8008476:	d504      	bpl.n	8008482 <_vfiprintf_r+0x4e>
 8008478:	f04f 30ff 	mov.w	r0, #4294967295
 800847c:	b01d      	add	sp, #116	; 0x74
 800847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008482:	89ab      	ldrh	r3, [r5, #12]
 8008484:	0598      	lsls	r0, r3, #22
 8008486:	d4f7      	bmi.n	8008478 <_vfiprintf_r+0x44>
 8008488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800848a:	f7fd fbfc 	bl	8005c86 <__retarget_lock_release_recursive>
 800848e:	e7f3      	b.n	8008478 <_vfiprintf_r+0x44>
 8008490:	2300      	movs	r3, #0
 8008492:	9309      	str	r3, [sp, #36]	; 0x24
 8008494:	2320      	movs	r3, #32
 8008496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800849a:	2330      	movs	r3, #48	; 0x30
 800849c:	f04f 0901 	mov.w	r9, #1
 80084a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80084a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008654 <_vfiprintf_r+0x220>
 80084a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084ac:	4623      	mov	r3, r4
 80084ae:	469a      	mov	sl, r3
 80084b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084b4:	b10a      	cbz	r2, 80084ba <_vfiprintf_r+0x86>
 80084b6:	2a25      	cmp	r2, #37	; 0x25
 80084b8:	d1f9      	bne.n	80084ae <_vfiprintf_r+0x7a>
 80084ba:	ebba 0b04 	subs.w	fp, sl, r4
 80084be:	d00b      	beq.n	80084d8 <_vfiprintf_r+0xa4>
 80084c0:	465b      	mov	r3, fp
 80084c2:	4622      	mov	r2, r4
 80084c4:	4629      	mov	r1, r5
 80084c6:	4630      	mov	r0, r6
 80084c8:	f7ff ffa1 	bl	800840e <__sfputs_r>
 80084cc:	3001      	adds	r0, #1
 80084ce:	f000 80a9 	beq.w	8008624 <_vfiprintf_r+0x1f0>
 80084d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084d4:	445a      	add	r2, fp
 80084d6:	9209      	str	r2, [sp, #36]	; 0x24
 80084d8:	f89a 3000 	ldrb.w	r3, [sl]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 80a1 	beq.w	8008624 <_vfiprintf_r+0x1f0>
 80084e2:	2300      	movs	r3, #0
 80084e4:	f04f 32ff 	mov.w	r2, #4294967295
 80084e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ec:	f10a 0a01 	add.w	sl, sl, #1
 80084f0:	9304      	str	r3, [sp, #16]
 80084f2:	9307      	str	r3, [sp, #28]
 80084f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084f8:	931a      	str	r3, [sp, #104]	; 0x68
 80084fa:	4654      	mov	r4, sl
 80084fc:	2205      	movs	r2, #5
 80084fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008502:	4854      	ldr	r0, [pc, #336]	; (8008654 <_vfiprintf_r+0x220>)
 8008504:	f7fd fbc0 	bl	8005c88 <memchr>
 8008508:	9a04      	ldr	r2, [sp, #16]
 800850a:	b9d8      	cbnz	r0, 8008544 <_vfiprintf_r+0x110>
 800850c:	06d1      	lsls	r1, r2, #27
 800850e:	bf44      	itt	mi
 8008510:	2320      	movmi	r3, #32
 8008512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008516:	0713      	lsls	r3, r2, #28
 8008518:	bf44      	itt	mi
 800851a:	232b      	movmi	r3, #43	; 0x2b
 800851c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008520:	f89a 3000 	ldrb.w	r3, [sl]
 8008524:	2b2a      	cmp	r3, #42	; 0x2a
 8008526:	d015      	beq.n	8008554 <_vfiprintf_r+0x120>
 8008528:	4654      	mov	r4, sl
 800852a:	2000      	movs	r0, #0
 800852c:	f04f 0c0a 	mov.w	ip, #10
 8008530:	9a07      	ldr	r2, [sp, #28]
 8008532:	4621      	mov	r1, r4
 8008534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008538:	3b30      	subs	r3, #48	; 0x30
 800853a:	2b09      	cmp	r3, #9
 800853c:	d94d      	bls.n	80085da <_vfiprintf_r+0x1a6>
 800853e:	b1b0      	cbz	r0, 800856e <_vfiprintf_r+0x13a>
 8008540:	9207      	str	r2, [sp, #28]
 8008542:	e014      	b.n	800856e <_vfiprintf_r+0x13a>
 8008544:	eba0 0308 	sub.w	r3, r0, r8
 8008548:	fa09 f303 	lsl.w	r3, r9, r3
 800854c:	4313      	orrs	r3, r2
 800854e:	46a2      	mov	sl, r4
 8008550:	9304      	str	r3, [sp, #16]
 8008552:	e7d2      	b.n	80084fa <_vfiprintf_r+0xc6>
 8008554:	9b03      	ldr	r3, [sp, #12]
 8008556:	1d19      	adds	r1, r3, #4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	9103      	str	r1, [sp, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	bfbb      	ittet	lt
 8008560:	425b      	neglt	r3, r3
 8008562:	f042 0202 	orrlt.w	r2, r2, #2
 8008566:	9307      	strge	r3, [sp, #28]
 8008568:	9307      	strlt	r3, [sp, #28]
 800856a:	bfb8      	it	lt
 800856c:	9204      	strlt	r2, [sp, #16]
 800856e:	7823      	ldrb	r3, [r4, #0]
 8008570:	2b2e      	cmp	r3, #46	; 0x2e
 8008572:	d10c      	bne.n	800858e <_vfiprintf_r+0x15a>
 8008574:	7863      	ldrb	r3, [r4, #1]
 8008576:	2b2a      	cmp	r3, #42	; 0x2a
 8008578:	d134      	bne.n	80085e4 <_vfiprintf_r+0x1b0>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	3402      	adds	r4, #2
 800857e:	1d1a      	adds	r2, r3, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	9203      	str	r2, [sp, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	bfb8      	it	lt
 8008588:	f04f 33ff 	movlt.w	r3, #4294967295
 800858c:	9305      	str	r3, [sp, #20]
 800858e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008658 <_vfiprintf_r+0x224>
 8008592:	2203      	movs	r2, #3
 8008594:	4650      	mov	r0, sl
 8008596:	7821      	ldrb	r1, [r4, #0]
 8008598:	f7fd fb76 	bl	8005c88 <memchr>
 800859c:	b138      	cbz	r0, 80085ae <_vfiprintf_r+0x17a>
 800859e:	2240      	movs	r2, #64	; 0x40
 80085a0:	9b04      	ldr	r3, [sp, #16]
 80085a2:	eba0 000a 	sub.w	r0, r0, sl
 80085a6:	4082      	lsls	r2, r0
 80085a8:	4313      	orrs	r3, r2
 80085aa:	3401      	adds	r4, #1
 80085ac:	9304      	str	r3, [sp, #16]
 80085ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b2:	2206      	movs	r2, #6
 80085b4:	4829      	ldr	r0, [pc, #164]	; (800865c <_vfiprintf_r+0x228>)
 80085b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085ba:	f7fd fb65 	bl	8005c88 <memchr>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d03f      	beq.n	8008642 <_vfiprintf_r+0x20e>
 80085c2:	4b27      	ldr	r3, [pc, #156]	; (8008660 <_vfiprintf_r+0x22c>)
 80085c4:	bb1b      	cbnz	r3, 800860e <_vfiprintf_r+0x1da>
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	3307      	adds	r3, #7
 80085ca:	f023 0307 	bic.w	r3, r3, #7
 80085ce:	3308      	adds	r3, #8
 80085d0:	9303      	str	r3, [sp, #12]
 80085d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d4:	443b      	add	r3, r7
 80085d6:	9309      	str	r3, [sp, #36]	; 0x24
 80085d8:	e768      	b.n	80084ac <_vfiprintf_r+0x78>
 80085da:	460c      	mov	r4, r1
 80085dc:	2001      	movs	r0, #1
 80085de:	fb0c 3202 	mla	r2, ip, r2, r3
 80085e2:	e7a6      	b.n	8008532 <_vfiprintf_r+0xfe>
 80085e4:	2300      	movs	r3, #0
 80085e6:	f04f 0c0a 	mov.w	ip, #10
 80085ea:	4619      	mov	r1, r3
 80085ec:	3401      	adds	r4, #1
 80085ee:	9305      	str	r3, [sp, #20]
 80085f0:	4620      	mov	r0, r4
 80085f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085f6:	3a30      	subs	r2, #48	; 0x30
 80085f8:	2a09      	cmp	r2, #9
 80085fa:	d903      	bls.n	8008604 <_vfiprintf_r+0x1d0>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0c6      	beq.n	800858e <_vfiprintf_r+0x15a>
 8008600:	9105      	str	r1, [sp, #20]
 8008602:	e7c4      	b.n	800858e <_vfiprintf_r+0x15a>
 8008604:	4604      	mov	r4, r0
 8008606:	2301      	movs	r3, #1
 8008608:	fb0c 2101 	mla	r1, ip, r1, r2
 800860c:	e7f0      	b.n	80085f0 <_vfiprintf_r+0x1bc>
 800860e:	ab03      	add	r3, sp, #12
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	462a      	mov	r2, r5
 8008614:	4630      	mov	r0, r6
 8008616:	4b13      	ldr	r3, [pc, #76]	; (8008664 <_vfiprintf_r+0x230>)
 8008618:	a904      	add	r1, sp, #16
 800861a:	f7fc fa75 	bl	8004b08 <_printf_float>
 800861e:	4607      	mov	r7, r0
 8008620:	1c78      	adds	r0, r7, #1
 8008622:	d1d6      	bne.n	80085d2 <_vfiprintf_r+0x19e>
 8008624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008626:	07d9      	lsls	r1, r3, #31
 8008628:	d405      	bmi.n	8008636 <_vfiprintf_r+0x202>
 800862a:	89ab      	ldrh	r3, [r5, #12]
 800862c:	059a      	lsls	r2, r3, #22
 800862e:	d402      	bmi.n	8008636 <_vfiprintf_r+0x202>
 8008630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008632:	f7fd fb28 	bl	8005c86 <__retarget_lock_release_recursive>
 8008636:	89ab      	ldrh	r3, [r5, #12]
 8008638:	065b      	lsls	r3, r3, #25
 800863a:	f53f af1d 	bmi.w	8008478 <_vfiprintf_r+0x44>
 800863e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008640:	e71c      	b.n	800847c <_vfiprintf_r+0x48>
 8008642:	ab03      	add	r3, sp, #12
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	462a      	mov	r2, r5
 8008648:	4630      	mov	r0, r6
 800864a:	4b06      	ldr	r3, [pc, #24]	; (8008664 <_vfiprintf_r+0x230>)
 800864c:	a904      	add	r1, sp, #16
 800864e:	f7fc fcfb 	bl	8005048 <_printf_i>
 8008652:	e7e4      	b.n	800861e <_vfiprintf_r+0x1ea>
 8008654:	08009848 	.word	0x08009848
 8008658:	0800984e 	.word	0x0800984e
 800865c:	08009852 	.word	0x08009852
 8008660:	08004b09 	.word	0x08004b09
 8008664:	0800840f 	.word	0x0800840f

08008668 <__sflush_r>:
 8008668:	898a      	ldrh	r2, [r1, #12]
 800866a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866c:	4605      	mov	r5, r0
 800866e:	0710      	lsls	r0, r2, #28
 8008670:	460c      	mov	r4, r1
 8008672:	d457      	bmi.n	8008724 <__sflush_r+0xbc>
 8008674:	684b      	ldr	r3, [r1, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	dc04      	bgt.n	8008684 <__sflush_r+0x1c>
 800867a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	dc01      	bgt.n	8008684 <__sflush_r+0x1c>
 8008680:	2000      	movs	r0, #0
 8008682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008686:	2e00      	cmp	r6, #0
 8008688:	d0fa      	beq.n	8008680 <__sflush_r+0x18>
 800868a:	2300      	movs	r3, #0
 800868c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008690:	682f      	ldr	r7, [r5, #0]
 8008692:	6a21      	ldr	r1, [r4, #32]
 8008694:	602b      	str	r3, [r5, #0]
 8008696:	d032      	beq.n	80086fe <__sflush_r+0x96>
 8008698:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800869a:	89a3      	ldrh	r3, [r4, #12]
 800869c:	075a      	lsls	r2, r3, #29
 800869e:	d505      	bpl.n	80086ac <__sflush_r+0x44>
 80086a0:	6863      	ldr	r3, [r4, #4]
 80086a2:	1ac0      	subs	r0, r0, r3
 80086a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086a6:	b10b      	cbz	r3, 80086ac <__sflush_r+0x44>
 80086a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086aa:	1ac0      	subs	r0, r0, r3
 80086ac:	2300      	movs	r3, #0
 80086ae:	4602      	mov	r2, r0
 80086b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086b2:	4628      	mov	r0, r5
 80086b4:	6a21      	ldr	r1, [r4, #32]
 80086b6:	47b0      	blx	r6
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	d106      	bne.n	80086cc <__sflush_r+0x64>
 80086be:	6829      	ldr	r1, [r5, #0]
 80086c0:	291d      	cmp	r1, #29
 80086c2:	d82b      	bhi.n	800871c <__sflush_r+0xb4>
 80086c4:	4a28      	ldr	r2, [pc, #160]	; (8008768 <__sflush_r+0x100>)
 80086c6:	410a      	asrs	r2, r1
 80086c8:	07d6      	lsls	r6, r2, #31
 80086ca:	d427      	bmi.n	800871c <__sflush_r+0xb4>
 80086cc:	2200      	movs	r2, #0
 80086ce:	6062      	str	r2, [r4, #4]
 80086d0:	6922      	ldr	r2, [r4, #16]
 80086d2:	04d9      	lsls	r1, r3, #19
 80086d4:	6022      	str	r2, [r4, #0]
 80086d6:	d504      	bpl.n	80086e2 <__sflush_r+0x7a>
 80086d8:	1c42      	adds	r2, r0, #1
 80086da:	d101      	bne.n	80086e0 <__sflush_r+0x78>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	b903      	cbnz	r3, 80086e2 <__sflush_r+0x7a>
 80086e0:	6560      	str	r0, [r4, #84]	; 0x54
 80086e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086e4:	602f      	str	r7, [r5, #0]
 80086e6:	2900      	cmp	r1, #0
 80086e8:	d0ca      	beq.n	8008680 <__sflush_r+0x18>
 80086ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086ee:	4299      	cmp	r1, r3
 80086f0:	d002      	beq.n	80086f8 <__sflush_r+0x90>
 80086f2:	4628      	mov	r0, r5
 80086f4:	f7fe f968 	bl	80069c8 <_free_r>
 80086f8:	2000      	movs	r0, #0
 80086fa:	6360      	str	r0, [r4, #52]	; 0x34
 80086fc:	e7c1      	b.n	8008682 <__sflush_r+0x1a>
 80086fe:	2301      	movs	r3, #1
 8008700:	4628      	mov	r0, r5
 8008702:	47b0      	blx	r6
 8008704:	1c41      	adds	r1, r0, #1
 8008706:	d1c8      	bne.n	800869a <__sflush_r+0x32>
 8008708:	682b      	ldr	r3, [r5, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0c5      	beq.n	800869a <__sflush_r+0x32>
 800870e:	2b1d      	cmp	r3, #29
 8008710:	d001      	beq.n	8008716 <__sflush_r+0xae>
 8008712:	2b16      	cmp	r3, #22
 8008714:	d101      	bne.n	800871a <__sflush_r+0xb2>
 8008716:	602f      	str	r7, [r5, #0]
 8008718:	e7b2      	b.n	8008680 <__sflush_r+0x18>
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008720:	81a3      	strh	r3, [r4, #12]
 8008722:	e7ae      	b.n	8008682 <__sflush_r+0x1a>
 8008724:	690f      	ldr	r7, [r1, #16]
 8008726:	2f00      	cmp	r7, #0
 8008728:	d0aa      	beq.n	8008680 <__sflush_r+0x18>
 800872a:	0793      	lsls	r3, r2, #30
 800872c:	bf18      	it	ne
 800872e:	2300      	movne	r3, #0
 8008730:	680e      	ldr	r6, [r1, #0]
 8008732:	bf08      	it	eq
 8008734:	694b      	ldreq	r3, [r1, #20]
 8008736:	1bf6      	subs	r6, r6, r7
 8008738:	600f      	str	r7, [r1, #0]
 800873a:	608b      	str	r3, [r1, #8]
 800873c:	2e00      	cmp	r6, #0
 800873e:	dd9f      	ble.n	8008680 <__sflush_r+0x18>
 8008740:	4633      	mov	r3, r6
 8008742:	463a      	mov	r2, r7
 8008744:	4628      	mov	r0, r5
 8008746:	6a21      	ldr	r1, [r4, #32]
 8008748:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800874c:	47e0      	blx	ip
 800874e:	2800      	cmp	r0, #0
 8008750:	dc06      	bgt.n	8008760 <__sflush_r+0xf8>
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	f04f 30ff 	mov.w	r0, #4294967295
 8008758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800875c:	81a3      	strh	r3, [r4, #12]
 800875e:	e790      	b.n	8008682 <__sflush_r+0x1a>
 8008760:	4407      	add	r7, r0
 8008762:	1a36      	subs	r6, r6, r0
 8008764:	e7ea      	b.n	800873c <__sflush_r+0xd4>
 8008766:	bf00      	nop
 8008768:	dfbffffe 	.word	0xdfbffffe

0800876c <_fflush_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	690b      	ldr	r3, [r1, #16]
 8008770:	4605      	mov	r5, r0
 8008772:	460c      	mov	r4, r1
 8008774:	b913      	cbnz	r3, 800877c <_fflush_r+0x10>
 8008776:	2500      	movs	r5, #0
 8008778:	4628      	mov	r0, r5
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	b118      	cbz	r0, 8008786 <_fflush_r+0x1a>
 800877e:	6a03      	ldr	r3, [r0, #32]
 8008780:	b90b      	cbnz	r3, 8008786 <_fflush_r+0x1a>
 8008782:	f7fd f80b 	bl	800579c <__sinit>
 8008786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0f3      	beq.n	8008776 <_fflush_r+0xa>
 800878e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008790:	07d0      	lsls	r0, r2, #31
 8008792:	d404      	bmi.n	800879e <_fflush_r+0x32>
 8008794:	0599      	lsls	r1, r3, #22
 8008796:	d402      	bmi.n	800879e <_fflush_r+0x32>
 8008798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800879a:	f7fd fa73 	bl	8005c84 <__retarget_lock_acquire_recursive>
 800879e:	4628      	mov	r0, r5
 80087a0:	4621      	mov	r1, r4
 80087a2:	f7ff ff61 	bl	8008668 <__sflush_r>
 80087a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087a8:	4605      	mov	r5, r0
 80087aa:	07da      	lsls	r2, r3, #31
 80087ac:	d4e4      	bmi.n	8008778 <_fflush_r+0xc>
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	059b      	lsls	r3, r3, #22
 80087b2:	d4e1      	bmi.n	8008778 <_fflush_r+0xc>
 80087b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087b6:	f7fd fa66 	bl	8005c86 <__retarget_lock_release_recursive>
 80087ba:	e7dd      	b.n	8008778 <_fflush_r+0xc>

080087bc <fiprintf>:
 80087bc:	b40e      	push	{r1, r2, r3}
 80087be:	b503      	push	{r0, r1, lr}
 80087c0:	4601      	mov	r1, r0
 80087c2:	ab03      	add	r3, sp, #12
 80087c4:	4805      	ldr	r0, [pc, #20]	; (80087dc <fiprintf+0x20>)
 80087c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ca:	6800      	ldr	r0, [r0, #0]
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	f7ff fe31 	bl	8008434 <_vfiprintf_r>
 80087d2:	b002      	add	sp, #8
 80087d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087d8:	b003      	add	sp, #12
 80087da:	4770      	bx	lr
 80087dc:	20000068 	.word	0x20000068

080087e0 <__swhatbuf_r>:
 80087e0:	b570      	push	{r4, r5, r6, lr}
 80087e2:	460c      	mov	r4, r1
 80087e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e8:	4615      	mov	r5, r2
 80087ea:	2900      	cmp	r1, #0
 80087ec:	461e      	mov	r6, r3
 80087ee:	b096      	sub	sp, #88	; 0x58
 80087f0:	da0c      	bge.n	800880c <__swhatbuf_r+0x2c>
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	2100      	movs	r1, #0
 80087f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80087fa:	bf0c      	ite	eq
 80087fc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008800:	2340      	movne	r3, #64	; 0x40
 8008802:	2000      	movs	r0, #0
 8008804:	6031      	str	r1, [r6, #0]
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	b016      	add	sp, #88	; 0x58
 800880a:	bd70      	pop	{r4, r5, r6, pc}
 800880c:	466a      	mov	r2, sp
 800880e:	f000 f875 	bl	80088fc <_fstat_r>
 8008812:	2800      	cmp	r0, #0
 8008814:	dbed      	blt.n	80087f2 <__swhatbuf_r+0x12>
 8008816:	9901      	ldr	r1, [sp, #4]
 8008818:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800881c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008820:	4259      	negs	r1, r3
 8008822:	4159      	adcs	r1, r3
 8008824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008828:	e7eb      	b.n	8008802 <__swhatbuf_r+0x22>

0800882a <__smakebuf_r>:
 800882a:	898b      	ldrh	r3, [r1, #12]
 800882c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800882e:	079d      	lsls	r5, r3, #30
 8008830:	4606      	mov	r6, r0
 8008832:	460c      	mov	r4, r1
 8008834:	d507      	bpl.n	8008846 <__smakebuf_r+0x1c>
 8008836:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800883a:	6023      	str	r3, [r4, #0]
 800883c:	6123      	str	r3, [r4, #16]
 800883e:	2301      	movs	r3, #1
 8008840:	6163      	str	r3, [r4, #20]
 8008842:	b002      	add	sp, #8
 8008844:	bd70      	pop	{r4, r5, r6, pc}
 8008846:	466a      	mov	r2, sp
 8008848:	ab01      	add	r3, sp, #4
 800884a:	f7ff ffc9 	bl	80087e0 <__swhatbuf_r>
 800884e:	9900      	ldr	r1, [sp, #0]
 8008850:	4605      	mov	r5, r0
 8008852:	4630      	mov	r0, r6
 8008854:	f7fe f928 	bl	8006aa8 <_malloc_r>
 8008858:	b948      	cbnz	r0, 800886e <__smakebuf_r+0x44>
 800885a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800885e:	059a      	lsls	r2, r3, #22
 8008860:	d4ef      	bmi.n	8008842 <__smakebuf_r+0x18>
 8008862:	f023 0303 	bic.w	r3, r3, #3
 8008866:	f043 0302 	orr.w	r3, r3, #2
 800886a:	81a3      	strh	r3, [r4, #12]
 800886c:	e7e3      	b.n	8008836 <__smakebuf_r+0xc>
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	6020      	str	r0, [r4, #0]
 8008872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008876:	81a3      	strh	r3, [r4, #12]
 8008878:	9b00      	ldr	r3, [sp, #0]
 800887a:	6120      	str	r0, [r4, #16]
 800887c:	6163      	str	r3, [r4, #20]
 800887e:	9b01      	ldr	r3, [sp, #4]
 8008880:	b15b      	cbz	r3, 800889a <__smakebuf_r+0x70>
 8008882:	4630      	mov	r0, r6
 8008884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008888:	f000 f84a 	bl	8008920 <_isatty_r>
 800888c:	b128      	cbz	r0, 800889a <__smakebuf_r+0x70>
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	f023 0303 	bic.w	r3, r3, #3
 8008894:	f043 0301 	orr.w	r3, r3, #1
 8008898:	81a3      	strh	r3, [r4, #12]
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	431d      	orrs	r5, r3
 800889e:	81a5      	strh	r5, [r4, #12]
 80088a0:	e7cf      	b.n	8008842 <__smakebuf_r+0x18>

080088a2 <memmove>:
 80088a2:	4288      	cmp	r0, r1
 80088a4:	b510      	push	{r4, lr}
 80088a6:	eb01 0402 	add.w	r4, r1, r2
 80088aa:	d902      	bls.n	80088b2 <memmove+0x10>
 80088ac:	4284      	cmp	r4, r0
 80088ae:	4623      	mov	r3, r4
 80088b0:	d807      	bhi.n	80088c2 <memmove+0x20>
 80088b2:	1e43      	subs	r3, r0, #1
 80088b4:	42a1      	cmp	r1, r4
 80088b6:	d008      	beq.n	80088ca <memmove+0x28>
 80088b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088c0:	e7f8      	b.n	80088b4 <memmove+0x12>
 80088c2:	4601      	mov	r1, r0
 80088c4:	4402      	add	r2, r0
 80088c6:	428a      	cmp	r2, r1
 80088c8:	d100      	bne.n	80088cc <memmove+0x2a>
 80088ca:	bd10      	pop	{r4, pc}
 80088cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088d4:	e7f7      	b.n	80088c6 <memmove+0x24>

080088d6 <strncmp>:
 80088d6:	b510      	push	{r4, lr}
 80088d8:	b16a      	cbz	r2, 80088f6 <strncmp+0x20>
 80088da:	3901      	subs	r1, #1
 80088dc:	1884      	adds	r4, r0, r2
 80088de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d103      	bne.n	80088f2 <strncmp+0x1c>
 80088ea:	42a0      	cmp	r0, r4
 80088ec:	d001      	beq.n	80088f2 <strncmp+0x1c>
 80088ee:	2a00      	cmp	r2, #0
 80088f0:	d1f5      	bne.n	80088de <strncmp+0x8>
 80088f2:	1ad0      	subs	r0, r2, r3
 80088f4:	bd10      	pop	{r4, pc}
 80088f6:	4610      	mov	r0, r2
 80088f8:	e7fc      	b.n	80088f4 <strncmp+0x1e>
	...

080088fc <_fstat_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	2300      	movs	r3, #0
 8008900:	4d06      	ldr	r5, [pc, #24]	; (800891c <_fstat_r+0x20>)
 8008902:	4604      	mov	r4, r0
 8008904:	4608      	mov	r0, r1
 8008906:	4611      	mov	r1, r2
 8008908:	602b      	str	r3, [r5, #0]
 800890a:	f7f9 fe49 	bl	80025a0 <_fstat>
 800890e:	1c43      	adds	r3, r0, #1
 8008910:	d102      	bne.n	8008918 <_fstat_r+0x1c>
 8008912:	682b      	ldr	r3, [r5, #0]
 8008914:	b103      	cbz	r3, 8008918 <_fstat_r+0x1c>
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	bd38      	pop	{r3, r4, r5, pc}
 800891a:	bf00      	nop
 800891c:	2000053c 	.word	0x2000053c

08008920 <_isatty_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	2300      	movs	r3, #0
 8008924:	4d05      	ldr	r5, [pc, #20]	; (800893c <_isatty_r+0x1c>)
 8008926:	4604      	mov	r4, r0
 8008928:	4608      	mov	r0, r1
 800892a:	602b      	str	r3, [r5, #0]
 800892c:	f7f9 fe47 	bl	80025be <_isatty>
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	d102      	bne.n	800893a <_isatty_r+0x1a>
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	b103      	cbz	r3, 800893a <_isatty_r+0x1a>
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	bd38      	pop	{r3, r4, r5, pc}
 800893c:	2000053c 	.word	0x2000053c

08008940 <_sbrk_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	2300      	movs	r3, #0
 8008944:	4d05      	ldr	r5, [pc, #20]	; (800895c <_sbrk_r+0x1c>)
 8008946:	4604      	mov	r4, r0
 8008948:	4608      	mov	r0, r1
 800894a:	602b      	str	r3, [r5, #0]
 800894c:	f7f9 fe4e 	bl	80025ec <_sbrk>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d102      	bne.n	800895a <_sbrk_r+0x1a>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	b103      	cbz	r3, 800895a <_sbrk_r+0x1a>
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	2000053c 	.word	0x2000053c

08008960 <memcpy>:
 8008960:	440a      	add	r2, r1
 8008962:	4291      	cmp	r1, r2
 8008964:	f100 33ff 	add.w	r3, r0, #4294967295
 8008968:	d100      	bne.n	800896c <memcpy+0xc>
 800896a:	4770      	bx	lr
 800896c:	b510      	push	{r4, lr}
 800896e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008972:	4291      	cmp	r1, r2
 8008974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008978:	d1f9      	bne.n	800896e <memcpy+0xe>
 800897a:	bd10      	pop	{r4, pc}

0800897c <nan>:
 800897c:	2000      	movs	r0, #0
 800897e:	4901      	ldr	r1, [pc, #4]	; (8008984 <nan+0x8>)
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	7ff80000 	.word	0x7ff80000

08008988 <abort>:
 8008988:	2006      	movs	r0, #6
 800898a:	b508      	push	{r3, lr}
 800898c:	f000 fbe8 	bl	8009160 <raise>
 8008990:	2001      	movs	r0, #1
 8008992:	f7f9 fdb7 	bl	8002504 <_exit>

08008996 <_calloc_r>:
 8008996:	b570      	push	{r4, r5, r6, lr}
 8008998:	fba1 5402 	umull	r5, r4, r1, r2
 800899c:	b934      	cbnz	r4, 80089ac <_calloc_r+0x16>
 800899e:	4629      	mov	r1, r5
 80089a0:	f7fe f882 	bl	8006aa8 <_malloc_r>
 80089a4:	4606      	mov	r6, r0
 80089a6:	b928      	cbnz	r0, 80089b4 <_calloc_r+0x1e>
 80089a8:	4630      	mov	r0, r6
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	220c      	movs	r2, #12
 80089ae:	2600      	movs	r6, #0
 80089b0:	6002      	str	r2, [r0, #0]
 80089b2:	e7f9      	b.n	80089a8 <_calloc_r+0x12>
 80089b4:	462a      	mov	r2, r5
 80089b6:	4621      	mov	r1, r4
 80089b8:	f7fd f88c 	bl	8005ad4 <memset>
 80089bc:	e7f4      	b.n	80089a8 <_calloc_r+0x12>

080089be <rshift>:
 80089be:	6903      	ldr	r3, [r0, #16]
 80089c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089c4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80089c8:	f100 0414 	add.w	r4, r0, #20
 80089cc:	ea4f 1261 	mov.w	r2, r1, asr #5
 80089d0:	dd46      	ble.n	8008a60 <rshift+0xa2>
 80089d2:	f011 011f 	ands.w	r1, r1, #31
 80089d6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80089da:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80089de:	d10c      	bne.n	80089fa <rshift+0x3c>
 80089e0:	4629      	mov	r1, r5
 80089e2:	f100 0710 	add.w	r7, r0, #16
 80089e6:	42b1      	cmp	r1, r6
 80089e8:	d335      	bcc.n	8008a56 <rshift+0x98>
 80089ea:	1a9b      	subs	r3, r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	1eea      	subs	r2, r5, #3
 80089f0:	4296      	cmp	r6, r2
 80089f2:	bf38      	it	cc
 80089f4:	2300      	movcc	r3, #0
 80089f6:	4423      	add	r3, r4
 80089f8:	e015      	b.n	8008a26 <rshift+0x68>
 80089fa:	46a1      	mov	r9, r4
 80089fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008a00:	f1c1 0820 	rsb	r8, r1, #32
 8008a04:	40cf      	lsrs	r7, r1
 8008a06:	f105 0e04 	add.w	lr, r5, #4
 8008a0a:	4576      	cmp	r6, lr
 8008a0c:	46f4      	mov	ip, lr
 8008a0e:	d816      	bhi.n	8008a3e <rshift+0x80>
 8008a10:	1a9a      	subs	r2, r3, r2
 8008a12:	0092      	lsls	r2, r2, #2
 8008a14:	3a04      	subs	r2, #4
 8008a16:	3501      	adds	r5, #1
 8008a18:	42ae      	cmp	r6, r5
 8008a1a:	bf38      	it	cc
 8008a1c:	2200      	movcc	r2, #0
 8008a1e:	18a3      	adds	r3, r4, r2
 8008a20:	50a7      	str	r7, [r4, r2]
 8008a22:	b107      	cbz	r7, 8008a26 <rshift+0x68>
 8008a24:	3304      	adds	r3, #4
 8008a26:	42a3      	cmp	r3, r4
 8008a28:	eba3 0204 	sub.w	r2, r3, r4
 8008a2c:	bf08      	it	eq
 8008a2e:	2300      	moveq	r3, #0
 8008a30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a34:	6102      	str	r2, [r0, #16]
 8008a36:	bf08      	it	eq
 8008a38:	6143      	streq	r3, [r0, #20]
 8008a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a3e:	f8dc c000 	ldr.w	ip, [ip]
 8008a42:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a46:	ea4c 0707 	orr.w	r7, ip, r7
 8008a4a:	f849 7b04 	str.w	r7, [r9], #4
 8008a4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a52:	40cf      	lsrs	r7, r1
 8008a54:	e7d9      	b.n	8008a0a <rshift+0x4c>
 8008a56:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a5a:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a5e:	e7c2      	b.n	80089e6 <rshift+0x28>
 8008a60:	4623      	mov	r3, r4
 8008a62:	e7e0      	b.n	8008a26 <rshift+0x68>

08008a64 <__hexdig_fun>:
 8008a64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008a68:	2b09      	cmp	r3, #9
 8008a6a:	d802      	bhi.n	8008a72 <__hexdig_fun+0xe>
 8008a6c:	3820      	subs	r0, #32
 8008a6e:	b2c0      	uxtb	r0, r0
 8008a70:	4770      	bx	lr
 8008a72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008a76:	2b05      	cmp	r3, #5
 8008a78:	d801      	bhi.n	8008a7e <__hexdig_fun+0x1a>
 8008a7a:	3847      	subs	r0, #71	; 0x47
 8008a7c:	e7f7      	b.n	8008a6e <__hexdig_fun+0xa>
 8008a7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008a82:	2b05      	cmp	r3, #5
 8008a84:	d801      	bhi.n	8008a8a <__hexdig_fun+0x26>
 8008a86:	3827      	subs	r0, #39	; 0x27
 8008a88:	e7f1      	b.n	8008a6e <__hexdig_fun+0xa>
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	4770      	bx	lr
	...

08008a90 <__gethex>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	4681      	mov	r9, r0
 8008a96:	468a      	mov	sl, r1
 8008a98:	4617      	mov	r7, r2
 8008a9a:	680a      	ldr	r2, [r1, #0]
 8008a9c:	b085      	sub	sp, #20
 8008a9e:	f102 0b02 	add.w	fp, r2, #2
 8008aa2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008aa6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008aaa:	9302      	str	r3, [sp, #8]
 8008aac:	32fe      	adds	r2, #254	; 0xfe
 8008aae:	eb02 030b 	add.w	r3, r2, fp
 8008ab2:	46d8      	mov	r8, fp
 8008ab4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	2830      	cmp	r0, #48	; 0x30
 8008abc:	d0f7      	beq.n	8008aae <__gethex+0x1e>
 8008abe:	f7ff ffd1 	bl	8008a64 <__hexdig_fun>
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d138      	bne.n	8008b3a <__gethex+0xaa>
 8008ac8:	2201      	movs	r2, #1
 8008aca:	4640      	mov	r0, r8
 8008acc:	49a7      	ldr	r1, [pc, #668]	; (8008d6c <__gethex+0x2dc>)
 8008ace:	f7ff ff02 	bl	80088d6 <strncmp>
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d169      	bne.n	8008bac <__gethex+0x11c>
 8008ad8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008adc:	465d      	mov	r5, fp
 8008ade:	f7ff ffc1 	bl	8008a64 <__hexdig_fun>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d064      	beq.n	8008bb0 <__gethex+0x120>
 8008ae6:	465a      	mov	r2, fp
 8008ae8:	7810      	ldrb	r0, [r2, #0]
 8008aea:	4690      	mov	r8, r2
 8008aec:	2830      	cmp	r0, #48	; 0x30
 8008aee:	f102 0201 	add.w	r2, r2, #1
 8008af2:	d0f9      	beq.n	8008ae8 <__gethex+0x58>
 8008af4:	f7ff ffb6 	bl	8008a64 <__hexdig_fun>
 8008af8:	2301      	movs	r3, #1
 8008afa:	fab0 f480 	clz	r4, r0
 8008afe:	465e      	mov	r6, fp
 8008b00:	0964      	lsrs	r4, r4, #5
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	4642      	mov	r2, r8
 8008b06:	4615      	mov	r5, r2
 8008b08:	7828      	ldrb	r0, [r5, #0]
 8008b0a:	3201      	adds	r2, #1
 8008b0c:	f7ff ffaa 	bl	8008a64 <__hexdig_fun>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d1f8      	bne.n	8008b06 <__gethex+0x76>
 8008b14:	2201      	movs	r2, #1
 8008b16:	4628      	mov	r0, r5
 8008b18:	4994      	ldr	r1, [pc, #592]	; (8008d6c <__gethex+0x2dc>)
 8008b1a:	f7ff fedc 	bl	80088d6 <strncmp>
 8008b1e:	b978      	cbnz	r0, 8008b40 <__gethex+0xb0>
 8008b20:	b946      	cbnz	r6, 8008b34 <__gethex+0xa4>
 8008b22:	1c6e      	adds	r6, r5, #1
 8008b24:	4632      	mov	r2, r6
 8008b26:	4615      	mov	r5, r2
 8008b28:	7828      	ldrb	r0, [r5, #0]
 8008b2a:	3201      	adds	r2, #1
 8008b2c:	f7ff ff9a 	bl	8008a64 <__hexdig_fun>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d1f8      	bne.n	8008b26 <__gethex+0x96>
 8008b34:	1b73      	subs	r3, r6, r5
 8008b36:	009e      	lsls	r6, r3, #2
 8008b38:	e004      	b.n	8008b44 <__gethex+0xb4>
 8008b3a:	2400      	movs	r4, #0
 8008b3c:	4626      	mov	r6, r4
 8008b3e:	e7e1      	b.n	8008b04 <__gethex+0x74>
 8008b40:	2e00      	cmp	r6, #0
 8008b42:	d1f7      	bne.n	8008b34 <__gethex+0xa4>
 8008b44:	782b      	ldrb	r3, [r5, #0]
 8008b46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b4a:	2b50      	cmp	r3, #80	; 0x50
 8008b4c:	d13d      	bne.n	8008bca <__gethex+0x13a>
 8008b4e:	786b      	ldrb	r3, [r5, #1]
 8008b50:	2b2b      	cmp	r3, #43	; 0x2b
 8008b52:	d02f      	beq.n	8008bb4 <__gethex+0x124>
 8008b54:	2b2d      	cmp	r3, #45	; 0x2d
 8008b56:	d031      	beq.n	8008bbc <__gethex+0x12c>
 8008b58:	f04f 0b00 	mov.w	fp, #0
 8008b5c:	1c69      	adds	r1, r5, #1
 8008b5e:	7808      	ldrb	r0, [r1, #0]
 8008b60:	f7ff ff80 	bl	8008a64 <__hexdig_fun>
 8008b64:	1e42      	subs	r2, r0, #1
 8008b66:	b2d2      	uxtb	r2, r2
 8008b68:	2a18      	cmp	r2, #24
 8008b6a:	d82e      	bhi.n	8008bca <__gethex+0x13a>
 8008b6c:	f1a0 0210 	sub.w	r2, r0, #16
 8008b70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b74:	f7ff ff76 	bl	8008a64 <__hexdig_fun>
 8008b78:	f100 3cff 	add.w	ip, r0, #4294967295
 8008b7c:	fa5f fc8c 	uxtb.w	ip, ip
 8008b80:	f1bc 0f18 	cmp.w	ip, #24
 8008b84:	d91d      	bls.n	8008bc2 <__gethex+0x132>
 8008b86:	f1bb 0f00 	cmp.w	fp, #0
 8008b8a:	d000      	beq.n	8008b8e <__gethex+0xfe>
 8008b8c:	4252      	negs	r2, r2
 8008b8e:	4416      	add	r6, r2
 8008b90:	f8ca 1000 	str.w	r1, [sl]
 8008b94:	b1dc      	cbz	r4, 8008bce <__gethex+0x13e>
 8008b96:	9b01      	ldr	r3, [sp, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	bf14      	ite	ne
 8008b9c:	f04f 0800 	movne.w	r8, #0
 8008ba0:	f04f 0806 	moveq.w	r8, #6
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	b005      	add	sp, #20
 8008ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bac:	4645      	mov	r5, r8
 8008bae:	4626      	mov	r6, r4
 8008bb0:	2401      	movs	r4, #1
 8008bb2:	e7c7      	b.n	8008b44 <__gethex+0xb4>
 8008bb4:	f04f 0b00 	mov.w	fp, #0
 8008bb8:	1ca9      	adds	r1, r5, #2
 8008bba:	e7d0      	b.n	8008b5e <__gethex+0xce>
 8008bbc:	f04f 0b01 	mov.w	fp, #1
 8008bc0:	e7fa      	b.n	8008bb8 <__gethex+0x128>
 8008bc2:	230a      	movs	r3, #10
 8008bc4:	fb03 0002 	mla	r0, r3, r2, r0
 8008bc8:	e7d0      	b.n	8008b6c <__gethex+0xdc>
 8008bca:	4629      	mov	r1, r5
 8008bcc:	e7e0      	b.n	8008b90 <__gethex+0x100>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	eba5 0308 	sub.w	r3, r5, r8
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	2b07      	cmp	r3, #7
 8008bd8:	dc0a      	bgt.n	8008bf0 <__gethex+0x160>
 8008bda:	4648      	mov	r0, r9
 8008bdc:	f7fd fff0 	bl	8006bc0 <_Balloc>
 8008be0:	4604      	mov	r4, r0
 8008be2:	b940      	cbnz	r0, 8008bf6 <__gethex+0x166>
 8008be4:	4602      	mov	r2, r0
 8008be6:	21e4      	movs	r1, #228	; 0xe4
 8008be8:	4b61      	ldr	r3, [pc, #388]	; (8008d70 <__gethex+0x2e0>)
 8008bea:	4862      	ldr	r0, [pc, #392]	; (8008d74 <__gethex+0x2e4>)
 8008bec:	f7fd f85e 	bl	8005cac <__assert_func>
 8008bf0:	3101      	adds	r1, #1
 8008bf2:	105b      	asrs	r3, r3, #1
 8008bf4:	e7ef      	b.n	8008bd6 <__gethex+0x146>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	469b      	mov	fp, r3
 8008bfa:	f100 0a14 	add.w	sl, r0, #20
 8008bfe:	f8cd a004 	str.w	sl, [sp, #4]
 8008c02:	45a8      	cmp	r8, r5
 8008c04:	d344      	bcc.n	8008c90 <__gethex+0x200>
 8008c06:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008c0a:	4658      	mov	r0, fp
 8008c0c:	f848 bb04 	str.w	fp, [r8], #4
 8008c10:	eba8 080a 	sub.w	r8, r8, sl
 8008c14:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008c18:	6122      	str	r2, [r4, #16]
 8008c1a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8008c1e:	f7fe f8c1 	bl	8006da4 <__hi0bits>
 8008c22:	683d      	ldr	r5, [r7, #0]
 8008c24:	eba8 0800 	sub.w	r8, r8, r0
 8008c28:	45a8      	cmp	r8, r5
 8008c2a:	dd59      	ble.n	8008ce0 <__gethex+0x250>
 8008c2c:	eba8 0805 	sub.w	r8, r8, r5
 8008c30:	4641      	mov	r1, r8
 8008c32:	4620      	mov	r0, r4
 8008c34:	f7fe fc3f 	bl	80074b6 <__any_on>
 8008c38:	4683      	mov	fp, r0
 8008c3a:	b1b8      	cbz	r0, 8008c6c <__gethex+0x1dc>
 8008c3c:	f04f 0b01 	mov.w	fp, #1
 8008c40:	f108 33ff 	add.w	r3, r8, #4294967295
 8008c44:	1159      	asrs	r1, r3, #5
 8008c46:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008c4a:	f003 021f 	and.w	r2, r3, #31
 8008c4e:	fa0b f202 	lsl.w	r2, fp, r2
 8008c52:	420a      	tst	r2, r1
 8008c54:	d00a      	beq.n	8008c6c <__gethex+0x1dc>
 8008c56:	455b      	cmp	r3, fp
 8008c58:	dd06      	ble.n	8008c68 <__gethex+0x1d8>
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f1a8 0102 	sub.w	r1, r8, #2
 8008c60:	f7fe fc29 	bl	80074b6 <__any_on>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d138      	bne.n	8008cda <__gethex+0x24a>
 8008c68:	f04f 0b02 	mov.w	fp, #2
 8008c6c:	4641      	mov	r1, r8
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f7ff fea5 	bl	80089be <rshift>
 8008c74:	4446      	add	r6, r8
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	42b3      	cmp	r3, r6
 8008c7a:	da41      	bge.n	8008d00 <__gethex+0x270>
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	4648      	mov	r0, r9
 8008c80:	f7fd ffde 	bl	8006c40 <_Bfree>
 8008c84:	2300      	movs	r3, #0
 8008c86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c88:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	e789      	b.n	8008ba4 <__gethex+0x114>
 8008c90:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008c94:	2a2e      	cmp	r2, #46	; 0x2e
 8008c96:	d014      	beq.n	8008cc2 <__gethex+0x232>
 8008c98:	2b20      	cmp	r3, #32
 8008c9a:	d106      	bne.n	8008caa <__gethex+0x21a>
 8008c9c:	9b01      	ldr	r3, [sp, #4]
 8008c9e:	f843 bb04 	str.w	fp, [r3], #4
 8008ca2:	f04f 0b00 	mov.w	fp, #0
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	465b      	mov	r3, fp
 8008caa:	7828      	ldrb	r0, [r5, #0]
 8008cac:	9303      	str	r3, [sp, #12]
 8008cae:	f7ff fed9 	bl	8008a64 <__hexdig_fun>
 8008cb2:	9b03      	ldr	r3, [sp, #12]
 8008cb4:	f000 000f 	and.w	r0, r0, #15
 8008cb8:	4098      	lsls	r0, r3
 8008cba:	ea4b 0b00 	orr.w	fp, fp, r0
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	e79f      	b.n	8008c02 <__gethex+0x172>
 8008cc2:	45a8      	cmp	r8, r5
 8008cc4:	d8e8      	bhi.n	8008c98 <__gethex+0x208>
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	4628      	mov	r0, r5
 8008cca:	4928      	ldr	r1, [pc, #160]	; (8008d6c <__gethex+0x2dc>)
 8008ccc:	9303      	str	r3, [sp, #12]
 8008cce:	f7ff fe02 	bl	80088d6 <strncmp>
 8008cd2:	9b03      	ldr	r3, [sp, #12]
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d1df      	bne.n	8008c98 <__gethex+0x208>
 8008cd8:	e793      	b.n	8008c02 <__gethex+0x172>
 8008cda:	f04f 0b03 	mov.w	fp, #3
 8008cde:	e7c5      	b.n	8008c6c <__gethex+0x1dc>
 8008ce0:	da0b      	bge.n	8008cfa <__gethex+0x26a>
 8008ce2:	eba5 0808 	sub.w	r8, r5, r8
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4642      	mov	r2, r8
 8008cea:	4648      	mov	r0, r9
 8008cec:	f7fe f9c0 	bl	8007070 <__lshift>
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	eba6 0608 	sub.w	r6, r6, r8
 8008cf6:	f100 0a14 	add.w	sl, r0, #20
 8008cfa:	f04f 0b00 	mov.w	fp, #0
 8008cfe:	e7ba      	b.n	8008c76 <__gethex+0x1e6>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	42b3      	cmp	r3, r6
 8008d04:	dd74      	ble.n	8008df0 <__gethex+0x360>
 8008d06:	1b9e      	subs	r6, r3, r6
 8008d08:	42b5      	cmp	r5, r6
 8008d0a:	dc35      	bgt.n	8008d78 <__gethex+0x2e8>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d023      	beq.n	8008d5a <__gethex+0x2ca>
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d025      	beq.n	8008d62 <__gethex+0x2d2>
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d115      	bne.n	8008d46 <__gethex+0x2b6>
 8008d1a:	42b5      	cmp	r5, r6
 8008d1c:	d113      	bne.n	8008d46 <__gethex+0x2b6>
 8008d1e:	2d01      	cmp	r5, #1
 8008d20:	d10b      	bne.n	8008d3a <__gethex+0x2aa>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	9a02      	ldr	r2, [sp, #8]
 8008d26:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008d2a:	6013      	str	r3, [r2, #0]
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	6123      	str	r3, [r4, #16]
 8008d30:	f8ca 3000 	str.w	r3, [sl]
 8008d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d36:	601c      	str	r4, [r3, #0]
 8008d38:	e734      	b.n	8008ba4 <__gethex+0x114>
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	1e69      	subs	r1, r5, #1
 8008d3e:	f7fe fbba 	bl	80074b6 <__any_on>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d1ed      	bne.n	8008d22 <__gethex+0x292>
 8008d46:	4621      	mov	r1, r4
 8008d48:	4648      	mov	r0, r9
 8008d4a:	f7fd ff79 	bl	8006c40 <_Bfree>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d52:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	e724      	b.n	8008ba4 <__gethex+0x114>
 8008d5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1f2      	bne.n	8008d46 <__gethex+0x2b6>
 8008d60:	e7df      	b.n	8008d22 <__gethex+0x292>
 8008d62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1dc      	bne.n	8008d22 <__gethex+0x292>
 8008d68:	e7ed      	b.n	8008d46 <__gethex+0x2b6>
 8008d6a:	bf00      	nop
 8008d6c:	080097f4 	.word	0x080097f4
 8008d70:	0800968a 	.word	0x0800968a
 8008d74:	08009861 	.word	0x08009861
 8008d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8008d7c:	f1bb 0f00 	cmp.w	fp, #0
 8008d80:	d133      	bne.n	8008dea <__gethex+0x35a>
 8008d82:	f1b8 0f00 	cmp.w	r8, #0
 8008d86:	d004      	beq.n	8008d92 <__gethex+0x302>
 8008d88:	4641      	mov	r1, r8
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f7fe fb93 	bl	80074b6 <__any_on>
 8008d90:	4683      	mov	fp, r0
 8008d92:	2301      	movs	r3, #1
 8008d94:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008d98:	f008 081f 	and.w	r8, r8, #31
 8008d9c:	fa03 f308 	lsl.w	r3, r3, r8
 8008da0:	f04f 0802 	mov.w	r8, #2
 8008da4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008da8:	4631      	mov	r1, r6
 8008daa:	4213      	tst	r3, r2
 8008dac:	4620      	mov	r0, r4
 8008dae:	bf18      	it	ne
 8008db0:	f04b 0b02 	orrne.w	fp, fp, #2
 8008db4:	1bad      	subs	r5, r5, r6
 8008db6:	f7ff fe02 	bl	80089be <rshift>
 8008dba:	687e      	ldr	r6, [r7, #4]
 8008dbc:	f1bb 0f00 	cmp.w	fp, #0
 8008dc0:	d04a      	beq.n	8008e58 <__gethex+0x3c8>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d016      	beq.n	8008df6 <__gethex+0x366>
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d018      	beq.n	8008dfe <__gethex+0x36e>
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d109      	bne.n	8008de4 <__gethex+0x354>
 8008dd0:	f01b 0f02 	tst.w	fp, #2
 8008dd4:	d006      	beq.n	8008de4 <__gethex+0x354>
 8008dd6:	f8da 3000 	ldr.w	r3, [sl]
 8008dda:	ea4b 0b03 	orr.w	fp, fp, r3
 8008dde:	f01b 0f01 	tst.w	fp, #1
 8008de2:	d10f      	bne.n	8008e04 <__gethex+0x374>
 8008de4:	f048 0810 	orr.w	r8, r8, #16
 8008de8:	e036      	b.n	8008e58 <__gethex+0x3c8>
 8008dea:	f04f 0b01 	mov.w	fp, #1
 8008dee:	e7d0      	b.n	8008d92 <__gethex+0x302>
 8008df0:	f04f 0801 	mov.w	r8, #1
 8008df4:	e7e2      	b.n	8008dbc <__gethex+0x32c>
 8008df6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008df8:	f1c3 0301 	rsb	r3, r3, #1
 8008dfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0ef      	beq.n	8008de4 <__gethex+0x354>
 8008e04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e08:	f104 0214 	add.w	r2, r4, #20
 8008e0c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	2300      	movs	r3, #0
 8008e14:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008e18:	4694      	mov	ip, r2
 8008e1a:	f852 1b04 	ldr.w	r1, [r2], #4
 8008e1e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008e22:	d01e      	beq.n	8008e62 <__gethex+0x3d2>
 8008e24:	3101      	adds	r1, #1
 8008e26:	f8cc 1000 	str.w	r1, [ip]
 8008e2a:	f1b8 0f02 	cmp.w	r8, #2
 8008e2e:	f104 0214 	add.w	r2, r4, #20
 8008e32:	d13d      	bne.n	8008eb0 <__gethex+0x420>
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	42ab      	cmp	r3, r5
 8008e3a:	d10b      	bne.n	8008e54 <__gethex+0x3c4>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	1169      	asrs	r1, r5, #5
 8008e40:	f005 051f 	and.w	r5, r5, #31
 8008e44:	fa03 f505 	lsl.w	r5, r3, r5
 8008e48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e4c:	421d      	tst	r5, r3
 8008e4e:	bf18      	it	ne
 8008e50:	f04f 0801 	movne.w	r8, #1
 8008e54:	f048 0820 	orr.w	r8, r8, #32
 8008e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e5a:	601c      	str	r4, [r3, #0]
 8008e5c:	9b02      	ldr	r3, [sp, #8]
 8008e5e:	601e      	str	r6, [r3, #0]
 8008e60:	e6a0      	b.n	8008ba4 <__gethex+0x114>
 8008e62:	4290      	cmp	r0, r2
 8008e64:	f842 3c04 	str.w	r3, [r2, #-4]
 8008e68:	d8d6      	bhi.n	8008e18 <__gethex+0x388>
 8008e6a:	68a2      	ldr	r2, [r4, #8]
 8008e6c:	4593      	cmp	fp, r2
 8008e6e:	db17      	blt.n	8008ea0 <__gethex+0x410>
 8008e70:	6861      	ldr	r1, [r4, #4]
 8008e72:	4648      	mov	r0, r9
 8008e74:	3101      	adds	r1, #1
 8008e76:	f7fd fea3 	bl	8006bc0 <_Balloc>
 8008e7a:	4682      	mov	sl, r0
 8008e7c:	b918      	cbnz	r0, 8008e86 <__gethex+0x3f6>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	2184      	movs	r1, #132	; 0x84
 8008e82:	4b1a      	ldr	r3, [pc, #104]	; (8008eec <__gethex+0x45c>)
 8008e84:	e6b1      	b.n	8008bea <__gethex+0x15a>
 8008e86:	6922      	ldr	r2, [r4, #16]
 8008e88:	f104 010c 	add.w	r1, r4, #12
 8008e8c:	3202      	adds	r2, #2
 8008e8e:	0092      	lsls	r2, r2, #2
 8008e90:	300c      	adds	r0, #12
 8008e92:	f7ff fd65 	bl	8008960 <memcpy>
 8008e96:	4621      	mov	r1, r4
 8008e98:	4648      	mov	r0, r9
 8008e9a:	f7fd fed1 	bl	8006c40 <_Bfree>
 8008e9e:	4654      	mov	r4, sl
 8008ea0:	6922      	ldr	r2, [r4, #16]
 8008ea2:	1c51      	adds	r1, r2, #1
 8008ea4:	6121      	str	r1, [r4, #16]
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008eac:	6151      	str	r1, [r2, #20]
 8008eae:	e7bc      	b.n	8008e2a <__gethex+0x39a>
 8008eb0:	6921      	ldr	r1, [r4, #16]
 8008eb2:	4559      	cmp	r1, fp
 8008eb4:	dd0b      	ble.n	8008ece <__gethex+0x43e>
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f7ff fd80 	bl	80089be <rshift>
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	3601      	adds	r6, #1
 8008ec2:	42b3      	cmp	r3, r6
 8008ec4:	f6ff aeda 	blt.w	8008c7c <__gethex+0x1ec>
 8008ec8:	f04f 0801 	mov.w	r8, #1
 8008ecc:	e7c2      	b.n	8008e54 <__gethex+0x3c4>
 8008ece:	f015 051f 	ands.w	r5, r5, #31
 8008ed2:	d0f9      	beq.n	8008ec8 <__gethex+0x438>
 8008ed4:	9b01      	ldr	r3, [sp, #4]
 8008ed6:	f1c5 0520 	rsb	r5, r5, #32
 8008eda:	441a      	add	r2, r3
 8008edc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008ee0:	f7fd ff60 	bl	8006da4 <__hi0bits>
 8008ee4:	42a8      	cmp	r0, r5
 8008ee6:	dbe6      	blt.n	8008eb6 <__gethex+0x426>
 8008ee8:	e7ee      	b.n	8008ec8 <__gethex+0x438>
 8008eea:	bf00      	nop
 8008eec:	0800968a 	.word	0x0800968a

08008ef0 <L_shift>:
 8008ef0:	f1c2 0208 	rsb	r2, r2, #8
 8008ef4:	0092      	lsls	r2, r2, #2
 8008ef6:	b570      	push	{r4, r5, r6, lr}
 8008ef8:	f1c2 0620 	rsb	r6, r2, #32
 8008efc:	6843      	ldr	r3, [r0, #4]
 8008efe:	6804      	ldr	r4, [r0, #0]
 8008f00:	fa03 f506 	lsl.w	r5, r3, r6
 8008f04:	432c      	orrs	r4, r5
 8008f06:	40d3      	lsrs	r3, r2
 8008f08:	6004      	str	r4, [r0, #0]
 8008f0a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f0e:	4288      	cmp	r0, r1
 8008f10:	d3f4      	bcc.n	8008efc <L_shift+0xc>
 8008f12:	bd70      	pop	{r4, r5, r6, pc}

08008f14 <__match>:
 8008f14:	b530      	push	{r4, r5, lr}
 8008f16:	6803      	ldr	r3, [r0, #0]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f1e:	b914      	cbnz	r4, 8008f26 <__match+0x12>
 8008f20:	6003      	str	r3, [r0, #0]
 8008f22:	2001      	movs	r0, #1
 8008f24:	bd30      	pop	{r4, r5, pc}
 8008f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008f2e:	2d19      	cmp	r5, #25
 8008f30:	bf98      	it	ls
 8008f32:	3220      	addls	r2, #32
 8008f34:	42a2      	cmp	r2, r4
 8008f36:	d0f0      	beq.n	8008f1a <__match+0x6>
 8008f38:	2000      	movs	r0, #0
 8008f3a:	e7f3      	b.n	8008f24 <__match+0x10>

08008f3c <__hexnan>:
 8008f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f40:	2500      	movs	r5, #0
 8008f42:	680b      	ldr	r3, [r1, #0]
 8008f44:	4682      	mov	sl, r0
 8008f46:	115e      	asrs	r6, r3, #5
 8008f48:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f4c:	f013 031f 	ands.w	r3, r3, #31
 8008f50:	bf18      	it	ne
 8008f52:	3604      	addne	r6, #4
 8008f54:	1f37      	subs	r7, r6, #4
 8008f56:	4690      	mov	r8, r2
 8008f58:	46b9      	mov	r9, r7
 8008f5a:	463c      	mov	r4, r7
 8008f5c:	46ab      	mov	fp, r5
 8008f5e:	b087      	sub	sp, #28
 8008f60:	6801      	ldr	r1, [r0, #0]
 8008f62:	9301      	str	r3, [sp, #4]
 8008f64:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f68:	9502      	str	r5, [sp, #8]
 8008f6a:	784a      	ldrb	r2, [r1, #1]
 8008f6c:	1c4b      	adds	r3, r1, #1
 8008f6e:	9303      	str	r3, [sp, #12]
 8008f70:	b342      	cbz	r2, 8008fc4 <__hexnan+0x88>
 8008f72:	4610      	mov	r0, r2
 8008f74:	9105      	str	r1, [sp, #20]
 8008f76:	9204      	str	r2, [sp, #16]
 8008f78:	f7ff fd74 	bl	8008a64 <__hexdig_fun>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d14f      	bne.n	8009020 <__hexnan+0xe4>
 8008f80:	9a04      	ldr	r2, [sp, #16]
 8008f82:	9905      	ldr	r1, [sp, #20]
 8008f84:	2a20      	cmp	r2, #32
 8008f86:	d818      	bhi.n	8008fba <__hexnan+0x7e>
 8008f88:	9b02      	ldr	r3, [sp, #8]
 8008f8a:	459b      	cmp	fp, r3
 8008f8c:	dd13      	ble.n	8008fb6 <__hexnan+0x7a>
 8008f8e:	454c      	cmp	r4, r9
 8008f90:	d206      	bcs.n	8008fa0 <__hexnan+0x64>
 8008f92:	2d07      	cmp	r5, #7
 8008f94:	dc04      	bgt.n	8008fa0 <__hexnan+0x64>
 8008f96:	462a      	mov	r2, r5
 8008f98:	4649      	mov	r1, r9
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f7ff ffa8 	bl	8008ef0 <L_shift>
 8008fa0:	4544      	cmp	r4, r8
 8008fa2:	d950      	bls.n	8009046 <__hexnan+0x10a>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f1a4 0904 	sub.w	r9, r4, #4
 8008faa:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fae:	461d      	mov	r5, r3
 8008fb0:	464c      	mov	r4, r9
 8008fb2:	f8cd b008 	str.w	fp, [sp, #8]
 8008fb6:	9903      	ldr	r1, [sp, #12]
 8008fb8:	e7d7      	b.n	8008f6a <__hexnan+0x2e>
 8008fba:	2a29      	cmp	r2, #41	; 0x29
 8008fbc:	d155      	bne.n	800906a <__hexnan+0x12e>
 8008fbe:	3102      	adds	r1, #2
 8008fc0:	f8ca 1000 	str.w	r1, [sl]
 8008fc4:	f1bb 0f00 	cmp.w	fp, #0
 8008fc8:	d04f      	beq.n	800906a <__hexnan+0x12e>
 8008fca:	454c      	cmp	r4, r9
 8008fcc:	d206      	bcs.n	8008fdc <__hexnan+0xa0>
 8008fce:	2d07      	cmp	r5, #7
 8008fd0:	dc04      	bgt.n	8008fdc <__hexnan+0xa0>
 8008fd2:	462a      	mov	r2, r5
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f7ff ff8a 	bl	8008ef0 <L_shift>
 8008fdc:	4544      	cmp	r4, r8
 8008fde:	d934      	bls.n	800904a <__hexnan+0x10e>
 8008fe0:	4623      	mov	r3, r4
 8008fe2:	f1a8 0204 	sub.w	r2, r8, #4
 8008fe6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008fea:	429f      	cmp	r7, r3
 8008fec:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ff0:	d2f9      	bcs.n	8008fe6 <__hexnan+0xaa>
 8008ff2:	1b3b      	subs	r3, r7, r4
 8008ff4:	f023 0303 	bic.w	r3, r3, #3
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	3e03      	subs	r6, #3
 8008ffc:	3401      	adds	r4, #1
 8008ffe:	42a6      	cmp	r6, r4
 8009000:	bf38      	it	cc
 8009002:	2304      	movcc	r3, #4
 8009004:	2200      	movs	r2, #0
 8009006:	4443      	add	r3, r8
 8009008:	f843 2b04 	str.w	r2, [r3], #4
 800900c:	429f      	cmp	r7, r3
 800900e:	d2fb      	bcs.n	8009008 <__hexnan+0xcc>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	b91b      	cbnz	r3, 800901c <__hexnan+0xe0>
 8009014:	4547      	cmp	r7, r8
 8009016:	d126      	bne.n	8009066 <__hexnan+0x12a>
 8009018:	2301      	movs	r3, #1
 800901a:	603b      	str	r3, [r7, #0]
 800901c:	2005      	movs	r0, #5
 800901e:	e025      	b.n	800906c <__hexnan+0x130>
 8009020:	3501      	adds	r5, #1
 8009022:	2d08      	cmp	r5, #8
 8009024:	f10b 0b01 	add.w	fp, fp, #1
 8009028:	dd06      	ble.n	8009038 <__hexnan+0xfc>
 800902a:	4544      	cmp	r4, r8
 800902c:	d9c3      	bls.n	8008fb6 <__hexnan+0x7a>
 800902e:	2300      	movs	r3, #0
 8009030:	2501      	movs	r5, #1
 8009032:	f844 3c04 	str.w	r3, [r4, #-4]
 8009036:	3c04      	subs	r4, #4
 8009038:	6822      	ldr	r2, [r4, #0]
 800903a:	f000 000f 	and.w	r0, r0, #15
 800903e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009042:	6020      	str	r0, [r4, #0]
 8009044:	e7b7      	b.n	8008fb6 <__hexnan+0x7a>
 8009046:	2508      	movs	r5, #8
 8009048:	e7b5      	b.n	8008fb6 <__hexnan+0x7a>
 800904a:	9b01      	ldr	r3, [sp, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d0df      	beq.n	8009010 <__hexnan+0xd4>
 8009050:	f04f 32ff 	mov.w	r2, #4294967295
 8009054:	f1c3 0320 	rsb	r3, r3, #32
 8009058:	40da      	lsrs	r2, r3
 800905a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800905e:	4013      	ands	r3, r2
 8009060:	f846 3c04 	str.w	r3, [r6, #-4]
 8009064:	e7d4      	b.n	8009010 <__hexnan+0xd4>
 8009066:	3f04      	subs	r7, #4
 8009068:	e7d2      	b.n	8009010 <__hexnan+0xd4>
 800906a:	2004      	movs	r0, #4
 800906c:	b007      	add	sp, #28
 800906e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009072 <__ascii_mbtowc>:
 8009072:	b082      	sub	sp, #8
 8009074:	b901      	cbnz	r1, 8009078 <__ascii_mbtowc+0x6>
 8009076:	a901      	add	r1, sp, #4
 8009078:	b142      	cbz	r2, 800908c <__ascii_mbtowc+0x1a>
 800907a:	b14b      	cbz	r3, 8009090 <__ascii_mbtowc+0x1e>
 800907c:	7813      	ldrb	r3, [r2, #0]
 800907e:	600b      	str	r3, [r1, #0]
 8009080:	7812      	ldrb	r2, [r2, #0]
 8009082:	1e10      	subs	r0, r2, #0
 8009084:	bf18      	it	ne
 8009086:	2001      	movne	r0, #1
 8009088:	b002      	add	sp, #8
 800908a:	4770      	bx	lr
 800908c:	4610      	mov	r0, r2
 800908e:	e7fb      	b.n	8009088 <__ascii_mbtowc+0x16>
 8009090:	f06f 0001 	mvn.w	r0, #1
 8009094:	e7f8      	b.n	8009088 <__ascii_mbtowc+0x16>

08009096 <_realloc_r>:
 8009096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800909a:	4680      	mov	r8, r0
 800909c:	4614      	mov	r4, r2
 800909e:	460e      	mov	r6, r1
 80090a0:	b921      	cbnz	r1, 80090ac <_realloc_r+0x16>
 80090a2:	4611      	mov	r1, r2
 80090a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090a8:	f7fd bcfe 	b.w	8006aa8 <_malloc_r>
 80090ac:	b92a      	cbnz	r2, 80090ba <_realloc_r+0x24>
 80090ae:	f7fd fc8b 	bl	80069c8 <_free_r>
 80090b2:	4625      	mov	r5, r4
 80090b4:	4628      	mov	r0, r5
 80090b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ba:	f000 f86d 	bl	8009198 <_malloc_usable_size_r>
 80090be:	4284      	cmp	r4, r0
 80090c0:	4607      	mov	r7, r0
 80090c2:	d802      	bhi.n	80090ca <_realloc_r+0x34>
 80090c4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090c8:	d812      	bhi.n	80090f0 <_realloc_r+0x5a>
 80090ca:	4621      	mov	r1, r4
 80090cc:	4640      	mov	r0, r8
 80090ce:	f7fd fceb 	bl	8006aa8 <_malloc_r>
 80090d2:	4605      	mov	r5, r0
 80090d4:	2800      	cmp	r0, #0
 80090d6:	d0ed      	beq.n	80090b4 <_realloc_r+0x1e>
 80090d8:	42bc      	cmp	r4, r7
 80090da:	4622      	mov	r2, r4
 80090dc:	4631      	mov	r1, r6
 80090de:	bf28      	it	cs
 80090e0:	463a      	movcs	r2, r7
 80090e2:	f7ff fc3d 	bl	8008960 <memcpy>
 80090e6:	4631      	mov	r1, r6
 80090e8:	4640      	mov	r0, r8
 80090ea:	f7fd fc6d 	bl	80069c8 <_free_r>
 80090ee:	e7e1      	b.n	80090b4 <_realloc_r+0x1e>
 80090f0:	4635      	mov	r5, r6
 80090f2:	e7df      	b.n	80090b4 <_realloc_r+0x1e>

080090f4 <__ascii_wctomb>:
 80090f4:	4603      	mov	r3, r0
 80090f6:	4608      	mov	r0, r1
 80090f8:	b141      	cbz	r1, 800910c <__ascii_wctomb+0x18>
 80090fa:	2aff      	cmp	r2, #255	; 0xff
 80090fc:	d904      	bls.n	8009108 <__ascii_wctomb+0x14>
 80090fe:	228a      	movs	r2, #138	; 0x8a
 8009100:	f04f 30ff 	mov.w	r0, #4294967295
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	4770      	bx	lr
 8009108:	2001      	movs	r0, #1
 800910a:	700a      	strb	r2, [r1, #0]
 800910c:	4770      	bx	lr

0800910e <_raise_r>:
 800910e:	291f      	cmp	r1, #31
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4604      	mov	r4, r0
 8009114:	460d      	mov	r5, r1
 8009116:	d904      	bls.n	8009122 <_raise_r+0x14>
 8009118:	2316      	movs	r3, #22
 800911a:	6003      	str	r3, [r0, #0]
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	bd38      	pop	{r3, r4, r5, pc}
 8009122:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009124:	b112      	cbz	r2, 800912c <_raise_r+0x1e>
 8009126:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800912a:	b94b      	cbnz	r3, 8009140 <_raise_r+0x32>
 800912c:	4620      	mov	r0, r4
 800912e:	f000 f831 	bl	8009194 <_getpid_r>
 8009132:	462a      	mov	r2, r5
 8009134:	4601      	mov	r1, r0
 8009136:	4620      	mov	r0, r4
 8009138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800913c:	f000 b818 	b.w	8009170 <_kill_r>
 8009140:	2b01      	cmp	r3, #1
 8009142:	d00a      	beq.n	800915a <_raise_r+0x4c>
 8009144:	1c59      	adds	r1, r3, #1
 8009146:	d103      	bne.n	8009150 <_raise_r+0x42>
 8009148:	2316      	movs	r3, #22
 800914a:	6003      	str	r3, [r0, #0]
 800914c:	2001      	movs	r0, #1
 800914e:	e7e7      	b.n	8009120 <_raise_r+0x12>
 8009150:	2400      	movs	r4, #0
 8009152:	4628      	mov	r0, r5
 8009154:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009158:	4798      	blx	r3
 800915a:	2000      	movs	r0, #0
 800915c:	e7e0      	b.n	8009120 <_raise_r+0x12>
	...

08009160 <raise>:
 8009160:	4b02      	ldr	r3, [pc, #8]	; (800916c <raise+0xc>)
 8009162:	4601      	mov	r1, r0
 8009164:	6818      	ldr	r0, [r3, #0]
 8009166:	f7ff bfd2 	b.w	800910e <_raise_r>
 800916a:	bf00      	nop
 800916c:	20000068 	.word	0x20000068

08009170 <_kill_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	2300      	movs	r3, #0
 8009174:	4d06      	ldr	r5, [pc, #24]	; (8009190 <_kill_r+0x20>)
 8009176:	4604      	mov	r4, r0
 8009178:	4608      	mov	r0, r1
 800917a:	4611      	mov	r1, r2
 800917c:	602b      	str	r3, [r5, #0]
 800917e:	f7f9 f9b1 	bl	80024e4 <_kill>
 8009182:	1c43      	adds	r3, r0, #1
 8009184:	d102      	bne.n	800918c <_kill_r+0x1c>
 8009186:	682b      	ldr	r3, [r5, #0]
 8009188:	b103      	cbz	r3, 800918c <_kill_r+0x1c>
 800918a:	6023      	str	r3, [r4, #0]
 800918c:	bd38      	pop	{r3, r4, r5, pc}
 800918e:	bf00      	nop
 8009190:	2000053c 	.word	0x2000053c

08009194 <_getpid_r>:
 8009194:	f7f9 b99f 	b.w	80024d6 <_getpid>

08009198 <_malloc_usable_size_r>:
 8009198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800919c:	1f18      	subs	r0, r3, #4
 800919e:	2b00      	cmp	r3, #0
 80091a0:	bfbc      	itt	lt
 80091a2:	580b      	ldrlt	r3, [r1, r0]
 80091a4:	18c0      	addlt	r0, r0, r3
 80091a6:	4770      	bx	lr

080091a8 <_init>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	bf00      	nop
 80091ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ae:	bc08      	pop	{r3}
 80091b0:	469e      	mov	lr, r3
 80091b2:	4770      	bx	lr

080091b4 <_fini>:
 80091b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b6:	bf00      	nop
 80091b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ba:	bc08      	pop	{r3}
 80091bc:	469e      	mov	lr, r3
 80091be:	4770      	bx	lr
