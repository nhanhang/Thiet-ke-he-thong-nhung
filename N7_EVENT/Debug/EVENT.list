
EVENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080086c0  080086c0  000186c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b14  08008b14  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008b14  08008b14  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b14  08008b14  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b14  08008b14  00018b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b18  08008b18  00018b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  200001d4  08008cf0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08008cf0  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010741  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025f9  00000000  00000000  00030981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  00032f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce6  00000000  00000000  00033fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a5d  00000000  00000000  00034cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139b4  00000000  00000000  0003871b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ee89  00000000  00000000  0004c0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a88  00000000  00000000  000daf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000e09e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080086a8 	.word	0x080086a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080086a8 	.word	0x080086a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__gesf2>:
 8000eec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ef0:	e006      	b.n	8000f00 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__lesf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	e002      	b.n	8000f00 <__cmpsf2+0x4>
 8000efa:	bf00      	nop

08000efc <__cmpsf2>:
 8000efc:	f04f 0c01 	mov.w	ip, #1
 8000f00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f10:	bf18      	it	ne
 8000f12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f16:	d011      	beq.n	8000f3c <__cmpsf2+0x40>
 8000f18:	b001      	add	sp, #4
 8000f1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1e:	bf18      	it	ne
 8000f20:	ea90 0f01 	teqne	r0, r1
 8000f24:	bf58      	it	pl
 8000f26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2a:	bf88      	it	hi
 8000f2c:	17c8      	asrhi	r0, r1, #31
 8000f2e:	bf38      	it	cc
 8000f30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f34:	bf18      	it	ne
 8000f36:	f040 0001 	orrne.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__cmpsf2+0x4c>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d105      	bne.n	8000f54 <__cmpsf2+0x58>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d1e4      	bne.n	8000f18 <__cmpsf2+0x1c>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d0e1      	beq.n	8000f18 <__cmpsf2+0x1c>
 8000f54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__aeabi_cfrcmple>:
 8000f5c:	4684      	mov	ip, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4661      	mov	r1, ip
 8000f62:	e7ff      	b.n	8000f64 <__aeabi_cfcmpeq>

08000f64 <__aeabi_cfcmpeq>:
 8000f64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f66:	f7ff ffc9 	bl	8000efc <__cmpsf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	bf48      	it	mi
 8000f6e:	f110 0f00 	cmnmi.w	r0, #0
 8000f72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f74 <__aeabi_fcmpeq>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff fff4 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2001      	moveq	r0, #1
 8000f80:	2000      	movne	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmplt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffea 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmple>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffe0 	bl	8000f64 <__aeabi_cfcmpeq>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpge>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffd2 	bl	8000f5c <__aeabi_cfrcmple>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpgt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffc8 	bl	8000f5c <__aeabi_cfrcmple>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_d2lz>:
 8000fd8:	b538      	push	{r3, r4, r5, lr}
 8000fda:	4605      	mov	r5, r0
 8000fdc:	460c      	mov	r4, r1
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	4628      	mov	r0, r5
 8000fe4:	4621      	mov	r1, r4
 8000fe6:	f7ff fd9d 	bl	8000b24 <__aeabi_dcmplt>
 8000fea:	b928      	cbnz	r0, 8000ff8 <__aeabi_d2lz+0x20>
 8000fec:	4628      	mov	r0, r5
 8000fee:	4621      	mov	r1, r4
 8000ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ff4:	f000 b80a 	b.w	800100c <__aeabi_d2ulz>
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ffe:	f000 f805 	bl	800100c <__aeabi_d2ulz>
 8001002:	4240      	negs	r0, r0
 8001004:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001008:	bd38      	pop	{r3, r4, r5, pc}
 800100a:	bf00      	nop

0800100c <__aeabi_d2ulz>:
 800100c:	b5d0      	push	{r4, r6, r7, lr}
 800100e:	2200      	movs	r2, #0
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <__aeabi_d2ulz+0x34>)
 8001012:	4606      	mov	r6, r0
 8001014:	460f      	mov	r7, r1
 8001016:	f7ff fb13 	bl	8000640 <__aeabi_dmul>
 800101a:	f7ff fde9 	bl	8000bf0 <__aeabi_d2uiz>
 800101e:	4604      	mov	r4, r0
 8001020:	f7ff fa94 	bl	800054c <__aeabi_ui2d>
 8001024:	2200      	movs	r2, #0
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <__aeabi_d2ulz+0x38>)
 8001028:	f7ff fb0a 	bl	8000640 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4630      	mov	r0, r6
 8001032:	4639      	mov	r1, r7
 8001034:	f7ff f94c 	bl	80002d0 <__aeabi_dsub>
 8001038:	f7ff fdda 	bl	8000bf0 <__aeabi_d2uiz>
 800103c:	4621      	mov	r1, r4
 800103e:	bdd0      	pop	{r4, r6, r7, pc}
 8001040:	3df00000 	.word	0x3df00000
 8001044:	41f00000 	.word	0x41f00000

08001048 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f002 fa9f 	bl	8003594 <HAL_TIM_Base_Start>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 8001072:	bf00      	nop
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	429a      	cmp	r2, r3
 800107e:	d3f9      	bcc.n	8001074 <DELAY_TIM_Us+0x16>
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <DHT11_DelayInit>:
    uint8_t value = HAL_GPIO_ReadPin(dht->Port, dht->Pin);
    return value;
}

static void DHT11_DelayInit(DHT11_Sensor* dht)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(dht->Timer);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ffd5 	bl	8001048 <DELAY_TIM_Init>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <DHT11_Init>:

    return value;
}

void DHT11_Init(DHT11_Sensor* dht, GPIO_TypeDef* port, uint16_t pin, TIM_HandleTypeDef* timer)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	4613      	mov	r3, r2
 80010b6:	80fb      	strh	r3, [r7, #6]
    dht->Port   = port;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	601a      	str	r2, [r3, #0]
    dht->Pin    = pin;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	88fa      	ldrh	r2, [r7, #6]
 80010c2:	809a      	strh	r2, [r3, #4]
    dht->Timer  = timer;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	609a      	str	r2, [r3, #8]
    dht->Temp   = INIT_TEMP_VALUE;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <DHT11_Init+0x3c>)
 80010ce:	60da      	str	r2, [r3, #12]
    dht->Humi   = INIT_HUMI_VALUE;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <DHT11_Init+0x3c>)
 80010d4:	611a      	str	r2, [r3, #16]

    DHT11_DelayInit(dht);
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f7ff ffd8 	bl	800108c <DHT11_DelayInit>
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	bf800000 	.word	0xbf800000

080010e8 <SRF05_DELAY_Us>:
#define TRIG_LOW()		HAL_GPIO_WritePin(SRF05->TRIGGER_GPIOx, SRF05->TRIGGER_GPIO_Pin, GPIO_PIN_RESET)
#define READ_ECHO() 	HAL_GPIO_ReadPin(SRF05->ECHO_GPIOx, SRF05->ECHO_GPIO_Pin)
extern TIM_HandleTypeDef htim3;

static void SRF05_DELAY_Us(uint16_t Time)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
	DELAY_TIM_Us(&htim3, Time); // thay the ham nay neu su dung ham delay khac
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <SRF05_DELAY_Us+0x1c>)
 80010f8:	f7ff ffb1 	bl	800105e <DELAY_TIM_Us>

}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200002d4 	.word	0x200002d4

08001108 <SRF05_Init>:

//************************* HIGH Level Layer **********************************************************/
// function:  init SRF05
// input: SRF05 target, TRIG pin, Echo Pin
// output: 0 false, 1 true
uint8_t SRF05_Init(SRF05_Device_Name* SRF05, GPIO_TypeDef* ECHO_GPIOx, uint16_t ECHO_GPIO_Pin, GPIO_TypeDef* TRIGGER_GPIOx, uint16_t TRIGGER_GPIO_Pin) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	4613      	mov	r3, r2
 8001116:	80fb      	strh	r3, [r7, #6]

	SRF05->ECHO_GPIOx = ECHO_GPIOx;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	601a      	str	r2, [r3, #0]
	SRF05->ECHO_GPIO_Pin = ECHO_GPIO_Pin;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	88fa      	ldrh	r2, [r7, #6]
 8001122:	809a      	strh	r2, [r3, #4]
	SRF05->TRIGGER_GPIOx = TRIGGER_GPIOx;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	609a      	str	r2, [r3, #8]
	SRF05->TRIGGER_GPIO_Pin = TRIGGER_GPIO_Pin;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	8b3a      	ldrh	r2, [r7, #24]
 800112e:	819a      	strh	r2, [r3, #12]
	TRIG_LOW();
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6898      	ldr	r0, [r3, #8]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	899b      	ldrh	r3, [r3, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	4619      	mov	r1, r3
 800113c:	f001 f915 	bl	800236a <HAL_GPIO_WritePin>
	if (SRF05_Read(SRF05) >= 0) {
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f000 f811 	bl	8001168 <SRF05_Read>
 8001146:	4603      	mov	r3, r0
 8001148:	f04f 0100 	mov.w	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff2f 	bl	8000fb0 <__aeabi_fcmpge>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SRF05_Init+0x54>
		return 1;
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <SRF05_Init+0x56>
	}
	return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <SRF05_Read>:

float SRF05_Read(SRF05_Device_Name* SRF05) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	uint32_t time, timeout;

	TRIG_LOW();
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6898      	ldr	r0, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	899b      	ldrh	r3, [r3, #12]
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	f001 f8f5 	bl	800236a <HAL_GPIO_WritePin>
	SRF05_DELAY_Us(2);
 8001180:	2002      	movs	r0, #2
 8001182:	f7ff ffb1 	bl	80010e8 <SRF05_DELAY_Us>
	TRIG_HIGH();
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6898      	ldr	r0, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	899b      	ldrh	r3, [r3, #12]
 800118e:	2201      	movs	r2, #1
 8001190:	4619      	mov	r1, r3
 8001192:	f001 f8ea 	bl	800236a <HAL_GPIO_WritePin>
	SRF05_DELAY_Us(10);
 8001196:	200a      	movs	r0, #10
 8001198:	f7ff ffa6 	bl	80010e8 <SRF05_DELAY_Us>
	TRIG_LOW();
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6898      	ldr	r0, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	899b      	ldrh	r3, [r3, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	4619      	mov	r1, r3
 80011a8:	f001 f8df 	bl	800236a <HAL_GPIO_WritePin>
	timeout = SRF05_TIMEOUT;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <SRF05_Read+0xbc>)
 80011ae:	60bb      	str	r3, [r7, #8]
	while (!READ_ECHO())
 80011b0:	e006      	b.n	80011c0 <SRF05_Read+0x58>
	{
		if (timeout-- == 0x00)
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1e5a      	subs	r2, r3, #1
 80011b6:	60ba      	str	r2, [r7, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <SRF05_Read+0x58>
		{
			return -1;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <SRF05_Read+0xc0>)
 80011be:	e02c      	b.n	800121a <SRF05_Read+0xb2>
	while (!READ_ECHO())
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	889b      	ldrh	r3, [r3, #4]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4610      	mov	r0, r2
 80011cc:	f001 f8b6 	bl	800233c <HAL_GPIO_ReadPin>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0ed      	beq.n	80011b2 <SRF05_Read+0x4a>
		}
	}
	time = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
	while (READ_ECHO())
 80011da:	e005      	b.n	80011e8 <SRF05_Read+0x80>
	{
		time++;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
		SRF05_DELAY_Us(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f7ff ff80 	bl	80010e8 <SRF05_DELAY_Us>
	while (READ_ECHO())
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	889b      	ldrh	r3, [r3, #4]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f001 f8a2 	bl	800233c <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1ee      	bne.n	80011dc <SRF05_Read+0x74>
	}
	SRF05->Distance =  (float)time * SRF05_NUMBER;
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff fe1c 	bl	8000e3c <__aeabi_ui2f>
 8001204:	4603      	mov	r3, r0
 8001206:	4909      	ldr	r1, [pc, #36]	; (800122c <SRF05_Read+0xc4>)
 8001208:	4618      	mov	r0, r3
 800120a:	f7fe ffa9 	bl	8000160 <__aeabi_fmul>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	611a      	str	r2, [r3, #16]

	return SRF05->Distance;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	000f4240 	.word	0x000f4240
 8001228:	bf800000 	.word	0xbf800000
 800122c:	3c8cc17a 	.word	0x3c8cc17a

08001230 <LCD_Write>:
static void LCD_WriteChar(LCD_I2C_Name* lcd, char character);

/* Private user code ---------------------------------------------------------*/

static void LCD_Write(LCD_I2C_Name* lcd, uint8_t data, uint8_t mode)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af02      	add	r7, sp, #8
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
 800123c:	4613      	mov	r3, r2
 800123e:	70bb      	strb	r3, [r7, #2]
    uint8_t Data_H, Data_L;
	uint8_t Data_I2C[4];

	Data_H = data & 0xF0;
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	f023 030f 	bic.w	r3, r3, #15
 8001246:	73fb      	strb	r3, [r7, #15]
	Data_L = (data << 4) & 0xF0;
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	73bb      	strb	r3, [r7, #14]

	if(lcd->BackLight)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7adb      	ldrb	r3, [r3, #11]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d007      	beq.n	8001266 <LCD_Write+0x36>
	{
        /* Set bit */
		Data_H |= LCD_BACKLIGHT;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 800125e:	7bbb      	ldrb	r3, [r7, #14]
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA)
 8001266:	78bb      	ldrb	r3, [r7, #2]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d108      	bne.n	800127e <LCD_Write+0x4e>
	{
        /* Set bit */
		Data_H |= LCD_RS;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8001274:	7bbb      	ldrb	r3, [r7, #14]
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	73bb      	strb	r3, [r7, #14]
 800127c:	e00a      	b.n	8001294 <LCD_Write+0x64>
	}
	else if(mode == LCD_COMMAND)
 800127e:	78bb      	ldrb	r3, [r7, #2]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d107      	bne.n	8001294 <LCD_Write+0x64>
	{
        /* Clear bit */
		Data_H &= ~LCD_RS;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	f023 0301 	bic.w	r3, r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	73bb      	strb	r3, [r7, #14]
	}

    /* Assign data to higher bits */
	Data_I2C[0] = Data_H|LCD_EN;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	b2db      	uxtb	r3, r3
 800129c:	723b      	strb	r3, [r7, #8]
	LCD_DelayMs(1);
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 fdc0 	bl	8001e24 <HAL_Delay>
	Data_I2C[1] = Data_H;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	727b      	strb	r3, [r7, #9]

    /* Assign data to lower bits */
	Data_I2C[2] = Data_L|LCD_EN;
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	72bb      	strb	r3, [r7, #10]
	LCD_DelayMs(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f000 fdb6 	bl	8001e24 <HAL_Delay>
	Data_I2C[3] = Data_L;
 80012b8:	7bbb      	ldrb	r3, [r7, #14]
 80012ba:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd->I2c, lcd->Address, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	791b      	ldrb	r3, [r3, #4]
 80012c4:	b299      	uxth	r1, r3
 80012c6:	f107 0208 	add.w	r2, r7, #8
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2304      	movs	r3, #4
 80012d2:	f001 f9a7 	bl	8002624 <HAL_I2C_Master_Transmit>
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <LCD_Init>:

void LCD_Init(LCD_I2C_Name* lcd, I2C_HandleTypeDef* i2c, uint8_t address, uint8_t columns, uint8_t rows)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	4611      	mov	r1, r2
 80012ea:	461a      	mov	r2, r3
 80012ec:	460b      	mov	r3, r1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	4613      	mov	r3, r2
 80012f2:	71bb      	strb	r3, [r7, #6]
    lcd->I2c        = i2c;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	601a      	str	r2, [r3, #0]
    lcd->Address    = address;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	79fa      	ldrb	r2, [r7, #7]
 80012fe:	711a      	strb	r2, [r3, #4]
    lcd->Columns    = columns;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	79ba      	ldrb	r2, [r7, #6]
 8001304:	715a      	strb	r2, [r3, #5]
    lcd->Rows       = rows;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	7e3a      	ldrb	r2, [r7, #24]
 800130a:	719a      	strb	r2, [r3, #6]

    lcd->FunctionSet    = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2228      	movs	r2, #40	; 0x28
 8001310:	729a      	strb	r2, [r3, #10]
    lcd->EntryMode      = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2206      	movs	r2, #6
 8001316:	71da      	strb	r2, [r3, #7]
    lcd->DisplayControl = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	220c      	movs	r2, #12
 800131c:	721a      	strb	r2, [r3, #8]
    lcd->CursorShift    = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2214      	movs	r2, #20
 8001322:	725a      	strb	r2, [r3, #9]
    lcd->BackLight      = LCD_BACKLIGHT;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2208      	movs	r2, #8
 8001328:	72da      	strb	r2, [r3, #11]

    LCD_DelayMs(50);
 800132a:	2032      	movs	r0, #50	; 0x32
 800132c:	f000 fd7a 	bl	8001e24 <HAL_Delay>
	LCD_Write(lcd, 0x33, LCD_COMMAND);
 8001330:	2200      	movs	r2, #0
 8001332:	2133      	movs	r1, #51	; 0x33
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f7ff ff7b 	bl	8001230 <LCD_Write>

	LCD_Write(lcd, 0x33, LCD_COMMAND);
 800133a:	2200      	movs	r2, #0
 800133c:	2133      	movs	r1, #51	; 0x33
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f7ff ff76 	bl	8001230 <LCD_Write>
	LCD_DelayMs(5);
 8001344:	2005      	movs	r0, #5
 8001346:	f000 fd6d 	bl	8001e24 <HAL_Delay>
	LCD_Write(lcd, 0x32, LCD_COMMAND);
 800134a:	2200      	movs	r2, #0
 800134c:	2132      	movs	r1, #50	; 0x32
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f7ff ff6e 	bl	8001230 <LCD_Write>
	LCD_DelayMs(5);
 8001354:	2005      	movs	r0, #5
 8001356:	f000 fd65 	bl	8001e24 <HAL_Delay>
	LCD_Write(lcd, 0x20, LCD_COMMAND);
 800135a:	2200      	movs	r2, #0
 800135c:	2120      	movs	r1, #32
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f7ff ff66 	bl	8001230 <LCD_Write>
	LCD_DelayMs(5);
 8001364:	2005      	movs	r0, #5
 8001366:	f000 fd5d 	bl	8001e24 <HAL_Delay>

	LCD_Write(lcd, lcd->EntryMode, LCD_COMMAND);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	79db      	ldrb	r3, [r3, #7]
 800136e:	2200      	movs	r2, #0
 8001370:	4619      	mov	r1, r3
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff ff5c 	bl	8001230 <LCD_Write>
	LCD_Write(lcd, lcd->DisplayControl, LCD_COMMAND);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	7a1b      	ldrb	r3, [r3, #8]
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f7ff ff55 	bl	8001230 <LCD_Write>
	LCD_Write(lcd, lcd->CursorShift, LCD_COMMAND);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	7a5b      	ldrb	r3, [r3, #9]
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7ff ff4e 	bl	8001230 <LCD_Write>
	LCD_Write(lcd, lcd->FunctionSet, LCD_COMMAND);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	7a9b      	ldrb	r3, [r3, #10]
 8001398:	2200      	movs	r2, #0
 800139a:	4619      	mov	r1, r3
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f7ff ff47 	bl	8001230 <LCD_Write>

	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2101      	movs	r1, #1
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f7ff ff42 	bl	8001230 <LCD_Write>
	LCD_Write(lcd, LCD_RETURNHOME, LCD_COMMAND);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2102      	movs	r1, #2
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f7ff ff3d 	bl	8001230 <LCD_Write>
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int a)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&a, 1, HAL_MAX_DELAY);
 80013c8:	1d39      	adds	r1, r7, #4
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	2201      	movs	r2, #1
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <__io_putchar+0x20>)
 80013d2:	f002 fbe9 	bl	8003ba8 <HAL_UART_Transmit>

	return a;
 80013d6:	687b      	ldr	r3, [r7, #4]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000031c 	.word	0x2000031c

080013e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ea:	f000 fcb9 	bl	8001d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ee:	f000 f85d 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f2:	f000 f9e3 	bl	80017bc <MX_GPIO_Init>
  MX_I2C2_Init();
 80013f6:	f000 f89f 	bl	8001538 <MX_I2C2_Init>
  MX_TIM1_Init();
 80013fa:	f000 f8cb 	bl	8001594 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013fe:	f000 f919 	bl	8001634 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001402:	f000 f963 	bl	80016cc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001406:	f000 f9af 	bl	8001768 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init(&lcd, &hi2c2, LDC_DEFAULT_ADDRESS, 20, 4);
 800140a:	2304      	movs	r3, #4
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2314      	movs	r3, #20
 8001410:	224e      	movs	r2, #78	; 0x4e
 8001412:	491a      	ldr	r1, [pc, #104]	; (800147c <main+0x98>)
 8001414:	481a      	ldr	r0, [pc, #104]	; (8001480 <main+0x9c>)
 8001416:	f7ff ff62 	bl	80012de <LCD_Init>
	DHT11_Init(&dht11, DHT_GPIO_Port, DHT_Pin, &htim3);
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <main+0xa0>)
 800141c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001420:	4919      	ldr	r1, [pc, #100]	; (8001488 <main+0xa4>)
 8001422:	481a      	ldr	r0, [pc, #104]	; (800148c <main+0xa8>)
 8001424:	f7ff fe40 	bl	80010a8 <DHT11_Init>
	SRF05_Init(&hrf05, ECHO_GPIO_Port, ECHO_Pin, TRIG_GPIO_Port, TRIG_Pin);
 8001428:	2320      	movs	r3, #32
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <main+0xa4>)
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	4915      	ldr	r1, [pc, #84]	; (8001488 <main+0xa4>)
 8001432:	4817      	ldr	r0, [pc, #92]	; (8001490 <main+0xac>)
 8001434:	f7ff fe68 	bl	8001108 <SRF05_Init>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxData[rxDataId], 1);
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <main+0xb0>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <main+0xb4>)
 8001440:	4413      	add	r3, r2
 8001442:	2201      	movs	r2, #1
 8001444:	4619      	mov	r1, r3
 8001446:	4815      	ldr	r0, [pc, #84]	; (800149c <main+0xb8>)
 8001448:	f002 fc31 	bl	8003cae <HAL_UART_Receive_IT>
  /* USER CODE END 2 */
	Queue_Init(&TaskQueue, 20);
 800144c:	2114      	movs	r1, #20
 800144e:	4814      	ldr	r0, [pc, #80]	; (80014a0 <main+0xbc>)
 8001450:	f000 fc00 	bl	8001c54 <Queue_Init>
	HAL_TIM_Base_Start_IT(&htim1);
 8001454:	4813      	ldr	r0, [pc, #76]	; (80014a4 <main+0xc0>)
 8001456:	f002 f8e7 	bl	8003628 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800145a:	4813      	ldr	r0, [pc, #76]	; (80014a8 <main+0xc4>)
 800145c:	f002 f8e4 	bl	8003628 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  while(TaskQueue.Size != 0){
 8001460:	e005      	b.n	800146e <main+0x8a>
	  			pTaskFunction taskHander = Queue_Pop(&TaskQueue);
 8001462:	480f      	ldr	r0, [pc, #60]	; (80014a0 <main+0xbc>)
 8001464:	f000 fc13 	bl	8001c8e <Queue_Pop>
 8001468:	6078      	str	r0, [r7, #4]
	  			taskHander();
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4798      	blx	r3
	  while(TaskQueue.Size != 0){
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <main+0xbc>)
 8001470:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f4      	bne.n	8001462 <main+0x7e>
 8001478:	e7f9      	b.n	800146e <main+0x8a>
 800147a:	bf00      	nop
 800147c:	200001f0 	.word	0x200001f0
 8001480:	20000378 	.word	0x20000378
 8001484:	200002d4 	.word	0x200002d4
 8001488:	40010800 	.word	0x40010800
 800148c:	20000364 	.word	0x20000364
 8001490:	20000384 	.word	0x20000384
 8001494:	200003ac 	.word	0x200003ac
 8001498:	20000398 	.word	0x20000398
 800149c:	2000031c 	.word	0x2000031c
 80014a0:	200003b0 	.word	0x200003b0
 80014a4:	20000244 	.word	0x20000244
 80014a8:	2000028c 	.word	0x2000028c

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b090      	sub	sp, #64	; 0x40
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0318 	add.w	r3, r7, #24
 80014b6:	2228      	movs	r2, #40	; 0x28
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 fde6 	bl	800508c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014dc:	2301      	movs	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e0:	2302      	movs	r3, #2
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 fbed 	bl	8002cd4 <HAL_RCC_OscConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001500:	f000 f9b4 	bl	800186c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001504:	230f      	movs	r3, #15
 8001506:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001508:	2302      	movs	r3, #2
 800150a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001514:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2102      	movs	r1, #2
 800151e:	4618      	mov	r0, r3
 8001520:	f001 fe5a 	bl	80031d8 <HAL_RCC_ClockConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800152a:	f000 f99f 	bl	800186c <Error_Handler>
  }
}
 800152e:	bf00      	nop
 8001530:	3740      	adds	r7, #64	; 0x40
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_I2C2_Init+0x50>)
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <MX_I2C2_Init+0x54>)
 8001540:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_I2C2_Init+0x50>)
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_I2C2_Init+0x58>)
 8001546:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_I2C2_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_I2C2_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_I2C2_Init+0x50>)
 8001556:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800155a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_I2C2_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_I2C2_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_I2C2_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_I2C2_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_I2C2_Init+0x50>)
 8001576:	f000 ff11 	bl	800239c <HAL_I2C_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001580:	f000 f974 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200001f0 	.word	0x200001f0
 800158c:	40005800 	.word	0x40005800
 8001590:	000186a0 	.word	0x000186a0

08001594 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <MX_TIM1_Init+0x98>)
 80015b2:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <MX_TIM1_Init+0x9c>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_TIM1_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_TIM1_Init+0x98>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_TIM1_Init+0x98>)
 80015c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_TIM1_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_TIM1_Init+0x98>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <MX_TIM1_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015dc:	4813      	ldr	r0, [pc, #76]	; (800162c <MX_TIM1_Init+0x98>)
 80015de:	f001 ff89 	bl	80034f4 <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015e8:	f000 f940 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <MX_TIM1_Init+0x98>)
 80015fa:	f002 f867 	bl	80036cc <HAL_TIM_ConfigClockSource>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001604:	f000 f932 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_TIM1_Init+0x98>)
 8001616:	f002 fa19 	bl	8003a4c <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001620:	f000 f924 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000244 	.word	0x20000244
 8001630:	40012c00 	.word	0x40012c00

08001634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	463b      	mov	r3, r7
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <MX_TIM2_Init+0x94>)
 8001652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001656:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <MX_TIM2_Init+0x94>)
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_TIM2_Init+0x94>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <MX_TIM2_Init+0x94>)
 8001666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800166a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_TIM2_Init+0x94>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <MX_TIM2_Init+0x94>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001678:	4813      	ldr	r0, [pc, #76]	; (80016c8 <MX_TIM2_Init+0x94>)
 800167a:	f001 ff3b 	bl	80034f4 <HAL_TIM_Base_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001684:	f000 f8f2 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	4619      	mov	r1, r3
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <MX_TIM2_Init+0x94>)
 8001696:	f002 f819 	bl	80036cc <HAL_TIM_ConfigClockSource>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016a0:	f000 f8e4 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ac:	463b      	mov	r3, r7
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_TIM2_Init+0x94>)
 80016b2:	f002 f9cb 	bl	8003a4c <HAL_TIMEx_MasterConfigSynchronization>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016bc:	f000 f8d6 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	2000028c 	.word	0x2000028c

080016cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <MX_TIM3_Init+0x94>)
 80016ea:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <MX_TIM3_Init+0x98>)
 80016ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <MX_TIM3_Init+0x94>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_TIM3_Init+0x94>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <MX_TIM3_Init+0x94>)
 80016fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001700:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <MX_TIM3_Init+0x94>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_TIM3_Init+0x94>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800170e:	4814      	ldr	r0, [pc, #80]	; (8001760 <MX_TIM3_Init+0x94>)
 8001710:	f001 fef0 	bl	80034f4 <HAL_TIM_Base_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800171a:	f000 f8a7 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	4619      	mov	r1, r3
 800172a:	480d      	ldr	r0, [pc, #52]	; (8001760 <MX_TIM3_Init+0x94>)
 800172c:	f001 ffce 	bl	80036cc <HAL_TIM_ConfigClockSource>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001736:	f000 f899 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <MX_TIM3_Init+0x94>)
 8001748:	f002 f980 	bl	8003a4c <HAL_TIMEx_MasterConfigSynchronization>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001752:	f000 f88b 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200002d4 	.word	0x200002d4
 8001764:	40000400 	.word	0x40000400

08001768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_USART2_UART_Init+0x50>)
 8001770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 80017a0:	f002 f9b2 	bl	8003b08 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017aa:	f000 f85f 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000031c 	.word	0x2000031c
 80017b8:	40004400 	.word	0x40004400

080017bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <MX_GPIO_Init+0xa8>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a23      	ldr	r2, [pc, #140]	; (8001864 <MX_GPIO_Init+0xa8>)
 80017d6:	f043 0320 	orr.w	r3, r3, #32
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <MX_GPIO_Init+0xa8>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <MX_GPIO_Init+0xa8>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <MX_GPIO_Init+0xa8>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <MX_GPIO_Init+0xa8>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <MX_GPIO_Init+0xa8>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <MX_GPIO_Init+0xa8>)
 8001806:	f043 0308 	orr.w	r3, r3, #8
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MX_GPIO_Init+0xa8>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|DHT_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 7108 	mov.w	r1, #544	; 0x220
 800181e:	4812      	ldr	r0, [pc, #72]	; (8001868 <MX_GPIO_Init+0xac>)
 8001820:	f000 fda3 	bl	800236a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIG_Pin DHT_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|DHT_Pin;
 8001824:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2302      	movs	r3, #2
 8001834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4619      	mov	r1, r3
 800183c:	480a      	ldr	r0, [pc, #40]	; (8001868 <MX_GPIO_Init+0xac>)
 800183e:	f000 fbf9 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001842:	2340      	movs	r3, #64	; 0x40
 8001844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	4619      	mov	r1, r3
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <MX_GPIO_Init+0xac>)
 8001856:	f000 fbed 	bl	8002034 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800185a:	bf00      	nop
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	40010800 	.word	0x40010800

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001874:	e7fe      	b.n	8001874 <Error_Handler+0x8>
	...

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_MspInit+0x5c>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <HAL_MspInit+0x5c>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6193      	str	r3, [r2, #24]
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_MspInit+0x5c>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_MspInit+0x5c>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_MspInit+0x5c>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_MspInit+0x5c>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_MspInit+0x60>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <HAL_MspInit+0x60>)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000

080018dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a16      	ldr	r2, [pc, #88]	; (8001950 <HAL_I2C_MspInit+0x74>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d124      	bne.n	8001946 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_I2C_MspInit+0x78>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <HAL_I2C_MspInit+0x78>)
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_I2C_MspInit+0x78>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001914:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001918:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191a:	2312      	movs	r3, #18
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	4619      	mov	r1, r3
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <HAL_I2C_MspInit+0x7c>)
 800192a:	f000 fb83 	bl	8002034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_I2C_MspInit+0x78>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_I2C_MspInit+0x78>)
 8001934:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_I2C_MspInit+0x78>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001946:	bf00      	nop
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40005800 	.word	0x40005800
 8001954:	40021000 	.word	0x40021000
 8001958:	40010c00 	.word	0x40010c00

0800195c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <HAL_TIM_Base_MspInit+0x7c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10c      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_TIM_Base_MspInit+0x80>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a1a      	ldr	r2, [pc, #104]	; (80019dc <HAL_TIM_Base_MspInit+0x80>)
 8001974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_TIM_Base_MspInit+0x80>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001986:	e022      	b.n	80019ce <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001990:	d10c      	bne.n	80019ac <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_TIM_Base_MspInit+0x80>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4a11      	ldr	r2, [pc, #68]	; (80019dc <HAL_TIM_Base_MspInit+0x80>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	61d3      	str	r3, [r2, #28]
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_TIM_Base_MspInit+0x80>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
}
 80019aa:	e010      	b.n	80019ce <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_TIM_Base_MspInit+0x84>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10b      	bne.n	80019ce <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_TIM_Base_MspInit+0x80>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a08      	ldr	r2, [pc, #32]	; (80019dc <HAL_TIM_Base_MspInit+0x80>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_TIM_Base_MspInit+0x80>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
}
 80019ce:	bf00      	nop
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	40012c00 	.word	0x40012c00
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40000400 	.word	0x40000400

080019e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1b      	ldr	r2, [pc, #108]	; (8001a6c <HAL_UART_MspInit+0x88>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d12f      	bne.n	8001a64 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HAL_UART_MspInit+0x8c>)
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	4a19      	ldr	r2, [pc, #100]	; (8001a70 <HAL_UART_MspInit+0x8c>)
 8001a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0e:	61d3      	str	r3, [r2, #28]
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_UART_MspInit+0x8c>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_UART_MspInit+0x8c>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a13      	ldr	r2, [pc, #76]	; (8001a70 <HAL_UART_MspInit+0x8c>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_UART_MspInit+0x8c>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a34:	2304      	movs	r3, #4
 8001a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	4619      	mov	r1, r3
 8001a46:	480b      	ldr	r0, [pc, #44]	; (8001a74 <HAL_UART_MspInit+0x90>)
 8001a48:	f000 faf4 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <HAL_UART_MspInit+0x90>)
 8001a60:	f000 fae8 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40004400 	.word	0x40004400
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010800 	.word	0x40010800

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abe:	f000 f995 	bl	8001dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  return 1;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <_kill>:

int _kill(int pid, int sig)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ade:	f003 fb27 	bl	8005130 <__errno>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2216      	movs	r2, #22
 8001ae6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_exit>:

void _exit (int status)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ffe7 	bl	8001ad4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b06:	e7fe      	b.n	8001b06 <_exit+0x12>

08001b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e00a      	b.n	8001b30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b1a:	f3af 8000 	nop.w
 8001b1e:	4601      	mov	r1, r0
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dbf0      	blt.n	8001b1a <_read+0x12>
  }

  return len;
 8001b38:	687b      	ldr	r3, [r7, #4]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e009      	b.n	8001b68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60ba      	str	r2, [r7, #8]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fc2f 	bl	80013c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbf1      	blt.n	8001b54 <_write+0x12>
  }
  return len;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_close>:

int _close(int file)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <_isatty>:

int _isatty(int file)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
	...

08001bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <_sbrk+0x5c>)
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <_sbrk+0x60>)
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <_sbrk+0x64>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <_sbrk+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d207      	bcs.n	8001c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c0c:	f003 fa90 	bl	8005130 <__errno>
 8001c10:	4603      	mov	r3, r0
 8001c12:	220c      	movs	r2, #12
 8001c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	e009      	b.n	8001c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <_sbrk+0x64>)
 8001c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20005000 	.word	0x20005000
 8001c3c:	00000400 	.word	0x00000400
 8001c40:	20000544 	.word	0x20000544
 8001c44:	20000698 	.word	0x20000698

08001c48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <Queue_Init>:


/* Private user code ---------------------------------------------------------*/

void Queue_Init(TaskQueue_t *queue, uint8_t capacity)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
	queue->Size = 0;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
	queue->Front = capacity - 1;
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	queue->Rear = capacity;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	78fa      	ldrb	r2, [r7, #3]
 8001c78:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
	queue->Capacity = capacity;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	78fa      	ldrb	r2, [r7, #3]
 8001c80:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <Queue_Pop>:

	return status;
}

pTaskFunction Queue_Pop(TaskQueue_t* queue)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
	pTaskFunction pTask = NULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
	uint8_t idx;

	if (queue->Size >= 0)
	{
		pTask = queue->Task[queue->Front];
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	60bb      	str	r3, [r7, #8]
		(queue->Size)--;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
		(queue->Rear)++;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
		for (idx = 0; idx < queue->Size; idx++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
 8001cce:	e015      	b.n	8001cfc <Queue_Pop+0x6e>
		{
			queue->Task[queue->Front - idx] = queue->Task[queue->Front - idx - 1];
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	1e59      	subs	r1, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	1ad2      	subs	r2, r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (idx = 0; idx < queue->Size; idx++)
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d3e3      	bcc.n	8001cd0 <Queue_Pop+0x42>
		}
	}

	return pTask;
 8001d08:	68bb      	ldr	r3, [r7, #8]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d14:	f7ff ff98 	bl	8001c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d1a:	490c      	ldr	r1, [pc, #48]	; (8001d4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d1c:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d20:	e002      	b.n	8001d28 <LoopCopyDataInit>

08001d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d26:	3304      	adds	r3, #4

08001d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d2c:	d3f9      	bcc.n	8001d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d30:	4c09      	ldr	r4, [pc, #36]	; (8001d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d34:	e001      	b.n	8001d3a <LoopFillZerobss>

08001d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d38:	3204      	adds	r2, #4

08001d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d3c:	d3fb      	bcc.n	8001d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d3e:	f003 f9fd 	bl	800513c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d42:	f7ff fb4f 	bl	80013e4 <main>
  bx lr
 8001d46:	4770      	bx	lr
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d50:	08008b1c 	.word	0x08008b1c
  ldr r2, =_sbss
 8001d54:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d58:	20000698 	.word	0x20000698

08001d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC1_2_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_Init+0x28>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <HAL_Init+0x28>)
 8001d6a:	f043 0310 	orr.w	r3, r3, #16
 8001d6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 f92b 	bl	8001fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d76:	200f      	movs	r0, #15
 8001d78:	f000 f808 	bl	8001d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7c:	f7ff fd7c 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40022000 	.word	0x40022000

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_InitTick+0x54>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_InitTick+0x58>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f935 	bl	800201a <HAL_SYSTICK_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00e      	b.n	8001dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d80a      	bhi.n	8001dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f000 f90b 	bl	8001fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dcc:	4a06      	ldr	r2, [pc, #24]	; (8001de8 <HAL_InitTick+0x5c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000008 	.word	0x20000008
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_IncTick+0x1c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_IncTick+0x20>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a03      	ldr	r2, [pc, #12]	; (8001e0c <HAL_IncTick+0x20>)
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	20000548 	.word	0x20000548

08001e10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return uwTick;
 8001e14:	4b02      	ldr	r3, [pc, #8]	; (8001e20 <HAL_GetTick+0x10>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	20000548 	.word	0x20000548

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff fff0 	bl	8001e10 <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e4a:	bf00      	nop
 8001e4c:	f7ff ffe0 	bl	8001e10 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000008 	.word	0x20000008

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	; (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	; (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	bf28      	it	cs
 8001f42:	2304      	movcs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b03      	subs	r3, #3
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f98:	d301      	bcc.n	8001f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00f      	b.n	8001fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <SysTick_Config+0x40>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa6:	210f      	movs	r1, #15
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f7ff ff90 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <SysTick_Config+0x40>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <SysTick_Config+0x40>)
 8001fb8:	2207      	movs	r2, #7
 8001fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	e000e010 	.word	0xe000e010

08001fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff49 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff4:	f7ff ff5e 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8001ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	6978      	ldr	r0, [r7, #20]
 8002000:	f7ff ff90 	bl	8001f24 <NVIC_EncodePriority>
 8002004:	4602      	mov	r2, r0
 8002006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff5f 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ffb0 	bl	8001f88 <SysTick_Config>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b08b      	sub	sp, #44	; 0x2c
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002046:	e169      	b.n	800231c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002048:	2201      	movs	r2, #1
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	429a      	cmp	r2, r3
 8002062:	f040 8158 	bne.w	8002316 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a9a      	ldr	r2, [pc, #616]	; (80022d4 <HAL_GPIO_Init+0x2a0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d05e      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 8002070:	4a98      	ldr	r2, [pc, #608]	; (80022d4 <HAL_GPIO_Init+0x2a0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d875      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 8002076:	4a98      	ldr	r2, [pc, #608]	; (80022d8 <HAL_GPIO_Init+0x2a4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d058      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 800207c:	4a96      	ldr	r2, [pc, #600]	; (80022d8 <HAL_GPIO_Init+0x2a4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d86f      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 8002082:	4a96      	ldr	r2, [pc, #600]	; (80022dc <HAL_GPIO_Init+0x2a8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d052      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 8002088:	4a94      	ldr	r2, [pc, #592]	; (80022dc <HAL_GPIO_Init+0x2a8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d869      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 800208e:	4a94      	ldr	r2, [pc, #592]	; (80022e0 <HAL_GPIO_Init+0x2ac>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d04c      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 8002094:	4a92      	ldr	r2, [pc, #584]	; (80022e0 <HAL_GPIO_Init+0x2ac>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d863      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 800209a:	4a92      	ldr	r2, [pc, #584]	; (80022e4 <HAL_GPIO_Init+0x2b0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d046      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 80020a0:	4a90      	ldr	r2, [pc, #576]	; (80022e4 <HAL_GPIO_Init+0x2b0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d85d      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 80020a6:	2b12      	cmp	r3, #18
 80020a8:	d82a      	bhi.n	8002100 <HAL_GPIO_Init+0xcc>
 80020aa:	2b12      	cmp	r3, #18
 80020ac:	d859      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 80020ae:	a201      	add	r2, pc, #4	; (adr r2, 80020b4 <HAL_GPIO_Init+0x80>)
 80020b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b4:	0800212f 	.word	0x0800212f
 80020b8:	08002109 	.word	0x08002109
 80020bc:	0800211b 	.word	0x0800211b
 80020c0:	0800215d 	.word	0x0800215d
 80020c4:	08002163 	.word	0x08002163
 80020c8:	08002163 	.word	0x08002163
 80020cc:	08002163 	.word	0x08002163
 80020d0:	08002163 	.word	0x08002163
 80020d4:	08002163 	.word	0x08002163
 80020d8:	08002163 	.word	0x08002163
 80020dc:	08002163 	.word	0x08002163
 80020e0:	08002163 	.word	0x08002163
 80020e4:	08002163 	.word	0x08002163
 80020e8:	08002163 	.word	0x08002163
 80020ec:	08002163 	.word	0x08002163
 80020f0:	08002163 	.word	0x08002163
 80020f4:	08002163 	.word	0x08002163
 80020f8:	08002111 	.word	0x08002111
 80020fc:	08002125 	.word	0x08002125
 8002100:	4a79      	ldr	r2, [pc, #484]	; (80022e8 <HAL_GPIO_Init+0x2b4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002106:	e02c      	b.n	8002162 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	623b      	str	r3, [r7, #32]
          break;
 800210e:	e029      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	3304      	adds	r3, #4
 8002116:	623b      	str	r3, [r7, #32]
          break;
 8002118:	e024      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	3308      	adds	r3, #8
 8002120:	623b      	str	r3, [r7, #32]
          break;
 8002122:	e01f      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	330c      	adds	r3, #12
 800212a:	623b      	str	r3, [r7, #32]
          break;
 800212c:	e01a      	b.n	8002164 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002136:	2304      	movs	r3, #4
 8002138:	623b      	str	r3, [r7, #32]
          break;
 800213a:	e013      	b.n	8002164 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002144:	2308      	movs	r3, #8
 8002146:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	611a      	str	r2, [r3, #16]
          break;
 800214e:	e009      	b.n	8002164 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002150:	2308      	movs	r3, #8
 8002152:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	615a      	str	r2, [r3, #20]
          break;
 800215a:	e003      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
          break;
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x130>
          break;
 8002162:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2bff      	cmp	r3, #255	; 0xff
 8002168:	d801      	bhi.n	800216e <HAL_GPIO_Init+0x13a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	e001      	b.n	8002172 <HAL_GPIO_Init+0x13e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3304      	adds	r3, #4
 8002172:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2bff      	cmp	r3, #255	; 0xff
 8002178:	d802      	bhi.n	8002180 <HAL_GPIO_Init+0x14c>
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	e002      	b.n	8002186 <HAL_GPIO_Init+0x152>
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	3b08      	subs	r3, #8
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	210f      	movs	r1, #15
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	401a      	ands	r2, r3
 8002198:	6a39      	ldr	r1, [r7, #32]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	431a      	orrs	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80b1 	beq.w	8002316 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021b4:	4b4d      	ldr	r3, [pc, #308]	; (80022ec <HAL_GPIO_Init+0x2b8>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a4c      	ldr	r2, [pc, #304]	; (80022ec <HAL_GPIO_Init+0x2b8>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <HAL_GPIO_Init+0x2b8>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021cc:	4a48      	ldr	r2, [pc, #288]	; (80022f0 <HAL_GPIO_Init+0x2bc>)
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a40      	ldr	r2, [pc, #256]	; (80022f4 <HAL_GPIO_Init+0x2c0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d013      	beq.n	8002220 <HAL_GPIO_Init+0x1ec>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a3f      	ldr	r2, [pc, #252]	; (80022f8 <HAL_GPIO_Init+0x2c4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00d      	beq.n	800221c <HAL_GPIO_Init+0x1e8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a3e      	ldr	r2, [pc, #248]	; (80022fc <HAL_GPIO_Init+0x2c8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d007      	beq.n	8002218 <HAL_GPIO_Init+0x1e4>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a3d      	ldr	r2, [pc, #244]	; (8002300 <HAL_GPIO_Init+0x2cc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_GPIO_Init+0x1e0>
 8002210:	2303      	movs	r3, #3
 8002212:	e006      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002214:	2304      	movs	r3, #4
 8002216:	e004      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002218:	2302      	movs	r3, #2
 800221a:	e002      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002220:	2300      	movs	r3, #0
 8002222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002224:	f002 0203 	and.w	r2, r2, #3
 8002228:	0092      	lsls	r2, r2, #2
 800222a:	4093      	lsls	r3, r2
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002232:	492f      	ldr	r1, [pc, #188]	; (80022f0 <HAL_GPIO_Init+0x2bc>)
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	492c      	ldr	r1, [pc, #176]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	608b      	str	r3, [r1, #8]
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800225a:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	43db      	mvns	r3, r3
 8002262:	4928      	ldr	r1, [pc, #160]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 8002264:	4013      	ands	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	4922      	ldr	r1, [pc, #136]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	60cb      	str	r3, [r1, #12]
 8002280:	e006      	b.n	8002290 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	43db      	mvns	r3, r3
 800228a:	491e      	ldr	r1, [pc, #120]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 800228c:	4013      	ands	r3, r2
 800228e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4918      	ldr	r1, [pc, #96]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	4914      	ldr	r1, [pc, #80]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d021      	beq.n	8002308 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
 80022d0:	e021      	b.n	8002316 <HAL_GPIO_Init+0x2e2>
 80022d2:	bf00      	nop
 80022d4:	10320000 	.word	0x10320000
 80022d8:	10310000 	.word	0x10310000
 80022dc:	10220000 	.word	0x10220000
 80022e0:	10210000 	.word	0x10210000
 80022e4:	10120000 	.word	0x10120000
 80022e8:	10110000 	.word	0x10110000
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40010800 	.word	0x40010800
 80022f8:	40010c00 	.word	0x40010c00
 80022fc:	40011000 	.word	0x40011000
 8002300:	40011400 	.word	0x40011400
 8002304:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_GPIO_Init+0x304>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	43db      	mvns	r3, r3
 8002310:	4909      	ldr	r1, [pc, #36]	; (8002338 <HAL_GPIO_Init+0x304>)
 8002312:	4013      	ands	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	3301      	adds	r3, #1
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	fa22 f303 	lsr.w	r3, r2, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	f47f ae8e 	bne.w	8002048 <HAL_GPIO_Init+0x14>
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	372c      	adds	r7, #44	; 0x2c
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	40010400 	.word	0x40010400

0800233c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e001      	b.n	800235e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	460b      	mov	r3, r1
 8002374:	807b      	strh	r3, [r7, #2]
 8002376:	4613      	mov	r3, r2
 8002378:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800237a:	787b      	ldrb	r3, [r7, #1]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002380:	887a      	ldrh	r2, [r7, #2]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002386:	e003      	b.n	8002390 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002388:	887b      	ldrh	r3, [r7, #2]
 800238a:	041a      	lsls	r2, r3, #16
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	611a      	str	r2, [r3, #16]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
	...

0800239c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e12b      	b.n	8002606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fa8a 	bl	80018dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	; 0x24
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002400:	f001 f832 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8002404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a81      	ldr	r2, [pc, #516]	; (8002610 <HAL_I2C_Init+0x274>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d807      	bhi.n	8002420 <HAL_I2C_Init+0x84>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a80      	ldr	r2, [pc, #512]	; (8002614 <HAL_I2C_Init+0x278>)
 8002414:	4293      	cmp	r3, r2
 8002416:	bf94      	ite	ls
 8002418:	2301      	movls	r3, #1
 800241a:	2300      	movhi	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e006      	b.n	800242e <HAL_I2C_Init+0x92>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a7d      	ldr	r2, [pc, #500]	; (8002618 <HAL_I2C_Init+0x27c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0e7      	b.n	8002606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a78      	ldr	r2, [pc, #480]	; (800261c <HAL_I2C_Init+0x280>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0c9b      	lsrs	r3, r3, #18
 8002440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a6a      	ldr	r2, [pc, #424]	; (8002610 <HAL_I2C_Init+0x274>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d802      	bhi.n	8002470 <HAL_I2C_Init+0xd4>
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3301      	adds	r3, #1
 800246e:	e009      	b.n	8002484 <HAL_I2C_Init+0xe8>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	4a69      	ldr	r2, [pc, #420]	; (8002620 <HAL_I2C_Init+0x284>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	3301      	adds	r3, #1
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002496:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	495c      	ldr	r1, [pc, #368]	; (8002610 <HAL_I2C_Init+0x274>)
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d819      	bhi.n	80024d8 <HAL_I2C_Init+0x13c>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1e59      	subs	r1, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024b8:	400b      	ands	r3, r1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_I2C_Init+0x138>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1e59      	subs	r1, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d2:	e051      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 80024d4:	2304      	movs	r3, #4
 80024d6:	e04f      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d111      	bne.n	8002504 <HAL_I2C_Init+0x168>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1e58      	subs	r0, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	440b      	add	r3, r1
 80024ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	e012      	b.n	800252a <HAL_I2C_Init+0x18e>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e58      	subs	r0, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	0099      	lsls	r1, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Init+0x196>
 800252e:	2301      	movs	r3, #1
 8002530:	e022      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10e      	bne.n	8002558 <HAL_I2C_Init+0x1bc>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1e58      	subs	r0, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6859      	ldr	r1, [r3, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	440b      	add	r3, r1
 8002548:	fbb0 f3f3 	udiv	r3, r0, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002556:	e00f      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1e58      	subs	r0, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	0099      	lsls	r1, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	fbb0 f3f3 	udiv	r3, r0, r3
 800256e:	3301      	adds	r3, #1
 8002570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	6809      	ldr	r1, [r1, #0]
 800257c:	4313      	orrs	r3, r2
 800257e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6911      	ldr	r1, [r2, #16]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68d2      	ldr	r2, [r2, #12]
 80025b2:	4311      	orrs	r1, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	000186a0 	.word	0x000186a0
 8002614:	001e847f 	.word	0x001e847f
 8002618:	003d08ff 	.word	0x003d08ff
 800261c:	431bde83 	.word	0x431bde83
 8002620:	10624dd3 	.word	0x10624dd3

08002624 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af02      	add	r7, sp, #8
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	461a      	mov	r2, r3
 8002630:	460b      	mov	r3, r1
 8002632:	817b      	strh	r3, [r7, #10]
 8002634:	4613      	mov	r3, r2
 8002636:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff fbea 	bl	8001e10 <HAL_GetTick>
 800263c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b20      	cmp	r3, #32
 8002648:	f040 80e0 	bne.w	800280c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2319      	movs	r3, #25
 8002652:	2201      	movs	r2, #1
 8002654:	4970      	ldr	r1, [pc, #448]	; (8002818 <HAL_I2C_Master_Transmit+0x1f4>)
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f964 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002662:	2302      	movs	r3, #2
 8002664:	e0d3      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_I2C_Master_Transmit+0x50>
 8002670:	2302      	movs	r3, #2
 8002672:	e0cc      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ea>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d007      	beq.n	800269a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2221      	movs	r2, #33	; 0x21
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2210      	movs	r2, #16
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	893a      	ldrh	r2, [r7, #8]
 80026ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4a50      	ldr	r2, [pc, #320]	; (800281c <HAL_I2C_Master_Transmit+0x1f8>)
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026dc:	8979      	ldrh	r1, [r7, #10]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	6a3a      	ldr	r2, [r7, #32]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f89c 	bl	8002820 <I2C_MasterRequestWrite>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e08d      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002708:	e066      	b.n	80027d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	6a39      	ldr	r1, [r7, #32]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fa22 	bl	8002b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00d      	beq.n	8002736 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b04      	cmp	r3, #4
 8002720:	d107      	bne.n	8002732 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002730:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e06b      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	781a      	ldrb	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b04      	cmp	r3, #4
 8002772:	d11b      	bne.n	80027ac <HAL_I2C_Master_Transmit+0x188>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	d017      	beq.n	80027ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	781a      	ldrb	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	6a39      	ldr	r1, [r7, #32]
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fa19 	bl	8002be8 <I2C_WaitOnBTFFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00d      	beq.n	80027d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d107      	bne.n	80027d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e01a      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d194      	bne.n	800270a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e000      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
  }
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	00100002 	.word	0x00100002
 800281c:	ffff0000 	.word	0xffff0000

08002820 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	460b      	mov	r3, r1
 800282e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d006      	beq.n	800284a <I2C_MasterRequestWrite+0x2a>
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d003      	beq.n	800284a <I2C_MasterRequestWrite+0x2a>
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002848:	d108      	bne.n	800285c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e00b      	b.n	8002874 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	2b12      	cmp	r3, #18
 8002862:	d107      	bne.n	8002874 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002872:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f84f 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00d      	beq.n	80028a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289a:	d103      	bne.n	80028a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e035      	b.n	8002914 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b0:	d108      	bne.n	80028c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028b2:	897b      	ldrh	r3, [r7, #10]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028c0:	611a      	str	r2, [r3, #16]
 80028c2:	e01b      	b.n	80028fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028c4:	897b      	ldrh	r3, [r7, #10]
 80028c6:	11db      	asrs	r3, r3, #7
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f003 0306 	and.w	r3, r3, #6
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f063 030f 	orn	r3, r3, #15
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	490e      	ldr	r1, [pc, #56]	; (800291c <I2C_MasterRequestWrite+0xfc>)
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f898 	bl	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e010      	b.n	8002914 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028f2:	897b      	ldrh	r3, [r7, #10]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4907      	ldr	r1, [pc, #28]	; (8002920 <I2C_MasterRequestWrite+0x100>)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f888 	bl	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	00010008 	.word	0x00010008
 8002920:	00010002 	.word	0x00010002

08002924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002934:	e048      	b.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d044      	beq.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293e:	f7ff fa67 	bl	8001e10 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d302      	bcc.n	8002954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d139      	bne.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	0c1b      	lsrs	r3, r3, #16
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d10d      	bne.n	800297a <I2C_WaitOnFlagUntilTimeout+0x56>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	43da      	mvns	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	e00c      	b.n	8002994 <I2C_WaitOnFlagUntilTimeout+0x70>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	43da      	mvns	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4013      	ands	r3, r2
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	429a      	cmp	r2, r3
 8002998:	d116      	bne.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f043 0220 	orr.w	r2, r3, #32
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e023      	b.n	8002a10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	0c1b      	lsrs	r3, r3, #16
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d10d      	bne.n	80029ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	43da      	mvns	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4013      	ands	r3, r2
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	e00c      	b.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	43da      	mvns	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4013      	ands	r3, r2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d093      	beq.n	8002936 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a26:	e071      	b.n	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a36:	d123      	bne.n	8002a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f043 0204 	orr.w	r2, r3, #4
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e067      	b.n	8002b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a86:	d041      	beq.n	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a88:	f7ff f9c2 	bl	8001e10 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d302      	bcc.n	8002a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d136      	bne.n	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	0c1b      	lsrs	r3, r3, #16
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d10c      	bne.n	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	bf14      	ite	ne
 8002aba:	2301      	movne	r3, #1
 8002abc:	2300      	moveq	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	e00b      	b.n	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4013      	ands	r3, r2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d016      	beq.n	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f043 0220 	orr.w	r2, r3, #32
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e021      	b.n	8002b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	0c1b      	lsrs	r3, r3, #16
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d10c      	bne.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	43da      	mvns	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4013      	ands	r3, r2
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e00b      	b.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	43da      	mvns	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f47f af6d 	bne.w	8002a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b64:	e034      	b.n	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f886 	bl	8002c78 <I2C_IsAcknowledgeFailed>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e034      	b.n	8002be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d028      	beq.n	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7e:	f7ff f947 	bl	8001e10 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d302      	bcc.n	8002b94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d11d      	bne.n	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	2b80      	cmp	r3, #128	; 0x80
 8002ba0:	d016      	beq.n	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e007      	b.n	8002be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	2b80      	cmp	r3, #128	; 0x80
 8002bdc:	d1c3      	bne.n	8002b66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bf4:	e034      	b.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f83e 	bl	8002c78 <I2C_IsAcknowledgeFailed>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e034      	b.n	8002c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d028      	beq.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7ff f8ff 	bl	8001e10 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11d      	bne.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d016      	beq.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e007      	b.n	8002c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d1c3      	bne.n	8002bf6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8e:	d11b      	bne.n	8002cc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f043 0204 	orr.w	r2, r3, #4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e272      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8087 	beq.w	8002e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cf4:	4b92      	ldr	r3, [pc, #584]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d00c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d00:	4b8f      	ldr	r3, [pc, #572]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d112      	bne.n	8002d32 <HAL_RCC_OscConfig+0x5e>
 8002d0c:	4b8c      	ldr	r3, [pc, #560]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d10b      	bne.n	8002d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1a:	4b89      	ldr	r3, [pc, #548]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d06c      	beq.n	8002e00 <HAL_RCC_OscConfig+0x12c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d168      	bne.n	8002e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e24c      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x76>
 8002d3c:	4b80      	ldr	r3, [pc, #512]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a7f      	ldr	r2, [pc, #508]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	e02e      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x98>
 8002d52:	4b7b      	ldr	r3, [pc, #492]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7a      	ldr	r2, [pc, #488]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b78      	ldr	r3, [pc, #480]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a77      	ldr	r2, [pc, #476]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e01d      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0xbc>
 8002d76:	4b72      	ldr	r3, [pc, #456]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a71      	ldr	r2, [pc, #452]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a6e      	ldr	r2, [pc, #440]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e00b      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d90:	4b6b      	ldr	r3, [pc, #428]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a6a      	ldr	r2, [pc, #424]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a67      	ldr	r2, [pc, #412]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d013      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7ff f82e 	bl	8001e10 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db8:	f7ff f82a 	bl	8001e10 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e200      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b5d      	ldr	r3, [pc, #372]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0xe4>
 8002dd6:	e014      	b.n	8002e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7ff f81a 	bl	8001e10 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de0:	f7ff f816 	bl	8001e10 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e1ec      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df2:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x10c>
 8002dfe:	e000      	b.n	8002e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d063      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e0e:	4b4c      	ldr	r3, [pc, #304]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e1a:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d11c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x18c>
 8002e26:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d116      	bne.n	8002e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e32:	4b43      	ldr	r3, [pc, #268]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_RCC_OscConfig+0x176>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e1c0      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4939      	ldr	r1, [pc, #228]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	e03a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d020      	beq.n	8002eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e68:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe ffcf 	bl	8001e10 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e76:	f7fe ffcb 	bl	8001e10 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e1a1      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e88:	4b2d      	ldr	r3, [pc, #180]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e94:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4927      	ldr	r1, [pc, #156]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]
 8002ea8:	e015      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_RCC_OscConfig+0x270>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe ffae 	bl	8001e10 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb8:	f7fe ffaa 	bl	8001e10 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e180      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d03a      	beq.n	8002f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d019      	beq.n	8002f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef0:	f7fe ff8e 	bl	8001e10 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef8:	f7fe ff8a 	bl	8001e10 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e160      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f16:	2001      	movs	r0, #1
 8002f18:	f000 face 	bl	80034b8 <RCC_Delay>
 8002f1c:	e01c      	b.n	8002f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f24:	f7fe ff74 	bl	8001e10 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2a:	e00f      	b.n	8002f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2c:	f7fe ff70 	bl	8001e10 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d908      	bls.n	8002f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e146      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	42420000 	.word	0x42420000
 8002f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	4b92      	ldr	r3, [pc, #584]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e9      	bne.n	8002f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a6 	beq.w	80030b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6a:	4b8b      	ldr	r3, [pc, #556]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	4b88      	ldr	r3, [pc, #544]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	4a87      	ldr	r2, [pc, #540]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f80:	61d3      	str	r3, [r2, #28]
 8002f82:	4b85      	ldr	r3, [pc, #532]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b82      	ldr	r3, [pc, #520]	; (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b7f      	ldr	r3, [pc, #508]	; (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7e      	ldr	r2, [pc, #504]	; (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fe ff31 	bl	8001e10 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fe ff2d 	bl	8001e10 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b64      	cmp	r3, #100	; 0x64
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e103      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b75      	ldr	r3, [pc, #468]	; (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x312>
 8002fd8:	4b6f      	ldr	r3, [pc, #444]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4a6e      	ldr	r2, [pc, #440]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6213      	str	r3, [r2, #32]
 8002fe4:	e02d      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x334>
 8002fee:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a69      	ldr	r2, [pc, #420]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	6213      	str	r3, [r2, #32]
 8002ffa:	4b67      	ldr	r3, [pc, #412]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4a66      	ldr	r2, [pc, #408]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	f023 0304 	bic.w	r3, r3, #4
 8003004:	6213      	str	r3, [r2, #32]
 8003006:	e01c      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b05      	cmp	r3, #5
 800300e:	d10c      	bne.n	800302a <HAL_RCC_OscConfig+0x356>
 8003010:	4b61      	ldr	r3, [pc, #388]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a60      	ldr	r2, [pc, #384]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	4b5e      	ldr	r3, [pc, #376]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4a5d      	ldr	r2, [pc, #372]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6213      	str	r3, [r2, #32]
 8003028:	e00b      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 800302a:	4b5b      	ldr	r3, [pc, #364]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4a5a      	ldr	r2, [pc, #360]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	6213      	str	r3, [r2, #32]
 8003036:	4b58      	ldr	r3, [pc, #352]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4a57      	ldr	r2, [pc, #348]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	f023 0304 	bic.w	r3, r3, #4
 8003040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d015      	beq.n	8003076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fe fee1 	bl	8001e10 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7fe fedd 	bl	8001e10 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0b1      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	4b4b      	ldr	r3, [pc, #300]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ee      	beq.n	8003052 <HAL_RCC_OscConfig+0x37e>
 8003074:	e014      	b.n	80030a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7fe fecb 	bl	8001e10 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7fe fec7 	bl	8001e10 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	; 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e09b      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	4b40      	ldr	r3, [pc, #256]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ee      	bne.n	800307e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d105      	bne.n	80030b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a6:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4a3b      	ldr	r2, [pc, #236]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8087 	beq.w	80031ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030bc:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d061      	beq.n	800318c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d146      	bne.n	800315e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d0:	4b33      	ldr	r3, [pc, #204]	; (80031a0 <HAL_RCC_OscConfig+0x4cc>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fe fe9b 	bl	8001e10 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fe fe97 	bl	8001e10 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e06d      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f0:	4b29      	ldr	r3, [pc, #164]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d108      	bne.n	8003118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003106:	4b24      	ldr	r3, [pc, #144]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	4921      	ldr	r1, [pc, #132]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003118:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a19      	ldr	r1, [r3, #32]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	430b      	orrs	r3, r1
 800312a:	491b      	ldr	r1, [pc, #108]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_RCC_OscConfig+0x4cc>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7fe fe6b 	bl	8001e10 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313e:	f7fe fe67 	bl	8001e10 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e03d      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x46a>
 800315c:	e035      	b.n	80031ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <HAL_RCC_OscConfig+0x4cc>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe fe54 	bl	8001e10 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe fe50 	bl	8001e10 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e026      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x498>
 800318a:	e01e      	b.n	80031ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e019      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
 8003198:	40021000 	.word	0x40021000
 800319c:	40007000 	.word	0x40007000
 80031a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCC_OscConfig+0x500>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000

080031d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0d0      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031ec:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d910      	bls.n	800321c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b67      	ldr	r3, [pc, #412]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 0207 	bic.w	r2, r3, #7
 8003202:	4965      	ldr	r1, [pc, #404]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800323e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d040      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d115      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e073      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a6:	4b3d      	ldr	r3, [pc, #244]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e06b      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b6:	4b39      	ldr	r3, [pc, #228]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f023 0203 	bic.w	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4936      	ldr	r1, [pc, #216]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c8:	f7fe fda2 	bl	8001e10 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f7fe fd9e 	bl	8001e10 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e053      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	4b2d      	ldr	r3, [pc, #180]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 020c 	and.w	r2, r3, #12
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d1eb      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d210      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 0207 	bic.w	r2, r3, #7
 800330e:	4922      	ldr	r1, [pc, #136]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	4313      	orrs	r3, r2
 8003344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fd00 	bl	8001d8c <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40022000 	.word	0x40022000
 800339c:	40021000 	.word	0x40021000
 80033a0:	080086c0 	.word	0x080086c0
 80033a4:	20000000 	.word	0x20000000
 80033a8:	20000004 	.word	0x20000004

080033ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033c6:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <HAL_RCC_GetSysClockFreq+0x94>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x30>
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x36>
 80033da:	e027      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_GetSysClockFreq+0x98>)
 80033de:	613b      	str	r3, [r7, #16]
      break;
 80033e0:	e027      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	0c9b      	lsrs	r3, r3, #18
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033ec:	5cd3      	ldrb	r3, [r2, r3]
 80033ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d010      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_RCC_GetSysClockFreq+0x94>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	0c5b      	lsrs	r3, r3, #17
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	4a11      	ldr	r2, [pc, #68]	; (800344c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003406:	5cd3      	ldrb	r3, [r2, r3]
 8003408:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <HAL_RCC_GetSysClockFreq+0x98>)
 800340e:	fb03 f202 	mul.w	r2, r3, r2
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	e004      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	613b      	str	r3, [r7, #16]
      break;
 800342a:	e002      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetSysClockFreq+0x98>)
 800342e:	613b      	str	r3, [r7, #16]
      break;
 8003430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003432:	693b      	ldr	r3, [r7, #16]
}
 8003434:	4618      	mov	r0, r3
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	007a1200 	.word	0x007a1200
 8003448:	080086d8 	.word	0x080086d8
 800344c:	080086e8 	.word	0x080086e8
 8003450:	003d0900 	.word	0x003d0900

08003454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <HAL_RCC_GetHCLKFreq+0x10>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	20000000 	.word	0x20000000

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800346c:	f7ff fff2 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	0a1b      	lsrs	r3, r3, #8
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4903      	ldr	r1, [pc, #12]	; (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	080086d0 	.word	0x080086d0

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003494:	f7ff ffde 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	0adb      	lsrs	r3, r3, #11
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4903      	ldr	r1, [pc, #12]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	080086d0 	.word	0x080086d0

080034b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <RCC_Delay+0x34>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <RCC_Delay+0x38>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0a5b      	lsrs	r3, r3, #9
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034d4:	bf00      	nop
  }
  while (Delay --);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1e5a      	subs	r2, r3, #1
 80034da:	60fa      	str	r2, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f9      	bne.n	80034d4 <RCC_Delay+0x1c>
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	20000000 	.word	0x20000000
 80034f0:	10624dd3 	.word	0x10624dd3

080034f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e041      	b.n	800358a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fe fa1e 	bl	800195c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3304      	adds	r3, #4
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f000 f992 	bl	800385c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d001      	beq.n	80035ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e032      	b.n	8003612 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a18      	ldr	r2, [pc, #96]	; (800361c <HAL_TIM_Base_Start+0x88>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00e      	beq.n	80035dc <HAL_TIM_Base_Start+0x48>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c6:	d009      	beq.n	80035dc <HAL_TIM_Base_Start+0x48>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a14      	ldr	r2, [pc, #80]	; (8003620 <HAL_TIM_Base_Start+0x8c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_TIM_Base_Start+0x48>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a13      	ldr	r2, [pc, #76]	; (8003624 <HAL_TIM_Base_Start+0x90>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d111      	bne.n	8003600 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d010      	beq.n	8003610 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	e007      	b.n	8003610 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800

08003628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d001      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e03a      	b.n	80036b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a18      	ldr	r2, [pc, #96]	; (80036c0 <HAL_TIM_Base_Start_IT+0x98>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00e      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x58>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366a:	d009      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x58>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x58>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d111      	bne.n	80036a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b06      	cmp	r3, #6
 8003690:	d010      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0201 	orr.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a2:	e007      	b.n	80036b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800

080036cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_TIM_ConfigClockSource+0x1c>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0b4      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x186>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800370e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003720:	d03e      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0xd4>
 8003722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003726:	f200 8087 	bhi.w	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372e:	f000 8086 	beq.w	800383e <HAL_TIM_ConfigClockSource+0x172>
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003736:	d87f      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b70      	cmp	r3, #112	; 0x70
 800373a:	d01a      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0xa6>
 800373c:	2b70      	cmp	r3, #112	; 0x70
 800373e:	d87b      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b60      	cmp	r3, #96	; 0x60
 8003742:	d050      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x11a>
 8003744:	2b60      	cmp	r3, #96	; 0x60
 8003746:	d877      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b50      	cmp	r3, #80	; 0x50
 800374a:	d03c      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0xfa>
 800374c:	2b50      	cmp	r3, #80	; 0x50
 800374e:	d873      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b40      	cmp	r3, #64	; 0x40
 8003752:	d058      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0x13a>
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	d86f      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b30      	cmp	r3, #48	; 0x30
 800375a:	d064      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 800375c:	2b30      	cmp	r3, #48	; 0x30
 800375e:	d86b      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b20      	cmp	r3, #32
 8003762:	d060      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 8003764:	2b20      	cmp	r3, #32
 8003766:	d867      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d05c      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 800376c:	2b10      	cmp	r3, #16
 800376e:	d05a      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 8003770:	e062      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003782:	f000 f944 	bl	8003a0e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	609a      	str	r2, [r3, #8]
      break;
 800379e:	e04f      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037b0:	f000 f92d 	bl	8003a0e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037c2:	609a      	str	r2, [r3, #8]
      break;
 80037c4:	e03c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d2:	461a      	mov	r2, r3
 80037d4:	f000 f8a4 	bl	8003920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2150      	movs	r1, #80	; 0x50
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f8fb 	bl	80039da <TIM_ITRx_SetConfig>
      break;
 80037e4:	e02c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037f2:	461a      	mov	r2, r3
 80037f4:	f000 f8c2 	bl	800397c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2160      	movs	r1, #96	; 0x60
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f8eb 	bl	80039da <TIM_ITRx_SetConfig>
      break;
 8003804:	e01c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003812:	461a      	mov	r2, r3
 8003814:	f000 f884 	bl	8003920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2140      	movs	r1, #64	; 0x40
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f8db 	bl	80039da <TIM_ITRx_SetConfig>
      break;
 8003824:	e00c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f000 f8d2 	bl	80039da <TIM_ITRx_SetConfig>
      break;
 8003836:	e003      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e000      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800383e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003850:	7bfb      	ldrb	r3, [r7, #15]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a29      	ldr	r2, [pc, #164]	; (8003914 <TIM_Base_SetConfig+0xb8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00b      	beq.n	800388c <TIM_Base_SetConfig+0x30>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387a:	d007      	beq.n	800388c <TIM_Base_SetConfig+0x30>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a26      	ldr	r2, [pc, #152]	; (8003918 <TIM_Base_SetConfig+0xbc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <TIM_Base_SetConfig+0x30>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a25      	ldr	r2, [pc, #148]	; (800391c <TIM_Base_SetConfig+0xc0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d108      	bne.n	800389e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <TIM_Base_SetConfig+0xb8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00b      	beq.n	80038be <TIM_Base_SetConfig+0x62>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ac:	d007      	beq.n	80038be <TIM_Base_SetConfig+0x62>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a19      	ldr	r2, [pc, #100]	; (8003918 <TIM_Base_SetConfig+0xbc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d003      	beq.n	80038be <TIM_Base_SetConfig+0x62>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a18      	ldr	r2, [pc, #96]	; (800391c <TIM_Base_SetConfig+0xc0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d108      	bne.n	80038d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a07      	ldr	r2, [pc, #28]	; (8003914 <TIM_Base_SetConfig+0xb8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d103      	bne.n	8003904 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	615a      	str	r2, [r3, #20]
}
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800

08003920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0201 	bic.w	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800394a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f023 030a 	bic.w	r3, r3, #10
 800395c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	621a      	str	r2, [r3, #32]
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0210 	bic.w	r2, r3, #16
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	031b      	lsls	r3, r3, #12
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	621a      	str	r2, [r3, #32]
}
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr

080039da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039da:	b480      	push	{r7}
 80039dc:	b085      	sub	sp, #20
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f043 0307 	orr.w	r3, r3, #7
 80039fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	609a      	str	r2, [r3, #8]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b087      	sub	sp, #28
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	021a      	lsls	r2, r3, #8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	609a      	str	r2, [r3, #8]
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e046      	b.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a16      	ldr	r2, [pc, #88]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00e      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab0:	d009      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d004      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800

08003b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e042      	b.n	8003ba0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd ff58 	bl	80019e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	; 0x24
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f97b 	bl	8003e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	; 0x28
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d16d      	bne.n	8003ca4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_UART_Transmit+0x2c>
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e066      	b.n	8003ca6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2221      	movs	r2, #33	; 0x21
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003be6:	f7fe f913 	bl	8001e10 <HAL_GetTick>
 8003bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	88fa      	ldrh	r2, [r7, #6]
 8003bf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	88fa      	ldrh	r2, [r7, #6]
 8003bf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c00:	d108      	bne.n	8003c14 <HAL_UART_Transmit+0x6c>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d104      	bne.n	8003c14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	e003      	b.n	8003c1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c1c:	e02a      	b.n	8003c74 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2200      	movs	r2, #0
 8003c26:	2180      	movs	r1, #128	; 0x80
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f865 	bl	8003cf8 <UART_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e036      	b.n	8003ca6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10b      	bne.n	8003c56 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	3302      	adds	r3, #2
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	e007      	b.n	8003c66 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	3301      	adds	r3, #1
 8003c64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1cf      	bne.n	8003c1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2140      	movs	r1, #64	; 0x40
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f835 	bl	8003cf8 <UART_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e006      	b.n	8003ca6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e000      	b.n	8003ca6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d112      	bne.n	8003cee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_UART_Receive_IT+0x26>
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e00b      	b.n	8003cf0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f875 	bl	8003dd4 <UART_Start_Receive_IT>
 8003cea:	4603      	mov	r3, r0
 8003cec:	e000      	b.n	8003cf0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
  }
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b090      	sub	sp, #64	; 0x40
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d08:	e050      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d10:	d04c      	beq.n	8003dac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d18:	f7fe f87a 	bl	8001e10 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d241      	bcs.n	8003dac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	330c      	adds	r3, #12
 8003d46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d48:	637a      	str	r2, [r7, #52]	; 0x34
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e5      	bne.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3314      	adds	r3, #20
 8003d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f023 0301 	bic.w	r3, r3, #1
 8003d72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3314      	adds	r3, #20
 8003d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d7c:	623a      	str	r2, [r7, #32]
 8003d7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	69f9      	ldr	r1, [r7, #28]
 8003d82:	6a3a      	ldr	r2, [r7, #32]
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e5      	bne.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e00f      	b.n	8003dcc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	4013      	ands	r3, r2
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d09f      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3740      	adds	r7, #64	; 0x40
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	4613      	mov	r3, r2
 8003de0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	88fa      	ldrh	r2, [r7, #6]
 8003dec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2222      	movs	r2, #34	; 0x22
 8003dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e18:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0220 	orr.w	r2, r2, #32
 8003e38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
	...

08003e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e82:	f023 030c 	bic.w	r3, r3, #12
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a2c      	ldr	r2, [pc, #176]	; (8003f5c <UART_SetConfig+0x114>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d103      	bne.n	8003eb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003eb0:	f7ff faee 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	e002      	b.n	8003ebe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f7ff fad6 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8003ebc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009a      	lsls	r2, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	4a22      	ldr	r2, [pc, #136]	; (8003f60 <UART_SetConfig+0x118>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	0119      	lsls	r1, r3, #4
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009a      	lsls	r2, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <UART_SetConfig+0x118>)
 8003ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2064      	movs	r0, #100	; 0x64
 8003efe:	fb00 f303 	mul.w	r3, r0, r3
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	3332      	adds	r3, #50	; 0x32
 8003f08:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <UART_SetConfig+0x118>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f14:	4419      	add	r1, r3
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009a      	lsls	r2, r3, #2
 8003f20:	441a      	add	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <UART_SetConfig+0x118>)
 8003f2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	2064      	movs	r0, #100	; 0x64
 8003f36:	fb00 f303 	mul.w	r3, r0, r3
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	3332      	adds	r3, #50	; 0x32
 8003f40:	4a07      	ldr	r2, [pc, #28]	; (8003f60 <UART_SetConfig+0x118>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	440a      	add	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40013800 	.word	0x40013800
 8003f60:	51eb851f 	.word	0x51eb851f

08003f64 <_strtol_l.constprop.0>:
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f6a:	4686      	mov	lr, r0
 8003f6c:	4690      	mov	r8, r2
 8003f6e:	d001      	beq.n	8003f74 <_strtol_l.constprop.0+0x10>
 8003f70:	2b24      	cmp	r3, #36	; 0x24
 8003f72:	d906      	bls.n	8003f82 <_strtol_l.constprop.0+0x1e>
 8003f74:	f001 f8dc 	bl	8005130 <__errno>
 8003f78:	2316      	movs	r3, #22
 8003f7a:	6003      	str	r3, [r0, #0]
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f82:	460d      	mov	r5, r1
 8003f84:	4835      	ldr	r0, [pc, #212]	; (800405c <_strtol_l.constprop.0+0xf8>)
 8003f86:	462a      	mov	r2, r5
 8003f88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f8c:	5d06      	ldrb	r6, [r0, r4]
 8003f8e:	f016 0608 	ands.w	r6, r6, #8
 8003f92:	d1f8      	bne.n	8003f86 <_strtol_l.constprop.0+0x22>
 8003f94:	2c2d      	cmp	r4, #45	; 0x2d
 8003f96:	d12e      	bne.n	8003ff6 <_strtol_l.constprop.0+0x92>
 8003f98:	2601      	movs	r6, #1
 8003f9a:	782c      	ldrb	r4, [r5, #0]
 8003f9c:	1c95      	adds	r5, r2, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d057      	beq.n	8004052 <_strtol_l.constprop.0+0xee>
 8003fa2:	2b10      	cmp	r3, #16
 8003fa4:	d109      	bne.n	8003fba <_strtol_l.constprop.0+0x56>
 8003fa6:	2c30      	cmp	r4, #48	; 0x30
 8003fa8:	d107      	bne.n	8003fba <_strtol_l.constprop.0+0x56>
 8003faa:	782a      	ldrb	r2, [r5, #0]
 8003fac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003fb0:	2a58      	cmp	r2, #88	; 0x58
 8003fb2:	d149      	bne.n	8004048 <_strtol_l.constprop.0+0xe4>
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	786c      	ldrb	r4, [r5, #1]
 8003fb8:	3502      	adds	r5, #2
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8003fc0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003fc4:	fbbc f9f3 	udiv	r9, ip, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	fb03 ca19 	mls	sl, r3, r9, ip
 8003fce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003fd2:	2f09      	cmp	r7, #9
 8003fd4:	d814      	bhi.n	8004000 <_strtol_l.constprop.0+0x9c>
 8003fd6:	463c      	mov	r4, r7
 8003fd8:	42a3      	cmp	r3, r4
 8003fda:	dd20      	ble.n	800401e <_strtol_l.constprop.0+0xba>
 8003fdc:	1c57      	adds	r7, r2, #1
 8003fde:	d007      	beq.n	8003ff0 <_strtol_l.constprop.0+0x8c>
 8003fe0:	4581      	cmp	r9, r0
 8003fe2:	d319      	bcc.n	8004018 <_strtol_l.constprop.0+0xb4>
 8003fe4:	d101      	bne.n	8003fea <_strtol_l.constprop.0+0x86>
 8003fe6:	45a2      	cmp	sl, r4
 8003fe8:	db16      	blt.n	8004018 <_strtol_l.constprop.0+0xb4>
 8003fea:	2201      	movs	r2, #1
 8003fec:	fb00 4003 	mla	r0, r0, r3, r4
 8003ff0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ff4:	e7eb      	b.n	8003fce <_strtol_l.constprop.0+0x6a>
 8003ff6:	2c2b      	cmp	r4, #43	; 0x2b
 8003ff8:	bf04      	itt	eq
 8003ffa:	782c      	ldrbeq	r4, [r5, #0]
 8003ffc:	1c95      	addeq	r5, r2, #2
 8003ffe:	e7ce      	b.n	8003f9e <_strtol_l.constprop.0+0x3a>
 8004000:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004004:	2f19      	cmp	r7, #25
 8004006:	d801      	bhi.n	800400c <_strtol_l.constprop.0+0xa8>
 8004008:	3c37      	subs	r4, #55	; 0x37
 800400a:	e7e5      	b.n	8003fd8 <_strtol_l.constprop.0+0x74>
 800400c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004010:	2f19      	cmp	r7, #25
 8004012:	d804      	bhi.n	800401e <_strtol_l.constprop.0+0xba>
 8004014:	3c57      	subs	r4, #87	; 0x57
 8004016:	e7df      	b.n	8003fd8 <_strtol_l.constprop.0+0x74>
 8004018:	f04f 32ff 	mov.w	r2, #4294967295
 800401c:	e7e8      	b.n	8003ff0 <_strtol_l.constprop.0+0x8c>
 800401e:	1c53      	adds	r3, r2, #1
 8004020:	d108      	bne.n	8004034 <_strtol_l.constprop.0+0xd0>
 8004022:	2322      	movs	r3, #34	; 0x22
 8004024:	4660      	mov	r0, ip
 8004026:	f8ce 3000 	str.w	r3, [lr]
 800402a:	f1b8 0f00 	cmp.w	r8, #0
 800402e:	d0a6      	beq.n	8003f7e <_strtol_l.constprop.0+0x1a>
 8004030:	1e69      	subs	r1, r5, #1
 8004032:	e006      	b.n	8004042 <_strtol_l.constprop.0+0xde>
 8004034:	b106      	cbz	r6, 8004038 <_strtol_l.constprop.0+0xd4>
 8004036:	4240      	negs	r0, r0
 8004038:	f1b8 0f00 	cmp.w	r8, #0
 800403c:	d09f      	beq.n	8003f7e <_strtol_l.constprop.0+0x1a>
 800403e:	2a00      	cmp	r2, #0
 8004040:	d1f6      	bne.n	8004030 <_strtol_l.constprop.0+0xcc>
 8004042:	f8c8 1000 	str.w	r1, [r8]
 8004046:	e79a      	b.n	8003f7e <_strtol_l.constprop.0+0x1a>
 8004048:	2430      	movs	r4, #48	; 0x30
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1b5      	bne.n	8003fba <_strtol_l.constprop.0+0x56>
 800404e:	2308      	movs	r3, #8
 8004050:	e7b3      	b.n	8003fba <_strtol_l.constprop.0+0x56>
 8004052:	2c30      	cmp	r4, #48	; 0x30
 8004054:	d0a9      	beq.n	8003faa <_strtol_l.constprop.0+0x46>
 8004056:	230a      	movs	r3, #10
 8004058:	e7af      	b.n	8003fba <_strtol_l.constprop.0+0x56>
 800405a:	bf00      	nop
 800405c:	080086eb 	.word	0x080086eb

08004060 <_strtol_r>:
 8004060:	f7ff bf80 	b.w	8003f64 <_strtol_l.constprop.0>

08004064 <__cvt>:
 8004064:	2b00      	cmp	r3, #0
 8004066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800406a:	461f      	mov	r7, r3
 800406c:	bfbb      	ittet	lt
 800406e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004072:	461f      	movlt	r7, r3
 8004074:	2300      	movge	r3, #0
 8004076:	232d      	movlt	r3, #45	; 0x2d
 8004078:	b088      	sub	sp, #32
 800407a:	4614      	mov	r4, r2
 800407c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800407e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004080:	7013      	strb	r3, [r2, #0]
 8004082:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004084:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004088:	f023 0820 	bic.w	r8, r3, #32
 800408c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004090:	d005      	beq.n	800409e <__cvt+0x3a>
 8004092:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004096:	d100      	bne.n	800409a <__cvt+0x36>
 8004098:	3501      	adds	r5, #1
 800409a:	2302      	movs	r3, #2
 800409c:	e000      	b.n	80040a0 <__cvt+0x3c>
 800409e:	2303      	movs	r3, #3
 80040a0:	aa07      	add	r2, sp, #28
 80040a2:	9204      	str	r2, [sp, #16]
 80040a4:	aa06      	add	r2, sp, #24
 80040a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80040aa:	e9cd 3500 	strd	r3, r5, [sp]
 80040ae:	4622      	mov	r2, r4
 80040b0:	463b      	mov	r3, r7
 80040b2:	f001 f925 	bl	8005300 <_dtoa_r>
 80040b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040ba:	4606      	mov	r6, r0
 80040bc:	d102      	bne.n	80040c4 <__cvt+0x60>
 80040be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040c0:	07db      	lsls	r3, r3, #31
 80040c2:	d522      	bpl.n	800410a <__cvt+0xa6>
 80040c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040c8:	eb06 0905 	add.w	r9, r6, r5
 80040cc:	d110      	bne.n	80040f0 <__cvt+0x8c>
 80040ce:	7833      	ldrb	r3, [r6, #0]
 80040d0:	2b30      	cmp	r3, #48	; 0x30
 80040d2:	d10a      	bne.n	80040ea <__cvt+0x86>
 80040d4:	2200      	movs	r2, #0
 80040d6:	2300      	movs	r3, #0
 80040d8:	4620      	mov	r0, r4
 80040da:	4639      	mov	r1, r7
 80040dc:	f7fc fd18 	bl	8000b10 <__aeabi_dcmpeq>
 80040e0:	b918      	cbnz	r0, 80040ea <__cvt+0x86>
 80040e2:	f1c5 0501 	rsb	r5, r5, #1
 80040e6:	f8ca 5000 	str.w	r5, [sl]
 80040ea:	f8da 3000 	ldr.w	r3, [sl]
 80040ee:	4499      	add	r9, r3
 80040f0:	2200      	movs	r2, #0
 80040f2:	2300      	movs	r3, #0
 80040f4:	4620      	mov	r0, r4
 80040f6:	4639      	mov	r1, r7
 80040f8:	f7fc fd0a 	bl	8000b10 <__aeabi_dcmpeq>
 80040fc:	b108      	cbz	r0, 8004102 <__cvt+0x9e>
 80040fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8004102:	2230      	movs	r2, #48	; 0x30
 8004104:	9b07      	ldr	r3, [sp, #28]
 8004106:	454b      	cmp	r3, r9
 8004108:	d307      	bcc.n	800411a <__cvt+0xb6>
 800410a:	4630      	mov	r0, r6
 800410c:	9b07      	ldr	r3, [sp, #28]
 800410e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004110:	1b9b      	subs	r3, r3, r6
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	b008      	add	sp, #32
 8004116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411a:	1c59      	adds	r1, r3, #1
 800411c:	9107      	str	r1, [sp, #28]
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	e7f0      	b.n	8004104 <__cvt+0xa0>

08004122 <__exponent>:
 8004122:	4603      	mov	r3, r0
 8004124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004126:	2900      	cmp	r1, #0
 8004128:	f803 2b02 	strb.w	r2, [r3], #2
 800412c:	bfb6      	itet	lt
 800412e:	222d      	movlt	r2, #45	; 0x2d
 8004130:	222b      	movge	r2, #43	; 0x2b
 8004132:	4249      	neglt	r1, r1
 8004134:	2909      	cmp	r1, #9
 8004136:	7042      	strb	r2, [r0, #1]
 8004138:	dd2a      	ble.n	8004190 <__exponent+0x6e>
 800413a:	f10d 0207 	add.w	r2, sp, #7
 800413e:	4617      	mov	r7, r2
 8004140:	260a      	movs	r6, #10
 8004142:	fb91 f5f6 	sdiv	r5, r1, r6
 8004146:	4694      	mov	ip, r2
 8004148:	fb06 1415 	mls	r4, r6, r5, r1
 800414c:	3430      	adds	r4, #48	; 0x30
 800414e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004152:	460c      	mov	r4, r1
 8004154:	2c63      	cmp	r4, #99	; 0x63
 8004156:	4629      	mov	r1, r5
 8004158:	f102 32ff 	add.w	r2, r2, #4294967295
 800415c:	dcf1      	bgt.n	8004142 <__exponent+0x20>
 800415e:	3130      	adds	r1, #48	; 0x30
 8004160:	f1ac 0402 	sub.w	r4, ip, #2
 8004164:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004168:	4622      	mov	r2, r4
 800416a:	1c41      	adds	r1, r0, #1
 800416c:	42ba      	cmp	r2, r7
 800416e:	d30a      	bcc.n	8004186 <__exponent+0x64>
 8004170:	f10d 0209 	add.w	r2, sp, #9
 8004174:	eba2 020c 	sub.w	r2, r2, ip
 8004178:	42bc      	cmp	r4, r7
 800417a:	bf88      	it	hi
 800417c:	2200      	movhi	r2, #0
 800417e:	4413      	add	r3, r2
 8004180:	1a18      	subs	r0, r3, r0
 8004182:	b003      	add	sp, #12
 8004184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004186:	f812 5b01 	ldrb.w	r5, [r2], #1
 800418a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800418e:	e7ed      	b.n	800416c <__exponent+0x4a>
 8004190:	2330      	movs	r3, #48	; 0x30
 8004192:	3130      	adds	r1, #48	; 0x30
 8004194:	7083      	strb	r3, [r0, #2]
 8004196:	70c1      	strb	r1, [r0, #3]
 8004198:	1d03      	adds	r3, r0, #4
 800419a:	e7f1      	b.n	8004180 <__exponent+0x5e>

0800419c <_printf_float>:
 800419c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a0:	b091      	sub	sp, #68	; 0x44
 80041a2:	460c      	mov	r4, r1
 80041a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80041a8:	4616      	mov	r6, r2
 80041aa:	461f      	mov	r7, r3
 80041ac:	4605      	mov	r5, r0
 80041ae:	f000 ff75 	bl	800509c <_localeconv_r>
 80041b2:	6803      	ldr	r3, [r0, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	9309      	str	r3, [sp, #36]	; 0x24
 80041b8:	f7fb ffca 	bl	8000150 <strlen>
 80041bc:	2300      	movs	r3, #0
 80041be:	930e      	str	r3, [sp, #56]	; 0x38
 80041c0:	f8d8 3000 	ldr.w	r3, [r8]
 80041c4:	900a      	str	r0, [sp, #40]	; 0x28
 80041c6:	3307      	adds	r3, #7
 80041c8:	f023 0307 	bic.w	r3, r3, #7
 80041cc:	f103 0208 	add.w	r2, r3, #8
 80041d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80041d4:	f8d4 b000 	ldr.w	fp, [r4]
 80041d8:	f8c8 2000 	str.w	r2, [r8]
 80041dc:	e9d3 a800 	ldrd	sl, r8, [r3]
 80041e0:	4652      	mov	r2, sl
 80041e2:	4643      	mov	r3, r8
 80041e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041e8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80041ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80041ee:	f04f 32ff 	mov.w	r2, #4294967295
 80041f2:	4650      	mov	r0, sl
 80041f4:	4b9c      	ldr	r3, [pc, #624]	; (8004468 <_printf_float+0x2cc>)
 80041f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041f8:	f7fc fcbc 	bl	8000b74 <__aeabi_dcmpun>
 80041fc:	bb70      	cbnz	r0, 800425c <_printf_float+0xc0>
 80041fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004202:	4650      	mov	r0, sl
 8004204:	4b98      	ldr	r3, [pc, #608]	; (8004468 <_printf_float+0x2cc>)
 8004206:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004208:	f7fc fc96 	bl	8000b38 <__aeabi_dcmple>
 800420c:	bb30      	cbnz	r0, 800425c <_printf_float+0xc0>
 800420e:	2200      	movs	r2, #0
 8004210:	2300      	movs	r3, #0
 8004212:	4650      	mov	r0, sl
 8004214:	4641      	mov	r1, r8
 8004216:	f7fc fc85 	bl	8000b24 <__aeabi_dcmplt>
 800421a:	b110      	cbz	r0, 8004222 <_printf_float+0x86>
 800421c:	232d      	movs	r3, #45	; 0x2d
 800421e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004222:	4a92      	ldr	r2, [pc, #584]	; (800446c <_printf_float+0x2d0>)
 8004224:	4b92      	ldr	r3, [pc, #584]	; (8004470 <_printf_float+0x2d4>)
 8004226:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800422a:	bf94      	ite	ls
 800422c:	4690      	movls	r8, r2
 800422e:	4698      	movhi	r8, r3
 8004230:	2303      	movs	r3, #3
 8004232:	f04f 0a00 	mov.w	sl, #0
 8004236:	6123      	str	r3, [r4, #16]
 8004238:	f02b 0304 	bic.w	r3, fp, #4
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	4633      	mov	r3, r6
 8004240:	4621      	mov	r1, r4
 8004242:	4628      	mov	r0, r5
 8004244:	9700      	str	r7, [sp, #0]
 8004246:	aa0f      	add	r2, sp, #60	; 0x3c
 8004248:	f000 f9d6 	bl	80045f8 <_printf_common>
 800424c:	3001      	adds	r0, #1
 800424e:	f040 8090 	bne.w	8004372 <_printf_float+0x1d6>
 8004252:	f04f 30ff 	mov.w	r0, #4294967295
 8004256:	b011      	add	sp, #68	; 0x44
 8004258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425c:	4652      	mov	r2, sl
 800425e:	4643      	mov	r3, r8
 8004260:	4650      	mov	r0, sl
 8004262:	4641      	mov	r1, r8
 8004264:	f7fc fc86 	bl	8000b74 <__aeabi_dcmpun>
 8004268:	b148      	cbz	r0, 800427e <_printf_float+0xe2>
 800426a:	f1b8 0f00 	cmp.w	r8, #0
 800426e:	bfb8      	it	lt
 8004270:	232d      	movlt	r3, #45	; 0x2d
 8004272:	4a80      	ldr	r2, [pc, #512]	; (8004474 <_printf_float+0x2d8>)
 8004274:	bfb8      	it	lt
 8004276:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800427a:	4b7f      	ldr	r3, [pc, #508]	; (8004478 <_printf_float+0x2dc>)
 800427c:	e7d3      	b.n	8004226 <_printf_float+0x8a>
 800427e:	6863      	ldr	r3, [r4, #4]
 8004280:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	d142      	bne.n	800430e <_printf_float+0x172>
 8004288:	2306      	movs	r3, #6
 800428a:	6063      	str	r3, [r4, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	9206      	str	r2, [sp, #24]
 8004290:	aa0e      	add	r2, sp, #56	; 0x38
 8004292:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004296:	aa0d      	add	r2, sp, #52	; 0x34
 8004298:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800429c:	9203      	str	r2, [sp, #12]
 800429e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80042a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80042a6:	6023      	str	r3, [r4, #0]
 80042a8:	6863      	ldr	r3, [r4, #4]
 80042aa:	4652      	mov	r2, sl
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	4628      	mov	r0, r5
 80042b0:	4643      	mov	r3, r8
 80042b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80042b4:	f7ff fed6 	bl	8004064 <__cvt>
 80042b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042ba:	4680      	mov	r8, r0
 80042bc:	2947      	cmp	r1, #71	; 0x47
 80042be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042c0:	d108      	bne.n	80042d4 <_printf_float+0x138>
 80042c2:	1cc8      	adds	r0, r1, #3
 80042c4:	db02      	blt.n	80042cc <_printf_float+0x130>
 80042c6:	6863      	ldr	r3, [r4, #4]
 80042c8:	4299      	cmp	r1, r3
 80042ca:	dd40      	ble.n	800434e <_printf_float+0x1b2>
 80042cc:	f1a9 0902 	sub.w	r9, r9, #2
 80042d0:	fa5f f989 	uxtb.w	r9, r9
 80042d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80042d8:	d81f      	bhi.n	800431a <_printf_float+0x17e>
 80042da:	464a      	mov	r2, r9
 80042dc:	3901      	subs	r1, #1
 80042de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042e2:	910d      	str	r1, [sp, #52]	; 0x34
 80042e4:	f7ff ff1d 	bl	8004122 <__exponent>
 80042e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042ea:	4682      	mov	sl, r0
 80042ec:	1813      	adds	r3, r2, r0
 80042ee:	2a01      	cmp	r2, #1
 80042f0:	6123      	str	r3, [r4, #16]
 80042f2:	dc02      	bgt.n	80042fa <_printf_float+0x15e>
 80042f4:	6822      	ldr	r2, [r4, #0]
 80042f6:	07d2      	lsls	r2, r2, #31
 80042f8:	d501      	bpl.n	80042fe <_printf_float+0x162>
 80042fa:	3301      	adds	r3, #1
 80042fc:	6123      	str	r3, [r4, #16]
 80042fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004302:	2b00      	cmp	r3, #0
 8004304:	d09b      	beq.n	800423e <_printf_float+0xa2>
 8004306:	232d      	movs	r3, #45	; 0x2d
 8004308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800430c:	e797      	b.n	800423e <_printf_float+0xa2>
 800430e:	2947      	cmp	r1, #71	; 0x47
 8004310:	d1bc      	bne.n	800428c <_printf_float+0xf0>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1ba      	bne.n	800428c <_printf_float+0xf0>
 8004316:	2301      	movs	r3, #1
 8004318:	e7b7      	b.n	800428a <_printf_float+0xee>
 800431a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800431e:	d118      	bne.n	8004352 <_printf_float+0x1b6>
 8004320:	2900      	cmp	r1, #0
 8004322:	6863      	ldr	r3, [r4, #4]
 8004324:	dd0b      	ble.n	800433e <_printf_float+0x1a2>
 8004326:	6121      	str	r1, [r4, #16]
 8004328:	b913      	cbnz	r3, 8004330 <_printf_float+0x194>
 800432a:	6822      	ldr	r2, [r4, #0]
 800432c:	07d0      	lsls	r0, r2, #31
 800432e:	d502      	bpl.n	8004336 <_printf_float+0x19a>
 8004330:	3301      	adds	r3, #1
 8004332:	440b      	add	r3, r1
 8004334:	6123      	str	r3, [r4, #16]
 8004336:	f04f 0a00 	mov.w	sl, #0
 800433a:	65a1      	str	r1, [r4, #88]	; 0x58
 800433c:	e7df      	b.n	80042fe <_printf_float+0x162>
 800433e:	b913      	cbnz	r3, 8004346 <_printf_float+0x1aa>
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	07d2      	lsls	r2, r2, #31
 8004344:	d501      	bpl.n	800434a <_printf_float+0x1ae>
 8004346:	3302      	adds	r3, #2
 8004348:	e7f4      	b.n	8004334 <_printf_float+0x198>
 800434a:	2301      	movs	r3, #1
 800434c:	e7f2      	b.n	8004334 <_printf_float+0x198>
 800434e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004354:	4299      	cmp	r1, r3
 8004356:	db05      	blt.n	8004364 <_printf_float+0x1c8>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	6121      	str	r1, [r4, #16]
 800435c:	07d8      	lsls	r0, r3, #31
 800435e:	d5ea      	bpl.n	8004336 <_printf_float+0x19a>
 8004360:	1c4b      	adds	r3, r1, #1
 8004362:	e7e7      	b.n	8004334 <_printf_float+0x198>
 8004364:	2900      	cmp	r1, #0
 8004366:	bfcc      	ite	gt
 8004368:	2201      	movgt	r2, #1
 800436a:	f1c1 0202 	rsble	r2, r1, #2
 800436e:	4413      	add	r3, r2
 8004370:	e7e0      	b.n	8004334 <_printf_float+0x198>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	055a      	lsls	r2, r3, #21
 8004376:	d407      	bmi.n	8004388 <_printf_float+0x1ec>
 8004378:	6923      	ldr	r3, [r4, #16]
 800437a:	4642      	mov	r2, r8
 800437c:	4631      	mov	r1, r6
 800437e:	4628      	mov	r0, r5
 8004380:	47b8      	blx	r7
 8004382:	3001      	adds	r0, #1
 8004384:	d12b      	bne.n	80043de <_printf_float+0x242>
 8004386:	e764      	b.n	8004252 <_printf_float+0xb6>
 8004388:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800438c:	f240 80dd 	bls.w	800454a <_printf_float+0x3ae>
 8004390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004394:	2200      	movs	r2, #0
 8004396:	2300      	movs	r3, #0
 8004398:	f7fc fbba 	bl	8000b10 <__aeabi_dcmpeq>
 800439c:	2800      	cmp	r0, #0
 800439e:	d033      	beq.n	8004408 <_printf_float+0x26c>
 80043a0:	2301      	movs	r3, #1
 80043a2:	4631      	mov	r1, r6
 80043a4:	4628      	mov	r0, r5
 80043a6:	4a35      	ldr	r2, [pc, #212]	; (800447c <_printf_float+0x2e0>)
 80043a8:	47b8      	blx	r7
 80043aa:	3001      	adds	r0, #1
 80043ac:	f43f af51 	beq.w	8004252 <_printf_float+0xb6>
 80043b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043b4:	429a      	cmp	r2, r3
 80043b6:	db02      	blt.n	80043be <_printf_float+0x222>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	07d8      	lsls	r0, r3, #31
 80043bc:	d50f      	bpl.n	80043de <_printf_float+0x242>
 80043be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043c2:	4631      	mov	r1, r6
 80043c4:	4628      	mov	r0, r5
 80043c6:	47b8      	blx	r7
 80043c8:	3001      	adds	r0, #1
 80043ca:	f43f af42 	beq.w	8004252 <_printf_float+0xb6>
 80043ce:	f04f 0800 	mov.w	r8, #0
 80043d2:	f104 091a 	add.w	r9, r4, #26
 80043d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043d8:	3b01      	subs	r3, #1
 80043da:	4543      	cmp	r3, r8
 80043dc:	dc09      	bgt.n	80043f2 <_printf_float+0x256>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	079b      	lsls	r3, r3, #30
 80043e2:	f100 8104 	bmi.w	80045ee <_printf_float+0x452>
 80043e6:	68e0      	ldr	r0, [r4, #12]
 80043e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043ea:	4298      	cmp	r0, r3
 80043ec:	bfb8      	it	lt
 80043ee:	4618      	movlt	r0, r3
 80043f0:	e731      	b.n	8004256 <_printf_float+0xba>
 80043f2:	2301      	movs	r3, #1
 80043f4:	464a      	mov	r2, r9
 80043f6:	4631      	mov	r1, r6
 80043f8:	4628      	mov	r0, r5
 80043fa:	47b8      	blx	r7
 80043fc:	3001      	adds	r0, #1
 80043fe:	f43f af28 	beq.w	8004252 <_printf_float+0xb6>
 8004402:	f108 0801 	add.w	r8, r8, #1
 8004406:	e7e6      	b.n	80043d6 <_printf_float+0x23a>
 8004408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800440a:	2b00      	cmp	r3, #0
 800440c:	dc38      	bgt.n	8004480 <_printf_float+0x2e4>
 800440e:	2301      	movs	r3, #1
 8004410:	4631      	mov	r1, r6
 8004412:	4628      	mov	r0, r5
 8004414:	4a19      	ldr	r2, [pc, #100]	; (800447c <_printf_float+0x2e0>)
 8004416:	47b8      	blx	r7
 8004418:	3001      	adds	r0, #1
 800441a:	f43f af1a 	beq.w	8004252 <_printf_float+0xb6>
 800441e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004422:	4313      	orrs	r3, r2
 8004424:	d102      	bne.n	800442c <_printf_float+0x290>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	07d9      	lsls	r1, r3, #31
 800442a:	d5d8      	bpl.n	80043de <_printf_float+0x242>
 800442c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004430:	4631      	mov	r1, r6
 8004432:	4628      	mov	r0, r5
 8004434:	47b8      	blx	r7
 8004436:	3001      	adds	r0, #1
 8004438:	f43f af0b 	beq.w	8004252 <_printf_float+0xb6>
 800443c:	f04f 0900 	mov.w	r9, #0
 8004440:	f104 0a1a 	add.w	sl, r4, #26
 8004444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004446:	425b      	negs	r3, r3
 8004448:	454b      	cmp	r3, r9
 800444a:	dc01      	bgt.n	8004450 <_printf_float+0x2b4>
 800444c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800444e:	e794      	b.n	800437a <_printf_float+0x1de>
 8004450:	2301      	movs	r3, #1
 8004452:	4652      	mov	r2, sl
 8004454:	4631      	mov	r1, r6
 8004456:	4628      	mov	r0, r5
 8004458:	47b8      	blx	r7
 800445a:	3001      	adds	r0, #1
 800445c:	f43f aef9 	beq.w	8004252 <_printf_float+0xb6>
 8004460:	f109 0901 	add.w	r9, r9, #1
 8004464:	e7ee      	b.n	8004444 <_printf_float+0x2a8>
 8004466:	bf00      	nop
 8004468:	7fefffff 	.word	0x7fefffff
 800446c:	080087eb 	.word	0x080087eb
 8004470:	080087ef 	.word	0x080087ef
 8004474:	080087f3 	.word	0x080087f3
 8004478:	080087f7 	.word	0x080087f7
 800447c:	080087fb 	.word	0x080087fb
 8004480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004482:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004484:	429a      	cmp	r2, r3
 8004486:	bfa8      	it	ge
 8004488:	461a      	movge	r2, r3
 800448a:	2a00      	cmp	r2, #0
 800448c:	4691      	mov	r9, r2
 800448e:	dc37      	bgt.n	8004500 <_printf_float+0x364>
 8004490:	f04f 0b00 	mov.w	fp, #0
 8004494:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004498:	f104 021a 	add.w	r2, r4, #26
 800449c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80044a0:	ebaa 0309 	sub.w	r3, sl, r9
 80044a4:	455b      	cmp	r3, fp
 80044a6:	dc33      	bgt.n	8004510 <_printf_float+0x374>
 80044a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044ac:	429a      	cmp	r2, r3
 80044ae:	db3b      	blt.n	8004528 <_printf_float+0x38c>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	07da      	lsls	r2, r3, #31
 80044b4:	d438      	bmi.n	8004528 <_printf_float+0x38c>
 80044b6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80044ba:	eba2 0903 	sub.w	r9, r2, r3
 80044be:	eba2 020a 	sub.w	r2, r2, sl
 80044c2:	4591      	cmp	r9, r2
 80044c4:	bfa8      	it	ge
 80044c6:	4691      	movge	r9, r2
 80044c8:	f1b9 0f00 	cmp.w	r9, #0
 80044cc:	dc34      	bgt.n	8004538 <_printf_float+0x39c>
 80044ce:	f04f 0800 	mov.w	r8, #0
 80044d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044d6:	f104 0a1a 	add.w	sl, r4, #26
 80044da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	eba3 0309 	sub.w	r3, r3, r9
 80044e4:	4543      	cmp	r3, r8
 80044e6:	f77f af7a 	ble.w	80043de <_printf_float+0x242>
 80044ea:	2301      	movs	r3, #1
 80044ec:	4652      	mov	r2, sl
 80044ee:	4631      	mov	r1, r6
 80044f0:	4628      	mov	r0, r5
 80044f2:	47b8      	blx	r7
 80044f4:	3001      	adds	r0, #1
 80044f6:	f43f aeac 	beq.w	8004252 <_printf_float+0xb6>
 80044fa:	f108 0801 	add.w	r8, r8, #1
 80044fe:	e7ec      	b.n	80044da <_printf_float+0x33e>
 8004500:	4613      	mov	r3, r2
 8004502:	4631      	mov	r1, r6
 8004504:	4642      	mov	r2, r8
 8004506:	4628      	mov	r0, r5
 8004508:	47b8      	blx	r7
 800450a:	3001      	adds	r0, #1
 800450c:	d1c0      	bne.n	8004490 <_printf_float+0x2f4>
 800450e:	e6a0      	b.n	8004252 <_printf_float+0xb6>
 8004510:	2301      	movs	r3, #1
 8004512:	4631      	mov	r1, r6
 8004514:	4628      	mov	r0, r5
 8004516:	920b      	str	r2, [sp, #44]	; 0x2c
 8004518:	47b8      	blx	r7
 800451a:	3001      	adds	r0, #1
 800451c:	f43f ae99 	beq.w	8004252 <_printf_float+0xb6>
 8004520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004522:	f10b 0b01 	add.w	fp, fp, #1
 8004526:	e7b9      	b.n	800449c <_printf_float+0x300>
 8004528:	4631      	mov	r1, r6
 800452a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800452e:	4628      	mov	r0, r5
 8004530:	47b8      	blx	r7
 8004532:	3001      	adds	r0, #1
 8004534:	d1bf      	bne.n	80044b6 <_printf_float+0x31a>
 8004536:	e68c      	b.n	8004252 <_printf_float+0xb6>
 8004538:	464b      	mov	r3, r9
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	eb08 020a 	add.w	r2, r8, sl
 8004542:	47b8      	blx	r7
 8004544:	3001      	adds	r0, #1
 8004546:	d1c2      	bne.n	80044ce <_printf_float+0x332>
 8004548:	e683      	b.n	8004252 <_printf_float+0xb6>
 800454a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800454c:	2a01      	cmp	r2, #1
 800454e:	dc01      	bgt.n	8004554 <_printf_float+0x3b8>
 8004550:	07db      	lsls	r3, r3, #31
 8004552:	d539      	bpl.n	80045c8 <_printf_float+0x42c>
 8004554:	2301      	movs	r3, #1
 8004556:	4642      	mov	r2, r8
 8004558:	4631      	mov	r1, r6
 800455a:	4628      	mov	r0, r5
 800455c:	47b8      	blx	r7
 800455e:	3001      	adds	r0, #1
 8004560:	f43f ae77 	beq.w	8004252 <_printf_float+0xb6>
 8004564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004568:	4631      	mov	r1, r6
 800456a:	4628      	mov	r0, r5
 800456c:	47b8      	blx	r7
 800456e:	3001      	adds	r0, #1
 8004570:	f43f ae6f 	beq.w	8004252 <_printf_float+0xb6>
 8004574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004578:	2200      	movs	r2, #0
 800457a:	2300      	movs	r3, #0
 800457c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004580:	f7fc fac6 	bl	8000b10 <__aeabi_dcmpeq>
 8004584:	b9d8      	cbnz	r0, 80045be <_printf_float+0x422>
 8004586:	f109 33ff 	add.w	r3, r9, #4294967295
 800458a:	f108 0201 	add.w	r2, r8, #1
 800458e:	4631      	mov	r1, r6
 8004590:	4628      	mov	r0, r5
 8004592:	47b8      	blx	r7
 8004594:	3001      	adds	r0, #1
 8004596:	d10e      	bne.n	80045b6 <_printf_float+0x41a>
 8004598:	e65b      	b.n	8004252 <_printf_float+0xb6>
 800459a:	2301      	movs	r3, #1
 800459c:	464a      	mov	r2, r9
 800459e:	4631      	mov	r1, r6
 80045a0:	4628      	mov	r0, r5
 80045a2:	47b8      	blx	r7
 80045a4:	3001      	adds	r0, #1
 80045a6:	f43f ae54 	beq.w	8004252 <_printf_float+0xb6>
 80045aa:	f108 0801 	add.w	r8, r8, #1
 80045ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045b0:	3b01      	subs	r3, #1
 80045b2:	4543      	cmp	r3, r8
 80045b4:	dcf1      	bgt.n	800459a <_printf_float+0x3fe>
 80045b6:	4653      	mov	r3, sl
 80045b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045bc:	e6de      	b.n	800437c <_printf_float+0x1e0>
 80045be:	f04f 0800 	mov.w	r8, #0
 80045c2:	f104 091a 	add.w	r9, r4, #26
 80045c6:	e7f2      	b.n	80045ae <_printf_float+0x412>
 80045c8:	2301      	movs	r3, #1
 80045ca:	4642      	mov	r2, r8
 80045cc:	e7df      	b.n	800458e <_printf_float+0x3f2>
 80045ce:	2301      	movs	r3, #1
 80045d0:	464a      	mov	r2, r9
 80045d2:	4631      	mov	r1, r6
 80045d4:	4628      	mov	r0, r5
 80045d6:	47b8      	blx	r7
 80045d8:	3001      	adds	r0, #1
 80045da:	f43f ae3a 	beq.w	8004252 <_printf_float+0xb6>
 80045de:	f108 0801 	add.w	r8, r8, #1
 80045e2:	68e3      	ldr	r3, [r4, #12]
 80045e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80045e6:	1a5b      	subs	r3, r3, r1
 80045e8:	4543      	cmp	r3, r8
 80045ea:	dcf0      	bgt.n	80045ce <_printf_float+0x432>
 80045ec:	e6fb      	b.n	80043e6 <_printf_float+0x24a>
 80045ee:	f04f 0800 	mov.w	r8, #0
 80045f2:	f104 0919 	add.w	r9, r4, #25
 80045f6:	e7f4      	b.n	80045e2 <_printf_float+0x446>

080045f8 <_printf_common>:
 80045f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045fc:	4616      	mov	r6, r2
 80045fe:	4699      	mov	r9, r3
 8004600:	688a      	ldr	r2, [r1, #8]
 8004602:	690b      	ldr	r3, [r1, #16]
 8004604:	4607      	mov	r7, r0
 8004606:	4293      	cmp	r3, r2
 8004608:	bfb8      	it	lt
 800460a:	4613      	movlt	r3, r2
 800460c:	6033      	str	r3, [r6, #0]
 800460e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004612:	460c      	mov	r4, r1
 8004614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004618:	b10a      	cbz	r2, 800461e <_printf_common+0x26>
 800461a:	3301      	adds	r3, #1
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	0699      	lsls	r1, r3, #26
 8004622:	bf42      	ittt	mi
 8004624:	6833      	ldrmi	r3, [r6, #0]
 8004626:	3302      	addmi	r3, #2
 8004628:	6033      	strmi	r3, [r6, #0]
 800462a:	6825      	ldr	r5, [r4, #0]
 800462c:	f015 0506 	ands.w	r5, r5, #6
 8004630:	d106      	bne.n	8004640 <_printf_common+0x48>
 8004632:	f104 0a19 	add.w	sl, r4, #25
 8004636:	68e3      	ldr	r3, [r4, #12]
 8004638:	6832      	ldr	r2, [r6, #0]
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	42ab      	cmp	r3, r5
 800463e:	dc2b      	bgt.n	8004698 <_printf_common+0xa0>
 8004640:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004644:	1e13      	subs	r3, r2, #0
 8004646:	6822      	ldr	r2, [r4, #0]
 8004648:	bf18      	it	ne
 800464a:	2301      	movne	r3, #1
 800464c:	0692      	lsls	r2, r2, #26
 800464e:	d430      	bmi.n	80046b2 <_printf_common+0xba>
 8004650:	4649      	mov	r1, r9
 8004652:	4638      	mov	r0, r7
 8004654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004658:	47c0      	blx	r8
 800465a:	3001      	adds	r0, #1
 800465c:	d023      	beq.n	80046a6 <_printf_common+0xae>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	6922      	ldr	r2, [r4, #16]
 8004662:	f003 0306 	and.w	r3, r3, #6
 8004666:	2b04      	cmp	r3, #4
 8004668:	bf14      	ite	ne
 800466a:	2500      	movne	r5, #0
 800466c:	6833      	ldreq	r3, [r6, #0]
 800466e:	f04f 0600 	mov.w	r6, #0
 8004672:	bf08      	it	eq
 8004674:	68e5      	ldreq	r5, [r4, #12]
 8004676:	f104 041a 	add.w	r4, r4, #26
 800467a:	bf08      	it	eq
 800467c:	1aed      	subeq	r5, r5, r3
 800467e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004682:	bf08      	it	eq
 8004684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004688:	4293      	cmp	r3, r2
 800468a:	bfc4      	itt	gt
 800468c:	1a9b      	subgt	r3, r3, r2
 800468e:	18ed      	addgt	r5, r5, r3
 8004690:	42b5      	cmp	r5, r6
 8004692:	d11a      	bne.n	80046ca <_printf_common+0xd2>
 8004694:	2000      	movs	r0, #0
 8004696:	e008      	b.n	80046aa <_printf_common+0xb2>
 8004698:	2301      	movs	r3, #1
 800469a:	4652      	mov	r2, sl
 800469c:	4649      	mov	r1, r9
 800469e:	4638      	mov	r0, r7
 80046a0:	47c0      	blx	r8
 80046a2:	3001      	adds	r0, #1
 80046a4:	d103      	bne.n	80046ae <_printf_common+0xb6>
 80046a6:	f04f 30ff 	mov.w	r0, #4294967295
 80046aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ae:	3501      	adds	r5, #1
 80046b0:	e7c1      	b.n	8004636 <_printf_common+0x3e>
 80046b2:	2030      	movs	r0, #48	; 0x30
 80046b4:	18e1      	adds	r1, r4, r3
 80046b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046c0:	4422      	add	r2, r4
 80046c2:	3302      	adds	r3, #2
 80046c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046c8:	e7c2      	b.n	8004650 <_printf_common+0x58>
 80046ca:	2301      	movs	r3, #1
 80046cc:	4622      	mov	r2, r4
 80046ce:	4649      	mov	r1, r9
 80046d0:	4638      	mov	r0, r7
 80046d2:	47c0      	blx	r8
 80046d4:	3001      	adds	r0, #1
 80046d6:	d0e6      	beq.n	80046a6 <_printf_common+0xae>
 80046d8:	3601      	adds	r6, #1
 80046da:	e7d9      	b.n	8004690 <_printf_common+0x98>

080046dc <_printf_i>:
 80046dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046e0:	7e0f      	ldrb	r7, [r1, #24]
 80046e2:	4691      	mov	r9, r2
 80046e4:	2f78      	cmp	r7, #120	; 0x78
 80046e6:	4680      	mov	r8, r0
 80046e8:	460c      	mov	r4, r1
 80046ea:	469a      	mov	sl, r3
 80046ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046f2:	d807      	bhi.n	8004704 <_printf_i+0x28>
 80046f4:	2f62      	cmp	r7, #98	; 0x62
 80046f6:	d80a      	bhi.n	800470e <_printf_i+0x32>
 80046f8:	2f00      	cmp	r7, #0
 80046fa:	f000 80d5 	beq.w	80048a8 <_printf_i+0x1cc>
 80046fe:	2f58      	cmp	r7, #88	; 0x58
 8004700:	f000 80c1 	beq.w	8004886 <_printf_i+0x1aa>
 8004704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800470c:	e03a      	b.n	8004784 <_printf_i+0xa8>
 800470e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004712:	2b15      	cmp	r3, #21
 8004714:	d8f6      	bhi.n	8004704 <_printf_i+0x28>
 8004716:	a101      	add	r1, pc, #4	; (adr r1, 800471c <_printf_i+0x40>)
 8004718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800471c:	08004775 	.word	0x08004775
 8004720:	08004789 	.word	0x08004789
 8004724:	08004705 	.word	0x08004705
 8004728:	08004705 	.word	0x08004705
 800472c:	08004705 	.word	0x08004705
 8004730:	08004705 	.word	0x08004705
 8004734:	08004789 	.word	0x08004789
 8004738:	08004705 	.word	0x08004705
 800473c:	08004705 	.word	0x08004705
 8004740:	08004705 	.word	0x08004705
 8004744:	08004705 	.word	0x08004705
 8004748:	0800488f 	.word	0x0800488f
 800474c:	080047b5 	.word	0x080047b5
 8004750:	08004849 	.word	0x08004849
 8004754:	08004705 	.word	0x08004705
 8004758:	08004705 	.word	0x08004705
 800475c:	080048b1 	.word	0x080048b1
 8004760:	08004705 	.word	0x08004705
 8004764:	080047b5 	.word	0x080047b5
 8004768:	08004705 	.word	0x08004705
 800476c:	08004705 	.word	0x08004705
 8004770:	08004851 	.word	0x08004851
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	1d1a      	adds	r2, r3, #4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	602a      	str	r2, [r5, #0]
 800477c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004784:	2301      	movs	r3, #1
 8004786:	e0a0      	b.n	80048ca <_printf_i+0x1ee>
 8004788:	6820      	ldr	r0, [r4, #0]
 800478a:	682b      	ldr	r3, [r5, #0]
 800478c:	0607      	lsls	r7, r0, #24
 800478e:	f103 0104 	add.w	r1, r3, #4
 8004792:	6029      	str	r1, [r5, #0]
 8004794:	d501      	bpl.n	800479a <_printf_i+0xbe>
 8004796:	681e      	ldr	r6, [r3, #0]
 8004798:	e003      	b.n	80047a2 <_printf_i+0xc6>
 800479a:	0646      	lsls	r6, r0, #25
 800479c:	d5fb      	bpl.n	8004796 <_printf_i+0xba>
 800479e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047a2:	2e00      	cmp	r6, #0
 80047a4:	da03      	bge.n	80047ae <_printf_i+0xd2>
 80047a6:	232d      	movs	r3, #45	; 0x2d
 80047a8:	4276      	negs	r6, r6
 80047aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ae:	230a      	movs	r3, #10
 80047b0:	4859      	ldr	r0, [pc, #356]	; (8004918 <_printf_i+0x23c>)
 80047b2:	e012      	b.n	80047da <_printf_i+0xfe>
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	1d19      	adds	r1, r3, #4
 80047ba:	6029      	str	r1, [r5, #0]
 80047bc:	0605      	lsls	r5, r0, #24
 80047be:	d501      	bpl.n	80047c4 <_printf_i+0xe8>
 80047c0:	681e      	ldr	r6, [r3, #0]
 80047c2:	e002      	b.n	80047ca <_printf_i+0xee>
 80047c4:	0641      	lsls	r1, r0, #25
 80047c6:	d5fb      	bpl.n	80047c0 <_printf_i+0xe4>
 80047c8:	881e      	ldrh	r6, [r3, #0]
 80047ca:	2f6f      	cmp	r7, #111	; 0x6f
 80047cc:	bf0c      	ite	eq
 80047ce:	2308      	moveq	r3, #8
 80047d0:	230a      	movne	r3, #10
 80047d2:	4851      	ldr	r0, [pc, #324]	; (8004918 <_printf_i+0x23c>)
 80047d4:	2100      	movs	r1, #0
 80047d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047da:	6865      	ldr	r5, [r4, #4]
 80047dc:	2d00      	cmp	r5, #0
 80047de:	bfa8      	it	ge
 80047e0:	6821      	ldrge	r1, [r4, #0]
 80047e2:	60a5      	str	r5, [r4, #8]
 80047e4:	bfa4      	itt	ge
 80047e6:	f021 0104 	bicge.w	r1, r1, #4
 80047ea:	6021      	strge	r1, [r4, #0]
 80047ec:	b90e      	cbnz	r6, 80047f2 <_printf_i+0x116>
 80047ee:	2d00      	cmp	r5, #0
 80047f0:	d04b      	beq.n	800488a <_printf_i+0x1ae>
 80047f2:	4615      	mov	r5, r2
 80047f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80047f8:	fb03 6711 	mls	r7, r3, r1, r6
 80047fc:	5dc7      	ldrb	r7, [r0, r7]
 80047fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004802:	4637      	mov	r7, r6
 8004804:	42bb      	cmp	r3, r7
 8004806:	460e      	mov	r6, r1
 8004808:	d9f4      	bls.n	80047f4 <_printf_i+0x118>
 800480a:	2b08      	cmp	r3, #8
 800480c:	d10b      	bne.n	8004826 <_printf_i+0x14a>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	07de      	lsls	r6, r3, #31
 8004812:	d508      	bpl.n	8004826 <_printf_i+0x14a>
 8004814:	6923      	ldr	r3, [r4, #16]
 8004816:	6861      	ldr	r1, [r4, #4]
 8004818:	4299      	cmp	r1, r3
 800481a:	bfde      	ittt	le
 800481c:	2330      	movle	r3, #48	; 0x30
 800481e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004822:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004826:	1b52      	subs	r2, r2, r5
 8004828:	6122      	str	r2, [r4, #16]
 800482a:	464b      	mov	r3, r9
 800482c:	4621      	mov	r1, r4
 800482e:	4640      	mov	r0, r8
 8004830:	f8cd a000 	str.w	sl, [sp]
 8004834:	aa03      	add	r2, sp, #12
 8004836:	f7ff fedf 	bl	80045f8 <_printf_common>
 800483a:	3001      	adds	r0, #1
 800483c:	d14a      	bne.n	80048d4 <_printf_i+0x1f8>
 800483e:	f04f 30ff 	mov.w	r0, #4294967295
 8004842:	b004      	add	sp, #16
 8004844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	f043 0320 	orr.w	r3, r3, #32
 800484e:	6023      	str	r3, [r4, #0]
 8004850:	2778      	movs	r7, #120	; 0x78
 8004852:	4832      	ldr	r0, [pc, #200]	; (800491c <_printf_i+0x240>)
 8004854:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	6829      	ldr	r1, [r5, #0]
 800485c:	061f      	lsls	r7, r3, #24
 800485e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004862:	d402      	bmi.n	800486a <_printf_i+0x18e>
 8004864:	065f      	lsls	r7, r3, #25
 8004866:	bf48      	it	mi
 8004868:	b2b6      	uxthmi	r6, r6
 800486a:	07df      	lsls	r7, r3, #31
 800486c:	bf48      	it	mi
 800486e:	f043 0320 	orrmi.w	r3, r3, #32
 8004872:	6029      	str	r1, [r5, #0]
 8004874:	bf48      	it	mi
 8004876:	6023      	strmi	r3, [r4, #0]
 8004878:	b91e      	cbnz	r6, 8004882 <_printf_i+0x1a6>
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	f023 0320 	bic.w	r3, r3, #32
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	2310      	movs	r3, #16
 8004884:	e7a6      	b.n	80047d4 <_printf_i+0xf8>
 8004886:	4824      	ldr	r0, [pc, #144]	; (8004918 <_printf_i+0x23c>)
 8004888:	e7e4      	b.n	8004854 <_printf_i+0x178>
 800488a:	4615      	mov	r5, r2
 800488c:	e7bd      	b.n	800480a <_printf_i+0x12e>
 800488e:	682b      	ldr	r3, [r5, #0]
 8004890:	6826      	ldr	r6, [r4, #0]
 8004892:	1d18      	adds	r0, r3, #4
 8004894:	6961      	ldr	r1, [r4, #20]
 8004896:	6028      	str	r0, [r5, #0]
 8004898:	0635      	lsls	r5, r6, #24
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	d501      	bpl.n	80048a2 <_printf_i+0x1c6>
 800489e:	6019      	str	r1, [r3, #0]
 80048a0:	e002      	b.n	80048a8 <_printf_i+0x1cc>
 80048a2:	0670      	lsls	r0, r6, #25
 80048a4:	d5fb      	bpl.n	800489e <_printf_i+0x1c2>
 80048a6:	8019      	strh	r1, [r3, #0]
 80048a8:	2300      	movs	r3, #0
 80048aa:	4615      	mov	r5, r2
 80048ac:	6123      	str	r3, [r4, #16]
 80048ae:	e7bc      	b.n	800482a <_printf_i+0x14e>
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	2100      	movs	r1, #0
 80048b4:	1d1a      	adds	r2, r3, #4
 80048b6:	602a      	str	r2, [r5, #0]
 80048b8:	681d      	ldr	r5, [r3, #0]
 80048ba:	6862      	ldr	r2, [r4, #4]
 80048bc:	4628      	mov	r0, r5
 80048be:	f000 fc63 	bl	8005188 <memchr>
 80048c2:	b108      	cbz	r0, 80048c8 <_printf_i+0x1ec>
 80048c4:	1b40      	subs	r0, r0, r5
 80048c6:	6060      	str	r0, [r4, #4]
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	6123      	str	r3, [r4, #16]
 80048cc:	2300      	movs	r3, #0
 80048ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048d2:	e7aa      	b.n	800482a <_printf_i+0x14e>
 80048d4:	462a      	mov	r2, r5
 80048d6:	4649      	mov	r1, r9
 80048d8:	4640      	mov	r0, r8
 80048da:	6923      	ldr	r3, [r4, #16]
 80048dc:	47d0      	blx	sl
 80048de:	3001      	adds	r0, #1
 80048e0:	d0ad      	beq.n	800483e <_printf_i+0x162>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	079b      	lsls	r3, r3, #30
 80048e6:	d413      	bmi.n	8004910 <_printf_i+0x234>
 80048e8:	68e0      	ldr	r0, [r4, #12]
 80048ea:	9b03      	ldr	r3, [sp, #12]
 80048ec:	4298      	cmp	r0, r3
 80048ee:	bfb8      	it	lt
 80048f0:	4618      	movlt	r0, r3
 80048f2:	e7a6      	b.n	8004842 <_printf_i+0x166>
 80048f4:	2301      	movs	r3, #1
 80048f6:	4632      	mov	r2, r6
 80048f8:	4649      	mov	r1, r9
 80048fa:	4640      	mov	r0, r8
 80048fc:	47d0      	blx	sl
 80048fe:	3001      	adds	r0, #1
 8004900:	d09d      	beq.n	800483e <_printf_i+0x162>
 8004902:	3501      	adds	r5, #1
 8004904:	68e3      	ldr	r3, [r4, #12]
 8004906:	9903      	ldr	r1, [sp, #12]
 8004908:	1a5b      	subs	r3, r3, r1
 800490a:	42ab      	cmp	r3, r5
 800490c:	dcf2      	bgt.n	80048f4 <_printf_i+0x218>
 800490e:	e7eb      	b.n	80048e8 <_printf_i+0x20c>
 8004910:	2500      	movs	r5, #0
 8004912:	f104 0619 	add.w	r6, r4, #25
 8004916:	e7f5      	b.n	8004904 <_printf_i+0x228>
 8004918:	080087fd 	.word	0x080087fd
 800491c:	0800880e 	.word	0x0800880e

08004920 <_scanf_float>:
 8004920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004924:	b087      	sub	sp, #28
 8004926:	9303      	str	r3, [sp, #12]
 8004928:	688b      	ldr	r3, [r1, #8]
 800492a:	4617      	mov	r7, r2
 800492c:	1e5a      	subs	r2, r3, #1
 800492e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004932:	bf85      	ittet	hi
 8004934:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004938:	195b      	addhi	r3, r3, r5
 800493a:	2300      	movls	r3, #0
 800493c:	9302      	strhi	r3, [sp, #8]
 800493e:	bf88      	it	hi
 8004940:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004944:	468b      	mov	fp, r1
 8004946:	f04f 0500 	mov.w	r5, #0
 800494a:	bf8c      	ite	hi
 800494c:	608b      	strhi	r3, [r1, #8]
 800494e:	9302      	strls	r3, [sp, #8]
 8004950:	680b      	ldr	r3, [r1, #0]
 8004952:	4680      	mov	r8, r0
 8004954:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004958:	f84b 3b1c 	str.w	r3, [fp], #28
 800495c:	460c      	mov	r4, r1
 800495e:	465e      	mov	r6, fp
 8004960:	46aa      	mov	sl, r5
 8004962:	46a9      	mov	r9, r5
 8004964:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004968:	9501      	str	r5, [sp, #4]
 800496a:	68a2      	ldr	r2, [r4, #8]
 800496c:	b152      	cbz	r2, 8004984 <_scanf_float+0x64>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b4e      	cmp	r3, #78	; 0x4e
 8004974:	d864      	bhi.n	8004a40 <_scanf_float+0x120>
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d83c      	bhi.n	80049f4 <_scanf_float+0xd4>
 800497a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800497e:	b2c8      	uxtb	r0, r1
 8004980:	280e      	cmp	r0, #14
 8004982:	d93a      	bls.n	80049fa <_scanf_float+0xda>
 8004984:	f1b9 0f00 	cmp.w	r9, #0
 8004988:	d003      	beq.n	8004992 <_scanf_float+0x72>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004996:	f1ba 0f01 	cmp.w	sl, #1
 800499a:	f200 8113 	bhi.w	8004bc4 <_scanf_float+0x2a4>
 800499e:	455e      	cmp	r6, fp
 80049a0:	f200 8105 	bhi.w	8004bae <_scanf_float+0x28e>
 80049a4:	2501      	movs	r5, #1
 80049a6:	4628      	mov	r0, r5
 80049a8:	b007      	add	sp, #28
 80049aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80049b2:	2a0d      	cmp	r2, #13
 80049b4:	d8e6      	bhi.n	8004984 <_scanf_float+0x64>
 80049b6:	a101      	add	r1, pc, #4	; (adr r1, 80049bc <_scanf_float+0x9c>)
 80049b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80049bc:	08004afb 	.word	0x08004afb
 80049c0:	08004985 	.word	0x08004985
 80049c4:	08004985 	.word	0x08004985
 80049c8:	08004985 	.word	0x08004985
 80049cc:	08004b5b 	.word	0x08004b5b
 80049d0:	08004b33 	.word	0x08004b33
 80049d4:	08004985 	.word	0x08004985
 80049d8:	08004985 	.word	0x08004985
 80049dc:	08004b09 	.word	0x08004b09
 80049e0:	08004985 	.word	0x08004985
 80049e4:	08004985 	.word	0x08004985
 80049e8:	08004985 	.word	0x08004985
 80049ec:	08004985 	.word	0x08004985
 80049f0:	08004ac1 	.word	0x08004ac1
 80049f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80049f8:	e7db      	b.n	80049b2 <_scanf_float+0x92>
 80049fa:	290e      	cmp	r1, #14
 80049fc:	d8c2      	bhi.n	8004984 <_scanf_float+0x64>
 80049fe:	a001      	add	r0, pc, #4	; (adr r0, 8004a04 <_scanf_float+0xe4>)
 8004a00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a04:	08004ab3 	.word	0x08004ab3
 8004a08:	08004985 	.word	0x08004985
 8004a0c:	08004ab3 	.word	0x08004ab3
 8004a10:	08004b47 	.word	0x08004b47
 8004a14:	08004985 	.word	0x08004985
 8004a18:	08004a61 	.word	0x08004a61
 8004a1c:	08004a9d 	.word	0x08004a9d
 8004a20:	08004a9d 	.word	0x08004a9d
 8004a24:	08004a9d 	.word	0x08004a9d
 8004a28:	08004a9d 	.word	0x08004a9d
 8004a2c:	08004a9d 	.word	0x08004a9d
 8004a30:	08004a9d 	.word	0x08004a9d
 8004a34:	08004a9d 	.word	0x08004a9d
 8004a38:	08004a9d 	.word	0x08004a9d
 8004a3c:	08004a9d 	.word	0x08004a9d
 8004a40:	2b6e      	cmp	r3, #110	; 0x6e
 8004a42:	d809      	bhi.n	8004a58 <_scanf_float+0x138>
 8004a44:	2b60      	cmp	r3, #96	; 0x60
 8004a46:	d8b2      	bhi.n	80049ae <_scanf_float+0x8e>
 8004a48:	2b54      	cmp	r3, #84	; 0x54
 8004a4a:	d077      	beq.n	8004b3c <_scanf_float+0x21c>
 8004a4c:	2b59      	cmp	r3, #89	; 0x59
 8004a4e:	d199      	bne.n	8004984 <_scanf_float+0x64>
 8004a50:	2d07      	cmp	r5, #7
 8004a52:	d197      	bne.n	8004984 <_scanf_float+0x64>
 8004a54:	2508      	movs	r5, #8
 8004a56:	e029      	b.n	8004aac <_scanf_float+0x18c>
 8004a58:	2b74      	cmp	r3, #116	; 0x74
 8004a5a:	d06f      	beq.n	8004b3c <_scanf_float+0x21c>
 8004a5c:	2b79      	cmp	r3, #121	; 0x79
 8004a5e:	e7f6      	b.n	8004a4e <_scanf_float+0x12e>
 8004a60:	6821      	ldr	r1, [r4, #0]
 8004a62:	05c8      	lsls	r0, r1, #23
 8004a64:	d51a      	bpl.n	8004a9c <_scanf_float+0x17c>
 8004a66:	9b02      	ldr	r3, [sp, #8]
 8004a68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004a6c:	6021      	str	r1, [r4, #0]
 8004a6e:	f109 0901 	add.w	r9, r9, #1
 8004a72:	b11b      	cbz	r3, 8004a7c <_scanf_float+0x15c>
 8004a74:	3b01      	subs	r3, #1
 8004a76:	3201      	adds	r2, #1
 8004a78:	9302      	str	r3, [sp, #8]
 8004a7a:	60a2      	str	r2, [r4, #8]
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	60a3      	str	r3, [r4, #8]
 8004a82:	6923      	ldr	r3, [r4, #16]
 8004a84:	3301      	adds	r3, #1
 8004a86:	6123      	str	r3, [r4, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	f340 8084 	ble.w	8004b9c <_scanf_float+0x27c>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	3301      	adds	r3, #1
 8004a98:	603b      	str	r3, [r7, #0]
 8004a9a:	e766      	b.n	800496a <_scanf_float+0x4a>
 8004a9c:	eb1a 0f05 	cmn.w	sl, r5
 8004aa0:	f47f af70 	bne.w	8004984 <_scanf_float+0x64>
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004aaa:	6022      	str	r2, [r4, #0]
 8004aac:	f806 3b01 	strb.w	r3, [r6], #1
 8004ab0:	e7e4      	b.n	8004a7c <_scanf_float+0x15c>
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	0610      	lsls	r0, r2, #24
 8004ab6:	f57f af65 	bpl.w	8004984 <_scanf_float+0x64>
 8004aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004abe:	e7f4      	b.n	8004aaa <_scanf_float+0x18a>
 8004ac0:	f1ba 0f00 	cmp.w	sl, #0
 8004ac4:	d10e      	bne.n	8004ae4 <_scanf_float+0x1c4>
 8004ac6:	f1b9 0f00 	cmp.w	r9, #0
 8004aca:	d10e      	bne.n	8004aea <_scanf_float+0x1ca>
 8004acc:	6822      	ldr	r2, [r4, #0]
 8004ace:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004ad2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004ad6:	d108      	bne.n	8004aea <_scanf_float+0x1ca>
 8004ad8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004adc:	f04f 0a01 	mov.w	sl, #1
 8004ae0:	6022      	str	r2, [r4, #0]
 8004ae2:	e7e3      	b.n	8004aac <_scanf_float+0x18c>
 8004ae4:	f1ba 0f02 	cmp.w	sl, #2
 8004ae8:	d055      	beq.n	8004b96 <_scanf_float+0x276>
 8004aea:	2d01      	cmp	r5, #1
 8004aec:	d002      	beq.n	8004af4 <_scanf_float+0x1d4>
 8004aee:	2d04      	cmp	r5, #4
 8004af0:	f47f af48 	bne.w	8004984 <_scanf_float+0x64>
 8004af4:	3501      	adds	r5, #1
 8004af6:	b2ed      	uxtb	r5, r5
 8004af8:	e7d8      	b.n	8004aac <_scanf_float+0x18c>
 8004afa:	f1ba 0f01 	cmp.w	sl, #1
 8004afe:	f47f af41 	bne.w	8004984 <_scanf_float+0x64>
 8004b02:	f04f 0a02 	mov.w	sl, #2
 8004b06:	e7d1      	b.n	8004aac <_scanf_float+0x18c>
 8004b08:	b97d      	cbnz	r5, 8004b2a <_scanf_float+0x20a>
 8004b0a:	f1b9 0f00 	cmp.w	r9, #0
 8004b0e:	f47f af3c 	bne.w	800498a <_scanf_float+0x6a>
 8004b12:	6822      	ldr	r2, [r4, #0]
 8004b14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b1c:	f47f af39 	bne.w	8004992 <_scanf_float+0x72>
 8004b20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b24:	2501      	movs	r5, #1
 8004b26:	6022      	str	r2, [r4, #0]
 8004b28:	e7c0      	b.n	8004aac <_scanf_float+0x18c>
 8004b2a:	2d03      	cmp	r5, #3
 8004b2c:	d0e2      	beq.n	8004af4 <_scanf_float+0x1d4>
 8004b2e:	2d05      	cmp	r5, #5
 8004b30:	e7de      	b.n	8004af0 <_scanf_float+0x1d0>
 8004b32:	2d02      	cmp	r5, #2
 8004b34:	f47f af26 	bne.w	8004984 <_scanf_float+0x64>
 8004b38:	2503      	movs	r5, #3
 8004b3a:	e7b7      	b.n	8004aac <_scanf_float+0x18c>
 8004b3c:	2d06      	cmp	r5, #6
 8004b3e:	f47f af21 	bne.w	8004984 <_scanf_float+0x64>
 8004b42:	2507      	movs	r5, #7
 8004b44:	e7b2      	b.n	8004aac <_scanf_float+0x18c>
 8004b46:	6822      	ldr	r2, [r4, #0]
 8004b48:	0591      	lsls	r1, r2, #22
 8004b4a:	f57f af1b 	bpl.w	8004984 <_scanf_float+0x64>
 8004b4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004b52:	6022      	str	r2, [r4, #0]
 8004b54:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b58:	e7a8      	b.n	8004aac <_scanf_float+0x18c>
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004b60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004b64:	d006      	beq.n	8004b74 <_scanf_float+0x254>
 8004b66:	0550      	lsls	r0, r2, #21
 8004b68:	f57f af0c 	bpl.w	8004984 <_scanf_float+0x64>
 8004b6c:	f1b9 0f00 	cmp.w	r9, #0
 8004b70:	f43f af0f 	beq.w	8004992 <_scanf_float+0x72>
 8004b74:	0591      	lsls	r1, r2, #22
 8004b76:	bf58      	it	pl
 8004b78:	9901      	ldrpl	r1, [sp, #4]
 8004b7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b7e:	bf58      	it	pl
 8004b80:	eba9 0101 	subpl.w	r1, r9, r1
 8004b84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004b88:	f04f 0900 	mov.w	r9, #0
 8004b8c:	bf58      	it	pl
 8004b8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004b92:	6022      	str	r2, [r4, #0]
 8004b94:	e78a      	b.n	8004aac <_scanf_float+0x18c>
 8004b96:	f04f 0a03 	mov.w	sl, #3
 8004b9a:	e787      	b.n	8004aac <_scanf_float+0x18c>
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	4640      	mov	r0, r8
 8004ba0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004ba4:	4798      	blx	r3
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	f43f aedf 	beq.w	800496a <_scanf_float+0x4a>
 8004bac:	e6ea      	b.n	8004984 <_scanf_float+0x64>
 8004bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bb2:	463a      	mov	r2, r7
 8004bb4:	4640      	mov	r0, r8
 8004bb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bba:	4798      	blx	r3
 8004bbc:	6923      	ldr	r3, [r4, #16]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	6123      	str	r3, [r4, #16]
 8004bc2:	e6ec      	b.n	800499e <_scanf_float+0x7e>
 8004bc4:	1e6b      	subs	r3, r5, #1
 8004bc6:	2b06      	cmp	r3, #6
 8004bc8:	d825      	bhi.n	8004c16 <_scanf_float+0x2f6>
 8004bca:	2d02      	cmp	r5, #2
 8004bcc:	d836      	bhi.n	8004c3c <_scanf_float+0x31c>
 8004bce:	455e      	cmp	r6, fp
 8004bd0:	f67f aee8 	bls.w	80049a4 <_scanf_float+0x84>
 8004bd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bd8:	463a      	mov	r2, r7
 8004bda:	4640      	mov	r0, r8
 8004bdc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004be0:	4798      	blx	r3
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	6123      	str	r3, [r4, #16]
 8004be8:	e7f1      	b.n	8004bce <_scanf_float+0x2ae>
 8004bea:	9802      	ldr	r0, [sp, #8]
 8004bec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bf0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004bf4:	463a      	mov	r2, r7
 8004bf6:	9002      	str	r0, [sp, #8]
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	4798      	blx	r3
 8004bfc:	6923      	ldr	r3, [r4, #16]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	6123      	str	r3, [r4, #16]
 8004c02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c06:	fa5f fa8a 	uxtb.w	sl, sl
 8004c0a:	f1ba 0f02 	cmp.w	sl, #2
 8004c0e:	d1ec      	bne.n	8004bea <_scanf_float+0x2ca>
 8004c10:	3d03      	subs	r5, #3
 8004c12:	b2ed      	uxtb	r5, r5
 8004c14:	1b76      	subs	r6, r6, r5
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	05da      	lsls	r2, r3, #23
 8004c1a:	d52f      	bpl.n	8004c7c <_scanf_float+0x35c>
 8004c1c:	055b      	lsls	r3, r3, #21
 8004c1e:	d510      	bpl.n	8004c42 <_scanf_float+0x322>
 8004c20:	455e      	cmp	r6, fp
 8004c22:	f67f aebf 	bls.w	80049a4 <_scanf_float+0x84>
 8004c26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c2a:	463a      	mov	r2, r7
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c32:	4798      	blx	r3
 8004c34:	6923      	ldr	r3, [r4, #16]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	6123      	str	r3, [r4, #16]
 8004c3a:	e7f1      	b.n	8004c20 <_scanf_float+0x300>
 8004c3c:	46aa      	mov	sl, r5
 8004c3e:	9602      	str	r6, [sp, #8]
 8004c40:	e7df      	b.n	8004c02 <_scanf_float+0x2e2>
 8004c42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	2965      	cmp	r1, #101	; 0x65
 8004c4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c4e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004c52:	6123      	str	r3, [r4, #16]
 8004c54:	d00c      	beq.n	8004c70 <_scanf_float+0x350>
 8004c56:	2945      	cmp	r1, #69	; 0x45
 8004c58:	d00a      	beq.n	8004c70 <_scanf_float+0x350>
 8004c5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c5e:	463a      	mov	r2, r7
 8004c60:	4640      	mov	r0, r8
 8004c62:	4798      	blx	r3
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	1eb5      	subs	r5, r6, #2
 8004c6e:	6123      	str	r3, [r4, #16]
 8004c70:	463a      	mov	r2, r7
 8004c72:	4640      	mov	r0, r8
 8004c74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c78:	4798      	blx	r3
 8004c7a:	462e      	mov	r6, r5
 8004c7c:	6825      	ldr	r5, [r4, #0]
 8004c7e:	f015 0510 	ands.w	r5, r5, #16
 8004c82:	d155      	bne.n	8004d30 <_scanf_float+0x410>
 8004c84:	7035      	strb	r5, [r6, #0]
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c90:	d11d      	bne.n	8004cce <_scanf_float+0x3ae>
 8004c92:	9b01      	ldr	r3, [sp, #4]
 8004c94:	454b      	cmp	r3, r9
 8004c96:	eba3 0209 	sub.w	r2, r3, r9
 8004c9a:	d125      	bne.n	8004ce8 <_scanf_float+0x3c8>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4659      	mov	r1, fp
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	f002 fcc1 	bl	8007628 <_strtod_r>
 8004ca6:	9b03      	ldr	r3, [sp, #12]
 8004ca8:	f8d4 c000 	ldr.w	ip, [r4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f01c 0f02 	tst.w	ip, #2
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	460f      	mov	r7, r1
 8004cb6:	f103 0204 	add.w	r2, r3, #4
 8004cba:	d020      	beq.n	8004cfe <_scanf_float+0x3de>
 8004cbc:	9903      	ldr	r1, [sp, #12]
 8004cbe:	600a      	str	r2, [r1, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	e9c3 6700 	strd	r6, r7, [r3]
 8004cc6:	68e3      	ldr	r3, [r4, #12]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	60e3      	str	r3, [r4, #12]
 8004ccc:	e66b      	b.n	80049a6 <_scanf_float+0x86>
 8004cce:	9b04      	ldr	r3, [sp, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0e3      	beq.n	8004c9c <_scanf_float+0x37c>
 8004cd4:	9905      	ldr	r1, [sp, #20]
 8004cd6:	230a      	movs	r3, #10
 8004cd8:	462a      	mov	r2, r5
 8004cda:	4640      	mov	r0, r8
 8004cdc:	3101      	adds	r1, #1
 8004cde:	f7ff f9bf 	bl	8004060 <_strtol_r>
 8004ce2:	9b04      	ldr	r3, [sp, #16]
 8004ce4:	9e05      	ldr	r6, [sp, #20]
 8004ce6:	1ac2      	subs	r2, r0, r3
 8004ce8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004cec:	429e      	cmp	r6, r3
 8004cee:	bf28      	it	cs
 8004cf0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	490f      	ldr	r1, [pc, #60]	; (8004d34 <_scanf_float+0x414>)
 8004cf8:	f000 f8d0 	bl	8004e9c <siprintf>
 8004cfc:	e7ce      	b.n	8004c9c <_scanf_float+0x37c>
 8004cfe:	f01c 0f04 	tst.w	ip, #4
 8004d02:	d1db      	bne.n	8004cbc <_scanf_float+0x39c>
 8004d04:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004d08:	f8cc 2000 	str.w	r2, [ip]
 8004d0c:	f8d3 8000 	ldr.w	r8, [r3]
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	f7fb ff2e 	bl	8000b74 <__aeabi_dcmpun>
 8004d18:	b128      	cbz	r0, 8004d26 <_scanf_float+0x406>
 8004d1a:	4807      	ldr	r0, [pc, #28]	; (8004d38 <_scanf_float+0x418>)
 8004d1c:	f000 fa42 	bl	80051a4 <nanf>
 8004d20:	f8c8 0000 	str.w	r0, [r8]
 8004d24:	e7cf      	b.n	8004cc6 <_scanf_float+0x3a6>
 8004d26:	4630      	mov	r0, r6
 8004d28:	4639      	mov	r1, r7
 8004d2a:	f7fb ff81 	bl	8000c30 <__aeabi_d2f>
 8004d2e:	e7f7      	b.n	8004d20 <_scanf_float+0x400>
 8004d30:	2500      	movs	r5, #0
 8004d32:	e638      	b.n	80049a6 <_scanf_float+0x86>
 8004d34:	0800881f 	.word	0x0800881f
 8004d38:	0800885f 	.word	0x0800885f

08004d3c <std>:
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	b510      	push	{r4, lr}
 8004d40:	4604      	mov	r4, r0
 8004d42:	e9c0 3300 	strd	r3, r3, [r0]
 8004d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d4a:	6083      	str	r3, [r0, #8]
 8004d4c:	8181      	strh	r1, [r0, #12]
 8004d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d50:	81c2      	strh	r2, [r0, #14]
 8004d52:	6183      	str	r3, [r0, #24]
 8004d54:	4619      	mov	r1, r3
 8004d56:	2208      	movs	r2, #8
 8004d58:	305c      	adds	r0, #92	; 0x5c
 8004d5a:	f000 f997 	bl	800508c <memset>
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <std+0x38>)
 8004d60:	6224      	str	r4, [r4, #32]
 8004d62:	6263      	str	r3, [r4, #36]	; 0x24
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <std+0x3c>)
 8004d66:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <std+0x40>)
 8004d6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <std+0x44>)
 8004d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8004d70:	bd10      	pop	{r4, pc}
 8004d72:	bf00      	nop
 8004d74:	08004edd 	.word	0x08004edd
 8004d78:	08004eff 	.word	0x08004eff
 8004d7c:	08004f37 	.word	0x08004f37
 8004d80:	08004f5b 	.word	0x08004f5b

08004d84 <stdio_exit_handler>:
 8004d84:	4a02      	ldr	r2, [pc, #8]	; (8004d90 <stdio_exit_handler+0xc>)
 8004d86:	4903      	ldr	r1, [pc, #12]	; (8004d94 <stdio_exit_handler+0x10>)
 8004d88:	4803      	ldr	r0, [pc, #12]	; (8004d98 <stdio_exit_handler+0x14>)
 8004d8a:	f000 b869 	b.w	8004e60 <_fwalk_sglue>
 8004d8e:	bf00      	nop
 8004d90:	2000000c 	.word	0x2000000c
 8004d94:	08007c6d 	.word	0x08007c6d
 8004d98:	20000018 	.word	0x20000018

08004d9c <cleanup_stdio>:
 8004d9c:	6841      	ldr	r1, [r0, #4]
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <cleanup_stdio+0x34>)
 8004da0:	b510      	push	{r4, lr}
 8004da2:	4299      	cmp	r1, r3
 8004da4:	4604      	mov	r4, r0
 8004da6:	d001      	beq.n	8004dac <cleanup_stdio+0x10>
 8004da8:	f002 ff60 	bl	8007c6c <_fflush_r>
 8004dac:	68a1      	ldr	r1, [r4, #8]
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <cleanup_stdio+0x38>)
 8004db0:	4299      	cmp	r1, r3
 8004db2:	d002      	beq.n	8004dba <cleanup_stdio+0x1e>
 8004db4:	4620      	mov	r0, r4
 8004db6:	f002 ff59 	bl	8007c6c <_fflush_r>
 8004dba:	68e1      	ldr	r1, [r4, #12]
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <cleanup_stdio+0x3c>)
 8004dbe:	4299      	cmp	r1, r3
 8004dc0:	d004      	beq.n	8004dcc <cleanup_stdio+0x30>
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dc8:	f002 bf50 	b.w	8007c6c <_fflush_r>
 8004dcc:	bd10      	pop	{r4, pc}
 8004dce:	bf00      	nop
 8004dd0:	2000054c 	.word	0x2000054c
 8004dd4:	200005b4 	.word	0x200005b4
 8004dd8:	2000061c 	.word	0x2000061c

08004ddc <global_stdio_init.part.0>:
 8004ddc:	b510      	push	{r4, lr}
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <global_stdio_init.part.0+0x30>)
 8004de0:	4c0b      	ldr	r4, [pc, #44]	; (8004e10 <global_stdio_init.part.0+0x34>)
 8004de2:	4a0c      	ldr	r2, [pc, #48]	; (8004e14 <global_stdio_init.part.0+0x38>)
 8004de4:	4620      	mov	r0, r4
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	2104      	movs	r1, #4
 8004dea:	2200      	movs	r2, #0
 8004dec:	f7ff ffa6 	bl	8004d3c <std>
 8004df0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004df4:	2201      	movs	r2, #1
 8004df6:	2109      	movs	r1, #9
 8004df8:	f7ff ffa0 	bl	8004d3c <std>
 8004dfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e00:	2202      	movs	r2, #2
 8004e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e06:	2112      	movs	r1, #18
 8004e08:	f7ff bf98 	b.w	8004d3c <std>
 8004e0c:	20000684 	.word	0x20000684
 8004e10:	2000054c 	.word	0x2000054c
 8004e14:	08004d85 	.word	0x08004d85

08004e18 <__sfp_lock_acquire>:
 8004e18:	4801      	ldr	r0, [pc, #4]	; (8004e20 <__sfp_lock_acquire+0x8>)
 8004e1a:	f000 b9b3 	b.w	8005184 <__retarget_lock_acquire_recursive>
 8004e1e:	bf00      	nop
 8004e20:	2000068d 	.word	0x2000068d

08004e24 <__sfp_lock_release>:
 8004e24:	4801      	ldr	r0, [pc, #4]	; (8004e2c <__sfp_lock_release+0x8>)
 8004e26:	f000 b9ae 	b.w	8005186 <__retarget_lock_release_recursive>
 8004e2a:	bf00      	nop
 8004e2c:	2000068d 	.word	0x2000068d

08004e30 <__sinit>:
 8004e30:	b510      	push	{r4, lr}
 8004e32:	4604      	mov	r4, r0
 8004e34:	f7ff fff0 	bl	8004e18 <__sfp_lock_acquire>
 8004e38:	6a23      	ldr	r3, [r4, #32]
 8004e3a:	b11b      	cbz	r3, 8004e44 <__sinit+0x14>
 8004e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e40:	f7ff bff0 	b.w	8004e24 <__sfp_lock_release>
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <__sinit+0x28>)
 8004e46:	6223      	str	r3, [r4, #32]
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <__sinit+0x2c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1f5      	bne.n	8004e3c <__sinit+0xc>
 8004e50:	f7ff ffc4 	bl	8004ddc <global_stdio_init.part.0>
 8004e54:	e7f2      	b.n	8004e3c <__sinit+0xc>
 8004e56:	bf00      	nop
 8004e58:	08004d9d 	.word	0x08004d9d
 8004e5c:	20000684 	.word	0x20000684

08004e60 <_fwalk_sglue>:
 8004e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e64:	4607      	mov	r7, r0
 8004e66:	4688      	mov	r8, r1
 8004e68:	4614      	mov	r4, r2
 8004e6a:	2600      	movs	r6, #0
 8004e6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e70:	f1b9 0901 	subs.w	r9, r9, #1
 8004e74:	d505      	bpl.n	8004e82 <_fwalk_sglue+0x22>
 8004e76:	6824      	ldr	r4, [r4, #0]
 8004e78:	2c00      	cmp	r4, #0
 8004e7a:	d1f7      	bne.n	8004e6c <_fwalk_sglue+0xc>
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e82:	89ab      	ldrh	r3, [r5, #12]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d907      	bls.n	8004e98 <_fwalk_sglue+0x38>
 8004e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	d003      	beq.n	8004e98 <_fwalk_sglue+0x38>
 8004e90:	4629      	mov	r1, r5
 8004e92:	4638      	mov	r0, r7
 8004e94:	47c0      	blx	r8
 8004e96:	4306      	orrs	r6, r0
 8004e98:	3568      	adds	r5, #104	; 0x68
 8004e9a:	e7e9      	b.n	8004e70 <_fwalk_sglue+0x10>

08004e9c <siprintf>:
 8004e9c:	b40e      	push	{r1, r2, r3}
 8004e9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ea2:	b500      	push	{lr}
 8004ea4:	b09c      	sub	sp, #112	; 0x70
 8004ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ea8:	9002      	str	r0, [sp, #8]
 8004eaa:	9006      	str	r0, [sp, #24]
 8004eac:	9107      	str	r1, [sp, #28]
 8004eae:	9104      	str	r1, [sp, #16]
 8004eb0:	4808      	ldr	r0, [pc, #32]	; (8004ed4 <siprintf+0x38>)
 8004eb2:	4909      	ldr	r1, [pc, #36]	; (8004ed8 <siprintf+0x3c>)
 8004eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eb8:	9105      	str	r1, [sp, #20]
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	a902      	add	r1, sp, #8
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	f002 fc12 	bl	80076e8 <_svfiprintf_r>
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	9b02      	ldr	r3, [sp, #8]
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	b01c      	add	sp, #112	; 0x70
 8004ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ed0:	b003      	add	sp, #12
 8004ed2:	4770      	bx	lr
 8004ed4:	20000064 	.word	0x20000064
 8004ed8:	ffff0208 	.word	0xffff0208

08004edc <__sread>:
 8004edc:	b510      	push	{r4, lr}
 8004ede:	460c      	mov	r4, r1
 8004ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee4:	f000 f900 	bl	80050e8 <_read_r>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	bfab      	itete	ge
 8004eec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004eee:	89a3      	ldrhlt	r3, [r4, #12]
 8004ef0:	181b      	addge	r3, r3, r0
 8004ef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ef6:	bfac      	ite	ge
 8004ef8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004efa:	81a3      	strhlt	r3, [r4, #12]
 8004efc:	bd10      	pop	{r4, pc}

08004efe <__swrite>:
 8004efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f02:	461f      	mov	r7, r3
 8004f04:	898b      	ldrh	r3, [r1, #12]
 8004f06:	4605      	mov	r5, r0
 8004f08:	05db      	lsls	r3, r3, #23
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	4616      	mov	r6, r2
 8004f0e:	d505      	bpl.n	8004f1c <__swrite+0x1e>
 8004f10:	2302      	movs	r3, #2
 8004f12:	2200      	movs	r2, #0
 8004f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f18:	f000 f8d4 	bl	80050c4 <_lseek_r>
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	4632      	mov	r2, r6
 8004f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f24:	81a3      	strh	r3, [r4, #12]
 8004f26:	4628      	mov	r0, r5
 8004f28:	463b      	mov	r3, r7
 8004f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f32:	f000 b8eb 	b.w	800510c <_write_r>

08004f36 <__sseek>:
 8004f36:	b510      	push	{r4, lr}
 8004f38:	460c      	mov	r4, r1
 8004f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f3e:	f000 f8c1 	bl	80050c4 <_lseek_r>
 8004f42:	1c43      	adds	r3, r0, #1
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	bf15      	itete	ne
 8004f48:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f52:	81a3      	strheq	r3, [r4, #12]
 8004f54:	bf18      	it	ne
 8004f56:	81a3      	strhne	r3, [r4, #12]
 8004f58:	bd10      	pop	{r4, pc}

08004f5a <__sclose>:
 8004f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f5e:	f000 b8a1 	b.w	80050a4 <_close_r>

08004f62 <__swbuf_r>:
 8004f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f64:	460e      	mov	r6, r1
 8004f66:	4614      	mov	r4, r2
 8004f68:	4605      	mov	r5, r0
 8004f6a:	b118      	cbz	r0, 8004f74 <__swbuf_r+0x12>
 8004f6c:	6a03      	ldr	r3, [r0, #32]
 8004f6e:	b90b      	cbnz	r3, 8004f74 <__swbuf_r+0x12>
 8004f70:	f7ff ff5e 	bl	8004e30 <__sinit>
 8004f74:	69a3      	ldr	r3, [r4, #24]
 8004f76:	60a3      	str	r3, [r4, #8]
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	071a      	lsls	r2, r3, #28
 8004f7c:	d525      	bpl.n	8004fca <__swbuf_r+0x68>
 8004f7e:	6923      	ldr	r3, [r4, #16]
 8004f80:	b31b      	cbz	r3, 8004fca <__swbuf_r+0x68>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	6922      	ldr	r2, [r4, #16]
 8004f86:	b2f6      	uxtb	r6, r6
 8004f88:	1a98      	subs	r0, r3, r2
 8004f8a:	6963      	ldr	r3, [r4, #20]
 8004f8c:	4637      	mov	r7, r6
 8004f8e:	4283      	cmp	r3, r0
 8004f90:	dc04      	bgt.n	8004f9c <__swbuf_r+0x3a>
 8004f92:	4621      	mov	r1, r4
 8004f94:	4628      	mov	r0, r5
 8004f96:	f002 fe69 	bl	8007c6c <_fflush_r>
 8004f9a:	b9e0      	cbnz	r0, 8004fd6 <__swbuf_r+0x74>
 8004f9c:	68a3      	ldr	r3, [r4, #8]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	60a3      	str	r3, [r4, #8]
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	6022      	str	r2, [r4, #0]
 8004fa8:	701e      	strb	r6, [r3, #0]
 8004faa:	6962      	ldr	r2, [r4, #20]
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d004      	beq.n	8004fbc <__swbuf_r+0x5a>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	07db      	lsls	r3, r3, #31
 8004fb6:	d506      	bpl.n	8004fc6 <__swbuf_r+0x64>
 8004fb8:	2e0a      	cmp	r6, #10
 8004fba:	d104      	bne.n	8004fc6 <__swbuf_r+0x64>
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f002 fe54 	bl	8007c6c <_fflush_r>
 8004fc4:	b938      	cbnz	r0, 8004fd6 <__swbuf_r+0x74>
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fca:	4621      	mov	r1, r4
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 f805 	bl	8004fdc <__swsetup_r>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	d0d5      	beq.n	8004f82 <__swbuf_r+0x20>
 8004fd6:	f04f 37ff 	mov.w	r7, #4294967295
 8004fda:	e7f4      	b.n	8004fc6 <__swbuf_r+0x64>

08004fdc <__swsetup_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <__swsetup_r+0xac>)
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	b118      	cbz	r0, 8004ff0 <__swsetup_r+0x14>
 8004fe8:	6a03      	ldr	r3, [r0, #32]
 8004fea:	b90b      	cbnz	r3, 8004ff0 <__swsetup_r+0x14>
 8004fec:	f7ff ff20 	bl	8004e30 <__sinit>
 8004ff0:	89a3      	ldrh	r3, [r4, #12]
 8004ff2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ff6:	0718      	lsls	r0, r3, #28
 8004ff8:	d422      	bmi.n	8005040 <__swsetup_r+0x64>
 8004ffa:	06d9      	lsls	r1, r3, #27
 8004ffc:	d407      	bmi.n	800500e <__swsetup_r+0x32>
 8004ffe:	2309      	movs	r3, #9
 8005000:	602b      	str	r3, [r5, #0]
 8005002:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005006:	f04f 30ff 	mov.w	r0, #4294967295
 800500a:	81a3      	strh	r3, [r4, #12]
 800500c:	e034      	b.n	8005078 <__swsetup_r+0x9c>
 800500e:	0758      	lsls	r0, r3, #29
 8005010:	d512      	bpl.n	8005038 <__swsetup_r+0x5c>
 8005012:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005014:	b141      	cbz	r1, 8005028 <__swsetup_r+0x4c>
 8005016:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800501a:	4299      	cmp	r1, r3
 800501c:	d002      	beq.n	8005024 <__swsetup_r+0x48>
 800501e:	4628      	mov	r0, r5
 8005020:	f000 ff52 	bl	8005ec8 <_free_r>
 8005024:	2300      	movs	r3, #0
 8005026:	6363      	str	r3, [r4, #52]	; 0x34
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	2300      	movs	r3, #0
 8005032:	6063      	str	r3, [r4, #4]
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	6023      	str	r3, [r4, #0]
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	f043 0308 	orr.w	r3, r3, #8
 800503e:	81a3      	strh	r3, [r4, #12]
 8005040:	6923      	ldr	r3, [r4, #16]
 8005042:	b94b      	cbnz	r3, 8005058 <__swsetup_r+0x7c>
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800504a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504e:	d003      	beq.n	8005058 <__swsetup_r+0x7c>
 8005050:	4621      	mov	r1, r4
 8005052:	4628      	mov	r0, r5
 8005054:	f002 fe69 	bl	8007d2a <__smakebuf_r>
 8005058:	89a0      	ldrh	r0, [r4, #12]
 800505a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800505e:	f010 0301 	ands.w	r3, r0, #1
 8005062:	d00a      	beq.n	800507a <__swsetup_r+0x9e>
 8005064:	2300      	movs	r3, #0
 8005066:	60a3      	str	r3, [r4, #8]
 8005068:	6963      	ldr	r3, [r4, #20]
 800506a:	425b      	negs	r3, r3
 800506c:	61a3      	str	r3, [r4, #24]
 800506e:	6923      	ldr	r3, [r4, #16]
 8005070:	b943      	cbnz	r3, 8005084 <__swsetup_r+0xa8>
 8005072:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005076:	d1c4      	bne.n	8005002 <__swsetup_r+0x26>
 8005078:	bd38      	pop	{r3, r4, r5, pc}
 800507a:	0781      	lsls	r1, r0, #30
 800507c:	bf58      	it	pl
 800507e:	6963      	ldrpl	r3, [r4, #20]
 8005080:	60a3      	str	r3, [r4, #8]
 8005082:	e7f4      	b.n	800506e <__swsetup_r+0x92>
 8005084:	2000      	movs	r0, #0
 8005086:	e7f7      	b.n	8005078 <__swsetup_r+0x9c>
 8005088:	20000064 	.word	0x20000064

0800508c <memset>:
 800508c:	4603      	mov	r3, r0
 800508e:	4402      	add	r2, r0
 8005090:	4293      	cmp	r3, r2
 8005092:	d100      	bne.n	8005096 <memset+0xa>
 8005094:	4770      	bx	lr
 8005096:	f803 1b01 	strb.w	r1, [r3], #1
 800509a:	e7f9      	b.n	8005090 <memset+0x4>

0800509c <_localeconv_r>:
 800509c:	4800      	ldr	r0, [pc, #0]	; (80050a0 <_localeconv_r+0x4>)
 800509e:	4770      	bx	lr
 80050a0:	20000158 	.word	0x20000158

080050a4 <_close_r>:
 80050a4:	b538      	push	{r3, r4, r5, lr}
 80050a6:	2300      	movs	r3, #0
 80050a8:	4d05      	ldr	r5, [pc, #20]	; (80050c0 <_close_r+0x1c>)
 80050aa:	4604      	mov	r4, r0
 80050ac:	4608      	mov	r0, r1
 80050ae:	602b      	str	r3, [r5, #0]
 80050b0:	f7fc fd63 	bl	8001b7a <_close>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	d102      	bne.n	80050be <_close_r+0x1a>
 80050b8:	682b      	ldr	r3, [r5, #0]
 80050ba:	b103      	cbz	r3, 80050be <_close_r+0x1a>
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	bd38      	pop	{r3, r4, r5, pc}
 80050c0:	20000688 	.word	0x20000688

080050c4 <_lseek_r>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	4604      	mov	r4, r0
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	2200      	movs	r2, #0
 80050ce:	4d05      	ldr	r5, [pc, #20]	; (80050e4 <_lseek_r+0x20>)
 80050d0:	602a      	str	r2, [r5, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	f7fc fd75 	bl	8001bc2 <_lseek>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d102      	bne.n	80050e2 <_lseek_r+0x1e>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	b103      	cbz	r3, 80050e2 <_lseek_r+0x1e>
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	20000688 	.word	0x20000688

080050e8 <_read_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4604      	mov	r4, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	4611      	mov	r1, r2
 80050f0:	2200      	movs	r2, #0
 80050f2:	4d05      	ldr	r5, [pc, #20]	; (8005108 <_read_r+0x20>)
 80050f4:	602a      	str	r2, [r5, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	f7fc fd06 	bl	8001b08 <_read>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d102      	bne.n	8005106 <_read_r+0x1e>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	b103      	cbz	r3, 8005106 <_read_r+0x1e>
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	20000688 	.word	0x20000688

0800510c <_write_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	4604      	mov	r4, r0
 8005110:	4608      	mov	r0, r1
 8005112:	4611      	mov	r1, r2
 8005114:	2200      	movs	r2, #0
 8005116:	4d05      	ldr	r5, [pc, #20]	; (800512c <_write_r+0x20>)
 8005118:	602a      	str	r2, [r5, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	f7fc fd11 	bl	8001b42 <_write>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_write_r+0x1e>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	b103      	cbz	r3, 800512a <_write_r+0x1e>
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	20000688 	.word	0x20000688

08005130 <__errno>:
 8005130:	4b01      	ldr	r3, [pc, #4]	; (8005138 <__errno+0x8>)
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20000064 	.word	0x20000064

0800513c <__libc_init_array>:
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	2600      	movs	r6, #0
 8005140:	4d0c      	ldr	r5, [pc, #48]	; (8005174 <__libc_init_array+0x38>)
 8005142:	4c0d      	ldr	r4, [pc, #52]	; (8005178 <__libc_init_array+0x3c>)
 8005144:	1b64      	subs	r4, r4, r5
 8005146:	10a4      	asrs	r4, r4, #2
 8005148:	42a6      	cmp	r6, r4
 800514a:	d109      	bne.n	8005160 <__libc_init_array+0x24>
 800514c:	f003 faac 	bl	80086a8 <_init>
 8005150:	2600      	movs	r6, #0
 8005152:	4d0a      	ldr	r5, [pc, #40]	; (800517c <__libc_init_array+0x40>)
 8005154:	4c0a      	ldr	r4, [pc, #40]	; (8005180 <__libc_init_array+0x44>)
 8005156:	1b64      	subs	r4, r4, r5
 8005158:	10a4      	asrs	r4, r4, #2
 800515a:	42a6      	cmp	r6, r4
 800515c:	d105      	bne.n	800516a <__libc_init_array+0x2e>
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	f855 3b04 	ldr.w	r3, [r5], #4
 8005164:	4798      	blx	r3
 8005166:	3601      	adds	r6, #1
 8005168:	e7ee      	b.n	8005148 <__libc_init_array+0xc>
 800516a:	f855 3b04 	ldr.w	r3, [r5], #4
 800516e:	4798      	blx	r3
 8005170:	3601      	adds	r6, #1
 8005172:	e7f2      	b.n	800515a <__libc_init_array+0x1e>
 8005174:	08008b14 	.word	0x08008b14
 8005178:	08008b14 	.word	0x08008b14
 800517c:	08008b14 	.word	0x08008b14
 8005180:	08008b18 	.word	0x08008b18

08005184 <__retarget_lock_acquire_recursive>:
 8005184:	4770      	bx	lr

08005186 <__retarget_lock_release_recursive>:
 8005186:	4770      	bx	lr

08005188 <memchr>:
 8005188:	4603      	mov	r3, r0
 800518a:	b510      	push	{r4, lr}
 800518c:	b2c9      	uxtb	r1, r1
 800518e:	4402      	add	r2, r0
 8005190:	4293      	cmp	r3, r2
 8005192:	4618      	mov	r0, r3
 8005194:	d101      	bne.n	800519a <memchr+0x12>
 8005196:	2000      	movs	r0, #0
 8005198:	e003      	b.n	80051a2 <memchr+0x1a>
 800519a:	7804      	ldrb	r4, [r0, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	428c      	cmp	r4, r1
 80051a0:	d1f6      	bne.n	8005190 <memchr+0x8>
 80051a2:	bd10      	pop	{r4, pc}

080051a4 <nanf>:
 80051a4:	4800      	ldr	r0, [pc, #0]	; (80051a8 <nanf+0x4>)
 80051a6:	4770      	bx	lr
 80051a8:	7fc00000 	.word	0x7fc00000

080051ac <__assert_func>:
 80051ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051ae:	4614      	mov	r4, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <__assert_func+0x2c>)
 80051b4:	4605      	mov	r5, r0
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68d8      	ldr	r0, [r3, #12]
 80051ba:	b14c      	cbz	r4, 80051d0 <__assert_func+0x24>
 80051bc:	4b07      	ldr	r3, [pc, #28]	; (80051dc <__assert_func+0x30>)
 80051be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80051c2:	9100      	str	r1, [sp, #0]
 80051c4:	462b      	mov	r3, r5
 80051c6:	4906      	ldr	r1, [pc, #24]	; (80051e0 <__assert_func+0x34>)
 80051c8:	f002 fd78 	bl	8007cbc <fiprintf>
 80051cc:	f002 fe5c 	bl	8007e88 <abort>
 80051d0:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <__assert_func+0x38>)
 80051d2:	461c      	mov	r4, r3
 80051d4:	e7f3      	b.n	80051be <__assert_func+0x12>
 80051d6:	bf00      	nop
 80051d8:	20000064 	.word	0x20000064
 80051dc:	08008824 	.word	0x08008824
 80051e0:	08008831 	.word	0x08008831
 80051e4:	0800885f 	.word	0x0800885f

080051e8 <quorem>:
 80051e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ec:	6903      	ldr	r3, [r0, #16]
 80051ee:	690c      	ldr	r4, [r1, #16]
 80051f0:	4607      	mov	r7, r0
 80051f2:	42a3      	cmp	r3, r4
 80051f4:	db7f      	blt.n	80052f6 <quorem+0x10e>
 80051f6:	3c01      	subs	r4, #1
 80051f8:	f100 0514 	add.w	r5, r0, #20
 80051fc:	f101 0814 	add.w	r8, r1, #20
 8005200:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005204:	9301      	str	r3, [sp, #4]
 8005206:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800520a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800520e:	3301      	adds	r3, #1
 8005210:	429a      	cmp	r2, r3
 8005212:	fbb2 f6f3 	udiv	r6, r2, r3
 8005216:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800521a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800521e:	d331      	bcc.n	8005284 <quorem+0x9c>
 8005220:	f04f 0e00 	mov.w	lr, #0
 8005224:	4640      	mov	r0, r8
 8005226:	46ac      	mov	ip, r5
 8005228:	46f2      	mov	sl, lr
 800522a:	f850 2b04 	ldr.w	r2, [r0], #4
 800522e:	b293      	uxth	r3, r2
 8005230:	fb06 e303 	mla	r3, r6, r3, lr
 8005234:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005238:	0c1a      	lsrs	r2, r3, #16
 800523a:	b29b      	uxth	r3, r3
 800523c:	fb06 220e 	mla	r2, r6, lr, r2
 8005240:	ebaa 0303 	sub.w	r3, sl, r3
 8005244:	f8dc a000 	ldr.w	sl, [ip]
 8005248:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800524c:	fa1f fa8a 	uxth.w	sl, sl
 8005250:	4453      	add	r3, sl
 8005252:	f8dc a000 	ldr.w	sl, [ip]
 8005256:	b292      	uxth	r2, r2
 8005258:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800525c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005260:	b29b      	uxth	r3, r3
 8005262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005266:	4581      	cmp	r9, r0
 8005268:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800526c:	f84c 3b04 	str.w	r3, [ip], #4
 8005270:	d2db      	bcs.n	800522a <quorem+0x42>
 8005272:	f855 300b 	ldr.w	r3, [r5, fp]
 8005276:	b92b      	cbnz	r3, 8005284 <quorem+0x9c>
 8005278:	9b01      	ldr	r3, [sp, #4]
 800527a:	3b04      	subs	r3, #4
 800527c:	429d      	cmp	r5, r3
 800527e:	461a      	mov	r2, r3
 8005280:	d32d      	bcc.n	80052de <quorem+0xf6>
 8005282:	613c      	str	r4, [r7, #16]
 8005284:	4638      	mov	r0, r7
 8005286:	f001 f9df 	bl	8006648 <__mcmp>
 800528a:	2800      	cmp	r0, #0
 800528c:	db23      	blt.n	80052d6 <quorem+0xee>
 800528e:	4629      	mov	r1, r5
 8005290:	2000      	movs	r0, #0
 8005292:	3601      	adds	r6, #1
 8005294:	f858 2b04 	ldr.w	r2, [r8], #4
 8005298:	f8d1 c000 	ldr.w	ip, [r1]
 800529c:	b293      	uxth	r3, r2
 800529e:	1ac3      	subs	r3, r0, r3
 80052a0:	0c12      	lsrs	r2, r2, #16
 80052a2:	fa1f f08c 	uxth.w	r0, ip
 80052a6:	4403      	add	r3, r0
 80052a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80052ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052b6:	45c1      	cmp	r9, r8
 80052b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80052bc:	f841 3b04 	str.w	r3, [r1], #4
 80052c0:	d2e8      	bcs.n	8005294 <quorem+0xac>
 80052c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052ca:	b922      	cbnz	r2, 80052d6 <quorem+0xee>
 80052cc:	3b04      	subs	r3, #4
 80052ce:	429d      	cmp	r5, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	d30a      	bcc.n	80052ea <quorem+0x102>
 80052d4:	613c      	str	r4, [r7, #16]
 80052d6:	4630      	mov	r0, r6
 80052d8:	b003      	add	sp, #12
 80052da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	3b04      	subs	r3, #4
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	d1cd      	bne.n	8005282 <quorem+0x9a>
 80052e6:	3c01      	subs	r4, #1
 80052e8:	e7c8      	b.n	800527c <quorem+0x94>
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	3b04      	subs	r3, #4
 80052ee:	2a00      	cmp	r2, #0
 80052f0:	d1f0      	bne.n	80052d4 <quorem+0xec>
 80052f2:	3c01      	subs	r4, #1
 80052f4:	e7eb      	b.n	80052ce <quorem+0xe6>
 80052f6:	2000      	movs	r0, #0
 80052f8:	e7ee      	b.n	80052d8 <quorem+0xf0>
 80052fa:	0000      	movs	r0, r0
 80052fc:	0000      	movs	r0, r0
	...

08005300 <_dtoa_r>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	4616      	mov	r6, r2
 8005306:	461f      	mov	r7, r3
 8005308:	69c4      	ldr	r4, [r0, #28]
 800530a:	b099      	sub	sp, #100	; 0x64
 800530c:	4605      	mov	r5, r0
 800530e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005312:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005316:	b974      	cbnz	r4, 8005336 <_dtoa_r+0x36>
 8005318:	2010      	movs	r0, #16
 800531a:	f000 fe1d 	bl	8005f58 <malloc>
 800531e:	4602      	mov	r2, r0
 8005320:	61e8      	str	r0, [r5, #28]
 8005322:	b920      	cbnz	r0, 800532e <_dtoa_r+0x2e>
 8005324:	21ef      	movs	r1, #239	; 0xef
 8005326:	4bac      	ldr	r3, [pc, #688]	; (80055d8 <_dtoa_r+0x2d8>)
 8005328:	48ac      	ldr	r0, [pc, #688]	; (80055dc <_dtoa_r+0x2dc>)
 800532a:	f7ff ff3f 	bl	80051ac <__assert_func>
 800532e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005332:	6004      	str	r4, [r0, #0]
 8005334:	60c4      	str	r4, [r0, #12]
 8005336:	69eb      	ldr	r3, [r5, #28]
 8005338:	6819      	ldr	r1, [r3, #0]
 800533a:	b151      	cbz	r1, 8005352 <_dtoa_r+0x52>
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	2301      	movs	r3, #1
 8005340:	4093      	lsls	r3, r2
 8005342:	604a      	str	r2, [r1, #4]
 8005344:	608b      	str	r3, [r1, #8]
 8005346:	4628      	mov	r0, r5
 8005348:	f000 fefa 	bl	8006140 <_Bfree>
 800534c:	2200      	movs	r2, #0
 800534e:	69eb      	ldr	r3, [r5, #28]
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	1e3b      	subs	r3, r7, #0
 8005354:	bfaf      	iteee	ge
 8005356:	2300      	movge	r3, #0
 8005358:	2201      	movlt	r2, #1
 800535a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800535e:	9305      	strlt	r3, [sp, #20]
 8005360:	bfa8      	it	ge
 8005362:	f8c8 3000 	strge.w	r3, [r8]
 8005366:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800536a:	4b9d      	ldr	r3, [pc, #628]	; (80055e0 <_dtoa_r+0x2e0>)
 800536c:	bfb8      	it	lt
 800536e:	f8c8 2000 	strlt.w	r2, [r8]
 8005372:	ea33 0309 	bics.w	r3, r3, r9
 8005376:	d119      	bne.n	80053ac <_dtoa_r+0xac>
 8005378:	f242 730f 	movw	r3, #9999	; 0x270f
 800537c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005384:	4333      	orrs	r3, r6
 8005386:	f000 8589 	beq.w	8005e9c <_dtoa_r+0xb9c>
 800538a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800538c:	b953      	cbnz	r3, 80053a4 <_dtoa_r+0xa4>
 800538e:	4b95      	ldr	r3, [pc, #596]	; (80055e4 <_dtoa_r+0x2e4>)
 8005390:	e023      	b.n	80053da <_dtoa_r+0xda>
 8005392:	4b95      	ldr	r3, [pc, #596]	; (80055e8 <_dtoa_r+0x2e8>)
 8005394:	9303      	str	r3, [sp, #12]
 8005396:	3308      	adds	r3, #8
 8005398:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	9803      	ldr	r0, [sp, #12]
 800539e:	b019      	add	sp, #100	; 0x64
 80053a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a4:	4b8f      	ldr	r3, [pc, #572]	; (80055e4 <_dtoa_r+0x2e4>)
 80053a6:	9303      	str	r3, [sp, #12]
 80053a8:	3303      	adds	r3, #3
 80053aa:	e7f5      	b.n	8005398 <_dtoa_r+0x98>
 80053ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80053b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053b8:	2200      	movs	r2, #0
 80053ba:	2300      	movs	r3, #0
 80053bc:	f7fb fba8 	bl	8000b10 <__aeabi_dcmpeq>
 80053c0:	4680      	mov	r8, r0
 80053c2:	b160      	cbz	r0, 80053de <_dtoa_r+0xde>
 80053c4:	2301      	movs	r3, #1
 80053c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8562 	beq.w	8005e96 <_dtoa_r+0xb96>
 80053d2:	4b86      	ldr	r3, [pc, #536]	; (80055ec <_dtoa_r+0x2ec>)
 80053d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	3b01      	subs	r3, #1
 80053da:	9303      	str	r3, [sp, #12]
 80053dc:	e7de      	b.n	800539c <_dtoa_r+0x9c>
 80053de:	ab16      	add	r3, sp, #88	; 0x58
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	ab17      	add	r3, sp, #92	; 0x5c
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	4628      	mov	r0, r5
 80053e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80053ec:	f001 fa3c 	bl	8006868 <__d2b>
 80053f0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80053f4:	4682      	mov	sl, r0
 80053f6:	2c00      	cmp	r4, #0
 80053f8:	d07e      	beq.n	80054f8 <_dtoa_r+0x1f8>
 80053fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005400:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005408:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800540c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005410:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005414:	4619      	mov	r1, r3
 8005416:	2200      	movs	r2, #0
 8005418:	4b75      	ldr	r3, [pc, #468]	; (80055f0 <_dtoa_r+0x2f0>)
 800541a:	f7fa ff59 	bl	80002d0 <__aeabi_dsub>
 800541e:	a368      	add	r3, pc, #416	; (adr r3, 80055c0 <_dtoa_r+0x2c0>)
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	f7fb f90c 	bl	8000640 <__aeabi_dmul>
 8005428:	a367      	add	r3, pc, #412	; (adr r3, 80055c8 <_dtoa_r+0x2c8>)
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f7fa ff51 	bl	80002d4 <__adddf3>
 8005432:	4606      	mov	r6, r0
 8005434:	4620      	mov	r0, r4
 8005436:	460f      	mov	r7, r1
 8005438:	f7fb f898 	bl	800056c <__aeabi_i2d>
 800543c:	a364      	add	r3, pc, #400	; (adr r3, 80055d0 <_dtoa_r+0x2d0>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	f7fb f8fd 	bl	8000640 <__aeabi_dmul>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4630      	mov	r0, r6
 800544c:	4639      	mov	r1, r7
 800544e:	f7fa ff41 	bl	80002d4 <__adddf3>
 8005452:	4606      	mov	r6, r0
 8005454:	460f      	mov	r7, r1
 8005456:	f7fb fba3 	bl	8000ba0 <__aeabi_d2iz>
 800545a:	2200      	movs	r2, #0
 800545c:	4683      	mov	fp, r0
 800545e:	2300      	movs	r3, #0
 8005460:	4630      	mov	r0, r6
 8005462:	4639      	mov	r1, r7
 8005464:	f7fb fb5e 	bl	8000b24 <__aeabi_dcmplt>
 8005468:	b148      	cbz	r0, 800547e <_dtoa_r+0x17e>
 800546a:	4658      	mov	r0, fp
 800546c:	f7fb f87e 	bl	800056c <__aeabi_i2d>
 8005470:	4632      	mov	r2, r6
 8005472:	463b      	mov	r3, r7
 8005474:	f7fb fb4c 	bl	8000b10 <__aeabi_dcmpeq>
 8005478:	b908      	cbnz	r0, 800547e <_dtoa_r+0x17e>
 800547a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800547e:	f1bb 0f16 	cmp.w	fp, #22
 8005482:	d857      	bhi.n	8005534 <_dtoa_r+0x234>
 8005484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005488:	4b5a      	ldr	r3, [pc, #360]	; (80055f4 <_dtoa_r+0x2f4>)
 800548a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	f7fb fb47 	bl	8000b24 <__aeabi_dcmplt>
 8005496:	2800      	cmp	r0, #0
 8005498:	d04e      	beq.n	8005538 <_dtoa_r+0x238>
 800549a:	2300      	movs	r3, #0
 800549c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80054a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80054a4:	1b1b      	subs	r3, r3, r4
 80054a6:	1e5a      	subs	r2, r3, #1
 80054a8:	bf46      	itte	mi
 80054aa:	f1c3 0901 	rsbmi	r9, r3, #1
 80054ae:	2300      	movmi	r3, #0
 80054b0:	f04f 0900 	movpl.w	r9, #0
 80054b4:	9209      	str	r2, [sp, #36]	; 0x24
 80054b6:	bf48      	it	mi
 80054b8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80054ba:	f1bb 0f00 	cmp.w	fp, #0
 80054be:	db3d      	blt.n	800553c <_dtoa_r+0x23c>
 80054c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80054c6:	445b      	add	r3, fp
 80054c8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ca:	2300      	movs	r3, #0
 80054cc:	930a      	str	r3, [sp, #40]	; 0x28
 80054ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054d0:	2b09      	cmp	r3, #9
 80054d2:	d867      	bhi.n	80055a4 <_dtoa_r+0x2a4>
 80054d4:	2b05      	cmp	r3, #5
 80054d6:	bfc4      	itt	gt
 80054d8:	3b04      	subgt	r3, #4
 80054da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80054dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054de:	bfc8      	it	gt
 80054e0:	2400      	movgt	r4, #0
 80054e2:	f1a3 0302 	sub.w	r3, r3, #2
 80054e6:	bfd8      	it	le
 80054e8:	2401      	movle	r4, #1
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	f200 8086 	bhi.w	80055fc <_dtoa_r+0x2fc>
 80054f0:	e8df f003 	tbb	[pc, r3]
 80054f4:	5637392c 	.word	0x5637392c
 80054f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80054fc:	441c      	add	r4, r3
 80054fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005502:	2b20      	cmp	r3, #32
 8005504:	bfc1      	itttt	gt
 8005506:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800550a:	fa09 f903 	lslgt.w	r9, r9, r3
 800550e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005512:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005516:	bfd6      	itet	le
 8005518:	f1c3 0320 	rsble	r3, r3, #32
 800551c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005520:	fa06 f003 	lslle.w	r0, r6, r3
 8005524:	f7fb f812 	bl	800054c <__aeabi_ui2d>
 8005528:	2201      	movs	r2, #1
 800552a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800552e:	3c01      	subs	r4, #1
 8005530:	9213      	str	r2, [sp, #76]	; 0x4c
 8005532:	e76f      	b.n	8005414 <_dtoa_r+0x114>
 8005534:	2301      	movs	r3, #1
 8005536:	e7b3      	b.n	80054a0 <_dtoa_r+0x1a0>
 8005538:	900f      	str	r0, [sp, #60]	; 0x3c
 800553a:	e7b2      	b.n	80054a2 <_dtoa_r+0x1a2>
 800553c:	f1cb 0300 	rsb	r3, fp, #0
 8005540:	930a      	str	r3, [sp, #40]	; 0x28
 8005542:	2300      	movs	r3, #0
 8005544:	eba9 090b 	sub.w	r9, r9, fp
 8005548:	930e      	str	r3, [sp, #56]	; 0x38
 800554a:	e7c0      	b.n	80054ce <_dtoa_r+0x1ce>
 800554c:	2300      	movs	r3, #0
 800554e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005550:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005552:	2b00      	cmp	r3, #0
 8005554:	dc55      	bgt.n	8005602 <_dtoa_r+0x302>
 8005556:	2301      	movs	r3, #1
 8005558:	461a      	mov	r2, r3
 800555a:	9306      	str	r3, [sp, #24]
 800555c:	9308      	str	r3, [sp, #32]
 800555e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005560:	e00b      	b.n	800557a <_dtoa_r+0x27a>
 8005562:	2301      	movs	r3, #1
 8005564:	e7f3      	b.n	800554e <_dtoa_r+0x24e>
 8005566:	2300      	movs	r3, #0
 8005568:	930b      	str	r3, [sp, #44]	; 0x2c
 800556a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800556c:	445b      	add	r3, fp
 800556e:	9306      	str	r3, [sp, #24]
 8005570:	3301      	adds	r3, #1
 8005572:	2b01      	cmp	r3, #1
 8005574:	9308      	str	r3, [sp, #32]
 8005576:	bfb8      	it	lt
 8005578:	2301      	movlt	r3, #1
 800557a:	2100      	movs	r1, #0
 800557c:	2204      	movs	r2, #4
 800557e:	69e8      	ldr	r0, [r5, #28]
 8005580:	f102 0614 	add.w	r6, r2, #20
 8005584:	429e      	cmp	r6, r3
 8005586:	d940      	bls.n	800560a <_dtoa_r+0x30a>
 8005588:	6041      	str	r1, [r0, #4]
 800558a:	4628      	mov	r0, r5
 800558c:	f000 fd98 	bl	80060c0 <_Balloc>
 8005590:	9003      	str	r0, [sp, #12]
 8005592:	2800      	cmp	r0, #0
 8005594:	d13c      	bne.n	8005610 <_dtoa_r+0x310>
 8005596:	4602      	mov	r2, r0
 8005598:	f240 11af 	movw	r1, #431	; 0x1af
 800559c:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <_dtoa_r+0x2f8>)
 800559e:	e6c3      	b.n	8005328 <_dtoa_r+0x28>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e7e1      	b.n	8005568 <_dtoa_r+0x268>
 80055a4:	2401      	movs	r4, #1
 80055a6:	2300      	movs	r3, #0
 80055a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80055aa:	9322      	str	r3, [sp, #136]	; 0x88
 80055ac:	f04f 33ff 	mov.w	r3, #4294967295
 80055b0:	2200      	movs	r2, #0
 80055b2:	9306      	str	r3, [sp, #24]
 80055b4:	9308      	str	r3, [sp, #32]
 80055b6:	2312      	movs	r3, #18
 80055b8:	e7d1      	b.n	800555e <_dtoa_r+0x25e>
 80055ba:	bf00      	nop
 80055bc:	f3af 8000 	nop.w
 80055c0:	636f4361 	.word	0x636f4361
 80055c4:	3fd287a7 	.word	0x3fd287a7
 80055c8:	8b60c8b3 	.word	0x8b60c8b3
 80055cc:	3fc68a28 	.word	0x3fc68a28
 80055d0:	509f79fb 	.word	0x509f79fb
 80055d4:	3fd34413 	.word	0x3fd34413
 80055d8:	0800886d 	.word	0x0800886d
 80055dc:	08008884 	.word	0x08008884
 80055e0:	7ff00000 	.word	0x7ff00000
 80055e4:	08008869 	.word	0x08008869
 80055e8:	08008860 	.word	0x08008860
 80055ec:	080087fc 	.word	0x080087fc
 80055f0:	3ff80000 	.word	0x3ff80000
 80055f4:	08008970 	.word	0x08008970
 80055f8:	080088dc 	.word	0x080088dc
 80055fc:	2301      	movs	r3, #1
 80055fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005600:	e7d4      	b.n	80055ac <_dtoa_r+0x2ac>
 8005602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005604:	9306      	str	r3, [sp, #24]
 8005606:	9308      	str	r3, [sp, #32]
 8005608:	e7b7      	b.n	800557a <_dtoa_r+0x27a>
 800560a:	3101      	adds	r1, #1
 800560c:	0052      	lsls	r2, r2, #1
 800560e:	e7b7      	b.n	8005580 <_dtoa_r+0x280>
 8005610:	69eb      	ldr	r3, [r5, #28]
 8005612:	9a03      	ldr	r2, [sp, #12]
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	9b08      	ldr	r3, [sp, #32]
 8005618:	2b0e      	cmp	r3, #14
 800561a:	f200 80a8 	bhi.w	800576e <_dtoa_r+0x46e>
 800561e:	2c00      	cmp	r4, #0
 8005620:	f000 80a5 	beq.w	800576e <_dtoa_r+0x46e>
 8005624:	f1bb 0f00 	cmp.w	fp, #0
 8005628:	dd34      	ble.n	8005694 <_dtoa_r+0x394>
 800562a:	4b9a      	ldr	r3, [pc, #616]	; (8005894 <_dtoa_r+0x594>)
 800562c:	f00b 020f 	and.w	r2, fp, #15
 8005630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005634:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005638:	e9d3 3400 	ldrd	r3, r4, [r3]
 800563c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005640:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005644:	d016      	beq.n	8005674 <_dtoa_r+0x374>
 8005646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800564a:	4b93      	ldr	r3, [pc, #588]	; (8005898 <_dtoa_r+0x598>)
 800564c:	2703      	movs	r7, #3
 800564e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005652:	f7fb f91f 	bl	8000894 <__aeabi_ddiv>
 8005656:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800565a:	f004 040f 	and.w	r4, r4, #15
 800565e:	4e8e      	ldr	r6, [pc, #568]	; (8005898 <_dtoa_r+0x598>)
 8005660:	b954      	cbnz	r4, 8005678 <_dtoa_r+0x378>
 8005662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800566a:	f7fb f913 	bl	8000894 <__aeabi_ddiv>
 800566e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005672:	e029      	b.n	80056c8 <_dtoa_r+0x3c8>
 8005674:	2702      	movs	r7, #2
 8005676:	e7f2      	b.n	800565e <_dtoa_r+0x35e>
 8005678:	07e1      	lsls	r1, r4, #31
 800567a:	d508      	bpl.n	800568e <_dtoa_r+0x38e>
 800567c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005680:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005684:	f7fa ffdc 	bl	8000640 <__aeabi_dmul>
 8005688:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800568c:	3701      	adds	r7, #1
 800568e:	1064      	asrs	r4, r4, #1
 8005690:	3608      	adds	r6, #8
 8005692:	e7e5      	b.n	8005660 <_dtoa_r+0x360>
 8005694:	f000 80a5 	beq.w	80057e2 <_dtoa_r+0x4e2>
 8005698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800569c:	f1cb 0400 	rsb	r4, fp, #0
 80056a0:	4b7c      	ldr	r3, [pc, #496]	; (8005894 <_dtoa_r+0x594>)
 80056a2:	f004 020f 	and.w	r2, r4, #15
 80056a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f7fa ffc7 	bl	8000640 <__aeabi_dmul>
 80056b2:	2702      	movs	r7, #2
 80056b4:	2300      	movs	r3, #0
 80056b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056ba:	4e77      	ldr	r6, [pc, #476]	; (8005898 <_dtoa_r+0x598>)
 80056bc:	1124      	asrs	r4, r4, #4
 80056be:	2c00      	cmp	r4, #0
 80056c0:	f040 8084 	bne.w	80057cc <_dtoa_r+0x4cc>
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1d2      	bne.n	800566e <_dtoa_r+0x36e>
 80056c8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80056cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80056d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 8087 	beq.w	80057e6 <_dtoa_r+0x4e6>
 80056d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056dc:	2200      	movs	r2, #0
 80056de:	4b6f      	ldr	r3, [pc, #444]	; (800589c <_dtoa_r+0x59c>)
 80056e0:	f7fb fa20 	bl	8000b24 <__aeabi_dcmplt>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d07e      	beq.n	80057e6 <_dtoa_r+0x4e6>
 80056e8:	9b08      	ldr	r3, [sp, #32]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d07b      	beq.n	80057e6 <_dtoa_r+0x4e6>
 80056ee:	9b06      	ldr	r3, [sp, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	dd38      	ble.n	8005766 <_dtoa_r+0x466>
 80056f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056f8:	2200      	movs	r2, #0
 80056fa:	4b69      	ldr	r3, [pc, #420]	; (80058a0 <_dtoa_r+0x5a0>)
 80056fc:	f7fa ffa0 	bl	8000640 <__aeabi_dmul>
 8005700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005704:	9c06      	ldr	r4, [sp, #24]
 8005706:	f10b 38ff 	add.w	r8, fp, #4294967295
 800570a:	3701      	adds	r7, #1
 800570c:	4638      	mov	r0, r7
 800570e:	f7fa ff2d 	bl	800056c <__aeabi_i2d>
 8005712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005716:	f7fa ff93 	bl	8000640 <__aeabi_dmul>
 800571a:	2200      	movs	r2, #0
 800571c:	4b61      	ldr	r3, [pc, #388]	; (80058a4 <_dtoa_r+0x5a4>)
 800571e:	f7fa fdd9 	bl	80002d4 <__adddf3>
 8005722:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005726:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800572a:	9611      	str	r6, [sp, #68]	; 0x44
 800572c:	2c00      	cmp	r4, #0
 800572e:	d15d      	bne.n	80057ec <_dtoa_r+0x4ec>
 8005730:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005734:	2200      	movs	r2, #0
 8005736:	4b5c      	ldr	r3, [pc, #368]	; (80058a8 <_dtoa_r+0x5a8>)
 8005738:	f7fa fdca 	bl	80002d0 <__aeabi_dsub>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005744:	4633      	mov	r3, r6
 8005746:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005748:	f7fb fa0a 	bl	8000b60 <__aeabi_dcmpgt>
 800574c:	2800      	cmp	r0, #0
 800574e:	f040 8295 	bne.w	8005c7c <_dtoa_r+0x97c>
 8005752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005756:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005758:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800575c:	f7fb f9e2 	bl	8000b24 <__aeabi_dcmplt>
 8005760:	2800      	cmp	r0, #0
 8005762:	f040 8289 	bne.w	8005c78 <_dtoa_r+0x978>
 8005766:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800576a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800576e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005770:	2b00      	cmp	r3, #0
 8005772:	f2c0 8151 	blt.w	8005a18 <_dtoa_r+0x718>
 8005776:	f1bb 0f0e 	cmp.w	fp, #14
 800577a:	f300 814d 	bgt.w	8005a18 <_dtoa_r+0x718>
 800577e:	4b45      	ldr	r3, [pc, #276]	; (8005894 <_dtoa_r+0x594>)
 8005780:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005784:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005788:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800578c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800578e:	2b00      	cmp	r3, #0
 8005790:	f280 80da 	bge.w	8005948 <_dtoa_r+0x648>
 8005794:	9b08      	ldr	r3, [sp, #32]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f300 80d6 	bgt.w	8005948 <_dtoa_r+0x648>
 800579c:	f040 826b 	bne.w	8005c76 <_dtoa_r+0x976>
 80057a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057a4:	2200      	movs	r2, #0
 80057a6:	4b40      	ldr	r3, [pc, #256]	; (80058a8 <_dtoa_r+0x5a8>)
 80057a8:	f7fa ff4a 	bl	8000640 <__aeabi_dmul>
 80057ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057b0:	f7fb f9cc 	bl	8000b4c <__aeabi_dcmpge>
 80057b4:	9c08      	ldr	r4, [sp, #32]
 80057b6:	4626      	mov	r6, r4
 80057b8:	2800      	cmp	r0, #0
 80057ba:	f040 8241 	bne.w	8005c40 <_dtoa_r+0x940>
 80057be:	2331      	movs	r3, #49	; 0x31
 80057c0:	9f03      	ldr	r7, [sp, #12]
 80057c2:	f10b 0b01 	add.w	fp, fp, #1
 80057c6:	f807 3b01 	strb.w	r3, [r7], #1
 80057ca:	e23d      	b.n	8005c48 <_dtoa_r+0x948>
 80057cc:	07e2      	lsls	r2, r4, #31
 80057ce:	d505      	bpl.n	80057dc <_dtoa_r+0x4dc>
 80057d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057d4:	f7fa ff34 	bl	8000640 <__aeabi_dmul>
 80057d8:	2301      	movs	r3, #1
 80057da:	3701      	adds	r7, #1
 80057dc:	1064      	asrs	r4, r4, #1
 80057de:	3608      	adds	r6, #8
 80057e0:	e76d      	b.n	80056be <_dtoa_r+0x3be>
 80057e2:	2702      	movs	r7, #2
 80057e4:	e770      	b.n	80056c8 <_dtoa_r+0x3c8>
 80057e6:	46d8      	mov	r8, fp
 80057e8:	9c08      	ldr	r4, [sp, #32]
 80057ea:	e78f      	b.n	800570c <_dtoa_r+0x40c>
 80057ec:	9903      	ldr	r1, [sp, #12]
 80057ee:	4b29      	ldr	r3, [pc, #164]	; (8005894 <_dtoa_r+0x594>)
 80057f0:	4421      	add	r1, r4
 80057f2:	9112      	str	r1, [sp, #72]	; 0x48
 80057f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057fa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80057fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005802:	2900      	cmp	r1, #0
 8005804:	d054      	beq.n	80058b0 <_dtoa_r+0x5b0>
 8005806:	2000      	movs	r0, #0
 8005808:	4928      	ldr	r1, [pc, #160]	; (80058ac <_dtoa_r+0x5ac>)
 800580a:	f7fb f843 	bl	8000894 <__aeabi_ddiv>
 800580e:	463b      	mov	r3, r7
 8005810:	4632      	mov	r2, r6
 8005812:	f7fa fd5d 	bl	80002d0 <__aeabi_dsub>
 8005816:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800581a:	9f03      	ldr	r7, [sp, #12]
 800581c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005820:	f7fb f9be 	bl	8000ba0 <__aeabi_d2iz>
 8005824:	4604      	mov	r4, r0
 8005826:	f7fa fea1 	bl	800056c <__aeabi_i2d>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005832:	f7fa fd4d 	bl	80002d0 <__aeabi_dsub>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	3430      	adds	r4, #48	; 0x30
 800583c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005840:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005844:	f807 4b01 	strb.w	r4, [r7], #1
 8005848:	f7fb f96c 	bl	8000b24 <__aeabi_dcmplt>
 800584c:	2800      	cmp	r0, #0
 800584e:	d173      	bne.n	8005938 <_dtoa_r+0x638>
 8005850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005854:	2000      	movs	r0, #0
 8005856:	4911      	ldr	r1, [pc, #68]	; (800589c <_dtoa_r+0x59c>)
 8005858:	f7fa fd3a 	bl	80002d0 <__aeabi_dsub>
 800585c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005860:	f7fb f960 	bl	8000b24 <__aeabi_dcmplt>
 8005864:	2800      	cmp	r0, #0
 8005866:	f040 80b6 	bne.w	80059d6 <_dtoa_r+0x6d6>
 800586a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800586c:	429f      	cmp	r7, r3
 800586e:	f43f af7a 	beq.w	8005766 <_dtoa_r+0x466>
 8005872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005876:	2200      	movs	r2, #0
 8005878:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <_dtoa_r+0x5a0>)
 800587a:	f7fa fee1 	bl	8000640 <__aeabi_dmul>
 800587e:	2200      	movs	r2, #0
 8005880:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <_dtoa_r+0x5a0>)
 800588a:	f7fa fed9 	bl	8000640 <__aeabi_dmul>
 800588e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005892:	e7c3      	b.n	800581c <_dtoa_r+0x51c>
 8005894:	08008970 	.word	0x08008970
 8005898:	08008948 	.word	0x08008948
 800589c:	3ff00000 	.word	0x3ff00000
 80058a0:	40240000 	.word	0x40240000
 80058a4:	401c0000 	.word	0x401c0000
 80058a8:	40140000 	.word	0x40140000
 80058ac:	3fe00000 	.word	0x3fe00000
 80058b0:	4630      	mov	r0, r6
 80058b2:	4639      	mov	r1, r7
 80058b4:	f7fa fec4 	bl	8000640 <__aeabi_dmul>
 80058b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058be:	9c03      	ldr	r4, [sp, #12]
 80058c0:	9314      	str	r3, [sp, #80]	; 0x50
 80058c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058c6:	f7fb f96b 	bl	8000ba0 <__aeabi_d2iz>
 80058ca:	9015      	str	r0, [sp, #84]	; 0x54
 80058cc:	f7fa fe4e 	bl	800056c <__aeabi_i2d>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d8:	f7fa fcfa 	bl	80002d0 <__aeabi_dsub>
 80058dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058de:	4606      	mov	r6, r0
 80058e0:	3330      	adds	r3, #48	; 0x30
 80058e2:	f804 3b01 	strb.w	r3, [r4], #1
 80058e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058e8:	460f      	mov	r7, r1
 80058ea:	429c      	cmp	r4, r3
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	d124      	bne.n	800593c <_dtoa_r+0x63c>
 80058f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058f6:	4baf      	ldr	r3, [pc, #700]	; (8005bb4 <_dtoa_r+0x8b4>)
 80058f8:	f7fa fcec 	bl	80002d4 <__adddf3>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4630      	mov	r0, r6
 8005902:	4639      	mov	r1, r7
 8005904:	f7fb f92c 	bl	8000b60 <__aeabi_dcmpgt>
 8005908:	2800      	cmp	r0, #0
 800590a:	d163      	bne.n	80059d4 <_dtoa_r+0x6d4>
 800590c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005910:	2000      	movs	r0, #0
 8005912:	49a8      	ldr	r1, [pc, #672]	; (8005bb4 <_dtoa_r+0x8b4>)
 8005914:	f7fa fcdc 	bl	80002d0 <__aeabi_dsub>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4630      	mov	r0, r6
 800591e:	4639      	mov	r1, r7
 8005920:	f7fb f900 	bl	8000b24 <__aeabi_dcmplt>
 8005924:	2800      	cmp	r0, #0
 8005926:	f43f af1e 	beq.w	8005766 <_dtoa_r+0x466>
 800592a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800592c:	1e7b      	subs	r3, r7, #1
 800592e:	9314      	str	r3, [sp, #80]	; 0x50
 8005930:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005934:	2b30      	cmp	r3, #48	; 0x30
 8005936:	d0f8      	beq.n	800592a <_dtoa_r+0x62a>
 8005938:	46c3      	mov	fp, r8
 800593a:	e03b      	b.n	80059b4 <_dtoa_r+0x6b4>
 800593c:	4b9e      	ldr	r3, [pc, #632]	; (8005bb8 <_dtoa_r+0x8b8>)
 800593e:	f7fa fe7f 	bl	8000640 <__aeabi_dmul>
 8005942:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005946:	e7bc      	b.n	80058c2 <_dtoa_r+0x5c2>
 8005948:	9f03      	ldr	r7, [sp, #12]
 800594a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800594e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005952:	4640      	mov	r0, r8
 8005954:	4649      	mov	r1, r9
 8005956:	f7fa ff9d 	bl	8000894 <__aeabi_ddiv>
 800595a:	f7fb f921 	bl	8000ba0 <__aeabi_d2iz>
 800595e:	4604      	mov	r4, r0
 8005960:	f7fa fe04 	bl	800056c <__aeabi_i2d>
 8005964:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005968:	f7fa fe6a 	bl	8000640 <__aeabi_dmul>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4640      	mov	r0, r8
 8005972:	4649      	mov	r1, r9
 8005974:	f7fa fcac 	bl	80002d0 <__aeabi_dsub>
 8005978:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800597c:	f807 6b01 	strb.w	r6, [r7], #1
 8005980:	9e03      	ldr	r6, [sp, #12]
 8005982:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005986:	1bbe      	subs	r6, r7, r6
 8005988:	45b4      	cmp	ip, r6
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	d136      	bne.n	80059fe <_dtoa_r+0x6fe>
 8005990:	f7fa fca0 	bl	80002d4 <__adddf3>
 8005994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005998:	4680      	mov	r8, r0
 800599a:	4689      	mov	r9, r1
 800599c:	f7fb f8e0 	bl	8000b60 <__aeabi_dcmpgt>
 80059a0:	bb58      	cbnz	r0, 80059fa <_dtoa_r+0x6fa>
 80059a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059a6:	4640      	mov	r0, r8
 80059a8:	4649      	mov	r1, r9
 80059aa:	f7fb f8b1 	bl	8000b10 <__aeabi_dcmpeq>
 80059ae:	b108      	cbz	r0, 80059b4 <_dtoa_r+0x6b4>
 80059b0:	07e3      	lsls	r3, r4, #31
 80059b2:	d422      	bmi.n	80059fa <_dtoa_r+0x6fa>
 80059b4:	4651      	mov	r1, sl
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 fbc2 	bl	8006140 <_Bfree>
 80059bc:	2300      	movs	r3, #0
 80059be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80059c0:	703b      	strb	r3, [r7, #0]
 80059c2:	f10b 0301 	add.w	r3, fp, #1
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f43f ace6 	beq.w	800539c <_dtoa_r+0x9c>
 80059d0:	601f      	str	r7, [r3, #0]
 80059d2:	e4e3      	b.n	800539c <_dtoa_r+0x9c>
 80059d4:	4627      	mov	r7, r4
 80059d6:	463b      	mov	r3, r7
 80059d8:	461f      	mov	r7, r3
 80059da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059de:	2a39      	cmp	r2, #57	; 0x39
 80059e0:	d107      	bne.n	80059f2 <_dtoa_r+0x6f2>
 80059e2:	9a03      	ldr	r2, [sp, #12]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d1f7      	bne.n	80059d8 <_dtoa_r+0x6d8>
 80059e8:	2230      	movs	r2, #48	; 0x30
 80059ea:	9903      	ldr	r1, [sp, #12]
 80059ec:	f108 0801 	add.w	r8, r8, #1
 80059f0:	700a      	strb	r2, [r1, #0]
 80059f2:	781a      	ldrb	r2, [r3, #0]
 80059f4:	3201      	adds	r2, #1
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	e79e      	b.n	8005938 <_dtoa_r+0x638>
 80059fa:	46d8      	mov	r8, fp
 80059fc:	e7eb      	b.n	80059d6 <_dtoa_r+0x6d6>
 80059fe:	2200      	movs	r2, #0
 8005a00:	4b6d      	ldr	r3, [pc, #436]	; (8005bb8 <_dtoa_r+0x8b8>)
 8005a02:	f7fa fe1d 	bl	8000640 <__aeabi_dmul>
 8005a06:	2200      	movs	r2, #0
 8005a08:	2300      	movs	r3, #0
 8005a0a:	4680      	mov	r8, r0
 8005a0c:	4689      	mov	r9, r1
 8005a0e:	f7fb f87f 	bl	8000b10 <__aeabi_dcmpeq>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d09b      	beq.n	800594e <_dtoa_r+0x64e>
 8005a16:	e7cd      	b.n	80059b4 <_dtoa_r+0x6b4>
 8005a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a1a:	2a00      	cmp	r2, #0
 8005a1c:	f000 80c4 	beq.w	8005ba8 <_dtoa_r+0x8a8>
 8005a20:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a22:	2a01      	cmp	r2, #1
 8005a24:	f300 80a8 	bgt.w	8005b78 <_dtoa_r+0x878>
 8005a28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a2a:	2a00      	cmp	r2, #0
 8005a2c:	f000 80a0 	beq.w	8005b70 <_dtoa_r+0x870>
 8005a30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a34:	464f      	mov	r7, r9
 8005a36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	441a      	add	r2, r3
 8005a3e:	4628      	mov	r0, r5
 8005a40:	4499      	add	r9, r3
 8005a42:	9209      	str	r2, [sp, #36]	; 0x24
 8005a44:	f000 fc7c 	bl	8006340 <__i2b>
 8005a48:	4606      	mov	r6, r0
 8005a4a:	b15f      	cbz	r7, 8005a64 <_dtoa_r+0x764>
 8005a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	dd08      	ble.n	8005a64 <_dtoa_r+0x764>
 8005a52:	42bb      	cmp	r3, r7
 8005a54:	bfa8      	it	ge
 8005a56:	463b      	movge	r3, r7
 8005a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a5a:	eba9 0903 	sub.w	r9, r9, r3
 8005a5e:	1aff      	subs	r7, r7, r3
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	9309      	str	r3, [sp, #36]	; 0x24
 8005a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a66:	b1f3      	cbz	r3, 8005aa6 <_dtoa_r+0x7a6>
 8005a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 80a0 	beq.w	8005bb0 <_dtoa_r+0x8b0>
 8005a70:	2c00      	cmp	r4, #0
 8005a72:	dd10      	ble.n	8005a96 <_dtoa_r+0x796>
 8005a74:	4631      	mov	r1, r6
 8005a76:	4622      	mov	r2, r4
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 fd1f 	bl	80064bc <__pow5mult>
 8005a7e:	4652      	mov	r2, sl
 8005a80:	4601      	mov	r1, r0
 8005a82:	4606      	mov	r6, r0
 8005a84:	4628      	mov	r0, r5
 8005a86:	f000 fc71 	bl	800636c <__multiply>
 8005a8a:	4680      	mov	r8, r0
 8005a8c:	4651      	mov	r1, sl
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f000 fb56 	bl	8006140 <_Bfree>
 8005a94:	46c2      	mov	sl, r8
 8005a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a98:	1b1a      	subs	r2, r3, r4
 8005a9a:	d004      	beq.n	8005aa6 <_dtoa_r+0x7a6>
 8005a9c:	4651      	mov	r1, sl
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 fd0c 	bl	80064bc <__pow5mult>
 8005aa4:	4682      	mov	sl, r0
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	f000 fc49 	bl	8006340 <__i2b>
 8005aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f340 8082 	ble.w	8005bbc <_dtoa_r+0x8bc>
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4601      	mov	r1, r0
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 fcfd 	bl	80064bc <__pow5mult>
 8005ac2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	dd7b      	ble.n	8005bc2 <_dtoa_r+0x8c2>
 8005aca:	f04f 0800 	mov.w	r8, #0
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ad4:	6918      	ldr	r0, [r3, #16]
 8005ad6:	f000 fbe5 	bl	80062a4 <__hi0bits>
 8005ada:	f1c0 0020 	rsb	r0, r0, #32
 8005ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae0:	4418      	add	r0, r3
 8005ae2:	f010 001f 	ands.w	r0, r0, #31
 8005ae6:	f000 8092 	beq.w	8005c0e <_dtoa_r+0x90e>
 8005aea:	f1c0 0320 	rsb	r3, r0, #32
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	f340 8085 	ble.w	8005bfe <_dtoa_r+0x8fe>
 8005af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af6:	f1c0 001c 	rsb	r0, r0, #28
 8005afa:	4403      	add	r3, r0
 8005afc:	4481      	add	r9, r0
 8005afe:	4407      	add	r7, r0
 8005b00:	9309      	str	r3, [sp, #36]	; 0x24
 8005b02:	f1b9 0f00 	cmp.w	r9, #0
 8005b06:	dd05      	ble.n	8005b14 <_dtoa_r+0x814>
 8005b08:	4651      	mov	r1, sl
 8005b0a:	464a      	mov	r2, r9
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	f000 fd2f 	bl	8006570 <__lshift>
 8005b12:	4682      	mov	sl, r0
 8005b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	dd05      	ble.n	8005b26 <_dtoa_r+0x826>
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f000 fd26 	bl	8006570 <__lshift>
 8005b24:	4604      	mov	r4, r0
 8005b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d072      	beq.n	8005c12 <_dtoa_r+0x912>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4650      	mov	r0, sl
 8005b30:	f000 fd8a 	bl	8006648 <__mcmp>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	da6c      	bge.n	8005c12 <_dtoa_r+0x912>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	4651      	mov	r1, sl
 8005b3c:	220a      	movs	r2, #10
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 fb20 	bl	8006184 <__multadd>
 8005b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b46:	4682      	mov	sl, r0
 8005b48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 81ac 	beq.w	8005eaa <_dtoa_r+0xbaa>
 8005b52:	2300      	movs	r3, #0
 8005b54:	4631      	mov	r1, r6
 8005b56:	220a      	movs	r2, #10
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 fb13 	bl	8006184 <__multadd>
 8005b5e:	9b06      	ldr	r3, [sp, #24]
 8005b60:	4606      	mov	r6, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f300 8093 	bgt.w	8005c8e <_dtoa_r+0x98e>
 8005b68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	dc59      	bgt.n	8005c22 <_dtoa_r+0x922>
 8005b6e:	e08e      	b.n	8005c8e <_dtoa_r+0x98e>
 8005b70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b72:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b76:	e75d      	b.n	8005a34 <_dtoa_r+0x734>
 8005b78:	9b08      	ldr	r3, [sp, #32]
 8005b7a:	1e5c      	subs	r4, r3, #1
 8005b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7e:	42a3      	cmp	r3, r4
 8005b80:	bfbf      	itttt	lt
 8005b82:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b84:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005b86:	1ae3      	sublt	r3, r4, r3
 8005b88:	18d2      	addlt	r2, r2, r3
 8005b8a:	bfa8      	it	ge
 8005b8c:	1b1c      	subge	r4, r3, r4
 8005b8e:	9b08      	ldr	r3, [sp, #32]
 8005b90:	bfbe      	ittt	lt
 8005b92:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005b94:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005b96:	2400      	movlt	r4, #0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	bfb5      	itete	lt
 8005b9c:	eba9 0703 	sublt.w	r7, r9, r3
 8005ba0:	464f      	movge	r7, r9
 8005ba2:	2300      	movlt	r3, #0
 8005ba4:	9b08      	ldrge	r3, [sp, #32]
 8005ba6:	e747      	b.n	8005a38 <_dtoa_r+0x738>
 8005ba8:	464f      	mov	r7, r9
 8005baa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005bac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005bae:	e74c      	b.n	8005a4a <_dtoa_r+0x74a>
 8005bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bb2:	e773      	b.n	8005a9c <_dtoa_r+0x79c>
 8005bb4:	3fe00000 	.word	0x3fe00000
 8005bb8:	40240000 	.word	0x40240000
 8005bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	dc18      	bgt.n	8005bf4 <_dtoa_r+0x8f4>
 8005bc2:	9b04      	ldr	r3, [sp, #16]
 8005bc4:	b9b3      	cbnz	r3, 8005bf4 <_dtoa_r+0x8f4>
 8005bc6:	9b05      	ldr	r3, [sp, #20]
 8005bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bcc:	b993      	cbnz	r3, 8005bf4 <_dtoa_r+0x8f4>
 8005bce:	9b05      	ldr	r3, [sp, #20]
 8005bd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bd4:	0d1b      	lsrs	r3, r3, #20
 8005bd6:	051b      	lsls	r3, r3, #20
 8005bd8:	b17b      	cbz	r3, 8005bfa <_dtoa_r+0x8fa>
 8005bda:	f04f 0801 	mov.w	r8, #1
 8005bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be0:	f109 0901 	add.w	r9, r9, #1
 8005be4:	3301      	adds	r3, #1
 8005be6:	9309      	str	r3, [sp, #36]	; 0x24
 8005be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f47f af6f 	bne.w	8005ace <_dtoa_r+0x7ce>
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	e774      	b.n	8005ade <_dtoa_r+0x7de>
 8005bf4:	f04f 0800 	mov.w	r8, #0
 8005bf8:	e7f6      	b.n	8005be8 <_dtoa_r+0x8e8>
 8005bfa:	4698      	mov	r8, r3
 8005bfc:	e7f4      	b.n	8005be8 <_dtoa_r+0x8e8>
 8005bfe:	d080      	beq.n	8005b02 <_dtoa_r+0x802>
 8005c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c02:	331c      	adds	r3, #28
 8005c04:	441a      	add	r2, r3
 8005c06:	4499      	add	r9, r3
 8005c08:	441f      	add	r7, r3
 8005c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c0c:	e779      	b.n	8005b02 <_dtoa_r+0x802>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	e7f6      	b.n	8005c00 <_dtoa_r+0x900>
 8005c12:	9b08      	ldr	r3, [sp, #32]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	dc34      	bgt.n	8005c82 <_dtoa_r+0x982>
 8005c18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	dd31      	ble.n	8005c82 <_dtoa_r+0x982>
 8005c1e:	9b08      	ldr	r3, [sp, #32]
 8005c20:	9306      	str	r3, [sp, #24]
 8005c22:	9b06      	ldr	r3, [sp, #24]
 8005c24:	b963      	cbnz	r3, 8005c40 <_dtoa_r+0x940>
 8005c26:	4621      	mov	r1, r4
 8005c28:	2205      	movs	r2, #5
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f000 faaa 	bl	8006184 <__multadd>
 8005c30:	4601      	mov	r1, r0
 8005c32:	4604      	mov	r4, r0
 8005c34:	4650      	mov	r0, sl
 8005c36:	f000 fd07 	bl	8006648 <__mcmp>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	f73f adbf 	bgt.w	80057be <_dtoa_r+0x4be>
 8005c40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c42:	9f03      	ldr	r7, [sp, #12]
 8005c44:	ea6f 0b03 	mvn.w	fp, r3
 8005c48:	f04f 0800 	mov.w	r8, #0
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 fa76 	bl	8006140 <_Bfree>
 8005c54:	2e00      	cmp	r6, #0
 8005c56:	f43f aead 	beq.w	80059b4 <_dtoa_r+0x6b4>
 8005c5a:	f1b8 0f00 	cmp.w	r8, #0
 8005c5e:	d005      	beq.n	8005c6c <_dtoa_r+0x96c>
 8005c60:	45b0      	cmp	r8, r6
 8005c62:	d003      	beq.n	8005c6c <_dtoa_r+0x96c>
 8005c64:	4641      	mov	r1, r8
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 fa6a 	bl	8006140 <_Bfree>
 8005c6c:	4631      	mov	r1, r6
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f000 fa66 	bl	8006140 <_Bfree>
 8005c74:	e69e      	b.n	80059b4 <_dtoa_r+0x6b4>
 8005c76:	2400      	movs	r4, #0
 8005c78:	4626      	mov	r6, r4
 8005c7a:	e7e1      	b.n	8005c40 <_dtoa_r+0x940>
 8005c7c:	46c3      	mov	fp, r8
 8005c7e:	4626      	mov	r6, r4
 8005c80:	e59d      	b.n	80057be <_dtoa_r+0x4be>
 8005c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 80c8 	beq.w	8005e1a <_dtoa_r+0xb1a>
 8005c8a:	9b08      	ldr	r3, [sp, #32]
 8005c8c:	9306      	str	r3, [sp, #24]
 8005c8e:	2f00      	cmp	r7, #0
 8005c90:	dd05      	ble.n	8005c9e <_dtoa_r+0x99e>
 8005c92:	4631      	mov	r1, r6
 8005c94:	463a      	mov	r2, r7
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 fc6a 	bl	8006570 <__lshift>
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	f1b8 0f00 	cmp.w	r8, #0
 8005ca2:	d05b      	beq.n	8005d5c <_dtoa_r+0xa5c>
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	6871      	ldr	r1, [r6, #4]
 8005ca8:	f000 fa0a 	bl	80060c0 <_Balloc>
 8005cac:	4607      	mov	r7, r0
 8005cae:	b928      	cbnz	r0, 8005cbc <_dtoa_r+0x9bc>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005cb6:	4b81      	ldr	r3, [pc, #516]	; (8005ebc <_dtoa_r+0xbbc>)
 8005cb8:	f7ff bb36 	b.w	8005328 <_dtoa_r+0x28>
 8005cbc:	6932      	ldr	r2, [r6, #16]
 8005cbe:	f106 010c 	add.w	r1, r6, #12
 8005cc2:	3202      	adds	r2, #2
 8005cc4:	0092      	lsls	r2, r2, #2
 8005cc6:	300c      	adds	r0, #12
 8005cc8:	f002 f8ca 	bl	8007e60 <memcpy>
 8005ccc:	2201      	movs	r2, #1
 8005cce:	4639      	mov	r1, r7
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f000 fc4d 	bl	8006570 <__lshift>
 8005cd6:	46b0      	mov	r8, r6
 8005cd8:	4606      	mov	r6, r0
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	9a03      	ldr	r2, [sp, #12]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	9308      	str	r3, [sp, #32]
 8005ce2:	9b06      	ldr	r3, [sp, #24]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ce8:	9b04      	ldr	r3, [sp, #16]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	930a      	str	r3, [sp, #40]	; 0x28
 8005cf0:	9b08      	ldr	r3, [sp, #32]
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	9304      	str	r3, [sp, #16]
 8005cfa:	f7ff fa75 	bl	80051e8 <quorem>
 8005cfe:	4641      	mov	r1, r8
 8005d00:	9006      	str	r0, [sp, #24]
 8005d02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005d06:	4650      	mov	r0, sl
 8005d08:	f000 fc9e 	bl	8006648 <__mcmp>
 8005d0c:	4632      	mov	r2, r6
 8005d0e:	9009      	str	r0, [sp, #36]	; 0x24
 8005d10:	4621      	mov	r1, r4
 8005d12:	4628      	mov	r0, r5
 8005d14:	f000 fcb4 	bl	8006680 <__mdiff>
 8005d18:	68c2      	ldr	r2, [r0, #12]
 8005d1a:	4607      	mov	r7, r0
 8005d1c:	bb02      	cbnz	r2, 8005d60 <_dtoa_r+0xa60>
 8005d1e:	4601      	mov	r1, r0
 8005d20:	4650      	mov	r0, sl
 8005d22:	f000 fc91 	bl	8006648 <__mcmp>
 8005d26:	4602      	mov	r2, r0
 8005d28:	4639      	mov	r1, r7
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	920c      	str	r2, [sp, #48]	; 0x30
 8005d2e:	f000 fa07 	bl	8006140 <_Bfree>
 8005d32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d36:	9f08      	ldr	r7, [sp, #32]
 8005d38:	ea43 0102 	orr.w	r1, r3, r2
 8005d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d3e:	4319      	orrs	r1, r3
 8005d40:	d110      	bne.n	8005d64 <_dtoa_r+0xa64>
 8005d42:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d46:	d029      	beq.n	8005d9c <_dtoa_r+0xa9c>
 8005d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	dd02      	ble.n	8005d54 <_dtoa_r+0xa54>
 8005d4e:	9b06      	ldr	r3, [sp, #24]
 8005d50:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005d54:	9b04      	ldr	r3, [sp, #16]
 8005d56:	f883 9000 	strb.w	r9, [r3]
 8005d5a:	e777      	b.n	8005c4c <_dtoa_r+0x94c>
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	e7ba      	b.n	8005cd6 <_dtoa_r+0x9d6>
 8005d60:	2201      	movs	r2, #1
 8005d62:	e7e1      	b.n	8005d28 <_dtoa_r+0xa28>
 8005d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	db04      	blt.n	8005d74 <_dtoa_r+0xa74>
 8005d6a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d70:	430b      	orrs	r3, r1
 8005d72:	d120      	bne.n	8005db6 <_dtoa_r+0xab6>
 8005d74:	2a00      	cmp	r2, #0
 8005d76:	dded      	ble.n	8005d54 <_dtoa_r+0xa54>
 8005d78:	4651      	mov	r1, sl
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f000 fbf7 	bl	8006570 <__lshift>
 8005d82:	4621      	mov	r1, r4
 8005d84:	4682      	mov	sl, r0
 8005d86:	f000 fc5f 	bl	8006648 <__mcmp>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	dc03      	bgt.n	8005d96 <_dtoa_r+0xa96>
 8005d8e:	d1e1      	bne.n	8005d54 <_dtoa_r+0xa54>
 8005d90:	f019 0f01 	tst.w	r9, #1
 8005d94:	d0de      	beq.n	8005d54 <_dtoa_r+0xa54>
 8005d96:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d9a:	d1d8      	bne.n	8005d4e <_dtoa_r+0xa4e>
 8005d9c:	2339      	movs	r3, #57	; 0x39
 8005d9e:	9a04      	ldr	r2, [sp, #16]
 8005da0:	7013      	strb	r3, [r2, #0]
 8005da2:	463b      	mov	r3, r7
 8005da4:	461f      	mov	r7, r3
 8005da6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	2a39      	cmp	r2, #57	; 0x39
 8005dae:	d06b      	beq.n	8005e88 <_dtoa_r+0xb88>
 8005db0:	3201      	adds	r2, #1
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	e74a      	b.n	8005c4c <_dtoa_r+0x94c>
 8005db6:	2a00      	cmp	r2, #0
 8005db8:	dd07      	ble.n	8005dca <_dtoa_r+0xaca>
 8005dba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005dbe:	d0ed      	beq.n	8005d9c <_dtoa_r+0xa9c>
 8005dc0:	9a04      	ldr	r2, [sp, #16]
 8005dc2:	f109 0301 	add.w	r3, r9, #1
 8005dc6:	7013      	strb	r3, [r2, #0]
 8005dc8:	e740      	b.n	8005c4c <_dtoa_r+0x94c>
 8005dca:	9b08      	ldr	r3, [sp, #32]
 8005dcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dce:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d042      	beq.n	8005e5c <_dtoa_r+0xb5c>
 8005dd6:	4651      	mov	r1, sl
 8005dd8:	2300      	movs	r3, #0
 8005dda:	220a      	movs	r2, #10
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f000 f9d1 	bl	8006184 <__multadd>
 8005de2:	45b0      	cmp	r8, r6
 8005de4:	4682      	mov	sl, r0
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	f04f 020a 	mov.w	r2, #10
 8005dee:	4641      	mov	r1, r8
 8005df0:	4628      	mov	r0, r5
 8005df2:	d107      	bne.n	8005e04 <_dtoa_r+0xb04>
 8005df4:	f000 f9c6 	bl	8006184 <__multadd>
 8005df8:	4680      	mov	r8, r0
 8005dfa:	4606      	mov	r6, r0
 8005dfc:	9b08      	ldr	r3, [sp, #32]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	9308      	str	r3, [sp, #32]
 8005e02:	e775      	b.n	8005cf0 <_dtoa_r+0x9f0>
 8005e04:	f000 f9be 	bl	8006184 <__multadd>
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4680      	mov	r8, r0
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	220a      	movs	r2, #10
 8005e10:	4628      	mov	r0, r5
 8005e12:	f000 f9b7 	bl	8006184 <__multadd>
 8005e16:	4606      	mov	r6, r0
 8005e18:	e7f0      	b.n	8005dfc <_dtoa_r+0xafc>
 8005e1a:	9b08      	ldr	r3, [sp, #32]
 8005e1c:	9306      	str	r3, [sp, #24]
 8005e1e:	9f03      	ldr	r7, [sp, #12]
 8005e20:	4621      	mov	r1, r4
 8005e22:	4650      	mov	r0, sl
 8005e24:	f7ff f9e0 	bl	80051e8 <quorem>
 8005e28:	9b03      	ldr	r3, [sp, #12]
 8005e2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005e2e:	f807 9b01 	strb.w	r9, [r7], #1
 8005e32:	1afa      	subs	r2, r7, r3
 8005e34:	9b06      	ldr	r3, [sp, #24]
 8005e36:	4293      	cmp	r3, r2
 8005e38:	dd07      	ble.n	8005e4a <_dtoa_r+0xb4a>
 8005e3a:	4651      	mov	r1, sl
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	220a      	movs	r2, #10
 8005e40:	4628      	mov	r0, r5
 8005e42:	f000 f99f 	bl	8006184 <__multadd>
 8005e46:	4682      	mov	sl, r0
 8005e48:	e7ea      	b.n	8005e20 <_dtoa_r+0xb20>
 8005e4a:	9b06      	ldr	r3, [sp, #24]
 8005e4c:	f04f 0800 	mov.w	r8, #0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	bfcc      	ite	gt
 8005e54:	461f      	movgt	r7, r3
 8005e56:	2701      	movle	r7, #1
 8005e58:	9b03      	ldr	r3, [sp, #12]
 8005e5a:	441f      	add	r7, r3
 8005e5c:	4651      	mov	r1, sl
 8005e5e:	2201      	movs	r2, #1
 8005e60:	4628      	mov	r0, r5
 8005e62:	f000 fb85 	bl	8006570 <__lshift>
 8005e66:	4621      	mov	r1, r4
 8005e68:	4682      	mov	sl, r0
 8005e6a:	f000 fbed 	bl	8006648 <__mcmp>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	dc97      	bgt.n	8005da2 <_dtoa_r+0xaa2>
 8005e72:	d102      	bne.n	8005e7a <_dtoa_r+0xb7a>
 8005e74:	f019 0f01 	tst.w	r9, #1
 8005e78:	d193      	bne.n	8005da2 <_dtoa_r+0xaa2>
 8005e7a:	463b      	mov	r3, r7
 8005e7c:	461f      	mov	r7, r3
 8005e7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e82:	2a30      	cmp	r2, #48	; 0x30
 8005e84:	d0fa      	beq.n	8005e7c <_dtoa_r+0xb7c>
 8005e86:	e6e1      	b.n	8005c4c <_dtoa_r+0x94c>
 8005e88:	9a03      	ldr	r2, [sp, #12]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d18a      	bne.n	8005da4 <_dtoa_r+0xaa4>
 8005e8e:	2331      	movs	r3, #49	; 0x31
 8005e90:	f10b 0b01 	add.w	fp, fp, #1
 8005e94:	e797      	b.n	8005dc6 <_dtoa_r+0xac6>
 8005e96:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <_dtoa_r+0xbc0>)
 8005e98:	f7ff ba9f 	b.w	80053da <_dtoa_r+0xda>
 8005e9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f47f aa77 	bne.w	8005392 <_dtoa_r+0x92>
 8005ea4:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <_dtoa_r+0xbc4>)
 8005ea6:	f7ff ba98 	b.w	80053da <_dtoa_r+0xda>
 8005eaa:	9b06      	ldr	r3, [sp, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	dcb6      	bgt.n	8005e1e <_dtoa_r+0xb1e>
 8005eb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	f73f aeb5 	bgt.w	8005c22 <_dtoa_r+0x922>
 8005eb8:	e7b1      	b.n	8005e1e <_dtoa_r+0xb1e>
 8005eba:	bf00      	nop
 8005ebc:	080088dc 	.word	0x080088dc
 8005ec0:	080087fb 	.word	0x080087fb
 8005ec4:	08008860 	.word	0x08008860

08005ec8 <_free_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	4605      	mov	r5, r0
 8005ecc:	2900      	cmp	r1, #0
 8005ece:	d040      	beq.n	8005f52 <_free_r+0x8a>
 8005ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed4:	1f0c      	subs	r4, r1, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	bfb8      	it	lt
 8005eda:	18e4      	addlt	r4, r4, r3
 8005edc:	f000 f8e4 	bl	80060a8 <__malloc_lock>
 8005ee0:	4a1c      	ldr	r2, [pc, #112]	; (8005f54 <_free_r+0x8c>)
 8005ee2:	6813      	ldr	r3, [r2, #0]
 8005ee4:	b933      	cbnz	r3, 8005ef4 <_free_r+0x2c>
 8005ee6:	6063      	str	r3, [r4, #4]
 8005ee8:	6014      	str	r4, [r2, #0]
 8005eea:	4628      	mov	r0, r5
 8005eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ef0:	f000 b8e0 	b.w	80060b4 <__malloc_unlock>
 8005ef4:	42a3      	cmp	r3, r4
 8005ef6:	d908      	bls.n	8005f0a <_free_r+0x42>
 8005ef8:	6820      	ldr	r0, [r4, #0]
 8005efa:	1821      	adds	r1, r4, r0
 8005efc:	428b      	cmp	r3, r1
 8005efe:	bf01      	itttt	eq
 8005f00:	6819      	ldreq	r1, [r3, #0]
 8005f02:	685b      	ldreq	r3, [r3, #4]
 8005f04:	1809      	addeq	r1, r1, r0
 8005f06:	6021      	streq	r1, [r4, #0]
 8005f08:	e7ed      	b.n	8005ee6 <_free_r+0x1e>
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	b10b      	cbz	r3, 8005f14 <_free_r+0x4c>
 8005f10:	42a3      	cmp	r3, r4
 8005f12:	d9fa      	bls.n	8005f0a <_free_r+0x42>
 8005f14:	6811      	ldr	r1, [r2, #0]
 8005f16:	1850      	adds	r0, r2, r1
 8005f18:	42a0      	cmp	r0, r4
 8005f1a:	d10b      	bne.n	8005f34 <_free_r+0x6c>
 8005f1c:	6820      	ldr	r0, [r4, #0]
 8005f1e:	4401      	add	r1, r0
 8005f20:	1850      	adds	r0, r2, r1
 8005f22:	4283      	cmp	r3, r0
 8005f24:	6011      	str	r1, [r2, #0]
 8005f26:	d1e0      	bne.n	8005eea <_free_r+0x22>
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	4408      	add	r0, r1
 8005f2e:	6010      	str	r0, [r2, #0]
 8005f30:	6053      	str	r3, [r2, #4]
 8005f32:	e7da      	b.n	8005eea <_free_r+0x22>
 8005f34:	d902      	bls.n	8005f3c <_free_r+0x74>
 8005f36:	230c      	movs	r3, #12
 8005f38:	602b      	str	r3, [r5, #0]
 8005f3a:	e7d6      	b.n	8005eea <_free_r+0x22>
 8005f3c:	6820      	ldr	r0, [r4, #0]
 8005f3e:	1821      	adds	r1, r4, r0
 8005f40:	428b      	cmp	r3, r1
 8005f42:	bf01      	itttt	eq
 8005f44:	6819      	ldreq	r1, [r3, #0]
 8005f46:	685b      	ldreq	r3, [r3, #4]
 8005f48:	1809      	addeq	r1, r1, r0
 8005f4a:	6021      	streq	r1, [r4, #0]
 8005f4c:	6063      	str	r3, [r4, #4]
 8005f4e:	6054      	str	r4, [r2, #4]
 8005f50:	e7cb      	b.n	8005eea <_free_r+0x22>
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	20000690 	.word	0x20000690

08005f58 <malloc>:
 8005f58:	4b02      	ldr	r3, [pc, #8]	; (8005f64 <malloc+0xc>)
 8005f5a:	4601      	mov	r1, r0
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	f000 b823 	b.w	8005fa8 <_malloc_r>
 8005f62:	bf00      	nop
 8005f64:	20000064 	.word	0x20000064

08005f68 <sbrk_aligned>:
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	4e0e      	ldr	r6, [pc, #56]	; (8005fa4 <sbrk_aligned+0x3c>)
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	6831      	ldr	r1, [r6, #0]
 8005f70:	4605      	mov	r5, r0
 8005f72:	b911      	cbnz	r1, 8005f7a <sbrk_aligned+0x12>
 8005f74:	f001 ff64 	bl	8007e40 <_sbrk_r>
 8005f78:	6030      	str	r0, [r6, #0]
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f001 ff5f 	bl	8007e40 <_sbrk_r>
 8005f82:	1c43      	adds	r3, r0, #1
 8005f84:	d00a      	beq.n	8005f9c <sbrk_aligned+0x34>
 8005f86:	1cc4      	adds	r4, r0, #3
 8005f88:	f024 0403 	bic.w	r4, r4, #3
 8005f8c:	42a0      	cmp	r0, r4
 8005f8e:	d007      	beq.n	8005fa0 <sbrk_aligned+0x38>
 8005f90:	1a21      	subs	r1, r4, r0
 8005f92:	4628      	mov	r0, r5
 8005f94:	f001 ff54 	bl	8007e40 <_sbrk_r>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d101      	bne.n	8005fa0 <sbrk_aligned+0x38>
 8005f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	20000694 	.word	0x20000694

08005fa8 <_malloc_r>:
 8005fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fac:	1ccd      	adds	r5, r1, #3
 8005fae:	f025 0503 	bic.w	r5, r5, #3
 8005fb2:	3508      	adds	r5, #8
 8005fb4:	2d0c      	cmp	r5, #12
 8005fb6:	bf38      	it	cc
 8005fb8:	250c      	movcc	r5, #12
 8005fba:	2d00      	cmp	r5, #0
 8005fbc:	4607      	mov	r7, r0
 8005fbe:	db01      	blt.n	8005fc4 <_malloc_r+0x1c>
 8005fc0:	42a9      	cmp	r1, r5
 8005fc2:	d905      	bls.n	8005fd0 <_malloc_r+0x28>
 8005fc4:	230c      	movs	r3, #12
 8005fc6:	2600      	movs	r6, #0
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	4630      	mov	r0, r6
 8005fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060a4 <_malloc_r+0xfc>
 8005fd4:	f000 f868 	bl	80060a8 <__malloc_lock>
 8005fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8005fdc:	461c      	mov	r4, r3
 8005fde:	bb5c      	cbnz	r4, 8006038 <_malloc_r+0x90>
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	f7ff ffc0 	bl	8005f68 <sbrk_aligned>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	4604      	mov	r4, r0
 8005fec:	d155      	bne.n	800609a <_malloc_r+0xf2>
 8005fee:	f8d8 4000 	ldr.w	r4, [r8]
 8005ff2:	4626      	mov	r6, r4
 8005ff4:	2e00      	cmp	r6, #0
 8005ff6:	d145      	bne.n	8006084 <_malloc_r+0xdc>
 8005ff8:	2c00      	cmp	r4, #0
 8005ffa:	d048      	beq.n	800608e <_malloc_r+0xe6>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	4631      	mov	r1, r6
 8006000:	4638      	mov	r0, r7
 8006002:	eb04 0903 	add.w	r9, r4, r3
 8006006:	f001 ff1b 	bl	8007e40 <_sbrk_r>
 800600a:	4581      	cmp	r9, r0
 800600c:	d13f      	bne.n	800608e <_malloc_r+0xe6>
 800600e:	6821      	ldr	r1, [r4, #0]
 8006010:	4638      	mov	r0, r7
 8006012:	1a6d      	subs	r5, r5, r1
 8006014:	4629      	mov	r1, r5
 8006016:	f7ff ffa7 	bl	8005f68 <sbrk_aligned>
 800601a:	3001      	adds	r0, #1
 800601c:	d037      	beq.n	800608e <_malloc_r+0xe6>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	442b      	add	r3, r5
 8006022:	6023      	str	r3, [r4, #0]
 8006024:	f8d8 3000 	ldr.w	r3, [r8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d038      	beq.n	800609e <_malloc_r+0xf6>
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	42a2      	cmp	r2, r4
 8006030:	d12b      	bne.n	800608a <_malloc_r+0xe2>
 8006032:	2200      	movs	r2, #0
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	e00f      	b.n	8006058 <_malloc_r+0xb0>
 8006038:	6822      	ldr	r2, [r4, #0]
 800603a:	1b52      	subs	r2, r2, r5
 800603c:	d41f      	bmi.n	800607e <_malloc_r+0xd6>
 800603e:	2a0b      	cmp	r2, #11
 8006040:	d917      	bls.n	8006072 <_malloc_r+0xca>
 8006042:	1961      	adds	r1, r4, r5
 8006044:	42a3      	cmp	r3, r4
 8006046:	6025      	str	r5, [r4, #0]
 8006048:	bf18      	it	ne
 800604a:	6059      	strne	r1, [r3, #4]
 800604c:	6863      	ldr	r3, [r4, #4]
 800604e:	bf08      	it	eq
 8006050:	f8c8 1000 	streq.w	r1, [r8]
 8006054:	5162      	str	r2, [r4, r5]
 8006056:	604b      	str	r3, [r1, #4]
 8006058:	4638      	mov	r0, r7
 800605a:	f104 060b 	add.w	r6, r4, #11
 800605e:	f000 f829 	bl	80060b4 <__malloc_unlock>
 8006062:	f026 0607 	bic.w	r6, r6, #7
 8006066:	1d23      	adds	r3, r4, #4
 8006068:	1af2      	subs	r2, r6, r3
 800606a:	d0ae      	beq.n	8005fca <_malloc_r+0x22>
 800606c:	1b9b      	subs	r3, r3, r6
 800606e:	50a3      	str	r3, [r4, r2]
 8006070:	e7ab      	b.n	8005fca <_malloc_r+0x22>
 8006072:	42a3      	cmp	r3, r4
 8006074:	6862      	ldr	r2, [r4, #4]
 8006076:	d1dd      	bne.n	8006034 <_malloc_r+0x8c>
 8006078:	f8c8 2000 	str.w	r2, [r8]
 800607c:	e7ec      	b.n	8006058 <_malloc_r+0xb0>
 800607e:	4623      	mov	r3, r4
 8006080:	6864      	ldr	r4, [r4, #4]
 8006082:	e7ac      	b.n	8005fde <_malloc_r+0x36>
 8006084:	4634      	mov	r4, r6
 8006086:	6876      	ldr	r6, [r6, #4]
 8006088:	e7b4      	b.n	8005ff4 <_malloc_r+0x4c>
 800608a:	4613      	mov	r3, r2
 800608c:	e7cc      	b.n	8006028 <_malloc_r+0x80>
 800608e:	230c      	movs	r3, #12
 8006090:	4638      	mov	r0, r7
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	f000 f80e 	bl	80060b4 <__malloc_unlock>
 8006098:	e797      	b.n	8005fca <_malloc_r+0x22>
 800609a:	6025      	str	r5, [r4, #0]
 800609c:	e7dc      	b.n	8006058 <_malloc_r+0xb0>
 800609e:	605b      	str	r3, [r3, #4]
 80060a0:	deff      	udf	#255	; 0xff
 80060a2:	bf00      	nop
 80060a4:	20000690 	.word	0x20000690

080060a8 <__malloc_lock>:
 80060a8:	4801      	ldr	r0, [pc, #4]	; (80060b0 <__malloc_lock+0x8>)
 80060aa:	f7ff b86b 	b.w	8005184 <__retarget_lock_acquire_recursive>
 80060ae:	bf00      	nop
 80060b0:	2000068c 	.word	0x2000068c

080060b4 <__malloc_unlock>:
 80060b4:	4801      	ldr	r0, [pc, #4]	; (80060bc <__malloc_unlock+0x8>)
 80060b6:	f7ff b866 	b.w	8005186 <__retarget_lock_release_recursive>
 80060ba:	bf00      	nop
 80060bc:	2000068c 	.word	0x2000068c

080060c0 <_Balloc>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	69c6      	ldr	r6, [r0, #28]
 80060c4:	4604      	mov	r4, r0
 80060c6:	460d      	mov	r5, r1
 80060c8:	b976      	cbnz	r6, 80060e8 <_Balloc+0x28>
 80060ca:	2010      	movs	r0, #16
 80060cc:	f7ff ff44 	bl	8005f58 <malloc>
 80060d0:	4602      	mov	r2, r0
 80060d2:	61e0      	str	r0, [r4, #28]
 80060d4:	b920      	cbnz	r0, 80060e0 <_Balloc+0x20>
 80060d6:	216b      	movs	r1, #107	; 0x6b
 80060d8:	4b17      	ldr	r3, [pc, #92]	; (8006138 <_Balloc+0x78>)
 80060da:	4818      	ldr	r0, [pc, #96]	; (800613c <_Balloc+0x7c>)
 80060dc:	f7ff f866 	bl	80051ac <__assert_func>
 80060e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060e4:	6006      	str	r6, [r0, #0]
 80060e6:	60c6      	str	r6, [r0, #12]
 80060e8:	69e6      	ldr	r6, [r4, #28]
 80060ea:	68f3      	ldr	r3, [r6, #12]
 80060ec:	b183      	cbz	r3, 8006110 <_Balloc+0x50>
 80060ee:	69e3      	ldr	r3, [r4, #28]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060f6:	b9b8      	cbnz	r0, 8006128 <_Balloc+0x68>
 80060f8:	2101      	movs	r1, #1
 80060fa:	fa01 f605 	lsl.w	r6, r1, r5
 80060fe:	1d72      	adds	r2, r6, #5
 8006100:	4620      	mov	r0, r4
 8006102:	0092      	lsls	r2, r2, #2
 8006104:	f001 fec7 	bl	8007e96 <_calloc_r>
 8006108:	b160      	cbz	r0, 8006124 <_Balloc+0x64>
 800610a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800610e:	e00e      	b.n	800612e <_Balloc+0x6e>
 8006110:	2221      	movs	r2, #33	; 0x21
 8006112:	2104      	movs	r1, #4
 8006114:	4620      	mov	r0, r4
 8006116:	f001 febe 	bl	8007e96 <_calloc_r>
 800611a:	69e3      	ldr	r3, [r4, #28]
 800611c:	60f0      	str	r0, [r6, #12]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e4      	bne.n	80060ee <_Balloc+0x2e>
 8006124:	2000      	movs	r0, #0
 8006126:	bd70      	pop	{r4, r5, r6, pc}
 8006128:	6802      	ldr	r2, [r0, #0]
 800612a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800612e:	2300      	movs	r3, #0
 8006130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006134:	e7f7      	b.n	8006126 <_Balloc+0x66>
 8006136:	bf00      	nop
 8006138:	0800886d 	.word	0x0800886d
 800613c:	080088ed 	.word	0x080088ed

08006140 <_Bfree>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	69c6      	ldr	r6, [r0, #28]
 8006144:	4605      	mov	r5, r0
 8006146:	460c      	mov	r4, r1
 8006148:	b976      	cbnz	r6, 8006168 <_Bfree+0x28>
 800614a:	2010      	movs	r0, #16
 800614c:	f7ff ff04 	bl	8005f58 <malloc>
 8006150:	4602      	mov	r2, r0
 8006152:	61e8      	str	r0, [r5, #28]
 8006154:	b920      	cbnz	r0, 8006160 <_Bfree+0x20>
 8006156:	218f      	movs	r1, #143	; 0x8f
 8006158:	4b08      	ldr	r3, [pc, #32]	; (800617c <_Bfree+0x3c>)
 800615a:	4809      	ldr	r0, [pc, #36]	; (8006180 <_Bfree+0x40>)
 800615c:	f7ff f826 	bl	80051ac <__assert_func>
 8006160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006164:	6006      	str	r6, [r0, #0]
 8006166:	60c6      	str	r6, [r0, #12]
 8006168:	b13c      	cbz	r4, 800617a <_Bfree+0x3a>
 800616a:	69eb      	ldr	r3, [r5, #28]
 800616c:	6862      	ldr	r2, [r4, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006174:	6021      	str	r1, [r4, #0]
 8006176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	0800886d 	.word	0x0800886d
 8006180:	080088ed 	.word	0x080088ed

08006184 <__multadd>:
 8006184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006188:	4607      	mov	r7, r0
 800618a:	460c      	mov	r4, r1
 800618c:	461e      	mov	r6, r3
 800618e:	2000      	movs	r0, #0
 8006190:	690d      	ldr	r5, [r1, #16]
 8006192:	f101 0c14 	add.w	ip, r1, #20
 8006196:	f8dc 3000 	ldr.w	r3, [ip]
 800619a:	3001      	adds	r0, #1
 800619c:	b299      	uxth	r1, r3
 800619e:	fb02 6101 	mla	r1, r2, r1, r6
 80061a2:	0c1e      	lsrs	r6, r3, #16
 80061a4:	0c0b      	lsrs	r3, r1, #16
 80061a6:	fb02 3306 	mla	r3, r2, r6, r3
 80061aa:	b289      	uxth	r1, r1
 80061ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061b0:	4285      	cmp	r5, r0
 80061b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061b6:	f84c 1b04 	str.w	r1, [ip], #4
 80061ba:	dcec      	bgt.n	8006196 <__multadd+0x12>
 80061bc:	b30e      	cbz	r6, 8006202 <__multadd+0x7e>
 80061be:	68a3      	ldr	r3, [r4, #8]
 80061c0:	42ab      	cmp	r3, r5
 80061c2:	dc19      	bgt.n	80061f8 <__multadd+0x74>
 80061c4:	6861      	ldr	r1, [r4, #4]
 80061c6:	4638      	mov	r0, r7
 80061c8:	3101      	adds	r1, #1
 80061ca:	f7ff ff79 	bl	80060c0 <_Balloc>
 80061ce:	4680      	mov	r8, r0
 80061d0:	b928      	cbnz	r0, 80061de <__multadd+0x5a>
 80061d2:	4602      	mov	r2, r0
 80061d4:	21ba      	movs	r1, #186	; 0xba
 80061d6:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <__multadd+0x84>)
 80061d8:	480c      	ldr	r0, [pc, #48]	; (800620c <__multadd+0x88>)
 80061da:	f7fe ffe7 	bl	80051ac <__assert_func>
 80061de:	6922      	ldr	r2, [r4, #16]
 80061e0:	f104 010c 	add.w	r1, r4, #12
 80061e4:	3202      	adds	r2, #2
 80061e6:	0092      	lsls	r2, r2, #2
 80061e8:	300c      	adds	r0, #12
 80061ea:	f001 fe39 	bl	8007e60 <memcpy>
 80061ee:	4621      	mov	r1, r4
 80061f0:	4638      	mov	r0, r7
 80061f2:	f7ff ffa5 	bl	8006140 <_Bfree>
 80061f6:	4644      	mov	r4, r8
 80061f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061fc:	3501      	adds	r5, #1
 80061fe:	615e      	str	r6, [r3, #20]
 8006200:	6125      	str	r5, [r4, #16]
 8006202:	4620      	mov	r0, r4
 8006204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006208:	080088dc 	.word	0x080088dc
 800620c:	080088ed 	.word	0x080088ed

08006210 <__s2b>:
 8006210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006214:	4615      	mov	r5, r2
 8006216:	2209      	movs	r2, #9
 8006218:	461f      	mov	r7, r3
 800621a:	3308      	adds	r3, #8
 800621c:	460c      	mov	r4, r1
 800621e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006222:	4606      	mov	r6, r0
 8006224:	2201      	movs	r2, #1
 8006226:	2100      	movs	r1, #0
 8006228:	429a      	cmp	r2, r3
 800622a:	db09      	blt.n	8006240 <__s2b+0x30>
 800622c:	4630      	mov	r0, r6
 800622e:	f7ff ff47 	bl	80060c0 <_Balloc>
 8006232:	b940      	cbnz	r0, 8006246 <__s2b+0x36>
 8006234:	4602      	mov	r2, r0
 8006236:	21d3      	movs	r1, #211	; 0xd3
 8006238:	4b18      	ldr	r3, [pc, #96]	; (800629c <__s2b+0x8c>)
 800623a:	4819      	ldr	r0, [pc, #100]	; (80062a0 <__s2b+0x90>)
 800623c:	f7fe ffb6 	bl	80051ac <__assert_func>
 8006240:	0052      	lsls	r2, r2, #1
 8006242:	3101      	adds	r1, #1
 8006244:	e7f0      	b.n	8006228 <__s2b+0x18>
 8006246:	9b08      	ldr	r3, [sp, #32]
 8006248:	2d09      	cmp	r5, #9
 800624a:	6143      	str	r3, [r0, #20]
 800624c:	f04f 0301 	mov.w	r3, #1
 8006250:	6103      	str	r3, [r0, #16]
 8006252:	dd16      	ble.n	8006282 <__s2b+0x72>
 8006254:	f104 0909 	add.w	r9, r4, #9
 8006258:	46c8      	mov	r8, r9
 800625a:	442c      	add	r4, r5
 800625c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006260:	4601      	mov	r1, r0
 8006262:	220a      	movs	r2, #10
 8006264:	4630      	mov	r0, r6
 8006266:	3b30      	subs	r3, #48	; 0x30
 8006268:	f7ff ff8c 	bl	8006184 <__multadd>
 800626c:	45a0      	cmp	r8, r4
 800626e:	d1f5      	bne.n	800625c <__s2b+0x4c>
 8006270:	f1a5 0408 	sub.w	r4, r5, #8
 8006274:	444c      	add	r4, r9
 8006276:	1b2d      	subs	r5, r5, r4
 8006278:	1963      	adds	r3, r4, r5
 800627a:	42bb      	cmp	r3, r7
 800627c:	db04      	blt.n	8006288 <__s2b+0x78>
 800627e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006282:	2509      	movs	r5, #9
 8006284:	340a      	adds	r4, #10
 8006286:	e7f6      	b.n	8006276 <__s2b+0x66>
 8006288:	f814 3b01 	ldrb.w	r3, [r4], #1
 800628c:	4601      	mov	r1, r0
 800628e:	220a      	movs	r2, #10
 8006290:	4630      	mov	r0, r6
 8006292:	3b30      	subs	r3, #48	; 0x30
 8006294:	f7ff ff76 	bl	8006184 <__multadd>
 8006298:	e7ee      	b.n	8006278 <__s2b+0x68>
 800629a:	bf00      	nop
 800629c:	080088dc 	.word	0x080088dc
 80062a0:	080088ed 	.word	0x080088ed

080062a4 <__hi0bits>:
 80062a4:	0c02      	lsrs	r2, r0, #16
 80062a6:	0412      	lsls	r2, r2, #16
 80062a8:	4603      	mov	r3, r0
 80062aa:	b9ca      	cbnz	r2, 80062e0 <__hi0bits+0x3c>
 80062ac:	0403      	lsls	r3, r0, #16
 80062ae:	2010      	movs	r0, #16
 80062b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80062b4:	bf04      	itt	eq
 80062b6:	021b      	lsleq	r3, r3, #8
 80062b8:	3008      	addeq	r0, #8
 80062ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80062be:	bf04      	itt	eq
 80062c0:	011b      	lsleq	r3, r3, #4
 80062c2:	3004      	addeq	r0, #4
 80062c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80062c8:	bf04      	itt	eq
 80062ca:	009b      	lsleq	r3, r3, #2
 80062cc:	3002      	addeq	r0, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	db05      	blt.n	80062de <__hi0bits+0x3a>
 80062d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80062d6:	f100 0001 	add.w	r0, r0, #1
 80062da:	bf08      	it	eq
 80062dc:	2020      	moveq	r0, #32
 80062de:	4770      	bx	lr
 80062e0:	2000      	movs	r0, #0
 80062e2:	e7e5      	b.n	80062b0 <__hi0bits+0xc>

080062e4 <__lo0bits>:
 80062e4:	6803      	ldr	r3, [r0, #0]
 80062e6:	4602      	mov	r2, r0
 80062e8:	f013 0007 	ands.w	r0, r3, #7
 80062ec:	d00b      	beq.n	8006306 <__lo0bits+0x22>
 80062ee:	07d9      	lsls	r1, r3, #31
 80062f0:	d421      	bmi.n	8006336 <__lo0bits+0x52>
 80062f2:	0798      	lsls	r0, r3, #30
 80062f4:	bf49      	itett	mi
 80062f6:	085b      	lsrmi	r3, r3, #1
 80062f8:	089b      	lsrpl	r3, r3, #2
 80062fa:	2001      	movmi	r0, #1
 80062fc:	6013      	strmi	r3, [r2, #0]
 80062fe:	bf5c      	itt	pl
 8006300:	2002      	movpl	r0, #2
 8006302:	6013      	strpl	r3, [r2, #0]
 8006304:	4770      	bx	lr
 8006306:	b299      	uxth	r1, r3
 8006308:	b909      	cbnz	r1, 800630e <__lo0bits+0x2a>
 800630a:	2010      	movs	r0, #16
 800630c:	0c1b      	lsrs	r3, r3, #16
 800630e:	b2d9      	uxtb	r1, r3
 8006310:	b909      	cbnz	r1, 8006316 <__lo0bits+0x32>
 8006312:	3008      	adds	r0, #8
 8006314:	0a1b      	lsrs	r3, r3, #8
 8006316:	0719      	lsls	r1, r3, #28
 8006318:	bf04      	itt	eq
 800631a:	091b      	lsreq	r3, r3, #4
 800631c:	3004      	addeq	r0, #4
 800631e:	0799      	lsls	r1, r3, #30
 8006320:	bf04      	itt	eq
 8006322:	089b      	lsreq	r3, r3, #2
 8006324:	3002      	addeq	r0, #2
 8006326:	07d9      	lsls	r1, r3, #31
 8006328:	d403      	bmi.n	8006332 <__lo0bits+0x4e>
 800632a:	085b      	lsrs	r3, r3, #1
 800632c:	f100 0001 	add.w	r0, r0, #1
 8006330:	d003      	beq.n	800633a <__lo0bits+0x56>
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	4770      	bx	lr
 8006336:	2000      	movs	r0, #0
 8006338:	4770      	bx	lr
 800633a:	2020      	movs	r0, #32
 800633c:	4770      	bx	lr
	...

08006340 <__i2b>:
 8006340:	b510      	push	{r4, lr}
 8006342:	460c      	mov	r4, r1
 8006344:	2101      	movs	r1, #1
 8006346:	f7ff febb 	bl	80060c0 <_Balloc>
 800634a:	4602      	mov	r2, r0
 800634c:	b928      	cbnz	r0, 800635a <__i2b+0x1a>
 800634e:	f240 1145 	movw	r1, #325	; 0x145
 8006352:	4b04      	ldr	r3, [pc, #16]	; (8006364 <__i2b+0x24>)
 8006354:	4804      	ldr	r0, [pc, #16]	; (8006368 <__i2b+0x28>)
 8006356:	f7fe ff29 	bl	80051ac <__assert_func>
 800635a:	2301      	movs	r3, #1
 800635c:	6144      	str	r4, [r0, #20]
 800635e:	6103      	str	r3, [r0, #16]
 8006360:	bd10      	pop	{r4, pc}
 8006362:	bf00      	nop
 8006364:	080088dc 	.word	0x080088dc
 8006368:	080088ed 	.word	0x080088ed

0800636c <__multiply>:
 800636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006370:	4691      	mov	r9, r2
 8006372:	690a      	ldr	r2, [r1, #16]
 8006374:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006378:	460c      	mov	r4, r1
 800637a:	429a      	cmp	r2, r3
 800637c:	bfbe      	ittt	lt
 800637e:	460b      	movlt	r3, r1
 8006380:	464c      	movlt	r4, r9
 8006382:	4699      	movlt	r9, r3
 8006384:	6927      	ldr	r7, [r4, #16]
 8006386:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800638a:	68a3      	ldr	r3, [r4, #8]
 800638c:	6861      	ldr	r1, [r4, #4]
 800638e:	eb07 060a 	add.w	r6, r7, sl
 8006392:	42b3      	cmp	r3, r6
 8006394:	b085      	sub	sp, #20
 8006396:	bfb8      	it	lt
 8006398:	3101      	addlt	r1, #1
 800639a:	f7ff fe91 	bl	80060c0 <_Balloc>
 800639e:	b930      	cbnz	r0, 80063ae <__multiply+0x42>
 80063a0:	4602      	mov	r2, r0
 80063a2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80063a6:	4b43      	ldr	r3, [pc, #268]	; (80064b4 <__multiply+0x148>)
 80063a8:	4843      	ldr	r0, [pc, #268]	; (80064b8 <__multiply+0x14c>)
 80063aa:	f7fe feff 	bl	80051ac <__assert_func>
 80063ae:	f100 0514 	add.w	r5, r0, #20
 80063b2:	462b      	mov	r3, r5
 80063b4:	2200      	movs	r2, #0
 80063b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80063ba:	4543      	cmp	r3, r8
 80063bc:	d321      	bcc.n	8006402 <__multiply+0x96>
 80063be:	f104 0314 	add.w	r3, r4, #20
 80063c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80063c6:	f109 0314 	add.w	r3, r9, #20
 80063ca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80063ce:	9202      	str	r2, [sp, #8]
 80063d0:	1b3a      	subs	r2, r7, r4
 80063d2:	3a15      	subs	r2, #21
 80063d4:	f022 0203 	bic.w	r2, r2, #3
 80063d8:	3204      	adds	r2, #4
 80063da:	f104 0115 	add.w	r1, r4, #21
 80063de:	428f      	cmp	r7, r1
 80063e0:	bf38      	it	cc
 80063e2:	2204      	movcc	r2, #4
 80063e4:	9201      	str	r2, [sp, #4]
 80063e6:	9a02      	ldr	r2, [sp, #8]
 80063e8:	9303      	str	r3, [sp, #12]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d80c      	bhi.n	8006408 <__multiply+0x9c>
 80063ee:	2e00      	cmp	r6, #0
 80063f0:	dd03      	ble.n	80063fa <__multiply+0x8e>
 80063f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d05a      	beq.n	80064b0 <__multiply+0x144>
 80063fa:	6106      	str	r6, [r0, #16]
 80063fc:	b005      	add	sp, #20
 80063fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006402:	f843 2b04 	str.w	r2, [r3], #4
 8006406:	e7d8      	b.n	80063ba <__multiply+0x4e>
 8006408:	f8b3 a000 	ldrh.w	sl, [r3]
 800640c:	f1ba 0f00 	cmp.w	sl, #0
 8006410:	d023      	beq.n	800645a <__multiply+0xee>
 8006412:	46a9      	mov	r9, r5
 8006414:	f04f 0c00 	mov.w	ip, #0
 8006418:	f104 0e14 	add.w	lr, r4, #20
 800641c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006420:	f8d9 1000 	ldr.w	r1, [r9]
 8006424:	fa1f fb82 	uxth.w	fp, r2
 8006428:	b289      	uxth	r1, r1
 800642a:	fb0a 110b 	mla	r1, sl, fp, r1
 800642e:	4461      	add	r1, ip
 8006430:	f8d9 c000 	ldr.w	ip, [r9]
 8006434:	0c12      	lsrs	r2, r2, #16
 8006436:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800643a:	fb0a c202 	mla	r2, sl, r2, ip
 800643e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006442:	b289      	uxth	r1, r1
 8006444:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006448:	4577      	cmp	r7, lr
 800644a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800644e:	f849 1b04 	str.w	r1, [r9], #4
 8006452:	d8e3      	bhi.n	800641c <__multiply+0xb0>
 8006454:	9a01      	ldr	r2, [sp, #4]
 8006456:	f845 c002 	str.w	ip, [r5, r2]
 800645a:	9a03      	ldr	r2, [sp, #12]
 800645c:	3304      	adds	r3, #4
 800645e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006462:	f1b9 0f00 	cmp.w	r9, #0
 8006466:	d021      	beq.n	80064ac <__multiply+0x140>
 8006468:	46ae      	mov	lr, r5
 800646a:	f04f 0a00 	mov.w	sl, #0
 800646e:	6829      	ldr	r1, [r5, #0]
 8006470:	f104 0c14 	add.w	ip, r4, #20
 8006474:	f8bc b000 	ldrh.w	fp, [ip]
 8006478:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800647c:	b289      	uxth	r1, r1
 800647e:	fb09 220b 	mla	r2, r9, fp, r2
 8006482:	4452      	add	r2, sl
 8006484:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006488:	f84e 1b04 	str.w	r1, [lr], #4
 800648c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006490:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006494:	f8be 1000 	ldrh.w	r1, [lr]
 8006498:	4567      	cmp	r7, ip
 800649a:	fb09 110a 	mla	r1, r9, sl, r1
 800649e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80064a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064a6:	d8e5      	bhi.n	8006474 <__multiply+0x108>
 80064a8:	9a01      	ldr	r2, [sp, #4]
 80064aa:	50a9      	str	r1, [r5, r2]
 80064ac:	3504      	adds	r5, #4
 80064ae:	e79a      	b.n	80063e6 <__multiply+0x7a>
 80064b0:	3e01      	subs	r6, #1
 80064b2:	e79c      	b.n	80063ee <__multiply+0x82>
 80064b4:	080088dc 	.word	0x080088dc
 80064b8:	080088ed 	.word	0x080088ed

080064bc <__pow5mult>:
 80064bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c0:	4615      	mov	r5, r2
 80064c2:	f012 0203 	ands.w	r2, r2, #3
 80064c6:	4606      	mov	r6, r0
 80064c8:	460f      	mov	r7, r1
 80064ca:	d007      	beq.n	80064dc <__pow5mult+0x20>
 80064cc:	4c25      	ldr	r4, [pc, #148]	; (8006564 <__pow5mult+0xa8>)
 80064ce:	3a01      	subs	r2, #1
 80064d0:	2300      	movs	r3, #0
 80064d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064d6:	f7ff fe55 	bl	8006184 <__multadd>
 80064da:	4607      	mov	r7, r0
 80064dc:	10ad      	asrs	r5, r5, #2
 80064de:	d03d      	beq.n	800655c <__pow5mult+0xa0>
 80064e0:	69f4      	ldr	r4, [r6, #28]
 80064e2:	b97c      	cbnz	r4, 8006504 <__pow5mult+0x48>
 80064e4:	2010      	movs	r0, #16
 80064e6:	f7ff fd37 	bl	8005f58 <malloc>
 80064ea:	4602      	mov	r2, r0
 80064ec:	61f0      	str	r0, [r6, #28]
 80064ee:	b928      	cbnz	r0, 80064fc <__pow5mult+0x40>
 80064f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80064f4:	4b1c      	ldr	r3, [pc, #112]	; (8006568 <__pow5mult+0xac>)
 80064f6:	481d      	ldr	r0, [pc, #116]	; (800656c <__pow5mult+0xb0>)
 80064f8:	f7fe fe58 	bl	80051ac <__assert_func>
 80064fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006500:	6004      	str	r4, [r0, #0]
 8006502:	60c4      	str	r4, [r0, #12]
 8006504:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800650c:	b94c      	cbnz	r4, 8006522 <__pow5mult+0x66>
 800650e:	f240 2171 	movw	r1, #625	; 0x271
 8006512:	4630      	mov	r0, r6
 8006514:	f7ff ff14 	bl	8006340 <__i2b>
 8006518:	2300      	movs	r3, #0
 800651a:	4604      	mov	r4, r0
 800651c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006520:	6003      	str	r3, [r0, #0]
 8006522:	f04f 0900 	mov.w	r9, #0
 8006526:	07eb      	lsls	r3, r5, #31
 8006528:	d50a      	bpl.n	8006540 <__pow5mult+0x84>
 800652a:	4639      	mov	r1, r7
 800652c:	4622      	mov	r2, r4
 800652e:	4630      	mov	r0, r6
 8006530:	f7ff ff1c 	bl	800636c <__multiply>
 8006534:	4680      	mov	r8, r0
 8006536:	4639      	mov	r1, r7
 8006538:	4630      	mov	r0, r6
 800653a:	f7ff fe01 	bl	8006140 <_Bfree>
 800653e:	4647      	mov	r7, r8
 8006540:	106d      	asrs	r5, r5, #1
 8006542:	d00b      	beq.n	800655c <__pow5mult+0xa0>
 8006544:	6820      	ldr	r0, [r4, #0]
 8006546:	b938      	cbnz	r0, 8006558 <__pow5mult+0x9c>
 8006548:	4622      	mov	r2, r4
 800654a:	4621      	mov	r1, r4
 800654c:	4630      	mov	r0, r6
 800654e:	f7ff ff0d 	bl	800636c <__multiply>
 8006552:	6020      	str	r0, [r4, #0]
 8006554:	f8c0 9000 	str.w	r9, [r0]
 8006558:	4604      	mov	r4, r0
 800655a:	e7e4      	b.n	8006526 <__pow5mult+0x6a>
 800655c:	4638      	mov	r0, r7
 800655e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006562:	bf00      	nop
 8006564:	08008a38 	.word	0x08008a38
 8006568:	0800886d 	.word	0x0800886d
 800656c:	080088ed 	.word	0x080088ed

08006570 <__lshift>:
 8006570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	460c      	mov	r4, r1
 8006576:	4607      	mov	r7, r0
 8006578:	4691      	mov	r9, r2
 800657a:	6923      	ldr	r3, [r4, #16]
 800657c:	6849      	ldr	r1, [r1, #4]
 800657e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006582:	68a3      	ldr	r3, [r4, #8]
 8006584:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006588:	f108 0601 	add.w	r6, r8, #1
 800658c:	42b3      	cmp	r3, r6
 800658e:	db0b      	blt.n	80065a8 <__lshift+0x38>
 8006590:	4638      	mov	r0, r7
 8006592:	f7ff fd95 	bl	80060c0 <_Balloc>
 8006596:	4605      	mov	r5, r0
 8006598:	b948      	cbnz	r0, 80065ae <__lshift+0x3e>
 800659a:	4602      	mov	r2, r0
 800659c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80065a0:	4b27      	ldr	r3, [pc, #156]	; (8006640 <__lshift+0xd0>)
 80065a2:	4828      	ldr	r0, [pc, #160]	; (8006644 <__lshift+0xd4>)
 80065a4:	f7fe fe02 	bl	80051ac <__assert_func>
 80065a8:	3101      	adds	r1, #1
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	e7ee      	b.n	800658c <__lshift+0x1c>
 80065ae:	2300      	movs	r3, #0
 80065b0:	f100 0114 	add.w	r1, r0, #20
 80065b4:	f100 0210 	add.w	r2, r0, #16
 80065b8:	4618      	mov	r0, r3
 80065ba:	4553      	cmp	r3, sl
 80065bc:	db33      	blt.n	8006626 <__lshift+0xb6>
 80065be:	6920      	ldr	r0, [r4, #16]
 80065c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065c4:	f104 0314 	add.w	r3, r4, #20
 80065c8:	f019 091f 	ands.w	r9, r9, #31
 80065cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065d4:	d02b      	beq.n	800662e <__lshift+0xbe>
 80065d6:	468a      	mov	sl, r1
 80065d8:	2200      	movs	r2, #0
 80065da:	f1c9 0e20 	rsb	lr, r9, #32
 80065de:	6818      	ldr	r0, [r3, #0]
 80065e0:	fa00 f009 	lsl.w	r0, r0, r9
 80065e4:	4310      	orrs	r0, r2
 80065e6:	f84a 0b04 	str.w	r0, [sl], #4
 80065ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ee:	459c      	cmp	ip, r3
 80065f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80065f4:	d8f3      	bhi.n	80065de <__lshift+0x6e>
 80065f6:	ebac 0304 	sub.w	r3, ip, r4
 80065fa:	3b15      	subs	r3, #21
 80065fc:	f023 0303 	bic.w	r3, r3, #3
 8006600:	3304      	adds	r3, #4
 8006602:	f104 0015 	add.w	r0, r4, #21
 8006606:	4584      	cmp	ip, r0
 8006608:	bf38      	it	cc
 800660a:	2304      	movcc	r3, #4
 800660c:	50ca      	str	r2, [r1, r3]
 800660e:	b10a      	cbz	r2, 8006614 <__lshift+0xa4>
 8006610:	f108 0602 	add.w	r6, r8, #2
 8006614:	3e01      	subs	r6, #1
 8006616:	4638      	mov	r0, r7
 8006618:	4621      	mov	r1, r4
 800661a:	612e      	str	r6, [r5, #16]
 800661c:	f7ff fd90 	bl	8006140 <_Bfree>
 8006620:	4628      	mov	r0, r5
 8006622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006626:	f842 0f04 	str.w	r0, [r2, #4]!
 800662a:	3301      	adds	r3, #1
 800662c:	e7c5      	b.n	80065ba <__lshift+0x4a>
 800662e:	3904      	subs	r1, #4
 8006630:	f853 2b04 	ldr.w	r2, [r3], #4
 8006634:	459c      	cmp	ip, r3
 8006636:	f841 2f04 	str.w	r2, [r1, #4]!
 800663a:	d8f9      	bhi.n	8006630 <__lshift+0xc0>
 800663c:	e7ea      	b.n	8006614 <__lshift+0xa4>
 800663e:	bf00      	nop
 8006640:	080088dc 	.word	0x080088dc
 8006644:	080088ed 	.word	0x080088ed

08006648 <__mcmp>:
 8006648:	4603      	mov	r3, r0
 800664a:	690a      	ldr	r2, [r1, #16]
 800664c:	6900      	ldr	r0, [r0, #16]
 800664e:	b530      	push	{r4, r5, lr}
 8006650:	1a80      	subs	r0, r0, r2
 8006652:	d10d      	bne.n	8006670 <__mcmp+0x28>
 8006654:	3314      	adds	r3, #20
 8006656:	3114      	adds	r1, #20
 8006658:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800665c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006660:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006664:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006668:	4295      	cmp	r5, r2
 800666a:	d002      	beq.n	8006672 <__mcmp+0x2a>
 800666c:	d304      	bcc.n	8006678 <__mcmp+0x30>
 800666e:	2001      	movs	r0, #1
 8006670:	bd30      	pop	{r4, r5, pc}
 8006672:	42a3      	cmp	r3, r4
 8006674:	d3f4      	bcc.n	8006660 <__mcmp+0x18>
 8006676:	e7fb      	b.n	8006670 <__mcmp+0x28>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	e7f8      	b.n	8006670 <__mcmp+0x28>
	...

08006680 <__mdiff>:
 8006680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	460d      	mov	r5, r1
 8006686:	4607      	mov	r7, r0
 8006688:	4611      	mov	r1, r2
 800668a:	4628      	mov	r0, r5
 800668c:	4614      	mov	r4, r2
 800668e:	f7ff ffdb 	bl	8006648 <__mcmp>
 8006692:	1e06      	subs	r6, r0, #0
 8006694:	d111      	bne.n	80066ba <__mdiff+0x3a>
 8006696:	4631      	mov	r1, r6
 8006698:	4638      	mov	r0, r7
 800669a:	f7ff fd11 	bl	80060c0 <_Balloc>
 800669e:	4602      	mov	r2, r0
 80066a0:	b928      	cbnz	r0, 80066ae <__mdiff+0x2e>
 80066a2:	f240 2137 	movw	r1, #567	; 0x237
 80066a6:	4b3a      	ldr	r3, [pc, #232]	; (8006790 <__mdiff+0x110>)
 80066a8:	483a      	ldr	r0, [pc, #232]	; (8006794 <__mdiff+0x114>)
 80066aa:	f7fe fd7f 	bl	80051ac <__assert_func>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80066b4:	4610      	mov	r0, r2
 80066b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ba:	bfa4      	itt	ge
 80066bc:	4623      	movge	r3, r4
 80066be:	462c      	movge	r4, r5
 80066c0:	4638      	mov	r0, r7
 80066c2:	6861      	ldr	r1, [r4, #4]
 80066c4:	bfa6      	itte	ge
 80066c6:	461d      	movge	r5, r3
 80066c8:	2600      	movge	r6, #0
 80066ca:	2601      	movlt	r6, #1
 80066cc:	f7ff fcf8 	bl	80060c0 <_Balloc>
 80066d0:	4602      	mov	r2, r0
 80066d2:	b918      	cbnz	r0, 80066dc <__mdiff+0x5c>
 80066d4:	f240 2145 	movw	r1, #581	; 0x245
 80066d8:	4b2d      	ldr	r3, [pc, #180]	; (8006790 <__mdiff+0x110>)
 80066da:	e7e5      	b.n	80066a8 <__mdiff+0x28>
 80066dc:	f102 0814 	add.w	r8, r2, #20
 80066e0:	46c2      	mov	sl, r8
 80066e2:	f04f 0c00 	mov.w	ip, #0
 80066e6:	6927      	ldr	r7, [r4, #16]
 80066e8:	60c6      	str	r6, [r0, #12]
 80066ea:	692e      	ldr	r6, [r5, #16]
 80066ec:	f104 0014 	add.w	r0, r4, #20
 80066f0:	f105 0914 	add.w	r9, r5, #20
 80066f4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80066f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80066fc:	3410      	adds	r4, #16
 80066fe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006702:	f859 3b04 	ldr.w	r3, [r9], #4
 8006706:	fa1f f18b 	uxth.w	r1, fp
 800670a:	4461      	add	r1, ip
 800670c:	fa1f fc83 	uxth.w	ip, r3
 8006710:	0c1b      	lsrs	r3, r3, #16
 8006712:	eba1 010c 	sub.w	r1, r1, ip
 8006716:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800671a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800671e:	b289      	uxth	r1, r1
 8006720:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006724:	454e      	cmp	r6, r9
 8006726:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800672a:	f84a 1b04 	str.w	r1, [sl], #4
 800672e:	d8e6      	bhi.n	80066fe <__mdiff+0x7e>
 8006730:	1b73      	subs	r3, r6, r5
 8006732:	3b15      	subs	r3, #21
 8006734:	f023 0303 	bic.w	r3, r3, #3
 8006738:	3515      	adds	r5, #21
 800673a:	3304      	adds	r3, #4
 800673c:	42ae      	cmp	r6, r5
 800673e:	bf38      	it	cc
 8006740:	2304      	movcc	r3, #4
 8006742:	4418      	add	r0, r3
 8006744:	4443      	add	r3, r8
 8006746:	461e      	mov	r6, r3
 8006748:	4605      	mov	r5, r0
 800674a:	4575      	cmp	r5, lr
 800674c:	d30e      	bcc.n	800676c <__mdiff+0xec>
 800674e:	f10e 0103 	add.w	r1, lr, #3
 8006752:	1a09      	subs	r1, r1, r0
 8006754:	f021 0103 	bic.w	r1, r1, #3
 8006758:	3803      	subs	r0, #3
 800675a:	4586      	cmp	lr, r0
 800675c:	bf38      	it	cc
 800675e:	2100      	movcc	r1, #0
 8006760:	440b      	add	r3, r1
 8006762:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006766:	b189      	cbz	r1, 800678c <__mdiff+0x10c>
 8006768:	6117      	str	r7, [r2, #16]
 800676a:	e7a3      	b.n	80066b4 <__mdiff+0x34>
 800676c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006770:	fa1f f188 	uxth.w	r1, r8
 8006774:	4461      	add	r1, ip
 8006776:	140c      	asrs	r4, r1, #16
 8006778:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800677c:	b289      	uxth	r1, r1
 800677e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006782:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006786:	f846 1b04 	str.w	r1, [r6], #4
 800678a:	e7de      	b.n	800674a <__mdiff+0xca>
 800678c:	3f01      	subs	r7, #1
 800678e:	e7e8      	b.n	8006762 <__mdiff+0xe2>
 8006790:	080088dc 	.word	0x080088dc
 8006794:	080088ed 	.word	0x080088ed

08006798 <__ulp>:
 8006798:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <__ulp+0x3c>)
 800679a:	400b      	ands	r3, r1
 800679c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dc08      	bgt.n	80067b6 <__ulp+0x1e>
 80067a4:	425b      	negs	r3, r3
 80067a6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80067aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80067ae:	da04      	bge.n	80067ba <__ulp+0x22>
 80067b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80067b4:	4113      	asrs	r3, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	e008      	b.n	80067cc <__ulp+0x34>
 80067ba:	f1a2 0314 	sub.w	r3, r2, #20
 80067be:	2b1e      	cmp	r3, #30
 80067c0:	bfd6      	itet	le
 80067c2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80067c6:	2201      	movgt	r2, #1
 80067c8:	40da      	lsrle	r2, r3
 80067ca:	2300      	movs	r3, #0
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	7ff00000 	.word	0x7ff00000

080067d8 <__b2d>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	6905      	ldr	r5, [r0, #16]
 80067dc:	f100 0714 	add.w	r7, r0, #20
 80067e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80067e4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80067e8:	1f2e      	subs	r6, r5, #4
 80067ea:	4620      	mov	r0, r4
 80067ec:	f7ff fd5a 	bl	80062a4 <__hi0bits>
 80067f0:	f1c0 0220 	rsb	r2, r0, #32
 80067f4:	280a      	cmp	r0, #10
 80067f6:	4603      	mov	r3, r0
 80067f8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006864 <__b2d+0x8c>
 80067fc:	600a      	str	r2, [r1, #0]
 80067fe:	dc12      	bgt.n	8006826 <__b2d+0x4e>
 8006800:	f1c0 0e0b 	rsb	lr, r0, #11
 8006804:	fa24 f20e 	lsr.w	r2, r4, lr
 8006808:	42b7      	cmp	r7, r6
 800680a:	ea42 010c 	orr.w	r1, r2, ip
 800680e:	bf2c      	ite	cs
 8006810:	2200      	movcs	r2, #0
 8006812:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006816:	3315      	adds	r3, #21
 8006818:	fa04 f303 	lsl.w	r3, r4, r3
 800681c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006820:	431a      	orrs	r2, r3
 8006822:	4610      	mov	r0, r2
 8006824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006826:	42b7      	cmp	r7, r6
 8006828:	bf2e      	itee	cs
 800682a:	2200      	movcs	r2, #0
 800682c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006830:	f1a5 0608 	subcc.w	r6, r5, #8
 8006834:	3b0b      	subs	r3, #11
 8006836:	d012      	beq.n	800685e <__b2d+0x86>
 8006838:	f1c3 0520 	rsb	r5, r3, #32
 800683c:	fa22 f105 	lsr.w	r1, r2, r5
 8006840:	409c      	lsls	r4, r3
 8006842:	430c      	orrs	r4, r1
 8006844:	42be      	cmp	r6, r7
 8006846:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800684a:	bf94      	ite	ls
 800684c:	2400      	movls	r4, #0
 800684e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006852:	409a      	lsls	r2, r3
 8006854:	40ec      	lsrs	r4, r5
 8006856:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800685a:	4322      	orrs	r2, r4
 800685c:	e7e1      	b.n	8006822 <__b2d+0x4a>
 800685e:	ea44 010c 	orr.w	r1, r4, ip
 8006862:	e7de      	b.n	8006822 <__b2d+0x4a>
 8006864:	3ff00000 	.word	0x3ff00000

08006868 <__d2b>:
 8006868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800686a:	2101      	movs	r1, #1
 800686c:	4617      	mov	r7, r2
 800686e:	461c      	mov	r4, r3
 8006870:	9e08      	ldr	r6, [sp, #32]
 8006872:	f7ff fc25 	bl	80060c0 <_Balloc>
 8006876:	4605      	mov	r5, r0
 8006878:	b930      	cbnz	r0, 8006888 <__d2b+0x20>
 800687a:	4602      	mov	r2, r0
 800687c:	f240 310f 	movw	r1, #783	; 0x30f
 8006880:	4b22      	ldr	r3, [pc, #136]	; (800690c <__d2b+0xa4>)
 8006882:	4823      	ldr	r0, [pc, #140]	; (8006910 <__d2b+0xa8>)
 8006884:	f7fe fc92 	bl	80051ac <__assert_func>
 8006888:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800688c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006890:	bb24      	cbnz	r4, 80068dc <__d2b+0x74>
 8006892:	2f00      	cmp	r7, #0
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	d026      	beq.n	80068e6 <__d2b+0x7e>
 8006898:	4668      	mov	r0, sp
 800689a:	9700      	str	r7, [sp, #0]
 800689c:	f7ff fd22 	bl	80062e4 <__lo0bits>
 80068a0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80068a4:	b1e8      	cbz	r0, 80068e2 <__d2b+0x7a>
 80068a6:	f1c0 0320 	rsb	r3, r0, #32
 80068aa:	fa02 f303 	lsl.w	r3, r2, r3
 80068ae:	430b      	orrs	r3, r1
 80068b0:	40c2      	lsrs	r2, r0
 80068b2:	616b      	str	r3, [r5, #20]
 80068b4:	9201      	str	r2, [sp, #4]
 80068b6:	9b01      	ldr	r3, [sp, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	bf14      	ite	ne
 80068bc:	2102      	movne	r1, #2
 80068be:	2101      	moveq	r1, #1
 80068c0:	61ab      	str	r3, [r5, #24]
 80068c2:	6129      	str	r1, [r5, #16]
 80068c4:	b1bc      	cbz	r4, 80068f6 <__d2b+0x8e>
 80068c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80068ca:	4404      	add	r4, r0
 80068cc:	6034      	str	r4, [r6, #0]
 80068ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d4:	6018      	str	r0, [r3, #0]
 80068d6:	4628      	mov	r0, r5
 80068d8:	b003      	add	sp, #12
 80068da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068e0:	e7d7      	b.n	8006892 <__d2b+0x2a>
 80068e2:	6169      	str	r1, [r5, #20]
 80068e4:	e7e7      	b.n	80068b6 <__d2b+0x4e>
 80068e6:	a801      	add	r0, sp, #4
 80068e8:	f7ff fcfc 	bl	80062e4 <__lo0bits>
 80068ec:	9b01      	ldr	r3, [sp, #4]
 80068ee:	2101      	movs	r1, #1
 80068f0:	616b      	str	r3, [r5, #20]
 80068f2:	3020      	adds	r0, #32
 80068f4:	e7e5      	b.n	80068c2 <__d2b+0x5a>
 80068f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068fa:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80068fe:	6030      	str	r0, [r6, #0]
 8006900:	6918      	ldr	r0, [r3, #16]
 8006902:	f7ff fccf 	bl	80062a4 <__hi0bits>
 8006906:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800690a:	e7e2      	b.n	80068d2 <__d2b+0x6a>
 800690c:	080088dc 	.word	0x080088dc
 8006910:	080088ed 	.word	0x080088ed

08006914 <__ratio>:
 8006914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006918:	4688      	mov	r8, r1
 800691a:	4669      	mov	r1, sp
 800691c:	4681      	mov	r9, r0
 800691e:	f7ff ff5b 	bl	80067d8 <__b2d>
 8006922:	460f      	mov	r7, r1
 8006924:	4604      	mov	r4, r0
 8006926:	460d      	mov	r5, r1
 8006928:	4640      	mov	r0, r8
 800692a:	a901      	add	r1, sp, #4
 800692c:	f7ff ff54 	bl	80067d8 <__b2d>
 8006930:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006934:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006938:	468b      	mov	fp, r1
 800693a:	eba3 0c02 	sub.w	ip, r3, r2
 800693e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006942:	1a9b      	subs	r3, r3, r2
 8006944:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006948:	2b00      	cmp	r3, #0
 800694a:	bfd5      	itete	le
 800694c:	460a      	movle	r2, r1
 800694e:	462a      	movgt	r2, r5
 8006950:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006954:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006958:	bfd8      	it	le
 800695a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800695e:	465b      	mov	r3, fp
 8006960:	4602      	mov	r2, r0
 8006962:	4639      	mov	r1, r7
 8006964:	4620      	mov	r0, r4
 8006966:	f7f9 ff95 	bl	8000894 <__aeabi_ddiv>
 800696a:	b003      	add	sp, #12
 800696c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006970 <__copybits>:
 8006970:	3901      	subs	r1, #1
 8006972:	b570      	push	{r4, r5, r6, lr}
 8006974:	1149      	asrs	r1, r1, #5
 8006976:	6914      	ldr	r4, [r2, #16]
 8006978:	3101      	adds	r1, #1
 800697a:	f102 0314 	add.w	r3, r2, #20
 800697e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006982:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006986:	1f05      	subs	r5, r0, #4
 8006988:	42a3      	cmp	r3, r4
 800698a:	d30c      	bcc.n	80069a6 <__copybits+0x36>
 800698c:	1aa3      	subs	r3, r4, r2
 800698e:	3b11      	subs	r3, #17
 8006990:	f023 0303 	bic.w	r3, r3, #3
 8006994:	3211      	adds	r2, #17
 8006996:	42a2      	cmp	r2, r4
 8006998:	bf88      	it	hi
 800699a:	2300      	movhi	r3, #0
 800699c:	4418      	add	r0, r3
 800699e:	2300      	movs	r3, #0
 80069a0:	4288      	cmp	r0, r1
 80069a2:	d305      	bcc.n	80069b0 <__copybits+0x40>
 80069a4:	bd70      	pop	{r4, r5, r6, pc}
 80069a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80069aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80069ae:	e7eb      	b.n	8006988 <__copybits+0x18>
 80069b0:	f840 3b04 	str.w	r3, [r0], #4
 80069b4:	e7f4      	b.n	80069a0 <__copybits+0x30>

080069b6 <__any_on>:
 80069b6:	f100 0214 	add.w	r2, r0, #20
 80069ba:	6900      	ldr	r0, [r0, #16]
 80069bc:	114b      	asrs	r3, r1, #5
 80069be:	4298      	cmp	r0, r3
 80069c0:	b510      	push	{r4, lr}
 80069c2:	db11      	blt.n	80069e8 <__any_on+0x32>
 80069c4:	dd0a      	ble.n	80069dc <__any_on+0x26>
 80069c6:	f011 011f 	ands.w	r1, r1, #31
 80069ca:	d007      	beq.n	80069dc <__any_on+0x26>
 80069cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80069d0:	fa24 f001 	lsr.w	r0, r4, r1
 80069d4:	fa00 f101 	lsl.w	r1, r0, r1
 80069d8:	428c      	cmp	r4, r1
 80069da:	d10b      	bne.n	80069f4 <__any_on+0x3e>
 80069dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d803      	bhi.n	80069ec <__any_on+0x36>
 80069e4:	2000      	movs	r0, #0
 80069e6:	bd10      	pop	{r4, pc}
 80069e8:	4603      	mov	r3, r0
 80069ea:	e7f7      	b.n	80069dc <__any_on+0x26>
 80069ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069f0:	2900      	cmp	r1, #0
 80069f2:	d0f5      	beq.n	80069e0 <__any_on+0x2a>
 80069f4:	2001      	movs	r0, #1
 80069f6:	e7f6      	b.n	80069e6 <__any_on+0x30>

080069f8 <sulp>:
 80069f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069fc:	460f      	mov	r7, r1
 80069fe:	4690      	mov	r8, r2
 8006a00:	f7ff feca 	bl	8006798 <__ulp>
 8006a04:	4604      	mov	r4, r0
 8006a06:	460d      	mov	r5, r1
 8006a08:	f1b8 0f00 	cmp.w	r8, #0
 8006a0c:	d011      	beq.n	8006a32 <sulp+0x3a>
 8006a0e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006a12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	dd0b      	ble.n	8006a32 <sulp+0x3a>
 8006a1a:	2400      	movs	r4, #0
 8006a1c:	051b      	lsls	r3, r3, #20
 8006a1e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006a22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006a26:	4622      	mov	r2, r4
 8006a28:	462b      	mov	r3, r5
 8006a2a:	f7f9 fe09 	bl	8000640 <__aeabi_dmul>
 8006a2e:	4604      	mov	r4, r0
 8006a30:	460d      	mov	r5, r1
 8006a32:	4620      	mov	r0, r4
 8006a34:	4629      	mov	r1, r5
 8006a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a3a:	0000      	movs	r0, r0
 8006a3c:	0000      	movs	r0, r0
	...

08006a40 <_strtod_l>:
 8006a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a44:	b09f      	sub	sp, #124	; 0x7c
 8006a46:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	921a      	str	r2, [sp, #104]	; 0x68
 8006a4e:	460d      	mov	r5, r1
 8006a50:	f04f 0800 	mov.w	r8, #0
 8006a54:	f04f 0900 	mov.w	r9, #0
 8006a58:	460a      	mov	r2, r1
 8006a5a:	9219      	str	r2, [sp, #100]	; 0x64
 8006a5c:	7811      	ldrb	r1, [r2, #0]
 8006a5e:	292b      	cmp	r1, #43	; 0x2b
 8006a60:	d04a      	beq.n	8006af8 <_strtod_l+0xb8>
 8006a62:	d838      	bhi.n	8006ad6 <_strtod_l+0x96>
 8006a64:	290d      	cmp	r1, #13
 8006a66:	d832      	bhi.n	8006ace <_strtod_l+0x8e>
 8006a68:	2908      	cmp	r1, #8
 8006a6a:	d832      	bhi.n	8006ad2 <_strtod_l+0x92>
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	d03b      	beq.n	8006ae8 <_strtod_l+0xa8>
 8006a70:	2200      	movs	r2, #0
 8006a72:	920e      	str	r2, [sp, #56]	; 0x38
 8006a74:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006a76:	7832      	ldrb	r2, [r6, #0]
 8006a78:	2a30      	cmp	r2, #48	; 0x30
 8006a7a:	f040 80b2 	bne.w	8006be2 <_strtod_l+0x1a2>
 8006a7e:	7872      	ldrb	r2, [r6, #1]
 8006a80:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006a84:	2a58      	cmp	r2, #88	; 0x58
 8006a86:	d16e      	bne.n	8006b66 <_strtod_l+0x126>
 8006a88:	9302      	str	r3, [sp, #8]
 8006a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	ab1a      	add	r3, sp, #104	; 0x68
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4a8c      	ldr	r2, [pc, #560]	; (8006cc8 <_strtod_l+0x288>)
 8006a96:	ab1b      	add	r3, sp, #108	; 0x6c
 8006a98:	a919      	add	r1, sp, #100	; 0x64
 8006a9a:	f001 fa79 	bl	8007f90 <__gethex>
 8006a9e:	f010 070f 	ands.w	r7, r0, #15
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	d005      	beq.n	8006ab2 <_strtod_l+0x72>
 8006aa6:	2f06      	cmp	r7, #6
 8006aa8:	d128      	bne.n	8006afc <_strtod_l+0xbc>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	3601      	adds	r6, #1
 8006aae:	9619      	str	r6, [sp, #100]	; 0x64
 8006ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8006ab2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f040 85a0 	bne.w	80075fa <_strtod_l+0xbba>
 8006aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006abc:	b1cb      	cbz	r3, 8006af2 <_strtod_l+0xb2>
 8006abe:	4642      	mov	r2, r8
 8006ac0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	b01f      	add	sp, #124	; 0x7c
 8006aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ace:	2920      	cmp	r1, #32
 8006ad0:	d1ce      	bne.n	8006a70 <_strtod_l+0x30>
 8006ad2:	3201      	adds	r2, #1
 8006ad4:	e7c1      	b.n	8006a5a <_strtod_l+0x1a>
 8006ad6:	292d      	cmp	r1, #45	; 0x2d
 8006ad8:	d1ca      	bne.n	8006a70 <_strtod_l+0x30>
 8006ada:	2101      	movs	r1, #1
 8006adc:	910e      	str	r1, [sp, #56]	; 0x38
 8006ade:	1c51      	adds	r1, r2, #1
 8006ae0:	9119      	str	r1, [sp, #100]	; 0x64
 8006ae2:	7852      	ldrb	r2, [r2, #1]
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	d1c5      	bne.n	8006a74 <_strtod_l+0x34>
 8006ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aea:	9519      	str	r5, [sp, #100]	; 0x64
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f040 8582 	bne.w	80075f6 <_strtod_l+0xbb6>
 8006af2:	4642      	mov	r2, r8
 8006af4:	464b      	mov	r3, r9
 8006af6:	e7e5      	b.n	8006ac4 <_strtod_l+0x84>
 8006af8:	2100      	movs	r1, #0
 8006afa:	e7ef      	b.n	8006adc <_strtod_l+0x9c>
 8006afc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006afe:	b13a      	cbz	r2, 8006b10 <_strtod_l+0xd0>
 8006b00:	2135      	movs	r1, #53	; 0x35
 8006b02:	a81c      	add	r0, sp, #112	; 0x70
 8006b04:	f7ff ff34 	bl	8006970 <__copybits>
 8006b08:	4620      	mov	r0, r4
 8006b0a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006b0c:	f7ff fb18 	bl	8006140 <_Bfree>
 8006b10:	3f01      	subs	r7, #1
 8006b12:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006b14:	2f04      	cmp	r7, #4
 8006b16:	d806      	bhi.n	8006b26 <_strtod_l+0xe6>
 8006b18:	e8df f007 	tbb	[pc, r7]
 8006b1c:	201d0314 	.word	0x201d0314
 8006b20:	14          	.byte	0x14
 8006b21:	00          	.byte	0x00
 8006b22:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006b26:	05e9      	lsls	r1, r5, #23
 8006b28:	bf48      	it	mi
 8006b2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006b2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b32:	0d1b      	lsrs	r3, r3, #20
 8006b34:	051b      	lsls	r3, r3, #20
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1bb      	bne.n	8006ab2 <_strtod_l+0x72>
 8006b3a:	f7fe faf9 	bl	8005130 <__errno>
 8006b3e:	2322      	movs	r3, #34	; 0x22
 8006b40:	6003      	str	r3, [r0, #0]
 8006b42:	e7b6      	b.n	8006ab2 <_strtod_l+0x72>
 8006b44:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b48:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006b4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006b54:	e7e7      	b.n	8006b26 <_strtod_l+0xe6>
 8006b56:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8006ccc <_strtod_l+0x28c>
 8006b5a:	e7e4      	b.n	8006b26 <_strtod_l+0xe6>
 8006b5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006b60:	f04f 38ff 	mov.w	r8, #4294967295
 8006b64:	e7df      	b.n	8006b26 <_strtod_l+0xe6>
 8006b66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	9219      	str	r2, [sp, #100]	; 0x64
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	2b30      	cmp	r3, #48	; 0x30
 8006b70:	d0f9      	beq.n	8006b66 <_strtod_l+0x126>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d09d      	beq.n	8006ab2 <_strtod_l+0x72>
 8006b76:	2301      	movs	r3, #1
 8006b78:	f04f 0a00 	mov.w	sl, #0
 8006b7c:	220a      	movs	r2, #10
 8006b7e:	46d3      	mov	fp, sl
 8006b80:	9305      	str	r3, [sp, #20]
 8006b82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b84:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006b88:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b8a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006b8c:	7806      	ldrb	r6, [r0, #0]
 8006b8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006b92:	b2d9      	uxtb	r1, r3
 8006b94:	2909      	cmp	r1, #9
 8006b96:	d926      	bls.n	8006be6 <_strtod_l+0x1a6>
 8006b98:	2201      	movs	r2, #1
 8006b9a:	494d      	ldr	r1, [pc, #308]	; (8006cd0 <_strtod_l+0x290>)
 8006b9c:	f001 f91b 	bl	8007dd6 <strncmp>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d030      	beq.n	8006c06 <_strtod_l+0x1c6>
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	4632      	mov	r2, r6
 8006ba8:	4603      	mov	r3, r0
 8006baa:	465e      	mov	r6, fp
 8006bac:	9008      	str	r0, [sp, #32]
 8006bae:	2a65      	cmp	r2, #101	; 0x65
 8006bb0:	d001      	beq.n	8006bb6 <_strtod_l+0x176>
 8006bb2:	2a45      	cmp	r2, #69	; 0x45
 8006bb4:	d113      	bne.n	8006bde <_strtod_l+0x19e>
 8006bb6:	b91e      	cbnz	r6, 8006bc0 <_strtod_l+0x180>
 8006bb8:	9a05      	ldr	r2, [sp, #20]
 8006bba:	4302      	orrs	r2, r0
 8006bbc:	d094      	beq.n	8006ae8 <_strtod_l+0xa8>
 8006bbe:	2600      	movs	r6, #0
 8006bc0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006bc2:	1c6a      	adds	r2, r5, #1
 8006bc4:	9219      	str	r2, [sp, #100]	; 0x64
 8006bc6:	786a      	ldrb	r2, [r5, #1]
 8006bc8:	2a2b      	cmp	r2, #43	; 0x2b
 8006bca:	d074      	beq.n	8006cb6 <_strtod_l+0x276>
 8006bcc:	2a2d      	cmp	r2, #45	; 0x2d
 8006bce:	d078      	beq.n	8006cc2 <_strtod_l+0x282>
 8006bd0:	f04f 0c00 	mov.w	ip, #0
 8006bd4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006bd8:	2909      	cmp	r1, #9
 8006bda:	d97f      	bls.n	8006cdc <_strtod_l+0x29c>
 8006bdc:	9519      	str	r5, [sp, #100]	; 0x64
 8006bde:	2700      	movs	r7, #0
 8006be0:	e09e      	b.n	8006d20 <_strtod_l+0x2e0>
 8006be2:	2300      	movs	r3, #0
 8006be4:	e7c8      	b.n	8006b78 <_strtod_l+0x138>
 8006be6:	f1bb 0f08 	cmp.w	fp, #8
 8006bea:	bfd8      	it	le
 8006bec:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006bee:	f100 0001 	add.w	r0, r0, #1
 8006bf2:	bfd6      	itet	le
 8006bf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006bf8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006bfc:	930a      	strle	r3, [sp, #40]	; 0x28
 8006bfe:	f10b 0b01 	add.w	fp, fp, #1
 8006c02:	9019      	str	r0, [sp, #100]	; 0x64
 8006c04:	e7c1      	b.n	8006b8a <_strtod_l+0x14a>
 8006c06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	9219      	str	r2, [sp, #100]	; 0x64
 8006c0c:	785a      	ldrb	r2, [r3, #1]
 8006c0e:	f1bb 0f00 	cmp.w	fp, #0
 8006c12:	d037      	beq.n	8006c84 <_strtod_l+0x244>
 8006c14:	465e      	mov	r6, fp
 8006c16:	9008      	str	r0, [sp, #32]
 8006c18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006c1c:	2b09      	cmp	r3, #9
 8006c1e:	d912      	bls.n	8006c46 <_strtod_l+0x206>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e7c4      	b.n	8006bae <_strtod_l+0x16e>
 8006c24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c26:	3001      	adds	r0, #1
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	9219      	str	r2, [sp, #100]	; 0x64
 8006c2c:	785a      	ldrb	r2, [r3, #1]
 8006c2e:	2a30      	cmp	r2, #48	; 0x30
 8006c30:	d0f8      	beq.n	8006c24 <_strtod_l+0x1e4>
 8006c32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	f200 84e4 	bhi.w	8007604 <_strtod_l+0xbc4>
 8006c3c:	9008      	str	r0, [sp, #32]
 8006c3e:	2000      	movs	r0, #0
 8006c40:	4606      	mov	r6, r0
 8006c42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c44:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c46:	3a30      	subs	r2, #48	; 0x30
 8006c48:	f100 0301 	add.w	r3, r0, #1
 8006c4c:	d014      	beq.n	8006c78 <_strtod_l+0x238>
 8006c4e:	9908      	ldr	r1, [sp, #32]
 8006c50:	eb00 0c06 	add.w	ip, r0, r6
 8006c54:	4419      	add	r1, r3
 8006c56:	9108      	str	r1, [sp, #32]
 8006c58:	4633      	mov	r3, r6
 8006c5a:	210a      	movs	r1, #10
 8006c5c:	4563      	cmp	r3, ip
 8006c5e:	d113      	bne.n	8006c88 <_strtod_l+0x248>
 8006c60:	1833      	adds	r3, r6, r0
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	f106 0601 	add.w	r6, r6, #1
 8006c68:	4406      	add	r6, r0
 8006c6a:	dc1a      	bgt.n	8006ca2 <_strtod_l+0x262>
 8006c6c:	230a      	movs	r3, #10
 8006c6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c70:	fb03 2301 	mla	r3, r3, r1, r2
 8006c74:	930a      	str	r3, [sp, #40]	; 0x28
 8006c76:	2300      	movs	r3, #0
 8006c78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	1c51      	adds	r1, r2, #1
 8006c7e:	9119      	str	r1, [sp, #100]	; 0x64
 8006c80:	7852      	ldrb	r2, [r2, #1]
 8006c82:	e7c9      	b.n	8006c18 <_strtod_l+0x1d8>
 8006c84:	4658      	mov	r0, fp
 8006c86:	e7d2      	b.n	8006c2e <_strtod_l+0x1ee>
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	f103 0301 	add.w	r3, r3, #1
 8006c8e:	dc03      	bgt.n	8006c98 <_strtod_l+0x258>
 8006c90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006c92:	434f      	muls	r7, r1
 8006c94:	970a      	str	r7, [sp, #40]	; 0x28
 8006c96:	e7e1      	b.n	8006c5c <_strtod_l+0x21c>
 8006c98:	2b10      	cmp	r3, #16
 8006c9a:	bfd8      	it	le
 8006c9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006ca0:	e7dc      	b.n	8006c5c <_strtod_l+0x21c>
 8006ca2:	2e10      	cmp	r6, #16
 8006ca4:	bfdc      	itt	le
 8006ca6:	230a      	movle	r3, #10
 8006ca8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006cac:	e7e3      	b.n	8006c76 <_strtod_l+0x236>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	9308      	str	r3, [sp, #32]
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e780      	b.n	8006bb8 <_strtod_l+0x178>
 8006cb6:	f04f 0c00 	mov.w	ip, #0
 8006cba:	1caa      	adds	r2, r5, #2
 8006cbc:	9219      	str	r2, [sp, #100]	; 0x64
 8006cbe:	78aa      	ldrb	r2, [r5, #2]
 8006cc0:	e788      	b.n	8006bd4 <_strtod_l+0x194>
 8006cc2:	f04f 0c01 	mov.w	ip, #1
 8006cc6:	e7f8      	b.n	8006cba <_strtod_l+0x27a>
 8006cc8:	08008a48 	.word	0x08008a48
 8006ccc:	7ff00000 	.word	0x7ff00000
 8006cd0:	08008a44 	.word	0x08008a44
 8006cd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006cd6:	1c51      	adds	r1, r2, #1
 8006cd8:	9119      	str	r1, [sp, #100]	; 0x64
 8006cda:	7852      	ldrb	r2, [r2, #1]
 8006cdc:	2a30      	cmp	r2, #48	; 0x30
 8006cde:	d0f9      	beq.n	8006cd4 <_strtod_l+0x294>
 8006ce0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006ce4:	2908      	cmp	r1, #8
 8006ce6:	f63f af7a 	bhi.w	8006bde <_strtod_l+0x19e>
 8006cea:	3a30      	subs	r2, #48	; 0x30
 8006cec:	9209      	str	r2, [sp, #36]	; 0x24
 8006cee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006cf0:	920c      	str	r2, [sp, #48]	; 0x30
 8006cf2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006cf4:	1c57      	adds	r7, r2, #1
 8006cf6:	9719      	str	r7, [sp, #100]	; 0x64
 8006cf8:	7852      	ldrb	r2, [r2, #1]
 8006cfa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006cfe:	f1be 0f09 	cmp.w	lr, #9
 8006d02:	d938      	bls.n	8006d76 <_strtod_l+0x336>
 8006d04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d06:	1a7f      	subs	r7, r7, r1
 8006d08:	2f08      	cmp	r7, #8
 8006d0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006d0e:	dc03      	bgt.n	8006d18 <_strtod_l+0x2d8>
 8006d10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d12:	428f      	cmp	r7, r1
 8006d14:	bfa8      	it	ge
 8006d16:	460f      	movge	r7, r1
 8006d18:	f1bc 0f00 	cmp.w	ip, #0
 8006d1c:	d000      	beq.n	8006d20 <_strtod_l+0x2e0>
 8006d1e:	427f      	negs	r7, r7
 8006d20:	2e00      	cmp	r6, #0
 8006d22:	d14f      	bne.n	8006dc4 <_strtod_l+0x384>
 8006d24:	9905      	ldr	r1, [sp, #20]
 8006d26:	4301      	orrs	r1, r0
 8006d28:	f47f aec3 	bne.w	8006ab2 <_strtod_l+0x72>
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f47f aedb 	bne.w	8006ae8 <_strtod_l+0xa8>
 8006d32:	2a69      	cmp	r2, #105	; 0x69
 8006d34:	d029      	beq.n	8006d8a <_strtod_l+0x34a>
 8006d36:	dc26      	bgt.n	8006d86 <_strtod_l+0x346>
 8006d38:	2a49      	cmp	r2, #73	; 0x49
 8006d3a:	d026      	beq.n	8006d8a <_strtod_l+0x34a>
 8006d3c:	2a4e      	cmp	r2, #78	; 0x4e
 8006d3e:	f47f aed3 	bne.w	8006ae8 <_strtod_l+0xa8>
 8006d42:	499a      	ldr	r1, [pc, #616]	; (8006fac <_strtod_l+0x56c>)
 8006d44:	a819      	add	r0, sp, #100	; 0x64
 8006d46:	f001 fb65 	bl	8008414 <__match>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	f43f aecc 	beq.w	8006ae8 <_strtod_l+0xa8>
 8006d50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b28      	cmp	r3, #40	; 0x28
 8006d56:	d12f      	bne.n	8006db8 <_strtod_l+0x378>
 8006d58:	4995      	ldr	r1, [pc, #596]	; (8006fb0 <_strtod_l+0x570>)
 8006d5a:	aa1c      	add	r2, sp, #112	; 0x70
 8006d5c:	a819      	add	r0, sp, #100	; 0x64
 8006d5e:	f001 fb6d 	bl	800843c <__hexnan>
 8006d62:	2805      	cmp	r0, #5
 8006d64:	d128      	bne.n	8006db8 <_strtod_l+0x378>
 8006d66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d68:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006d6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006d70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006d74:	e69d      	b.n	8006ab2 <_strtod_l+0x72>
 8006d76:	210a      	movs	r1, #10
 8006d78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006d7a:	fb01 2107 	mla	r1, r1, r7, r2
 8006d7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006d82:	9209      	str	r2, [sp, #36]	; 0x24
 8006d84:	e7b5      	b.n	8006cf2 <_strtod_l+0x2b2>
 8006d86:	2a6e      	cmp	r2, #110	; 0x6e
 8006d88:	e7d9      	b.n	8006d3e <_strtod_l+0x2fe>
 8006d8a:	498a      	ldr	r1, [pc, #552]	; (8006fb4 <_strtod_l+0x574>)
 8006d8c:	a819      	add	r0, sp, #100	; 0x64
 8006d8e:	f001 fb41 	bl	8008414 <__match>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	f43f aea8 	beq.w	8006ae8 <_strtod_l+0xa8>
 8006d98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d9a:	4987      	ldr	r1, [pc, #540]	; (8006fb8 <_strtod_l+0x578>)
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	a819      	add	r0, sp, #100	; 0x64
 8006da0:	9319      	str	r3, [sp, #100]	; 0x64
 8006da2:	f001 fb37 	bl	8008414 <__match>
 8006da6:	b910      	cbnz	r0, 8006dae <_strtod_l+0x36e>
 8006da8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006daa:	3301      	adds	r3, #1
 8006dac:	9319      	str	r3, [sp, #100]	; 0x64
 8006dae:	f04f 0800 	mov.w	r8, #0
 8006db2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006fbc <_strtod_l+0x57c>
 8006db6:	e67c      	b.n	8006ab2 <_strtod_l+0x72>
 8006db8:	4881      	ldr	r0, [pc, #516]	; (8006fc0 <_strtod_l+0x580>)
 8006dba:	f001 f85f 	bl	8007e7c <nan>
 8006dbe:	4680      	mov	r8, r0
 8006dc0:	4689      	mov	r9, r1
 8006dc2:	e676      	b.n	8006ab2 <_strtod_l+0x72>
 8006dc4:	9b08      	ldr	r3, [sp, #32]
 8006dc6:	f1bb 0f00 	cmp.w	fp, #0
 8006dca:	bf08      	it	eq
 8006dcc:	46b3      	moveq	fp, r6
 8006dce:	1afb      	subs	r3, r7, r3
 8006dd0:	2e10      	cmp	r6, #16
 8006dd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006dd4:	4635      	mov	r5, r6
 8006dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd8:	bfa8      	it	ge
 8006dda:	2510      	movge	r5, #16
 8006ddc:	f7f9 fbb6 	bl	800054c <__aeabi_ui2d>
 8006de0:	2e09      	cmp	r6, #9
 8006de2:	4680      	mov	r8, r0
 8006de4:	4689      	mov	r9, r1
 8006de6:	dd13      	ble.n	8006e10 <_strtod_l+0x3d0>
 8006de8:	4b76      	ldr	r3, [pc, #472]	; (8006fc4 <_strtod_l+0x584>)
 8006dea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006dee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006df2:	f7f9 fc25 	bl	8000640 <__aeabi_dmul>
 8006df6:	4680      	mov	r8, r0
 8006df8:	4650      	mov	r0, sl
 8006dfa:	4689      	mov	r9, r1
 8006dfc:	f7f9 fba6 	bl	800054c <__aeabi_ui2d>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4640      	mov	r0, r8
 8006e06:	4649      	mov	r1, r9
 8006e08:	f7f9 fa64 	bl	80002d4 <__adddf3>
 8006e0c:	4680      	mov	r8, r0
 8006e0e:	4689      	mov	r9, r1
 8006e10:	2e0f      	cmp	r6, #15
 8006e12:	dc36      	bgt.n	8006e82 <_strtod_l+0x442>
 8006e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f43f ae4b 	beq.w	8006ab2 <_strtod_l+0x72>
 8006e1c:	dd22      	ble.n	8006e64 <_strtod_l+0x424>
 8006e1e:	2b16      	cmp	r3, #22
 8006e20:	dc09      	bgt.n	8006e36 <_strtod_l+0x3f6>
 8006e22:	4968      	ldr	r1, [pc, #416]	; (8006fc4 <_strtod_l+0x584>)
 8006e24:	4642      	mov	r2, r8
 8006e26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e2a:	464b      	mov	r3, r9
 8006e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e30:	f7f9 fc06 	bl	8000640 <__aeabi_dmul>
 8006e34:	e7c3      	b.n	8006dbe <_strtod_l+0x37e>
 8006e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e38:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	db20      	blt.n	8006e82 <_strtod_l+0x442>
 8006e40:	4c60      	ldr	r4, [pc, #384]	; (8006fc4 <_strtod_l+0x584>)
 8006e42:	f1c6 060f 	rsb	r6, r6, #15
 8006e46:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006e4a:	4642      	mov	r2, r8
 8006e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e50:	464b      	mov	r3, r9
 8006e52:	f7f9 fbf5 	bl	8000640 <__aeabi_dmul>
 8006e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e58:	1b9e      	subs	r6, r3, r6
 8006e5a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006e5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e62:	e7e5      	b.n	8006e30 <_strtod_l+0x3f0>
 8006e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e66:	3316      	adds	r3, #22
 8006e68:	db0b      	blt.n	8006e82 <_strtod_l+0x442>
 8006e6a:	9b08      	ldr	r3, [sp, #32]
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	1bdf      	subs	r7, r3, r7
 8006e70:	4b54      	ldr	r3, [pc, #336]	; (8006fc4 <_strtod_l+0x584>)
 8006e72:	4649      	mov	r1, r9
 8006e74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e7c:	f7f9 fd0a 	bl	8000894 <__aeabi_ddiv>
 8006e80:	e79d      	b.n	8006dbe <_strtod_l+0x37e>
 8006e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e84:	1b75      	subs	r5, r6, r5
 8006e86:	441d      	add	r5, r3
 8006e88:	2d00      	cmp	r5, #0
 8006e8a:	dd70      	ble.n	8006f6e <_strtod_l+0x52e>
 8006e8c:	f015 030f 	ands.w	r3, r5, #15
 8006e90:	d00a      	beq.n	8006ea8 <_strtod_l+0x468>
 8006e92:	494c      	ldr	r1, [pc, #304]	; (8006fc4 <_strtod_l+0x584>)
 8006e94:	4642      	mov	r2, r8
 8006e96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	f7f9 fbce 	bl	8000640 <__aeabi_dmul>
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	4689      	mov	r9, r1
 8006ea8:	f035 050f 	bics.w	r5, r5, #15
 8006eac:	d04d      	beq.n	8006f4a <_strtod_l+0x50a>
 8006eae:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006eb2:	dd22      	ble.n	8006efa <_strtod_l+0x4ba>
 8006eb4:	2600      	movs	r6, #0
 8006eb6:	46b3      	mov	fp, r6
 8006eb8:	960b      	str	r6, [sp, #44]	; 0x2c
 8006eba:	9608      	str	r6, [sp, #32]
 8006ebc:	2322      	movs	r3, #34	; 0x22
 8006ebe:	f04f 0800 	mov.w	r8, #0
 8006ec2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006fbc <_strtod_l+0x57c>
 8006ec6:	6023      	str	r3, [r4, #0]
 8006ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f43f adf1 	beq.w	8006ab2 <_strtod_l+0x72>
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ed4:	f7ff f934 	bl	8006140 <_Bfree>
 8006ed8:	4620      	mov	r0, r4
 8006eda:	9908      	ldr	r1, [sp, #32]
 8006edc:	f7ff f930 	bl	8006140 <_Bfree>
 8006ee0:	4659      	mov	r1, fp
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f7ff f92c 	bl	8006140 <_Bfree>
 8006ee8:	4620      	mov	r0, r4
 8006eea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006eec:	f7ff f928 	bl	8006140 <_Bfree>
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f7ff f924 	bl	8006140 <_Bfree>
 8006ef8:	e5db      	b.n	8006ab2 <_strtod_l+0x72>
 8006efa:	4b33      	ldr	r3, [pc, #204]	; (8006fc8 <_strtod_l+0x588>)
 8006efc:	4640      	mov	r0, r8
 8006efe:	9305      	str	r3, [sp, #20]
 8006f00:	2300      	movs	r3, #0
 8006f02:	4649      	mov	r1, r9
 8006f04:	469a      	mov	sl, r3
 8006f06:	112d      	asrs	r5, r5, #4
 8006f08:	2d01      	cmp	r5, #1
 8006f0a:	dc21      	bgt.n	8006f50 <_strtod_l+0x510>
 8006f0c:	b10b      	cbz	r3, 8006f12 <_strtod_l+0x4d2>
 8006f0e:	4680      	mov	r8, r0
 8006f10:	4689      	mov	r9, r1
 8006f12:	492d      	ldr	r1, [pc, #180]	; (8006fc8 <_strtod_l+0x588>)
 8006f14:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006f18:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006f1c:	4642      	mov	r2, r8
 8006f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f22:	464b      	mov	r3, r9
 8006f24:	f7f9 fb8c 	bl	8000640 <__aeabi_dmul>
 8006f28:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <_strtod_l+0x57c>)
 8006f2a:	460a      	mov	r2, r1
 8006f2c:	400b      	ands	r3, r1
 8006f2e:	4927      	ldr	r1, [pc, #156]	; (8006fcc <_strtod_l+0x58c>)
 8006f30:	4680      	mov	r8, r0
 8006f32:	428b      	cmp	r3, r1
 8006f34:	d8be      	bhi.n	8006eb4 <_strtod_l+0x474>
 8006f36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f3a:	428b      	cmp	r3, r1
 8006f3c:	bf86      	itte	hi
 8006f3e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006f42:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006fd0 <_strtod_l+0x590>
 8006f46:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9305      	str	r3, [sp, #20]
 8006f4e:	e07b      	b.n	8007048 <_strtod_l+0x608>
 8006f50:	07ea      	lsls	r2, r5, #31
 8006f52:	d505      	bpl.n	8006f60 <_strtod_l+0x520>
 8006f54:	9b05      	ldr	r3, [sp, #20]
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f7f9 fb71 	bl	8000640 <__aeabi_dmul>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	9a05      	ldr	r2, [sp, #20]
 8006f62:	f10a 0a01 	add.w	sl, sl, #1
 8006f66:	3208      	adds	r2, #8
 8006f68:	106d      	asrs	r5, r5, #1
 8006f6a:	9205      	str	r2, [sp, #20]
 8006f6c:	e7cc      	b.n	8006f08 <_strtod_l+0x4c8>
 8006f6e:	d0ec      	beq.n	8006f4a <_strtod_l+0x50a>
 8006f70:	426d      	negs	r5, r5
 8006f72:	f015 020f 	ands.w	r2, r5, #15
 8006f76:	d00a      	beq.n	8006f8e <_strtod_l+0x54e>
 8006f78:	4b12      	ldr	r3, [pc, #72]	; (8006fc4 <_strtod_l+0x584>)
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f80:	4649      	mov	r1, r9
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f7f9 fc85 	bl	8000894 <__aeabi_ddiv>
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	4689      	mov	r9, r1
 8006f8e:	112d      	asrs	r5, r5, #4
 8006f90:	d0db      	beq.n	8006f4a <_strtod_l+0x50a>
 8006f92:	2d1f      	cmp	r5, #31
 8006f94:	dd1e      	ble.n	8006fd4 <_strtod_l+0x594>
 8006f96:	2600      	movs	r6, #0
 8006f98:	46b3      	mov	fp, r6
 8006f9a:	960b      	str	r6, [sp, #44]	; 0x2c
 8006f9c:	9608      	str	r6, [sp, #32]
 8006f9e:	2322      	movs	r3, #34	; 0x22
 8006fa0:	f04f 0800 	mov.w	r8, #0
 8006fa4:	f04f 0900 	mov.w	r9, #0
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	e78d      	b.n	8006ec8 <_strtod_l+0x488>
 8006fac:	080087f8 	.word	0x080087f8
 8006fb0:	08008a5c 	.word	0x08008a5c
 8006fb4:	080087f0 	.word	0x080087f0
 8006fb8:	08008863 	.word	0x08008863
 8006fbc:	7ff00000 	.word	0x7ff00000
 8006fc0:	0800885f 	.word	0x0800885f
 8006fc4:	08008970 	.word	0x08008970
 8006fc8:	08008948 	.word	0x08008948
 8006fcc:	7ca00000 	.word	0x7ca00000
 8006fd0:	7fefffff 	.word	0x7fefffff
 8006fd4:	f015 0310 	ands.w	r3, r5, #16
 8006fd8:	bf18      	it	ne
 8006fda:	236a      	movne	r3, #106	; 0x6a
 8006fdc:	4640      	mov	r0, r8
 8006fde:	9305      	str	r3, [sp, #20]
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80072b0 <_strtod_l+0x870>
 8006fe8:	07ea      	lsls	r2, r5, #31
 8006fea:	d504      	bpl.n	8006ff6 <_strtod_l+0x5b6>
 8006fec:	e9da 2300 	ldrd	r2, r3, [sl]
 8006ff0:	f7f9 fb26 	bl	8000640 <__aeabi_dmul>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	106d      	asrs	r5, r5, #1
 8006ff8:	f10a 0a08 	add.w	sl, sl, #8
 8006ffc:	d1f4      	bne.n	8006fe8 <_strtod_l+0x5a8>
 8006ffe:	b10b      	cbz	r3, 8007004 <_strtod_l+0x5c4>
 8007000:	4680      	mov	r8, r0
 8007002:	4689      	mov	r9, r1
 8007004:	9b05      	ldr	r3, [sp, #20]
 8007006:	b1bb      	cbz	r3, 8007038 <_strtod_l+0x5f8>
 8007008:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800700c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007010:	2b00      	cmp	r3, #0
 8007012:	4649      	mov	r1, r9
 8007014:	dd10      	ble.n	8007038 <_strtod_l+0x5f8>
 8007016:	2b1f      	cmp	r3, #31
 8007018:	f340 8128 	ble.w	800726c <_strtod_l+0x82c>
 800701c:	2b34      	cmp	r3, #52	; 0x34
 800701e:	bfd8      	it	le
 8007020:	f04f 33ff 	movle.w	r3, #4294967295
 8007024:	f04f 0800 	mov.w	r8, #0
 8007028:	bfcf      	iteee	gt
 800702a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800702e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007032:	4093      	lslle	r3, r2
 8007034:	ea03 0901 	andle.w	r9, r3, r1
 8007038:	2200      	movs	r2, #0
 800703a:	2300      	movs	r3, #0
 800703c:	4640      	mov	r0, r8
 800703e:	4649      	mov	r1, r9
 8007040:	f7f9 fd66 	bl	8000b10 <__aeabi_dcmpeq>
 8007044:	2800      	cmp	r0, #0
 8007046:	d1a6      	bne.n	8006f96 <_strtod_l+0x556>
 8007048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800704a:	465a      	mov	r2, fp
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	4620      	mov	r0, r4
 8007050:	4633      	mov	r3, r6
 8007052:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007054:	f7ff f8dc 	bl	8006210 <__s2b>
 8007058:	900b      	str	r0, [sp, #44]	; 0x2c
 800705a:	2800      	cmp	r0, #0
 800705c:	f43f af2a 	beq.w	8006eb4 <_strtod_l+0x474>
 8007060:	2600      	movs	r6, #0
 8007062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007064:	9b08      	ldr	r3, [sp, #32]
 8007066:	2a00      	cmp	r2, #0
 8007068:	eba3 0307 	sub.w	r3, r3, r7
 800706c:	bfa8      	it	ge
 800706e:	2300      	movge	r3, #0
 8007070:	46b3      	mov	fp, r6
 8007072:	9312      	str	r3, [sp, #72]	; 0x48
 8007074:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007078:	9316      	str	r3, [sp, #88]	; 0x58
 800707a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800707c:	4620      	mov	r0, r4
 800707e:	6859      	ldr	r1, [r3, #4]
 8007080:	f7ff f81e 	bl	80060c0 <_Balloc>
 8007084:	9008      	str	r0, [sp, #32]
 8007086:	2800      	cmp	r0, #0
 8007088:	f43f af18 	beq.w	8006ebc <_strtod_l+0x47c>
 800708c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800708e:	300c      	adds	r0, #12
 8007090:	691a      	ldr	r2, [r3, #16]
 8007092:	f103 010c 	add.w	r1, r3, #12
 8007096:	3202      	adds	r2, #2
 8007098:	0092      	lsls	r2, r2, #2
 800709a:	f000 fee1 	bl	8007e60 <memcpy>
 800709e:	ab1c      	add	r3, sp, #112	; 0x70
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	ab1b      	add	r3, sp, #108	; 0x6c
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	4642      	mov	r2, r8
 80070a8:	464b      	mov	r3, r9
 80070aa:	4620      	mov	r0, r4
 80070ac:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80070b0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80070b4:	f7ff fbd8 	bl	8006868 <__d2b>
 80070b8:	901a      	str	r0, [sp, #104]	; 0x68
 80070ba:	2800      	cmp	r0, #0
 80070bc:	f43f aefe 	beq.w	8006ebc <_strtod_l+0x47c>
 80070c0:	2101      	movs	r1, #1
 80070c2:	4620      	mov	r0, r4
 80070c4:	f7ff f93c 	bl	8006340 <__i2b>
 80070c8:	4683      	mov	fp, r0
 80070ca:	2800      	cmp	r0, #0
 80070cc:	f43f aef6 	beq.w	8006ebc <_strtod_l+0x47c>
 80070d0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80070d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80070d4:	2f00      	cmp	r7, #0
 80070d6:	bfab      	itete	ge
 80070d8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80070da:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80070dc:	eb07 0a03 	addge.w	sl, r7, r3
 80070e0:	1bdd      	sublt	r5, r3, r7
 80070e2:	9b05      	ldr	r3, [sp, #20]
 80070e4:	bfa8      	it	ge
 80070e6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80070e8:	eba7 0703 	sub.w	r7, r7, r3
 80070ec:	4417      	add	r7, r2
 80070ee:	4b71      	ldr	r3, [pc, #452]	; (80072b4 <_strtod_l+0x874>)
 80070f0:	f107 37ff 	add.w	r7, r7, #4294967295
 80070f4:	bfb8      	it	lt
 80070f6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80070fa:	429f      	cmp	r7, r3
 80070fc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007100:	f280 80c7 	bge.w	8007292 <_strtod_l+0x852>
 8007104:	1bdb      	subs	r3, r3, r7
 8007106:	2b1f      	cmp	r3, #31
 8007108:	f04f 0101 	mov.w	r1, #1
 800710c:	eba2 0203 	sub.w	r2, r2, r3
 8007110:	f300 80b3 	bgt.w	800727a <_strtod_l+0x83a>
 8007114:	fa01 f303 	lsl.w	r3, r1, r3
 8007118:	9313      	str	r3, [sp, #76]	; 0x4c
 800711a:	2300      	movs	r3, #0
 800711c:	9310      	str	r3, [sp, #64]	; 0x40
 800711e:	eb0a 0702 	add.w	r7, sl, r2
 8007122:	9b05      	ldr	r3, [sp, #20]
 8007124:	45ba      	cmp	sl, r7
 8007126:	4415      	add	r5, r2
 8007128:	441d      	add	r5, r3
 800712a:	4653      	mov	r3, sl
 800712c:	bfa8      	it	ge
 800712e:	463b      	movge	r3, r7
 8007130:	42ab      	cmp	r3, r5
 8007132:	bfa8      	it	ge
 8007134:	462b      	movge	r3, r5
 8007136:	2b00      	cmp	r3, #0
 8007138:	bfc2      	ittt	gt
 800713a:	1aff      	subgt	r7, r7, r3
 800713c:	1aed      	subgt	r5, r5, r3
 800713e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007142:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007144:	2b00      	cmp	r3, #0
 8007146:	dd17      	ble.n	8007178 <_strtod_l+0x738>
 8007148:	4659      	mov	r1, fp
 800714a:	461a      	mov	r2, r3
 800714c:	4620      	mov	r0, r4
 800714e:	f7ff f9b5 	bl	80064bc <__pow5mult>
 8007152:	4683      	mov	fp, r0
 8007154:	2800      	cmp	r0, #0
 8007156:	f43f aeb1 	beq.w	8006ebc <_strtod_l+0x47c>
 800715a:	4601      	mov	r1, r0
 800715c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800715e:	4620      	mov	r0, r4
 8007160:	f7ff f904 	bl	800636c <__multiply>
 8007164:	900a      	str	r0, [sp, #40]	; 0x28
 8007166:	2800      	cmp	r0, #0
 8007168:	f43f aea8 	beq.w	8006ebc <_strtod_l+0x47c>
 800716c:	4620      	mov	r0, r4
 800716e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007170:	f7fe ffe6 	bl	8006140 <_Bfree>
 8007174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007176:	931a      	str	r3, [sp, #104]	; 0x68
 8007178:	2f00      	cmp	r7, #0
 800717a:	f300 808f 	bgt.w	800729c <_strtod_l+0x85c>
 800717e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007180:	2b00      	cmp	r3, #0
 8007182:	dd08      	ble.n	8007196 <_strtod_l+0x756>
 8007184:	4620      	mov	r0, r4
 8007186:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007188:	9908      	ldr	r1, [sp, #32]
 800718a:	f7ff f997 	bl	80064bc <__pow5mult>
 800718e:	9008      	str	r0, [sp, #32]
 8007190:	2800      	cmp	r0, #0
 8007192:	f43f ae93 	beq.w	8006ebc <_strtod_l+0x47c>
 8007196:	2d00      	cmp	r5, #0
 8007198:	dd08      	ble.n	80071ac <_strtod_l+0x76c>
 800719a:	462a      	mov	r2, r5
 800719c:	4620      	mov	r0, r4
 800719e:	9908      	ldr	r1, [sp, #32]
 80071a0:	f7ff f9e6 	bl	8006570 <__lshift>
 80071a4:	9008      	str	r0, [sp, #32]
 80071a6:	2800      	cmp	r0, #0
 80071a8:	f43f ae88 	beq.w	8006ebc <_strtod_l+0x47c>
 80071ac:	f1ba 0f00 	cmp.w	sl, #0
 80071b0:	dd08      	ble.n	80071c4 <_strtod_l+0x784>
 80071b2:	4659      	mov	r1, fp
 80071b4:	4652      	mov	r2, sl
 80071b6:	4620      	mov	r0, r4
 80071b8:	f7ff f9da 	bl	8006570 <__lshift>
 80071bc:	4683      	mov	fp, r0
 80071be:	2800      	cmp	r0, #0
 80071c0:	f43f ae7c 	beq.w	8006ebc <_strtod_l+0x47c>
 80071c4:	4620      	mov	r0, r4
 80071c6:	9a08      	ldr	r2, [sp, #32]
 80071c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80071ca:	f7ff fa59 	bl	8006680 <__mdiff>
 80071ce:	4606      	mov	r6, r0
 80071d0:	2800      	cmp	r0, #0
 80071d2:	f43f ae73 	beq.w	8006ebc <_strtod_l+0x47c>
 80071d6:	2500      	movs	r5, #0
 80071d8:	68c3      	ldr	r3, [r0, #12]
 80071da:	4659      	mov	r1, fp
 80071dc:	60c5      	str	r5, [r0, #12]
 80071de:	930a      	str	r3, [sp, #40]	; 0x28
 80071e0:	f7ff fa32 	bl	8006648 <__mcmp>
 80071e4:	42a8      	cmp	r0, r5
 80071e6:	da6b      	bge.n	80072c0 <_strtod_l+0x880>
 80071e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ea:	ea53 0308 	orrs.w	r3, r3, r8
 80071ee:	f040 808f 	bne.w	8007310 <_strtod_l+0x8d0>
 80071f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f040 808a 	bne.w	8007310 <_strtod_l+0x8d0>
 80071fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007200:	0d1b      	lsrs	r3, r3, #20
 8007202:	051b      	lsls	r3, r3, #20
 8007204:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007208:	f240 8082 	bls.w	8007310 <_strtod_l+0x8d0>
 800720c:	6973      	ldr	r3, [r6, #20]
 800720e:	b913      	cbnz	r3, 8007216 <_strtod_l+0x7d6>
 8007210:	6933      	ldr	r3, [r6, #16]
 8007212:	2b01      	cmp	r3, #1
 8007214:	dd7c      	ble.n	8007310 <_strtod_l+0x8d0>
 8007216:	4631      	mov	r1, r6
 8007218:	2201      	movs	r2, #1
 800721a:	4620      	mov	r0, r4
 800721c:	f7ff f9a8 	bl	8006570 <__lshift>
 8007220:	4659      	mov	r1, fp
 8007222:	4606      	mov	r6, r0
 8007224:	f7ff fa10 	bl	8006648 <__mcmp>
 8007228:	2800      	cmp	r0, #0
 800722a:	dd71      	ble.n	8007310 <_strtod_l+0x8d0>
 800722c:	9905      	ldr	r1, [sp, #20]
 800722e:	464b      	mov	r3, r9
 8007230:	4a21      	ldr	r2, [pc, #132]	; (80072b8 <_strtod_l+0x878>)
 8007232:	2900      	cmp	r1, #0
 8007234:	f000 808d 	beq.w	8007352 <_strtod_l+0x912>
 8007238:	ea02 0109 	and.w	r1, r2, r9
 800723c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007240:	f300 8087 	bgt.w	8007352 <_strtod_l+0x912>
 8007244:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007248:	f77f aea9 	ble.w	8006f9e <_strtod_l+0x55e>
 800724c:	4640      	mov	r0, r8
 800724e:	4649      	mov	r1, r9
 8007250:	4b1a      	ldr	r3, [pc, #104]	; (80072bc <_strtod_l+0x87c>)
 8007252:	2200      	movs	r2, #0
 8007254:	f7f9 f9f4 	bl	8000640 <__aeabi_dmul>
 8007258:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <_strtod_l+0x878>)
 800725a:	4680      	mov	r8, r0
 800725c:	400b      	ands	r3, r1
 800725e:	4689      	mov	r9, r1
 8007260:	2b00      	cmp	r3, #0
 8007262:	f47f ae35 	bne.w	8006ed0 <_strtod_l+0x490>
 8007266:	2322      	movs	r3, #34	; 0x22
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	e631      	b.n	8006ed0 <_strtod_l+0x490>
 800726c:	f04f 32ff 	mov.w	r2, #4294967295
 8007270:	fa02 f303 	lsl.w	r3, r2, r3
 8007274:	ea03 0808 	and.w	r8, r3, r8
 8007278:	e6de      	b.n	8007038 <_strtod_l+0x5f8>
 800727a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800727e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007282:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007286:	37e2      	adds	r7, #226	; 0xe2
 8007288:	fa01 f307 	lsl.w	r3, r1, r7
 800728c:	9310      	str	r3, [sp, #64]	; 0x40
 800728e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007290:	e745      	b.n	800711e <_strtod_l+0x6de>
 8007292:	2300      	movs	r3, #0
 8007294:	9310      	str	r3, [sp, #64]	; 0x40
 8007296:	2301      	movs	r3, #1
 8007298:	9313      	str	r3, [sp, #76]	; 0x4c
 800729a:	e740      	b.n	800711e <_strtod_l+0x6de>
 800729c:	463a      	mov	r2, r7
 800729e:	4620      	mov	r0, r4
 80072a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80072a2:	f7ff f965 	bl	8006570 <__lshift>
 80072a6:	901a      	str	r0, [sp, #104]	; 0x68
 80072a8:	2800      	cmp	r0, #0
 80072aa:	f47f af68 	bne.w	800717e <_strtod_l+0x73e>
 80072ae:	e605      	b.n	8006ebc <_strtod_l+0x47c>
 80072b0:	08008a70 	.word	0x08008a70
 80072b4:	fffffc02 	.word	0xfffffc02
 80072b8:	7ff00000 	.word	0x7ff00000
 80072bc:	39500000 	.word	0x39500000
 80072c0:	46ca      	mov	sl, r9
 80072c2:	d165      	bne.n	8007390 <_strtod_l+0x950>
 80072c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072ca:	b352      	cbz	r2, 8007322 <_strtod_l+0x8e2>
 80072cc:	4a9e      	ldr	r2, [pc, #632]	; (8007548 <_strtod_l+0xb08>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d12a      	bne.n	8007328 <_strtod_l+0x8e8>
 80072d2:	9b05      	ldr	r3, [sp, #20]
 80072d4:	4641      	mov	r1, r8
 80072d6:	b1fb      	cbz	r3, 8007318 <_strtod_l+0x8d8>
 80072d8:	4b9c      	ldr	r3, [pc, #624]	; (800754c <_strtod_l+0xb0c>)
 80072da:	f04f 32ff 	mov.w	r2, #4294967295
 80072de:	ea09 0303 	and.w	r3, r9, r3
 80072e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80072e6:	d81a      	bhi.n	800731e <_strtod_l+0x8de>
 80072e8:	0d1b      	lsrs	r3, r3, #20
 80072ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072ee:	fa02 f303 	lsl.w	r3, r2, r3
 80072f2:	4299      	cmp	r1, r3
 80072f4:	d118      	bne.n	8007328 <_strtod_l+0x8e8>
 80072f6:	4b96      	ldr	r3, [pc, #600]	; (8007550 <_strtod_l+0xb10>)
 80072f8:	459a      	cmp	sl, r3
 80072fa:	d102      	bne.n	8007302 <_strtod_l+0x8c2>
 80072fc:	3101      	adds	r1, #1
 80072fe:	f43f addd 	beq.w	8006ebc <_strtod_l+0x47c>
 8007302:	f04f 0800 	mov.w	r8, #0
 8007306:	4b91      	ldr	r3, [pc, #580]	; (800754c <_strtod_l+0xb0c>)
 8007308:	ea0a 0303 	and.w	r3, sl, r3
 800730c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007310:	9b05      	ldr	r3, [sp, #20]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d19a      	bne.n	800724c <_strtod_l+0x80c>
 8007316:	e5db      	b.n	8006ed0 <_strtod_l+0x490>
 8007318:	f04f 33ff 	mov.w	r3, #4294967295
 800731c:	e7e9      	b.n	80072f2 <_strtod_l+0x8b2>
 800731e:	4613      	mov	r3, r2
 8007320:	e7e7      	b.n	80072f2 <_strtod_l+0x8b2>
 8007322:	ea53 0308 	orrs.w	r3, r3, r8
 8007326:	d081      	beq.n	800722c <_strtod_l+0x7ec>
 8007328:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800732a:	b1e3      	cbz	r3, 8007366 <_strtod_l+0x926>
 800732c:	ea13 0f0a 	tst.w	r3, sl
 8007330:	d0ee      	beq.n	8007310 <_strtod_l+0x8d0>
 8007332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007334:	4640      	mov	r0, r8
 8007336:	4649      	mov	r1, r9
 8007338:	9a05      	ldr	r2, [sp, #20]
 800733a:	b1c3      	cbz	r3, 800736e <_strtod_l+0x92e>
 800733c:	f7ff fb5c 	bl	80069f8 <sulp>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007346:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007348:	f7f8 ffc4 	bl	80002d4 <__adddf3>
 800734c:	4680      	mov	r8, r0
 800734e:	4689      	mov	r9, r1
 8007350:	e7de      	b.n	8007310 <_strtod_l+0x8d0>
 8007352:	4013      	ands	r3, r2
 8007354:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007358:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800735c:	f04f 38ff 	mov.w	r8, #4294967295
 8007360:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007364:	e7d4      	b.n	8007310 <_strtod_l+0x8d0>
 8007366:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007368:	ea13 0f08 	tst.w	r3, r8
 800736c:	e7e0      	b.n	8007330 <_strtod_l+0x8f0>
 800736e:	f7ff fb43 	bl	80069f8 <sulp>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007378:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800737a:	f7f8 ffa9 	bl	80002d0 <__aeabi_dsub>
 800737e:	2200      	movs	r2, #0
 8007380:	2300      	movs	r3, #0
 8007382:	4680      	mov	r8, r0
 8007384:	4689      	mov	r9, r1
 8007386:	f7f9 fbc3 	bl	8000b10 <__aeabi_dcmpeq>
 800738a:	2800      	cmp	r0, #0
 800738c:	d0c0      	beq.n	8007310 <_strtod_l+0x8d0>
 800738e:	e606      	b.n	8006f9e <_strtod_l+0x55e>
 8007390:	4659      	mov	r1, fp
 8007392:	4630      	mov	r0, r6
 8007394:	f7ff fabe 	bl	8006914 <__ratio>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80073a0:	2200      	movs	r2, #0
 80073a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073a6:	f7f9 fbc7 	bl	8000b38 <__aeabi_dcmple>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d06f      	beq.n	800748e <_strtod_l+0xa4e>
 80073ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d17c      	bne.n	80074ae <_strtod_l+0xa6e>
 80073b4:	f1b8 0f00 	cmp.w	r8, #0
 80073b8:	d159      	bne.n	800746e <_strtod_l+0xa2e>
 80073ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d17b      	bne.n	80074ba <_strtod_l+0xa7a>
 80073c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073c6:	2200      	movs	r2, #0
 80073c8:	4b62      	ldr	r3, [pc, #392]	; (8007554 <_strtod_l+0xb14>)
 80073ca:	f7f9 fbab 	bl	8000b24 <__aeabi_dcmplt>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d15a      	bne.n	8007488 <_strtod_l+0xa48>
 80073d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073d6:	2200      	movs	r2, #0
 80073d8:	4b5f      	ldr	r3, [pc, #380]	; (8007558 <_strtod_l+0xb18>)
 80073da:	f7f9 f931 	bl	8000640 <__aeabi_dmul>
 80073de:	4605      	mov	r5, r0
 80073e0:	460f      	mov	r7, r1
 80073e2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80073e6:	9506      	str	r5, [sp, #24]
 80073e8:	9307      	str	r3, [sp, #28]
 80073ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80073f2:	4b56      	ldr	r3, [pc, #344]	; (800754c <_strtod_l+0xb0c>)
 80073f4:	4a55      	ldr	r2, [pc, #340]	; (800754c <_strtod_l+0xb0c>)
 80073f6:	ea0a 0303 	and.w	r3, sl, r3
 80073fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80073fc:	4b57      	ldr	r3, [pc, #348]	; (800755c <_strtod_l+0xb1c>)
 80073fe:	ea0a 0202 	and.w	r2, sl, r2
 8007402:	429a      	cmp	r2, r3
 8007404:	f040 80b0 	bne.w	8007568 <_strtod_l+0xb28>
 8007408:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800740c:	4640      	mov	r0, r8
 800740e:	4649      	mov	r1, r9
 8007410:	f7ff f9c2 	bl	8006798 <__ulp>
 8007414:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007418:	f7f9 f912 	bl	8000640 <__aeabi_dmul>
 800741c:	4642      	mov	r2, r8
 800741e:	464b      	mov	r3, r9
 8007420:	f7f8 ff58 	bl	80002d4 <__adddf3>
 8007424:	f8df a124 	ldr.w	sl, [pc, #292]	; 800754c <_strtod_l+0xb0c>
 8007428:	4a4d      	ldr	r2, [pc, #308]	; (8007560 <_strtod_l+0xb20>)
 800742a:	ea01 0a0a 	and.w	sl, r1, sl
 800742e:	4592      	cmp	sl, r2
 8007430:	4680      	mov	r8, r0
 8007432:	d948      	bls.n	80074c6 <_strtod_l+0xa86>
 8007434:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007436:	4b46      	ldr	r3, [pc, #280]	; (8007550 <_strtod_l+0xb10>)
 8007438:	429a      	cmp	r2, r3
 800743a:	d103      	bne.n	8007444 <_strtod_l+0xa04>
 800743c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800743e:	3301      	adds	r3, #1
 8007440:	f43f ad3c 	beq.w	8006ebc <_strtod_l+0x47c>
 8007444:	f04f 38ff 	mov.w	r8, #4294967295
 8007448:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007550 <_strtod_l+0xb10>
 800744c:	4620      	mov	r0, r4
 800744e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007450:	f7fe fe76 	bl	8006140 <_Bfree>
 8007454:	4620      	mov	r0, r4
 8007456:	9908      	ldr	r1, [sp, #32]
 8007458:	f7fe fe72 	bl	8006140 <_Bfree>
 800745c:	4659      	mov	r1, fp
 800745e:	4620      	mov	r0, r4
 8007460:	f7fe fe6e 	bl	8006140 <_Bfree>
 8007464:	4631      	mov	r1, r6
 8007466:	4620      	mov	r0, r4
 8007468:	f7fe fe6a 	bl	8006140 <_Bfree>
 800746c:	e605      	b.n	800707a <_strtod_l+0x63a>
 800746e:	f1b8 0f01 	cmp.w	r8, #1
 8007472:	d103      	bne.n	800747c <_strtod_l+0xa3c>
 8007474:	f1b9 0f00 	cmp.w	r9, #0
 8007478:	f43f ad91 	beq.w	8006f9e <_strtod_l+0x55e>
 800747c:	2200      	movs	r2, #0
 800747e:	4b39      	ldr	r3, [pc, #228]	; (8007564 <_strtod_l+0xb24>)
 8007480:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007482:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007486:	e016      	b.n	80074b6 <_strtod_l+0xa76>
 8007488:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800748a:	4f33      	ldr	r7, [pc, #204]	; (8007558 <_strtod_l+0xb18>)
 800748c:	e7a9      	b.n	80073e2 <_strtod_l+0x9a2>
 800748e:	4b32      	ldr	r3, [pc, #200]	; (8007558 <_strtod_l+0xb18>)
 8007490:	2200      	movs	r2, #0
 8007492:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007496:	f7f9 f8d3 	bl	8000640 <__aeabi_dmul>
 800749a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800749c:	4605      	mov	r5, r0
 800749e:	460f      	mov	r7, r1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d09e      	beq.n	80073e2 <_strtod_l+0x9a2>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80074ac:	e79d      	b.n	80073ea <_strtod_l+0x9aa>
 80074ae:	2200      	movs	r2, #0
 80074b0:	4b28      	ldr	r3, [pc, #160]	; (8007554 <_strtod_l+0xb14>)
 80074b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80074b6:	4f27      	ldr	r7, [pc, #156]	; (8007554 <_strtod_l+0xb14>)
 80074b8:	e797      	b.n	80073ea <_strtod_l+0x9aa>
 80074ba:	2200      	movs	r2, #0
 80074bc:	4b29      	ldr	r3, [pc, #164]	; (8007564 <_strtod_l+0xb24>)
 80074be:	4645      	mov	r5, r8
 80074c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80074c4:	e7f7      	b.n	80074b6 <_strtod_l+0xa76>
 80074c6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80074ca:	9b05      	ldr	r3, [sp, #20]
 80074cc:	46ca      	mov	sl, r9
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1bc      	bne.n	800744c <_strtod_l+0xa0c>
 80074d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074d8:	0d1b      	lsrs	r3, r3, #20
 80074da:	051b      	lsls	r3, r3, #20
 80074dc:	429a      	cmp	r2, r3
 80074de:	d1b5      	bne.n	800744c <_strtod_l+0xa0c>
 80074e0:	4628      	mov	r0, r5
 80074e2:	4639      	mov	r1, r7
 80074e4:	f7f9 fd78 	bl	8000fd8 <__aeabi_d2lz>
 80074e8:	f7f9 f87c 	bl	80005e4 <__aeabi_l2d>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4628      	mov	r0, r5
 80074f2:	4639      	mov	r1, r7
 80074f4:	f7f8 feec 	bl	80002d0 <__aeabi_dsub>
 80074f8:	460b      	mov	r3, r1
 80074fa:	4602      	mov	r2, r0
 80074fc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007500:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007506:	ea4a 0a08 	orr.w	sl, sl, r8
 800750a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800750e:	d06c      	beq.n	80075ea <_strtod_l+0xbaa>
 8007510:	a309      	add	r3, pc, #36	; (adr r3, 8007538 <_strtod_l+0xaf8>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f7f9 fb05 	bl	8000b24 <__aeabi_dcmplt>
 800751a:	2800      	cmp	r0, #0
 800751c:	f47f acd8 	bne.w	8006ed0 <_strtod_l+0x490>
 8007520:	a307      	add	r3, pc, #28	; (adr r3, 8007540 <_strtod_l+0xb00>)
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800752a:	f7f9 fb19 	bl	8000b60 <__aeabi_dcmpgt>
 800752e:	2800      	cmp	r0, #0
 8007530:	d08c      	beq.n	800744c <_strtod_l+0xa0c>
 8007532:	e4cd      	b.n	8006ed0 <_strtod_l+0x490>
 8007534:	f3af 8000 	nop.w
 8007538:	94a03595 	.word	0x94a03595
 800753c:	3fdfffff 	.word	0x3fdfffff
 8007540:	35afe535 	.word	0x35afe535
 8007544:	3fe00000 	.word	0x3fe00000
 8007548:	000fffff 	.word	0x000fffff
 800754c:	7ff00000 	.word	0x7ff00000
 8007550:	7fefffff 	.word	0x7fefffff
 8007554:	3ff00000 	.word	0x3ff00000
 8007558:	3fe00000 	.word	0x3fe00000
 800755c:	7fe00000 	.word	0x7fe00000
 8007560:	7c9fffff 	.word	0x7c9fffff
 8007564:	bff00000 	.word	0xbff00000
 8007568:	9b05      	ldr	r3, [sp, #20]
 800756a:	b333      	cbz	r3, 80075ba <_strtod_l+0xb7a>
 800756c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800756e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007572:	d822      	bhi.n	80075ba <_strtod_l+0xb7a>
 8007574:	a328      	add	r3, pc, #160	; (adr r3, 8007618 <_strtod_l+0xbd8>)
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	4628      	mov	r0, r5
 800757c:	4639      	mov	r1, r7
 800757e:	f7f9 fadb 	bl	8000b38 <__aeabi_dcmple>
 8007582:	b1a0      	cbz	r0, 80075ae <_strtod_l+0xb6e>
 8007584:	4639      	mov	r1, r7
 8007586:	4628      	mov	r0, r5
 8007588:	f7f9 fb32 	bl	8000bf0 <__aeabi_d2uiz>
 800758c:	2801      	cmp	r0, #1
 800758e:	bf38      	it	cc
 8007590:	2001      	movcc	r0, #1
 8007592:	f7f8 ffdb 	bl	800054c <__aeabi_ui2d>
 8007596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007598:	4605      	mov	r5, r0
 800759a:	460f      	mov	r7, r1
 800759c:	bb03      	cbnz	r3, 80075e0 <_strtod_l+0xba0>
 800759e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075a2:	9014      	str	r0, [sp, #80]	; 0x50
 80075a4:	9315      	str	r3, [sp, #84]	; 0x54
 80075a6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80075aa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80075ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075b2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80075b6:	1a9b      	subs	r3, r3, r2
 80075b8:	9311      	str	r3, [sp, #68]	; 0x44
 80075ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80075bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80075be:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80075c2:	f7ff f8e9 	bl	8006798 <__ulp>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4640      	mov	r0, r8
 80075cc:	4649      	mov	r1, r9
 80075ce:	f7f9 f837 	bl	8000640 <__aeabi_dmul>
 80075d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075d6:	f7f8 fe7d 	bl	80002d4 <__adddf3>
 80075da:	4680      	mov	r8, r0
 80075dc:	4689      	mov	r9, r1
 80075de:	e774      	b.n	80074ca <_strtod_l+0xa8a>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80075e8:	e7dd      	b.n	80075a6 <_strtod_l+0xb66>
 80075ea:	a30d      	add	r3, pc, #52	; (adr r3, 8007620 <_strtod_l+0xbe0>)
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f7f9 fa98 	bl	8000b24 <__aeabi_dcmplt>
 80075f4:	e79b      	b.n	800752e <_strtod_l+0xaee>
 80075f6:	2300      	movs	r3, #0
 80075f8:	930e      	str	r3, [sp, #56]	; 0x38
 80075fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	f7ff ba5b 	b.w	8006aba <_strtod_l+0x7a>
 8007604:	2a65      	cmp	r2, #101	; 0x65
 8007606:	f43f ab52 	beq.w	8006cae <_strtod_l+0x26e>
 800760a:	2a45      	cmp	r2, #69	; 0x45
 800760c:	f43f ab4f 	beq.w	8006cae <_strtod_l+0x26e>
 8007610:	2301      	movs	r3, #1
 8007612:	f7ff bb87 	b.w	8006d24 <_strtod_l+0x2e4>
 8007616:	bf00      	nop
 8007618:	ffc00000 	.word	0xffc00000
 800761c:	41dfffff 	.word	0x41dfffff
 8007620:	94a03595 	.word	0x94a03595
 8007624:	3fcfffff 	.word	0x3fcfffff

08007628 <_strtod_r>:
 8007628:	4b01      	ldr	r3, [pc, #4]	; (8007630 <_strtod_r+0x8>)
 800762a:	f7ff ba09 	b.w	8006a40 <_strtod_l>
 800762e:	bf00      	nop
 8007630:	20000068 	.word	0x20000068

08007634 <__ssputs_r>:
 8007634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007638:	461f      	mov	r7, r3
 800763a:	688e      	ldr	r6, [r1, #8]
 800763c:	4682      	mov	sl, r0
 800763e:	42be      	cmp	r6, r7
 8007640:	460c      	mov	r4, r1
 8007642:	4690      	mov	r8, r2
 8007644:	680b      	ldr	r3, [r1, #0]
 8007646:	d82c      	bhi.n	80076a2 <__ssputs_r+0x6e>
 8007648:	898a      	ldrh	r2, [r1, #12]
 800764a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800764e:	d026      	beq.n	800769e <__ssputs_r+0x6a>
 8007650:	6965      	ldr	r5, [r4, #20]
 8007652:	6909      	ldr	r1, [r1, #16]
 8007654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007658:	eba3 0901 	sub.w	r9, r3, r1
 800765c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007660:	1c7b      	adds	r3, r7, #1
 8007662:	444b      	add	r3, r9
 8007664:	106d      	asrs	r5, r5, #1
 8007666:	429d      	cmp	r5, r3
 8007668:	bf38      	it	cc
 800766a:	461d      	movcc	r5, r3
 800766c:	0553      	lsls	r3, r2, #21
 800766e:	d527      	bpl.n	80076c0 <__ssputs_r+0x8c>
 8007670:	4629      	mov	r1, r5
 8007672:	f7fe fc99 	bl	8005fa8 <_malloc_r>
 8007676:	4606      	mov	r6, r0
 8007678:	b360      	cbz	r0, 80076d4 <__ssputs_r+0xa0>
 800767a:	464a      	mov	r2, r9
 800767c:	6921      	ldr	r1, [r4, #16]
 800767e:	f000 fbef 	bl	8007e60 <memcpy>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768c:	81a3      	strh	r3, [r4, #12]
 800768e:	6126      	str	r6, [r4, #16]
 8007690:	444e      	add	r6, r9
 8007692:	6026      	str	r6, [r4, #0]
 8007694:	463e      	mov	r6, r7
 8007696:	6165      	str	r5, [r4, #20]
 8007698:	eba5 0509 	sub.w	r5, r5, r9
 800769c:	60a5      	str	r5, [r4, #8]
 800769e:	42be      	cmp	r6, r7
 80076a0:	d900      	bls.n	80076a4 <__ssputs_r+0x70>
 80076a2:	463e      	mov	r6, r7
 80076a4:	4632      	mov	r2, r6
 80076a6:	4641      	mov	r1, r8
 80076a8:	6820      	ldr	r0, [r4, #0]
 80076aa:	f000 fb7a 	bl	8007da2 <memmove>
 80076ae:	2000      	movs	r0, #0
 80076b0:	68a3      	ldr	r3, [r4, #8]
 80076b2:	1b9b      	subs	r3, r3, r6
 80076b4:	60a3      	str	r3, [r4, #8]
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	4433      	add	r3, r6
 80076ba:	6023      	str	r3, [r4, #0]
 80076bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c0:	462a      	mov	r2, r5
 80076c2:	f000 ff68 	bl	8008596 <_realloc_r>
 80076c6:	4606      	mov	r6, r0
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d1e0      	bne.n	800768e <__ssputs_r+0x5a>
 80076cc:	4650      	mov	r0, sl
 80076ce:	6921      	ldr	r1, [r4, #16]
 80076d0:	f7fe fbfa 	bl	8005ec8 <_free_r>
 80076d4:	230c      	movs	r3, #12
 80076d6:	f8ca 3000 	str.w	r3, [sl]
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	f04f 30ff 	mov.w	r0, #4294967295
 80076e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e4:	81a3      	strh	r3, [r4, #12]
 80076e6:	e7e9      	b.n	80076bc <__ssputs_r+0x88>

080076e8 <_svfiprintf_r>:
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	4698      	mov	r8, r3
 80076ee:	898b      	ldrh	r3, [r1, #12]
 80076f0:	4607      	mov	r7, r0
 80076f2:	061b      	lsls	r3, r3, #24
 80076f4:	460d      	mov	r5, r1
 80076f6:	4614      	mov	r4, r2
 80076f8:	b09d      	sub	sp, #116	; 0x74
 80076fa:	d50e      	bpl.n	800771a <_svfiprintf_r+0x32>
 80076fc:	690b      	ldr	r3, [r1, #16]
 80076fe:	b963      	cbnz	r3, 800771a <_svfiprintf_r+0x32>
 8007700:	2140      	movs	r1, #64	; 0x40
 8007702:	f7fe fc51 	bl	8005fa8 <_malloc_r>
 8007706:	6028      	str	r0, [r5, #0]
 8007708:	6128      	str	r0, [r5, #16]
 800770a:	b920      	cbnz	r0, 8007716 <_svfiprintf_r+0x2e>
 800770c:	230c      	movs	r3, #12
 800770e:	603b      	str	r3, [r7, #0]
 8007710:	f04f 30ff 	mov.w	r0, #4294967295
 8007714:	e0d0      	b.n	80078b8 <_svfiprintf_r+0x1d0>
 8007716:	2340      	movs	r3, #64	; 0x40
 8007718:	616b      	str	r3, [r5, #20]
 800771a:	2300      	movs	r3, #0
 800771c:	9309      	str	r3, [sp, #36]	; 0x24
 800771e:	2320      	movs	r3, #32
 8007720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007724:	2330      	movs	r3, #48	; 0x30
 8007726:	f04f 0901 	mov.w	r9, #1
 800772a:	f8cd 800c 	str.w	r8, [sp, #12]
 800772e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80078d0 <_svfiprintf_r+0x1e8>
 8007732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007736:	4623      	mov	r3, r4
 8007738:	469a      	mov	sl, r3
 800773a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800773e:	b10a      	cbz	r2, 8007744 <_svfiprintf_r+0x5c>
 8007740:	2a25      	cmp	r2, #37	; 0x25
 8007742:	d1f9      	bne.n	8007738 <_svfiprintf_r+0x50>
 8007744:	ebba 0b04 	subs.w	fp, sl, r4
 8007748:	d00b      	beq.n	8007762 <_svfiprintf_r+0x7a>
 800774a:	465b      	mov	r3, fp
 800774c:	4622      	mov	r2, r4
 800774e:	4629      	mov	r1, r5
 8007750:	4638      	mov	r0, r7
 8007752:	f7ff ff6f 	bl	8007634 <__ssputs_r>
 8007756:	3001      	adds	r0, #1
 8007758:	f000 80a9 	beq.w	80078ae <_svfiprintf_r+0x1c6>
 800775c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800775e:	445a      	add	r2, fp
 8007760:	9209      	str	r2, [sp, #36]	; 0x24
 8007762:	f89a 3000 	ldrb.w	r3, [sl]
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 80a1 	beq.w	80078ae <_svfiprintf_r+0x1c6>
 800776c:	2300      	movs	r3, #0
 800776e:	f04f 32ff 	mov.w	r2, #4294967295
 8007772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007776:	f10a 0a01 	add.w	sl, sl, #1
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	9307      	str	r3, [sp, #28]
 800777e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007782:	931a      	str	r3, [sp, #104]	; 0x68
 8007784:	4654      	mov	r4, sl
 8007786:	2205      	movs	r2, #5
 8007788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778c:	4850      	ldr	r0, [pc, #320]	; (80078d0 <_svfiprintf_r+0x1e8>)
 800778e:	f7fd fcfb 	bl	8005188 <memchr>
 8007792:	9a04      	ldr	r2, [sp, #16]
 8007794:	b9d8      	cbnz	r0, 80077ce <_svfiprintf_r+0xe6>
 8007796:	06d0      	lsls	r0, r2, #27
 8007798:	bf44      	itt	mi
 800779a:	2320      	movmi	r3, #32
 800779c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a0:	0711      	lsls	r1, r2, #28
 80077a2:	bf44      	itt	mi
 80077a4:	232b      	movmi	r3, #43	; 0x2b
 80077a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077aa:	f89a 3000 	ldrb.w	r3, [sl]
 80077ae:	2b2a      	cmp	r3, #42	; 0x2a
 80077b0:	d015      	beq.n	80077de <_svfiprintf_r+0xf6>
 80077b2:	4654      	mov	r4, sl
 80077b4:	2000      	movs	r0, #0
 80077b6:	f04f 0c0a 	mov.w	ip, #10
 80077ba:	9a07      	ldr	r2, [sp, #28]
 80077bc:	4621      	mov	r1, r4
 80077be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c2:	3b30      	subs	r3, #48	; 0x30
 80077c4:	2b09      	cmp	r3, #9
 80077c6:	d94d      	bls.n	8007864 <_svfiprintf_r+0x17c>
 80077c8:	b1b0      	cbz	r0, 80077f8 <_svfiprintf_r+0x110>
 80077ca:	9207      	str	r2, [sp, #28]
 80077cc:	e014      	b.n	80077f8 <_svfiprintf_r+0x110>
 80077ce:	eba0 0308 	sub.w	r3, r0, r8
 80077d2:	fa09 f303 	lsl.w	r3, r9, r3
 80077d6:	4313      	orrs	r3, r2
 80077d8:	46a2      	mov	sl, r4
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	e7d2      	b.n	8007784 <_svfiprintf_r+0x9c>
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	1d19      	adds	r1, r3, #4
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	9103      	str	r1, [sp, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bfbb      	ittet	lt
 80077ea:	425b      	neglt	r3, r3
 80077ec:	f042 0202 	orrlt.w	r2, r2, #2
 80077f0:	9307      	strge	r3, [sp, #28]
 80077f2:	9307      	strlt	r3, [sp, #28]
 80077f4:	bfb8      	it	lt
 80077f6:	9204      	strlt	r2, [sp, #16]
 80077f8:	7823      	ldrb	r3, [r4, #0]
 80077fa:	2b2e      	cmp	r3, #46	; 0x2e
 80077fc:	d10c      	bne.n	8007818 <_svfiprintf_r+0x130>
 80077fe:	7863      	ldrb	r3, [r4, #1]
 8007800:	2b2a      	cmp	r3, #42	; 0x2a
 8007802:	d134      	bne.n	800786e <_svfiprintf_r+0x186>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	3402      	adds	r4, #2
 8007808:	1d1a      	adds	r2, r3, #4
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	9203      	str	r2, [sp, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	bfb8      	it	lt
 8007812:	f04f 33ff 	movlt.w	r3, #4294967295
 8007816:	9305      	str	r3, [sp, #20]
 8007818:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80078d4 <_svfiprintf_r+0x1ec>
 800781c:	2203      	movs	r2, #3
 800781e:	4650      	mov	r0, sl
 8007820:	7821      	ldrb	r1, [r4, #0]
 8007822:	f7fd fcb1 	bl	8005188 <memchr>
 8007826:	b138      	cbz	r0, 8007838 <_svfiprintf_r+0x150>
 8007828:	2240      	movs	r2, #64	; 0x40
 800782a:	9b04      	ldr	r3, [sp, #16]
 800782c:	eba0 000a 	sub.w	r0, r0, sl
 8007830:	4082      	lsls	r2, r0
 8007832:	4313      	orrs	r3, r2
 8007834:	3401      	adds	r4, #1
 8007836:	9304      	str	r3, [sp, #16]
 8007838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783c:	2206      	movs	r2, #6
 800783e:	4826      	ldr	r0, [pc, #152]	; (80078d8 <_svfiprintf_r+0x1f0>)
 8007840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007844:	f7fd fca0 	bl	8005188 <memchr>
 8007848:	2800      	cmp	r0, #0
 800784a:	d038      	beq.n	80078be <_svfiprintf_r+0x1d6>
 800784c:	4b23      	ldr	r3, [pc, #140]	; (80078dc <_svfiprintf_r+0x1f4>)
 800784e:	bb1b      	cbnz	r3, 8007898 <_svfiprintf_r+0x1b0>
 8007850:	9b03      	ldr	r3, [sp, #12]
 8007852:	3307      	adds	r3, #7
 8007854:	f023 0307 	bic.w	r3, r3, #7
 8007858:	3308      	adds	r3, #8
 800785a:	9303      	str	r3, [sp, #12]
 800785c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785e:	4433      	add	r3, r6
 8007860:	9309      	str	r3, [sp, #36]	; 0x24
 8007862:	e768      	b.n	8007736 <_svfiprintf_r+0x4e>
 8007864:	460c      	mov	r4, r1
 8007866:	2001      	movs	r0, #1
 8007868:	fb0c 3202 	mla	r2, ip, r2, r3
 800786c:	e7a6      	b.n	80077bc <_svfiprintf_r+0xd4>
 800786e:	2300      	movs	r3, #0
 8007870:	f04f 0c0a 	mov.w	ip, #10
 8007874:	4619      	mov	r1, r3
 8007876:	3401      	adds	r4, #1
 8007878:	9305      	str	r3, [sp, #20]
 800787a:	4620      	mov	r0, r4
 800787c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007880:	3a30      	subs	r2, #48	; 0x30
 8007882:	2a09      	cmp	r2, #9
 8007884:	d903      	bls.n	800788e <_svfiprintf_r+0x1a6>
 8007886:	2b00      	cmp	r3, #0
 8007888:	d0c6      	beq.n	8007818 <_svfiprintf_r+0x130>
 800788a:	9105      	str	r1, [sp, #20]
 800788c:	e7c4      	b.n	8007818 <_svfiprintf_r+0x130>
 800788e:	4604      	mov	r4, r0
 8007890:	2301      	movs	r3, #1
 8007892:	fb0c 2101 	mla	r1, ip, r1, r2
 8007896:	e7f0      	b.n	800787a <_svfiprintf_r+0x192>
 8007898:	ab03      	add	r3, sp, #12
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	462a      	mov	r2, r5
 800789e:	4638      	mov	r0, r7
 80078a0:	4b0f      	ldr	r3, [pc, #60]	; (80078e0 <_svfiprintf_r+0x1f8>)
 80078a2:	a904      	add	r1, sp, #16
 80078a4:	f7fc fc7a 	bl	800419c <_printf_float>
 80078a8:	1c42      	adds	r2, r0, #1
 80078aa:	4606      	mov	r6, r0
 80078ac:	d1d6      	bne.n	800785c <_svfiprintf_r+0x174>
 80078ae:	89ab      	ldrh	r3, [r5, #12]
 80078b0:	065b      	lsls	r3, r3, #25
 80078b2:	f53f af2d 	bmi.w	8007710 <_svfiprintf_r+0x28>
 80078b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078b8:	b01d      	add	sp, #116	; 0x74
 80078ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078be:	ab03      	add	r3, sp, #12
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	462a      	mov	r2, r5
 80078c4:	4638      	mov	r0, r7
 80078c6:	4b06      	ldr	r3, [pc, #24]	; (80078e0 <_svfiprintf_r+0x1f8>)
 80078c8:	a904      	add	r1, sp, #16
 80078ca:	f7fc ff07 	bl	80046dc <_printf_i>
 80078ce:	e7eb      	b.n	80078a8 <_svfiprintf_r+0x1c0>
 80078d0:	08008a98 	.word	0x08008a98
 80078d4:	08008a9e 	.word	0x08008a9e
 80078d8:	08008aa2 	.word	0x08008aa2
 80078dc:	0800419d 	.word	0x0800419d
 80078e0:	08007635 	.word	0x08007635

080078e4 <__sfputc_r>:
 80078e4:	6893      	ldr	r3, [r2, #8]
 80078e6:	b410      	push	{r4}
 80078e8:	3b01      	subs	r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	6093      	str	r3, [r2, #8]
 80078ee:	da07      	bge.n	8007900 <__sfputc_r+0x1c>
 80078f0:	6994      	ldr	r4, [r2, #24]
 80078f2:	42a3      	cmp	r3, r4
 80078f4:	db01      	blt.n	80078fa <__sfputc_r+0x16>
 80078f6:	290a      	cmp	r1, #10
 80078f8:	d102      	bne.n	8007900 <__sfputc_r+0x1c>
 80078fa:	bc10      	pop	{r4}
 80078fc:	f7fd bb31 	b.w	8004f62 <__swbuf_r>
 8007900:	6813      	ldr	r3, [r2, #0]
 8007902:	1c58      	adds	r0, r3, #1
 8007904:	6010      	str	r0, [r2, #0]
 8007906:	7019      	strb	r1, [r3, #0]
 8007908:	4608      	mov	r0, r1
 800790a:	bc10      	pop	{r4}
 800790c:	4770      	bx	lr

0800790e <__sfputs_r>:
 800790e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007910:	4606      	mov	r6, r0
 8007912:	460f      	mov	r7, r1
 8007914:	4614      	mov	r4, r2
 8007916:	18d5      	adds	r5, r2, r3
 8007918:	42ac      	cmp	r4, r5
 800791a:	d101      	bne.n	8007920 <__sfputs_r+0x12>
 800791c:	2000      	movs	r0, #0
 800791e:	e007      	b.n	8007930 <__sfputs_r+0x22>
 8007920:	463a      	mov	r2, r7
 8007922:	4630      	mov	r0, r6
 8007924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007928:	f7ff ffdc 	bl	80078e4 <__sfputc_r>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d1f3      	bne.n	8007918 <__sfputs_r+0xa>
 8007930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007934 <_vfiprintf_r>:
 8007934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007938:	460d      	mov	r5, r1
 800793a:	4614      	mov	r4, r2
 800793c:	4698      	mov	r8, r3
 800793e:	4606      	mov	r6, r0
 8007940:	b09d      	sub	sp, #116	; 0x74
 8007942:	b118      	cbz	r0, 800794c <_vfiprintf_r+0x18>
 8007944:	6a03      	ldr	r3, [r0, #32]
 8007946:	b90b      	cbnz	r3, 800794c <_vfiprintf_r+0x18>
 8007948:	f7fd fa72 	bl	8004e30 <__sinit>
 800794c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800794e:	07d9      	lsls	r1, r3, #31
 8007950:	d405      	bmi.n	800795e <_vfiprintf_r+0x2a>
 8007952:	89ab      	ldrh	r3, [r5, #12]
 8007954:	059a      	lsls	r2, r3, #22
 8007956:	d402      	bmi.n	800795e <_vfiprintf_r+0x2a>
 8007958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800795a:	f7fd fc13 	bl	8005184 <__retarget_lock_acquire_recursive>
 800795e:	89ab      	ldrh	r3, [r5, #12]
 8007960:	071b      	lsls	r3, r3, #28
 8007962:	d501      	bpl.n	8007968 <_vfiprintf_r+0x34>
 8007964:	692b      	ldr	r3, [r5, #16]
 8007966:	b99b      	cbnz	r3, 8007990 <_vfiprintf_r+0x5c>
 8007968:	4629      	mov	r1, r5
 800796a:	4630      	mov	r0, r6
 800796c:	f7fd fb36 	bl	8004fdc <__swsetup_r>
 8007970:	b170      	cbz	r0, 8007990 <_vfiprintf_r+0x5c>
 8007972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007974:	07dc      	lsls	r4, r3, #31
 8007976:	d504      	bpl.n	8007982 <_vfiprintf_r+0x4e>
 8007978:	f04f 30ff 	mov.w	r0, #4294967295
 800797c:	b01d      	add	sp, #116	; 0x74
 800797e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007982:	89ab      	ldrh	r3, [r5, #12]
 8007984:	0598      	lsls	r0, r3, #22
 8007986:	d4f7      	bmi.n	8007978 <_vfiprintf_r+0x44>
 8007988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800798a:	f7fd fbfc 	bl	8005186 <__retarget_lock_release_recursive>
 800798e:	e7f3      	b.n	8007978 <_vfiprintf_r+0x44>
 8007990:	2300      	movs	r3, #0
 8007992:	9309      	str	r3, [sp, #36]	; 0x24
 8007994:	2320      	movs	r3, #32
 8007996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800799a:	2330      	movs	r3, #48	; 0x30
 800799c:	f04f 0901 	mov.w	r9, #1
 80079a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80079a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007b54 <_vfiprintf_r+0x220>
 80079a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079ac:	4623      	mov	r3, r4
 80079ae:	469a      	mov	sl, r3
 80079b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b4:	b10a      	cbz	r2, 80079ba <_vfiprintf_r+0x86>
 80079b6:	2a25      	cmp	r2, #37	; 0x25
 80079b8:	d1f9      	bne.n	80079ae <_vfiprintf_r+0x7a>
 80079ba:	ebba 0b04 	subs.w	fp, sl, r4
 80079be:	d00b      	beq.n	80079d8 <_vfiprintf_r+0xa4>
 80079c0:	465b      	mov	r3, fp
 80079c2:	4622      	mov	r2, r4
 80079c4:	4629      	mov	r1, r5
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7ff ffa1 	bl	800790e <__sfputs_r>
 80079cc:	3001      	adds	r0, #1
 80079ce:	f000 80a9 	beq.w	8007b24 <_vfiprintf_r+0x1f0>
 80079d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d4:	445a      	add	r2, fp
 80079d6:	9209      	str	r2, [sp, #36]	; 0x24
 80079d8:	f89a 3000 	ldrb.w	r3, [sl]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 80a1 	beq.w	8007b24 <_vfiprintf_r+0x1f0>
 80079e2:	2300      	movs	r3, #0
 80079e4:	f04f 32ff 	mov.w	r2, #4294967295
 80079e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ec:	f10a 0a01 	add.w	sl, sl, #1
 80079f0:	9304      	str	r3, [sp, #16]
 80079f2:	9307      	str	r3, [sp, #28]
 80079f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079f8:	931a      	str	r3, [sp, #104]	; 0x68
 80079fa:	4654      	mov	r4, sl
 80079fc:	2205      	movs	r2, #5
 80079fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a02:	4854      	ldr	r0, [pc, #336]	; (8007b54 <_vfiprintf_r+0x220>)
 8007a04:	f7fd fbc0 	bl	8005188 <memchr>
 8007a08:	9a04      	ldr	r2, [sp, #16]
 8007a0a:	b9d8      	cbnz	r0, 8007a44 <_vfiprintf_r+0x110>
 8007a0c:	06d1      	lsls	r1, r2, #27
 8007a0e:	bf44      	itt	mi
 8007a10:	2320      	movmi	r3, #32
 8007a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a16:	0713      	lsls	r3, r2, #28
 8007a18:	bf44      	itt	mi
 8007a1a:	232b      	movmi	r3, #43	; 0x2b
 8007a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a20:	f89a 3000 	ldrb.w	r3, [sl]
 8007a24:	2b2a      	cmp	r3, #42	; 0x2a
 8007a26:	d015      	beq.n	8007a54 <_vfiprintf_r+0x120>
 8007a28:	4654      	mov	r4, sl
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	f04f 0c0a 	mov.w	ip, #10
 8007a30:	9a07      	ldr	r2, [sp, #28]
 8007a32:	4621      	mov	r1, r4
 8007a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a38:	3b30      	subs	r3, #48	; 0x30
 8007a3a:	2b09      	cmp	r3, #9
 8007a3c:	d94d      	bls.n	8007ada <_vfiprintf_r+0x1a6>
 8007a3e:	b1b0      	cbz	r0, 8007a6e <_vfiprintf_r+0x13a>
 8007a40:	9207      	str	r2, [sp, #28]
 8007a42:	e014      	b.n	8007a6e <_vfiprintf_r+0x13a>
 8007a44:	eba0 0308 	sub.w	r3, r0, r8
 8007a48:	fa09 f303 	lsl.w	r3, r9, r3
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	46a2      	mov	sl, r4
 8007a50:	9304      	str	r3, [sp, #16]
 8007a52:	e7d2      	b.n	80079fa <_vfiprintf_r+0xc6>
 8007a54:	9b03      	ldr	r3, [sp, #12]
 8007a56:	1d19      	adds	r1, r3, #4
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	9103      	str	r1, [sp, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	bfbb      	ittet	lt
 8007a60:	425b      	neglt	r3, r3
 8007a62:	f042 0202 	orrlt.w	r2, r2, #2
 8007a66:	9307      	strge	r3, [sp, #28]
 8007a68:	9307      	strlt	r3, [sp, #28]
 8007a6a:	bfb8      	it	lt
 8007a6c:	9204      	strlt	r2, [sp, #16]
 8007a6e:	7823      	ldrb	r3, [r4, #0]
 8007a70:	2b2e      	cmp	r3, #46	; 0x2e
 8007a72:	d10c      	bne.n	8007a8e <_vfiprintf_r+0x15a>
 8007a74:	7863      	ldrb	r3, [r4, #1]
 8007a76:	2b2a      	cmp	r3, #42	; 0x2a
 8007a78:	d134      	bne.n	8007ae4 <_vfiprintf_r+0x1b0>
 8007a7a:	9b03      	ldr	r3, [sp, #12]
 8007a7c:	3402      	adds	r4, #2
 8007a7e:	1d1a      	adds	r2, r3, #4
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	9203      	str	r2, [sp, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	bfb8      	it	lt
 8007a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a8c:	9305      	str	r3, [sp, #20]
 8007a8e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b58 <_vfiprintf_r+0x224>
 8007a92:	2203      	movs	r2, #3
 8007a94:	4650      	mov	r0, sl
 8007a96:	7821      	ldrb	r1, [r4, #0]
 8007a98:	f7fd fb76 	bl	8005188 <memchr>
 8007a9c:	b138      	cbz	r0, 8007aae <_vfiprintf_r+0x17a>
 8007a9e:	2240      	movs	r2, #64	; 0x40
 8007aa0:	9b04      	ldr	r3, [sp, #16]
 8007aa2:	eba0 000a 	sub.w	r0, r0, sl
 8007aa6:	4082      	lsls	r2, r0
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	3401      	adds	r4, #1
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab2:	2206      	movs	r2, #6
 8007ab4:	4829      	ldr	r0, [pc, #164]	; (8007b5c <_vfiprintf_r+0x228>)
 8007ab6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aba:	f7fd fb65 	bl	8005188 <memchr>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d03f      	beq.n	8007b42 <_vfiprintf_r+0x20e>
 8007ac2:	4b27      	ldr	r3, [pc, #156]	; (8007b60 <_vfiprintf_r+0x22c>)
 8007ac4:	bb1b      	cbnz	r3, 8007b0e <_vfiprintf_r+0x1da>
 8007ac6:	9b03      	ldr	r3, [sp, #12]
 8007ac8:	3307      	adds	r3, #7
 8007aca:	f023 0307 	bic.w	r3, r3, #7
 8007ace:	3308      	adds	r3, #8
 8007ad0:	9303      	str	r3, [sp, #12]
 8007ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad4:	443b      	add	r3, r7
 8007ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad8:	e768      	b.n	80079ac <_vfiprintf_r+0x78>
 8007ada:	460c      	mov	r4, r1
 8007adc:	2001      	movs	r0, #1
 8007ade:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ae2:	e7a6      	b.n	8007a32 <_vfiprintf_r+0xfe>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f04f 0c0a 	mov.w	ip, #10
 8007aea:	4619      	mov	r1, r3
 8007aec:	3401      	adds	r4, #1
 8007aee:	9305      	str	r3, [sp, #20]
 8007af0:	4620      	mov	r0, r4
 8007af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af6:	3a30      	subs	r2, #48	; 0x30
 8007af8:	2a09      	cmp	r2, #9
 8007afa:	d903      	bls.n	8007b04 <_vfiprintf_r+0x1d0>
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d0c6      	beq.n	8007a8e <_vfiprintf_r+0x15a>
 8007b00:	9105      	str	r1, [sp, #20]
 8007b02:	e7c4      	b.n	8007a8e <_vfiprintf_r+0x15a>
 8007b04:	4604      	mov	r4, r0
 8007b06:	2301      	movs	r3, #1
 8007b08:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b0c:	e7f0      	b.n	8007af0 <_vfiprintf_r+0x1bc>
 8007b0e:	ab03      	add	r3, sp, #12
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	462a      	mov	r2, r5
 8007b14:	4630      	mov	r0, r6
 8007b16:	4b13      	ldr	r3, [pc, #76]	; (8007b64 <_vfiprintf_r+0x230>)
 8007b18:	a904      	add	r1, sp, #16
 8007b1a:	f7fc fb3f 	bl	800419c <_printf_float>
 8007b1e:	4607      	mov	r7, r0
 8007b20:	1c78      	adds	r0, r7, #1
 8007b22:	d1d6      	bne.n	8007ad2 <_vfiprintf_r+0x19e>
 8007b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b26:	07d9      	lsls	r1, r3, #31
 8007b28:	d405      	bmi.n	8007b36 <_vfiprintf_r+0x202>
 8007b2a:	89ab      	ldrh	r3, [r5, #12]
 8007b2c:	059a      	lsls	r2, r3, #22
 8007b2e:	d402      	bmi.n	8007b36 <_vfiprintf_r+0x202>
 8007b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b32:	f7fd fb28 	bl	8005186 <__retarget_lock_release_recursive>
 8007b36:	89ab      	ldrh	r3, [r5, #12]
 8007b38:	065b      	lsls	r3, r3, #25
 8007b3a:	f53f af1d 	bmi.w	8007978 <_vfiprintf_r+0x44>
 8007b3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b40:	e71c      	b.n	800797c <_vfiprintf_r+0x48>
 8007b42:	ab03      	add	r3, sp, #12
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	462a      	mov	r2, r5
 8007b48:	4630      	mov	r0, r6
 8007b4a:	4b06      	ldr	r3, [pc, #24]	; (8007b64 <_vfiprintf_r+0x230>)
 8007b4c:	a904      	add	r1, sp, #16
 8007b4e:	f7fc fdc5 	bl	80046dc <_printf_i>
 8007b52:	e7e4      	b.n	8007b1e <_vfiprintf_r+0x1ea>
 8007b54:	08008a98 	.word	0x08008a98
 8007b58:	08008a9e 	.word	0x08008a9e
 8007b5c:	08008aa2 	.word	0x08008aa2
 8007b60:	0800419d 	.word	0x0800419d
 8007b64:	0800790f 	.word	0x0800790f

08007b68 <__sflush_r>:
 8007b68:	898a      	ldrh	r2, [r1, #12]
 8007b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	0710      	lsls	r0, r2, #28
 8007b70:	460c      	mov	r4, r1
 8007b72:	d457      	bmi.n	8007c24 <__sflush_r+0xbc>
 8007b74:	684b      	ldr	r3, [r1, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	dc04      	bgt.n	8007b84 <__sflush_r+0x1c>
 8007b7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	dc01      	bgt.n	8007b84 <__sflush_r+0x1c>
 8007b80:	2000      	movs	r0, #0
 8007b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b86:	2e00      	cmp	r6, #0
 8007b88:	d0fa      	beq.n	8007b80 <__sflush_r+0x18>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b90:	682f      	ldr	r7, [r5, #0]
 8007b92:	6a21      	ldr	r1, [r4, #32]
 8007b94:	602b      	str	r3, [r5, #0]
 8007b96:	d032      	beq.n	8007bfe <__sflush_r+0x96>
 8007b98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	075a      	lsls	r2, r3, #29
 8007b9e:	d505      	bpl.n	8007bac <__sflush_r+0x44>
 8007ba0:	6863      	ldr	r3, [r4, #4]
 8007ba2:	1ac0      	subs	r0, r0, r3
 8007ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ba6:	b10b      	cbz	r3, 8007bac <__sflush_r+0x44>
 8007ba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007baa:	1ac0      	subs	r0, r0, r3
 8007bac:	2300      	movs	r3, #0
 8007bae:	4602      	mov	r2, r0
 8007bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	6a21      	ldr	r1, [r4, #32]
 8007bb6:	47b0      	blx	r6
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	d106      	bne.n	8007bcc <__sflush_r+0x64>
 8007bbe:	6829      	ldr	r1, [r5, #0]
 8007bc0:	291d      	cmp	r1, #29
 8007bc2:	d82b      	bhi.n	8007c1c <__sflush_r+0xb4>
 8007bc4:	4a28      	ldr	r2, [pc, #160]	; (8007c68 <__sflush_r+0x100>)
 8007bc6:	410a      	asrs	r2, r1
 8007bc8:	07d6      	lsls	r6, r2, #31
 8007bca:	d427      	bmi.n	8007c1c <__sflush_r+0xb4>
 8007bcc:	2200      	movs	r2, #0
 8007bce:	6062      	str	r2, [r4, #4]
 8007bd0:	6922      	ldr	r2, [r4, #16]
 8007bd2:	04d9      	lsls	r1, r3, #19
 8007bd4:	6022      	str	r2, [r4, #0]
 8007bd6:	d504      	bpl.n	8007be2 <__sflush_r+0x7a>
 8007bd8:	1c42      	adds	r2, r0, #1
 8007bda:	d101      	bne.n	8007be0 <__sflush_r+0x78>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b903      	cbnz	r3, 8007be2 <__sflush_r+0x7a>
 8007be0:	6560      	str	r0, [r4, #84]	; 0x54
 8007be2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007be4:	602f      	str	r7, [r5, #0]
 8007be6:	2900      	cmp	r1, #0
 8007be8:	d0ca      	beq.n	8007b80 <__sflush_r+0x18>
 8007bea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bee:	4299      	cmp	r1, r3
 8007bf0:	d002      	beq.n	8007bf8 <__sflush_r+0x90>
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f7fe f968 	bl	8005ec8 <_free_r>
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	6360      	str	r0, [r4, #52]	; 0x34
 8007bfc:	e7c1      	b.n	8007b82 <__sflush_r+0x1a>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b0      	blx	r6
 8007c04:	1c41      	adds	r1, r0, #1
 8007c06:	d1c8      	bne.n	8007b9a <__sflush_r+0x32>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0c5      	beq.n	8007b9a <__sflush_r+0x32>
 8007c0e:	2b1d      	cmp	r3, #29
 8007c10:	d001      	beq.n	8007c16 <__sflush_r+0xae>
 8007c12:	2b16      	cmp	r3, #22
 8007c14:	d101      	bne.n	8007c1a <__sflush_r+0xb2>
 8007c16:	602f      	str	r7, [r5, #0]
 8007c18:	e7b2      	b.n	8007b80 <__sflush_r+0x18>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c20:	81a3      	strh	r3, [r4, #12]
 8007c22:	e7ae      	b.n	8007b82 <__sflush_r+0x1a>
 8007c24:	690f      	ldr	r7, [r1, #16]
 8007c26:	2f00      	cmp	r7, #0
 8007c28:	d0aa      	beq.n	8007b80 <__sflush_r+0x18>
 8007c2a:	0793      	lsls	r3, r2, #30
 8007c2c:	bf18      	it	ne
 8007c2e:	2300      	movne	r3, #0
 8007c30:	680e      	ldr	r6, [r1, #0]
 8007c32:	bf08      	it	eq
 8007c34:	694b      	ldreq	r3, [r1, #20]
 8007c36:	1bf6      	subs	r6, r6, r7
 8007c38:	600f      	str	r7, [r1, #0]
 8007c3a:	608b      	str	r3, [r1, #8]
 8007c3c:	2e00      	cmp	r6, #0
 8007c3e:	dd9f      	ble.n	8007b80 <__sflush_r+0x18>
 8007c40:	4633      	mov	r3, r6
 8007c42:	463a      	mov	r2, r7
 8007c44:	4628      	mov	r0, r5
 8007c46:	6a21      	ldr	r1, [r4, #32]
 8007c48:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007c4c:	47e0      	blx	ip
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	dc06      	bgt.n	8007c60 <__sflush_r+0xf8>
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c5c:	81a3      	strh	r3, [r4, #12]
 8007c5e:	e790      	b.n	8007b82 <__sflush_r+0x1a>
 8007c60:	4407      	add	r7, r0
 8007c62:	1a36      	subs	r6, r6, r0
 8007c64:	e7ea      	b.n	8007c3c <__sflush_r+0xd4>
 8007c66:	bf00      	nop
 8007c68:	dfbffffe 	.word	0xdfbffffe

08007c6c <_fflush_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	690b      	ldr	r3, [r1, #16]
 8007c70:	4605      	mov	r5, r0
 8007c72:	460c      	mov	r4, r1
 8007c74:	b913      	cbnz	r3, 8007c7c <_fflush_r+0x10>
 8007c76:	2500      	movs	r5, #0
 8007c78:	4628      	mov	r0, r5
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	b118      	cbz	r0, 8007c86 <_fflush_r+0x1a>
 8007c7e:	6a03      	ldr	r3, [r0, #32]
 8007c80:	b90b      	cbnz	r3, 8007c86 <_fflush_r+0x1a>
 8007c82:	f7fd f8d5 	bl	8004e30 <__sinit>
 8007c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0f3      	beq.n	8007c76 <_fflush_r+0xa>
 8007c8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c90:	07d0      	lsls	r0, r2, #31
 8007c92:	d404      	bmi.n	8007c9e <_fflush_r+0x32>
 8007c94:	0599      	lsls	r1, r3, #22
 8007c96:	d402      	bmi.n	8007c9e <_fflush_r+0x32>
 8007c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c9a:	f7fd fa73 	bl	8005184 <__retarget_lock_acquire_recursive>
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	f7ff ff61 	bl	8007b68 <__sflush_r>
 8007ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ca8:	4605      	mov	r5, r0
 8007caa:	07da      	lsls	r2, r3, #31
 8007cac:	d4e4      	bmi.n	8007c78 <_fflush_r+0xc>
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	059b      	lsls	r3, r3, #22
 8007cb2:	d4e1      	bmi.n	8007c78 <_fflush_r+0xc>
 8007cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cb6:	f7fd fa66 	bl	8005186 <__retarget_lock_release_recursive>
 8007cba:	e7dd      	b.n	8007c78 <_fflush_r+0xc>

08007cbc <fiprintf>:
 8007cbc:	b40e      	push	{r1, r2, r3}
 8007cbe:	b503      	push	{r0, r1, lr}
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	ab03      	add	r3, sp, #12
 8007cc4:	4805      	ldr	r0, [pc, #20]	; (8007cdc <fiprintf+0x20>)
 8007cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cca:	6800      	ldr	r0, [r0, #0]
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	f7ff fe31 	bl	8007934 <_vfiprintf_r>
 8007cd2:	b002      	add	sp, #8
 8007cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cd8:	b003      	add	sp, #12
 8007cda:	4770      	bx	lr
 8007cdc:	20000064 	.word	0x20000064

08007ce0 <__swhatbuf_r>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce8:	4615      	mov	r5, r2
 8007cea:	2900      	cmp	r1, #0
 8007cec:	461e      	mov	r6, r3
 8007cee:	b096      	sub	sp, #88	; 0x58
 8007cf0:	da0c      	bge.n	8007d0c <__swhatbuf_r+0x2c>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007cfa:	bf0c      	ite	eq
 8007cfc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007d00:	2340      	movne	r3, #64	; 0x40
 8007d02:	2000      	movs	r0, #0
 8007d04:	6031      	str	r1, [r6, #0]
 8007d06:	602b      	str	r3, [r5, #0]
 8007d08:	b016      	add	sp, #88	; 0x58
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}
 8007d0c:	466a      	mov	r2, sp
 8007d0e:	f000 f875 	bl	8007dfc <_fstat_r>
 8007d12:	2800      	cmp	r0, #0
 8007d14:	dbed      	blt.n	8007cf2 <__swhatbuf_r+0x12>
 8007d16:	9901      	ldr	r1, [sp, #4]
 8007d18:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007d1c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007d20:	4259      	negs	r1, r3
 8007d22:	4159      	adcs	r1, r3
 8007d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d28:	e7eb      	b.n	8007d02 <__swhatbuf_r+0x22>

08007d2a <__smakebuf_r>:
 8007d2a:	898b      	ldrh	r3, [r1, #12]
 8007d2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d2e:	079d      	lsls	r5, r3, #30
 8007d30:	4606      	mov	r6, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	d507      	bpl.n	8007d46 <__smakebuf_r+0x1c>
 8007d36:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d3a:	6023      	str	r3, [r4, #0]
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	2301      	movs	r3, #1
 8007d40:	6163      	str	r3, [r4, #20]
 8007d42:	b002      	add	sp, #8
 8007d44:	bd70      	pop	{r4, r5, r6, pc}
 8007d46:	466a      	mov	r2, sp
 8007d48:	ab01      	add	r3, sp, #4
 8007d4a:	f7ff ffc9 	bl	8007ce0 <__swhatbuf_r>
 8007d4e:	9900      	ldr	r1, [sp, #0]
 8007d50:	4605      	mov	r5, r0
 8007d52:	4630      	mov	r0, r6
 8007d54:	f7fe f928 	bl	8005fa8 <_malloc_r>
 8007d58:	b948      	cbnz	r0, 8007d6e <__smakebuf_r+0x44>
 8007d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d5e:	059a      	lsls	r2, r3, #22
 8007d60:	d4ef      	bmi.n	8007d42 <__smakebuf_r+0x18>
 8007d62:	f023 0303 	bic.w	r3, r3, #3
 8007d66:	f043 0302 	orr.w	r3, r3, #2
 8007d6a:	81a3      	strh	r3, [r4, #12]
 8007d6c:	e7e3      	b.n	8007d36 <__smakebuf_r+0xc>
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	6020      	str	r0, [r4, #0]
 8007d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d76:	81a3      	strh	r3, [r4, #12]
 8007d78:	9b00      	ldr	r3, [sp, #0]
 8007d7a:	6120      	str	r0, [r4, #16]
 8007d7c:	6163      	str	r3, [r4, #20]
 8007d7e:	9b01      	ldr	r3, [sp, #4]
 8007d80:	b15b      	cbz	r3, 8007d9a <__smakebuf_r+0x70>
 8007d82:	4630      	mov	r0, r6
 8007d84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d88:	f000 f84a 	bl	8007e20 <_isatty_r>
 8007d8c:	b128      	cbz	r0, 8007d9a <__smakebuf_r+0x70>
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	f023 0303 	bic.w	r3, r3, #3
 8007d94:	f043 0301 	orr.w	r3, r3, #1
 8007d98:	81a3      	strh	r3, [r4, #12]
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	431d      	orrs	r5, r3
 8007d9e:	81a5      	strh	r5, [r4, #12]
 8007da0:	e7cf      	b.n	8007d42 <__smakebuf_r+0x18>

08007da2 <memmove>:
 8007da2:	4288      	cmp	r0, r1
 8007da4:	b510      	push	{r4, lr}
 8007da6:	eb01 0402 	add.w	r4, r1, r2
 8007daa:	d902      	bls.n	8007db2 <memmove+0x10>
 8007dac:	4284      	cmp	r4, r0
 8007dae:	4623      	mov	r3, r4
 8007db0:	d807      	bhi.n	8007dc2 <memmove+0x20>
 8007db2:	1e43      	subs	r3, r0, #1
 8007db4:	42a1      	cmp	r1, r4
 8007db6:	d008      	beq.n	8007dca <memmove+0x28>
 8007db8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dc0:	e7f8      	b.n	8007db4 <memmove+0x12>
 8007dc2:	4601      	mov	r1, r0
 8007dc4:	4402      	add	r2, r0
 8007dc6:	428a      	cmp	r2, r1
 8007dc8:	d100      	bne.n	8007dcc <memmove+0x2a>
 8007dca:	bd10      	pop	{r4, pc}
 8007dcc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dd0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dd4:	e7f7      	b.n	8007dc6 <memmove+0x24>

08007dd6 <strncmp>:
 8007dd6:	b510      	push	{r4, lr}
 8007dd8:	b16a      	cbz	r2, 8007df6 <strncmp+0x20>
 8007dda:	3901      	subs	r1, #1
 8007ddc:	1884      	adds	r4, r0, r2
 8007dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007de2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d103      	bne.n	8007df2 <strncmp+0x1c>
 8007dea:	42a0      	cmp	r0, r4
 8007dec:	d001      	beq.n	8007df2 <strncmp+0x1c>
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	d1f5      	bne.n	8007dde <strncmp+0x8>
 8007df2:	1ad0      	subs	r0, r2, r3
 8007df4:	bd10      	pop	{r4, pc}
 8007df6:	4610      	mov	r0, r2
 8007df8:	e7fc      	b.n	8007df4 <strncmp+0x1e>
	...

08007dfc <_fstat_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	2300      	movs	r3, #0
 8007e00:	4d06      	ldr	r5, [pc, #24]	; (8007e1c <_fstat_r+0x20>)
 8007e02:	4604      	mov	r4, r0
 8007e04:	4608      	mov	r0, r1
 8007e06:	4611      	mov	r1, r2
 8007e08:	602b      	str	r3, [r5, #0]
 8007e0a:	f7f9 fec1 	bl	8001b90 <_fstat>
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	d102      	bne.n	8007e18 <_fstat_r+0x1c>
 8007e12:	682b      	ldr	r3, [r5, #0]
 8007e14:	b103      	cbz	r3, 8007e18 <_fstat_r+0x1c>
 8007e16:	6023      	str	r3, [r4, #0]
 8007e18:	bd38      	pop	{r3, r4, r5, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20000688 	.word	0x20000688

08007e20 <_isatty_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	2300      	movs	r3, #0
 8007e24:	4d05      	ldr	r5, [pc, #20]	; (8007e3c <_isatty_r+0x1c>)
 8007e26:	4604      	mov	r4, r0
 8007e28:	4608      	mov	r0, r1
 8007e2a:	602b      	str	r3, [r5, #0]
 8007e2c:	f7f9 febf 	bl	8001bae <_isatty>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d102      	bne.n	8007e3a <_isatty_r+0x1a>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b103      	cbz	r3, 8007e3a <_isatty_r+0x1a>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	20000688 	.word	0x20000688

08007e40 <_sbrk_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	2300      	movs	r3, #0
 8007e44:	4d05      	ldr	r5, [pc, #20]	; (8007e5c <_sbrk_r+0x1c>)
 8007e46:	4604      	mov	r4, r0
 8007e48:	4608      	mov	r0, r1
 8007e4a:	602b      	str	r3, [r5, #0]
 8007e4c:	f7f9 fec6 	bl	8001bdc <_sbrk>
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d102      	bne.n	8007e5a <_sbrk_r+0x1a>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	b103      	cbz	r3, 8007e5a <_sbrk_r+0x1a>
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	20000688 	.word	0x20000688

08007e60 <memcpy>:
 8007e60:	440a      	add	r2, r1
 8007e62:	4291      	cmp	r1, r2
 8007e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e68:	d100      	bne.n	8007e6c <memcpy+0xc>
 8007e6a:	4770      	bx	lr
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e72:	4291      	cmp	r1, r2
 8007e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e78:	d1f9      	bne.n	8007e6e <memcpy+0xe>
 8007e7a:	bd10      	pop	{r4, pc}

08007e7c <nan>:
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	4901      	ldr	r1, [pc, #4]	; (8007e84 <nan+0x8>)
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	7ff80000 	.word	0x7ff80000

08007e88 <abort>:
 8007e88:	2006      	movs	r0, #6
 8007e8a:	b508      	push	{r3, lr}
 8007e8c:	f000 fbe8 	bl	8008660 <raise>
 8007e90:	2001      	movs	r0, #1
 8007e92:	f7f9 fe2f 	bl	8001af4 <_exit>

08007e96 <_calloc_r>:
 8007e96:	b570      	push	{r4, r5, r6, lr}
 8007e98:	fba1 5402 	umull	r5, r4, r1, r2
 8007e9c:	b934      	cbnz	r4, 8007eac <_calloc_r+0x16>
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	f7fe f882 	bl	8005fa8 <_malloc_r>
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	b928      	cbnz	r0, 8007eb4 <_calloc_r+0x1e>
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	bd70      	pop	{r4, r5, r6, pc}
 8007eac:	220c      	movs	r2, #12
 8007eae:	2600      	movs	r6, #0
 8007eb0:	6002      	str	r2, [r0, #0]
 8007eb2:	e7f9      	b.n	8007ea8 <_calloc_r+0x12>
 8007eb4:	462a      	mov	r2, r5
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	f7fd f8e8 	bl	800508c <memset>
 8007ebc:	e7f4      	b.n	8007ea8 <_calloc_r+0x12>

08007ebe <rshift>:
 8007ebe:	6903      	ldr	r3, [r0, #16]
 8007ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ec4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007ec8:	f100 0414 	add.w	r4, r0, #20
 8007ecc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ed0:	dd46      	ble.n	8007f60 <rshift+0xa2>
 8007ed2:	f011 011f 	ands.w	r1, r1, #31
 8007ed6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007eda:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ede:	d10c      	bne.n	8007efa <rshift+0x3c>
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f100 0710 	add.w	r7, r0, #16
 8007ee6:	42b1      	cmp	r1, r6
 8007ee8:	d335      	bcc.n	8007f56 <rshift+0x98>
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	1eea      	subs	r2, r5, #3
 8007ef0:	4296      	cmp	r6, r2
 8007ef2:	bf38      	it	cc
 8007ef4:	2300      	movcc	r3, #0
 8007ef6:	4423      	add	r3, r4
 8007ef8:	e015      	b.n	8007f26 <rshift+0x68>
 8007efa:	46a1      	mov	r9, r4
 8007efc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f00:	f1c1 0820 	rsb	r8, r1, #32
 8007f04:	40cf      	lsrs	r7, r1
 8007f06:	f105 0e04 	add.w	lr, r5, #4
 8007f0a:	4576      	cmp	r6, lr
 8007f0c:	46f4      	mov	ip, lr
 8007f0e:	d816      	bhi.n	8007f3e <rshift+0x80>
 8007f10:	1a9a      	subs	r2, r3, r2
 8007f12:	0092      	lsls	r2, r2, #2
 8007f14:	3a04      	subs	r2, #4
 8007f16:	3501      	adds	r5, #1
 8007f18:	42ae      	cmp	r6, r5
 8007f1a:	bf38      	it	cc
 8007f1c:	2200      	movcc	r2, #0
 8007f1e:	18a3      	adds	r3, r4, r2
 8007f20:	50a7      	str	r7, [r4, r2]
 8007f22:	b107      	cbz	r7, 8007f26 <rshift+0x68>
 8007f24:	3304      	adds	r3, #4
 8007f26:	42a3      	cmp	r3, r4
 8007f28:	eba3 0204 	sub.w	r2, r3, r4
 8007f2c:	bf08      	it	eq
 8007f2e:	2300      	moveq	r3, #0
 8007f30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007f34:	6102      	str	r2, [r0, #16]
 8007f36:	bf08      	it	eq
 8007f38:	6143      	streq	r3, [r0, #20]
 8007f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f3e:	f8dc c000 	ldr.w	ip, [ip]
 8007f42:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f46:	ea4c 0707 	orr.w	r7, ip, r7
 8007f4a:	f849 7b04 	str.w	r7, [r9], #4
 8007f4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f52:	40cf      	lsrs	r7, r1
 8007f54:	e7d9      	b.n	8007f0a <rshift+0x4c>
 8007f56:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f5a:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f5e:	e7c2      	b.n	8007ee6 <rshift+0x28>
 8007f60:	4623      	mov	r3, r4
 8007f62:	e7e0      	b.n	8007f26 <rshift+0x68>

08007f64 <__hexdig_fun>:
 8007f64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f68:	2b09      	cmp	r3, #9
 8007f6a:	d802      	bhi.n	8007f72 <__hexdig_fun+0xe>
 8007f6c:	3820      	subs	r0, #32
 8007f6e:	b2c0      	uxtb	r0, r0
 8007f70:	4770      	bx	lr
 8007f72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f76:	2b05      	cmp	r3, #5
 8007f78:	d801      	bhi.n	8007f7e <__hexdig_fun+0x1a>
 8007f7a:	3847      	subs	r0, #71	; 0x47
 8007f7c:	e7f7      	b.n	8007f6e <__hexdig_fun+0xa>
 8007f7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	d801      	bhi.n	8007f8a <__hexdig_fun+0x26>
 8007f86:	3827      	subs	r0, #39	; 0x27
 8007f88:	e7f1      	b.n	8007f6e <__hexdig_fun+0xa>
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	4770      	bx	lr
	...

08007f90 <__gethex>:
 8007f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	4681      	mov	r9, r0
 8007f96:	468a      	mov	sl, r1
 8007f98:	4617      	mov	r7, r2
 8007f9a:	680a      	ldr	r2, [r1, #0]
 8007f9c:	b085      	sub	sp, #20
 8007f9e:	f102 0b02 	add.w	fp, r2, #2
 8007fa2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007fa6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007faa:	9302      	str	r3, [sp, #8]
 8007fac:	32fe      	adds	r2, #254	; 0xfe
 8007fae:	eb02 030b 	add.w	r3, r2, fp
 8007fb2:	46d8      	mov	r8, fp
 8007fb4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	2830      	cmp	r0, #48	; 0x30
 8007fbc:	d0f7      	beq.n	8007fae <__gethex+0x1e>
 8007fbe:	f7ff ffd1 	bl	8007f64 <__hexdig_fun>
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d138      	bne.n	800803a <__gethex+0xaa>
 8007fc8:	2201      	movs	r2, #1
 8007fca:	4640      	mov	r0, r8
 8007fcc:	49a7      	ldr	r1, [pc, #668]	; (800826c <__gethex+0x2dc>)
 8007fce:	f7ff ff02 	bl	8007dd6 <strncmp>
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d169      	bne.n	80080ac <__gethex+0x11c>
 8007fd8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007fdc:	465d      	mov	r5, fp
 8007fde:	f7ff ffc1 	bl	8007f64 <__hexdig_fun>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d064      	beq.n	80080b0 <__gethex+0x120>
 8007fe6:	465a      	mov	r2, fp
 8007fe8:	7810      	ldrb	r0, [r2, #0]
 8007fea:	4690      	mov	r8, r2
 8007fec:	2830      	cmp	r0, #48	; 0x30
 8007fee:	f102 0201 	add.w	r2, r2, #1
 8007ff2:	d0f9      	beq.n	8007fe8 <__gethex+0x58>
 8007ff4:	f7ff ffb6 	bl	8007f64 <__hexdig_fun>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	fab0 f480 	clz	r4, r0
 8007ffe:	465e      	mov	r6, fp
 8008000:	0964      	lsrs	r4, r4, #5
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	4642      	mov	r2, r8
 8008006:	4615      	mov	r5, r2
 8008008:	7828      	ldrb	r0, [r5, #0]
 800800a:	3201      	adds	r2, #1
 800800c:	f7ff ffaa 	bl	8007f64 <__hexdig_fun>
 8008010:	2800      	cmp	r0, #0
 8008012:	d1f8      	bne.n	8008006 <__gethex+0x76>
 8008014:	2201      	movs	r2, #1
 8008016:	4628      	mov	r0, r5
 8008018:	4994      	ldr	r1, [pc, #592]	; (800826c <__gethex+0x2dc>)
 800801a:	f7ff fedc 	bl	8007dd6 <strncmp>
 800801e:	b978      	cbnz	r0, 8008040 <__gethex+0xb0>
 8008020:	b946      	cbnz	r6, 8008034 <__gethex+0xa4>
 8008022:	1c6e      	adds	r6, r5, #1
 8008024:	4632      	mov	r2, r6
 8008026:	4615      	mov	r5, r2
 8008028:	7828      	ldrb	r0, [r5, #0]
 800802a:	3201      	adds	r2, #1
 800802c:	f7ff ff9a 	bl	8007f64 <__hexdig_fun>
 8008030:	2800      	cmp	r0, #0
 8008032:	d1f8      	bne.n	8008026 <__gethex+0x96>
 8008034:	1b73      	subs	r3, r6, r5
 8008036:	009e      	lsls	r6, r3, #2
 8008038:	e004      	b.n	8008044 <__gethex+0xb4>
 800803a:	2400      	movs	r4, #0
 800803c:	4626      	mov	r6, r4
 800803e:	e7e1      	b.n	8008004 <__gethex+0x74>
 8008040:	2e00      	cmp	r6, #0
 8008042:	d1f7      	bne.n	8008034 <__gethex+0xa4>
 8008044:	782b      	ldrb	r3, [r5, #0]
 8008046:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800804a:	2b50      	cmp	r3, #80	; 0x50
 800804c:	d13d      	bne.n	80080ca <__gethex+0x13a>
 800804e:	786b      	ldrb	r3, [r5, #1]
 8008050:	2b2b      	cmp	r3, #43	; 0x2b
 8008052:	d02f      	beq.n	80080b4 <__gethex+0x124>
 8008054:	2b2d      	cmp	r3, #45	; 0x2d
 8008056:	d031      	beq.n	80080bc <__gethex+0x12c>
 8008058:	f04f 0b00 	mov.w	fp, #0
 800805c:	1c69      	adds	r1, r5, #1
 800805e:	7808      	ldrb	r0, [r1, #0]
 8008060:	f7ff ff80 	bl	8007f64 <__hexdig_fun>
 8008064:	1e42      	subs	r2, r0, #1
 8008066:	b2d2      	uxtb	r2, r2
 8008068:	2a18      	cmp	r2, #24
 800806a:	d82e      	bhi.n	80080ca <__gethex+0x13a>
 800806c:	f1a0 0210 	sub.w	r2, r0, #16
 8008070:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008074:	f7ff ff76 	bl	8007f64 <__hexdig_fun>
 8008078:	f100 3cff 	add.w	ip, r0, #4294967295
 800807c:	fa5f fc8c 	uxtb.w	ip, ip
 8008080:	f1bc 0f18 	cmp.w	ip, #24
 8008084:	d91d      	bls.n	80080c2 <__gethex+0x132>
 8008086:	f1bb 0f00 	cmp.w	fp, #0
 800808a:	d000      	beq.n	800808e <__gethex+0xfe>
 800808c:	4252      	negs	r2, r2
 800808e:	4416      	add	r6, r2
 8008090:	f8ca 1000 	str.w	r1, [sl]
 8008094:	b1dc      	cbz	r4, 80080ce <__gethex+0x13e>
 8008096:	9b01      	ldr	r3, [sp, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	bf14      	ite	ne
 800809c:	f04f 0800 	movne.w	r8, #0
 80080a0:	f04f 0806 	moveq.w	r8, #6
 80080a4:	4640      	mov	r0, r8
 80080a6:	b005      	add	sp, #20
 80080a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ac:	4645      	mov	r5, r8
 80080ae:	4626      	mov	r6, r4
 80080b0:	2401      	movs	r4, #1
 80080b2:	e7c7      	b.n	8008044 <__gethex+0xb4>
 80080b4:	f04f 0b00 	mov.w	fp, #0
 80080b8:	1ca9      	adds	r1, r5, #2
 80080ba:	e7d0      	b.n	800805e <__gethex+0xce>
 80080bc:	f04f 0b01 	mov.w	fp, #1
 80080c0:	e7fa      	b.n	80080b8 <__gethex+0x128>
 80080c2:	230a      	movs	r3, #10
 80080c4:	fb03 0002 	mla	r0, r3, r2, r0
 80080c8:	e7d0      	b.n	800806c <__gethex+0xdc>
 80080ca:	4629      	mov	r1, r5
 80080cc:	e7e0      	b.n	8008090 <__gethex+0x100>
 80080ce:	4621      	mov	r1, r4
 80080d0:	eba5 0308 	sub.w	r3, r5, r8
 80080d4:	3b01      	subs	r3, #1
 80080d6:	2b07      	cmp	r3, #7
 80080d8:	dc0a      	bgt.n	80080f0 <__gethex+0x160>
 80080da:	4648      	mov	r0, r9
 80080dc:	f7fd fff0 	bl	80060c0 <_Balloc>
 80080e0:	4604      	mov	r4, r0
 80080e2:	b940      	cbnz	r0, 80080f6 <__gethex+0x166>
 80080e4:	4602      	mov	r2, r0
 80080e6:	21e4      	movs	r1, #228	; 0xe4
 80080e8:	4b61      	ldr	r3, [pc, #388]	; (8008270 <__gethex+0x2e0>)
 80080ea:	4862      	ldr	r0, [pc, #392]	; (8008274 <__gethex+0x2e4>)
 80080ec:	f7fd f85e 	bl	80051ac <__assert_func>
 80080f0:	3101      	adds	r1, #1
 80080f2:	105b      	asrs	r3, r3, #1
 80080f4:	e7ef      	b.n	80080d6 <__gethex+0x146>
 80080f6:	2300      	movs	r3, #0
 80080f8:	469b      	mov	fp, r3
 80080fa:	f100 0a14 	add.w	sl, r0, #20
 80080fe:	f8cd a004 	str.w	sl, [sp, #4]
 8008102:	45a8      	cmp	r8, r5
 8008104:	d344      	bcc.n	8008190 <__gethex+0x200>
 8008106:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800810a:	4658      	mov	r0, fp
 800810c:	f848 bb04 	str.w	fp, [r8], #4
 8008110:	eba8 080a 	sub.w	r8, r8, sl
 8008114:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008118:	6122      	str	r2, [r4, #16]
 800811a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800811e:	f7fe f8c1 	bl	80062a4 <__hi0bits>
 8008122:	683d      	ldr	r5, [r7, #0]
 8008124:	eba8 0800 	sub.w	r8, r8, r0
 8008128:	45a8      	cmp	r8, r5
 800812a:	dd59      	ble.n	80081e0 <__gethex+0x250>
 800812c:	eba8 0805 	sub.w	r8, r8, r5
 8008130:	4641      	mov	r1, r8
 8008132:	4620      	mov	r0, r4
 8008134:	f7fe fc3f 	bl	80069b6 <__any_on>
 8008138:	4683      	mov	fp, r0
 800813a:	b1b8      	cbz	r0, 800816c <__gethex+0x1dc>
 800813c:	f04f 0b01 	mov.w	fp, #1
 8008140:	f108 33ff 	add.w	r3, r8, #4294967295
 8008144:	1159      	asrs	r1, r3, #5
 8008146:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800814a:	f003 021f 	and.w	r2, r3, #31
 800814e:	fa0b f202 	lsl.w	r2, fp, r2
 8008152:	420a      	tst	r2, r1
 8008154:	d00a      	beq.n	800816c <__gethex+0x1dc>
 8008156:	455b      	cmp	r3, fp
 8008158:	dd06      	ble.n	8008168 <__gethex+0x1d8>
 800815a:	4620      	mov	r0, r4
 800815c:	f1a8 0102 	sub.w	r1, r8, #2
 8008160:	f7fe fc29 	bl	80069b6 <__any_on>
 8008164:	2800      	cmp	r0, #0
 8008166:	d138      	bne.n	80081da <__gethex+0x24a>
 8008168:	f04f 0b02 	mov.w	fp, #2
 800816c:	4641      	mov	r1, r8
 800816e:	4620      	mov	r0, r4
 8008170:	f7ff fea5 	bl	8007ebe <rshift>
 8008174:	4446      	add	r6, r8
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	42b3      	cmp	r3, r6
 800817a:	da41      	bge.n	8008200 <__gethex+0x270>
 800817c:	4621      	mov	r1, r4
 800817e:	4648      	mov	r0, r9
 8008180:	f7fd ffde 	bl	8006140 <_Bfree>
 8008184:	2300      	movs	r3, #0
 8008186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008188:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	e789      	b.n	80080a4 <__gethex+0x114>
 8008190:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008194:	2a2e      	cmp	r2, #46	; 0x2e
 8008196:	d014      	beq.n	80081c2 <__gethex+0x232>
 8008198:	2b20      	cmp	r3, #32
 800819a:	d106      	bne.n	80081aa <__gethex+0x21a>
 800819c:	9b01      	ldr	r3, [sp, #4]
 800819e:	f843 bb04 	str.w	fp, [r3], #4
 80081a2:	f04f 0b00 	mov.w	fp, #0
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	465b      	mov	r3, fp
 80081aa:	7828      	ldrb	r0, [r5, #0]
 80081ac:	9303      	str	r3, [sp, #12]
 80081ae:	f7ff fed9 	bl	8007f64 <__hexdig_fun>
 80081b2:	9b03      	ldr	r3, [sp, #12]
 80081b4:	f000 000f 	and.w	r0, r0, #15
 80081b8:	4098      	lsls	r0, r3
 80081ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80081be:	3304      	adds	r3, #4
 80081c0:	e79f      	b.n	8008102 <__gethex+0x172>
 80081c2:	45a8      	cmp	r8, r5
 80081c4:	d8e8      	bhi.n	8008198 <__gethex+0x208>
 80081c6:	2201      	movs	r2, #1
 80081c8:	4628      	mov	r0, r5
 80081ca:	4928      	ldr	r1, [pc, #160]	; (800826c <__gethex+0x2dc>)
 80081cc:	9303      	str	r3, [sp, #12]
 80081ce:	f7ff fe02 	bl	8007dd6 <strncmp>
 80081d2:	9b03      	ldr	r3, [sp, #12]
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d1df      	bne.n	8008198 <__gethex+0x208>
 80081d8:	e793      	b.n	8008102 <__gethex+0x172>
 80081da:	f04f 0b03 	mov.w	fp, #3
 80081de:	e7c5      	b.n	800816c <__gethex+0x1dc>
 80081e0:	da0b      	bge.n	80081fa <__gethex+0x26a>
 80081e2:	eba5 0808 	sub.w	r8, r5, r8
 80081e6:	4621      	mov	r1, r4
 80081e8:	4642      	mov	r2, r8
 80081ea:	4648      	mov	r0, r9
 80081ec:	f7fe f9c0 	bl	8006570 <__lshift>
 80081f0:	4604      	mov	r4, r0
 80081f2:	eba6 0608 	sub.w	r6, r6, r8
 80081f6:	f100 0a14 	add.w	sl, r0, #20
 80081fa:	f04f 0b00 	mov.w	fp, #0
 80081fe:	e7ba      	b.n	8008176 <__gethex+0x1e6>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	42b3      	cmp	r3, r6
 8008204:	dd74      	ble.n	80082f0 <__gethex+0x360>
 8008206:	1b9e      	subs	r6, r3, r6
 8008208:	42b5      	cmp	r5, r6
 800820a:	dc35      	bgt.n	8008278 <__gethex+0x2e8>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d023      	beq.n	800825a <__gethex+0x2ca>
 8008212:	2b03      	cmp	r3, #3
 8008214:	d025      	beq.n	8008262 <__gethex+0x2d2>
 8008216:	2b01      	cmp	r3, #1
 8008218:	d115      	bne.n	8008246 <__gethex+0x2b6>
 800821a:	42b5      	cmp	r5, r6
 800821c:	d113      	bne.n	8008246 <__gethex+0x2b6>
 800821e:	2d01      	cmp	r5, #1
 8008220:	d10b      	bne.n	800823a <__gethex+0x2aa>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	9a02      	ldr	r2, [sp, #8]
 8008226:	f04f 0862 	mov.w	r8, #98	; 0x62
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	2301      	movs	r3, #1
 800822e:	6123      	str	r3, [r4, #16]
 8008230:	f8ca 3000 	str.w	r3, [sl]
 8008234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008236:	601c      	str	r4, [r3, #0]
 8008238:	e734      	b.n	80080a4 <__gethex+0x114>
 800823a:	4620      	mov	r0, r4
 800823c:	1e69      	subs	r1, r5, #1
 800823e:	f7fe fbba 	bl	80069b6 <__any_on>
 8008242:	2800      	cmp	r0, #0
 8008244:	d1ed      	bne.n	8008222 <__gethex+0x292>
 8008246:	4621      	mov	r1, r4
 8008248:	4648      	mov	r0, r9
 800824a:	f7fd ff79 	bl	8006140 <_Bfree>
 800824e:	2300      	movs	r3, #0
 8008250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008252:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	e724      	b.n	80080a4 <__gethex+0x114>
 800825a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1f2      	bne.n	8008246 <__gethex+0x2b6>
 8008260:	e7df      	b.n	8008222 <__gethex+0x292>
 8008262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1dc      	bne.n	8008222 <__gethex+0x292>
 8008268:	e7ed      	b.n	8008246 <__gethex+0x2b6>
 800826a:	bf00      	nop
 800826c:	08008a44 	.word	0x08008a44
 8008270:	080088dc 	.word	0x080088dc
 8008274:	08008ab1 	.word	0x08008ab1
 8008278:	f106 38ff 	add.w	r8, r6, #4294967295
 800827c:	f1bb 0f00 	cmp.w	fp, #0
 8008280:	d133      	bne.n	80082ea <__gethex+0x35a>
 8008282:	f1b8 0f00 	cmp.w	r8, #0
 8008286:	d004      	beq.n	8008292 <__gethex+0x302>
 8008288:	4641      	mov	r1, r8
 800828a:	4620      	mov	r0, r4
 800828c:	f7fe fb93 	bl	80069b6 <__any_on>
 8008290:	4683      	mov	fp, r0
 8008292:	2301      	movs	r3, #1
 8008294:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008298:	f008 081f 	and.w	r8, r8, #31
 800829c:	fa03 f308 	lsl.w	r3, r3, r8
 80082a0:	f04f 0802 	mov.w	r8, #2
 80082a4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80082a8:	4631      	mov	r1, r6
 80082aa:	4213      	tst	r3, r2
 80082ac:	4620      	mov	r0, r4
 80082ae:	bf18      	it	ne
 80082b0:	f04b 0b02 	orrne.w	fp, fp, #2
 80082b4:	1bad      	subs	r5, r5, r6
 80082b6:	f7ff fe02 	bl	8007ebe <rshift>
 80082ba:	687e      	ldr	r6, [r7, #4]
 80082bc:	f1bb 0f00 	cmp.w	fp, #0
 80082c0:	d04a      	beq.n	8008358 <__gethex+0x3c8>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d016      	beq.n	80082f6 <__gethex+0x366>
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d018      	beq.n	80082fe <__gethex+0x36e>
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d109      	bne.n	80082e4 <__gethex+0x354>
 80082d0:	f01b 0f02 	tst.w	fp, #2
 80082d4:	d006      	beq.n	80082e4 <__gethex+0x354>
 80082d6:	f8da 3000 	ldr.w	r3, [sl]
 80082da:	ea4b 0b03 	orr.w	fp, fp, r3
 80082de:	f01b 0f01 	tst.w	fp, #1
 80082e2:	d10f      	bne.n	8008304 <__gethex+0x374>
 80082e4:	f048 0810 	orr.w	r8, r8, #16
 80082e8:	e036      	b.n	8008358 <__gethex+0x3c8>
 80082ea:	f04f 0b01 	mov.w	fp, #1
 80082ee:	e7d0      	b.n	8008292 <__gethex+0x302>
 80082f0:	f04f 0801 	mov.w	r8, #1
 80082f4:	e7e2      	b.n	80082bc <__gethex+0x32c>
 80082f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082f8:	f1c3 0301 	rsb	r3, r3, #1
 80082fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80082fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d0ef      	beq.n	80082e4 <__gethex+0x354>
 8008304:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008308:	f104 0214 	add.w	r2, r4, #20
 800830c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	2300      	movs	r3, #0
 8008314:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008318:	4694      	mov	ip, r2
 800831a:	f852 1b04 	ldr.w	r1, [r2], #4
 800831e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008322:	d01e      	beq.n	8008362 <__gethex+0x3d2>
 8008324:	3101      	adds	r1, #1
 8008326:	f8cc 1000 	str.w	r1, [ip]
 800832a:	f1b8 0f02 	cmp.w	r8, #2
 800832e:	f104 0214 	add.w	r2, r4, #20
 8008332:	d13d      	bne.n	80083b0 <__gethex+0x420>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	3b01      	subs	r3, #1
 8008338:	42ab      	cmp	r3, r5
 800833a:	d10b      	bne.n	8008354 <__gethex+0x3c4>
 800833c:	2301      	movs	r3, #1
 800833e:	1169      	asrs	r1, r5, #5
 8008340:	f005 051f 	and.w	r5, r5, #31
 8008344:	fa03 f505 	lsl.w	r5, r3, r5
 8008348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800834c:	421d      	tst	r5, r3
 800834e:	bf18      	it	ne
 8008350:	f04f 0801 	movne.w	r8, #1
 8008354:	f048 0820 	orr.w	r8, r8, #32
 8008358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800835a:	601c      	str	r4, [r3, #0]
 800835c:	9b02      	ldr	r3, [sp, #8]
 800835e:	601e      	str	r6, [r3, #0]
 8008360:	e6a0      	b.n	80080a4 <__gethex+0x114>
 8008362:	4290      	cmp	r0, r2
 8008364:	f842 3c04 	str.w	r3, [r2, #-4]
 8008368:	d8d6      	bhi.n	8008318 <__gethex+0x388>
 800836a:	68a2      	ldr	r2, [r4, #8]
 800836c:	4593      	cmp	fp, r2
 800836e:	db17      	blt.n	80083a0 <__gethex+0x410>
 8008370:	6861      	ldr	r1, [r4, #4]
 8008372:	4648      	mov	r0, r9
 8008374:	3101      	adds	r1, #1
 8008376:	f7fd fea3 	bl	80060c0 <_Balloc>
 800837a:	4682      	mov	sl, r0
 800837c:	b918      	cbnz	r0, 8008386 <__gethex+0x3f6>
 800837e:	4602      	mov	r2, r0
 8008380:	2184      	movs	r1, #132	; 0x84
 8008382:	4b1a      	ldr	r3, [pc, #104]	; (80083ec <__gethex+0x45c>)
 8008384:	e6b1      	b.n	80080ea <__gethex+0x15a>
 8008386:	6922      	ldr	r2, [r4, #16]
 8008388:	f104 010c 	add.w	r1, r4, #12
 800838c:	3202      	adds	r2, #2
 800838e:	0092      	lsls	r2, r2, #2
 8008390:	300c      	adds	r0, #12
 8008392:	f7ff fd65 	bl	8007e60 <memcpy>
 8008396:	4621      	mov	r1, r4
 8008398:	4648      	mov	r0, r9
 800839a:	f7fd fed1 	bl	8006140 <_Bfree>
 800839e:	4654      	mov	r4, sl
 80083a0:	6922      	ldr	r2, [r4, #16]
 80083a2:	1c51      	adds	r1, r2, #1
 80083a4:	6121      	str	r1, [r4, #16]
 80083a6:	2101      	movs	r1, #1
 80083a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80083ac:	6151      	str	r1, [r2, #20]
 80083ae:	e7bc      	b.n	800832a <__gethex+0x39a>
 80083b0:	6921      	ldr	r1, [r4, #16]
 80083b2:	4559      	cmp	r1, fp
 80083b4:	dd0b      	ble.n	80083ce <__gethex+0x43e>
 80083b6:	2101      	movs	r1, #1
 80083b8:	4620      	mov	r0, r4
 80083ba:	f7ff fd80 	bl	8007ebe <rshift>
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	3601      	adds	r6, #1
 80083c2:	42b3      	cmp	r3, r6
 80083c4:	f6ff aeda 	blt.w	800817c <__gethex+0x1ec>
 80083c8:	f04f 0801 	mov.w	r8, #1
 80083cc:	e7c2      	b.n	8008354 <__gethex+0x3c4>
 80083ce:	f015 051f 	ands.w	r5, r5, #31
 80083d2:	d0f9      	beq.n	80083c8 <__gethex+0x438>
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	f1c5 0520 	rsb	r5, r5, #32
 80083da:	441a      	add	r2, r3
 80083dc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80083e0:	f7fd ff60 	bl	80062a4 <__hi0bits>
 80083e4:	42a8      	cmp	r0, r5
 80083e6:	dbe6      	blt.n	80083b6 <__gethex+0x426>
 80083e8:	e7ee      	b.n	80083c8 <__gethex+0x438>
 80083ea:	bf00      	nop
 80083ec:	080088dc 	.word	0x080088dc

080083f0 <L_shift>:
 80083f0:	f1c2 0208 	rsb	r2, r2, #8
 80083f4:	0092      	lsls	r2, r2, #2
 80083f6:	b570      	push	{r4, r5, r6, lr}
 80083f8:	f1c2 0620 	rsb	r6, r2, #32
 80083fc:	6843      	ldr	r3, [r0, #4]
 80083fe:	6804      	ldr	r4, [r0, #0]
 8008400:	fa03 f506 	lsl.w	r5, r3, r6
 8008404:	432c      	orrs	r4, r5
 8008406:	40d3      	lsrs	r3, r2
 8008408:	6004      	str	r4, [r0, #0]
 800840a:	f840 3f04 	str.w	r3, [r0, #4]!
 800840e:	4288      	cmp	r0, r1
 8008410:	d3f4      	bcc.n	80083fc <L_shift+0xc>
 8008412:	bd70      	pop	{r4, r5, r6, pc}

08008414 <__match>:
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	6803      	ldr	r3, [r0, #0]
 8008418:	3301      	adds	r3, #1
 800841a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800841e:	b914      	cbnz	r4, 8008426 <__match+0x12>
 8008420:	6003      	str	r3, [r0, #0]
 8008422:	2001      	movs	r0, #1
 8008424:	bd30      	pop	{r4, r5, pc}
 8008426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800842a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800842e:	2d19      	cmp	r5, #25
 8008430:	bf98      	it	ls
 8008432:	3220      	addls	r2, #32
 8008434:	42a2      	cmp	r2, r4
 8008436:	d0f0      	beq.n	800841a <__match+0x6>
 8008438:	2000      	movs	r0, #0
 800843a:	e7f3      	b.n	8008424 <__match+0x10>

0800843c <__hexnan>:
 800843c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008440:	2500      	movs	r5, #0
 8008442:	680b      	ldr	r3, [r1, #0]
 8008444:	4682      	mov	sl, r0
 8008446:	115e      	asrs	r6, r3, #5
 8008448:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800844c:	f013 031f 	ands.w	r3, r3, #31
 8008450:	bf18      	it	ne
 8008452:	3604      	addne	r6, #4
 8008454:	1f37      	subs	r7, r6, #4
 8008456:	4690      	mov	r8, r2
 8008458:	46b9      	mov	r9, r7
 800845a:	463c      	mov	r4, r7
 800845c:	46ab      	mov	fp, r5
 800845e:	b087      	sub	sp, #28
 8008460:	6801      	ldr	r1, [r0, #0]
 8008462:	9301      	str	r3, [sp, #4]
 8008464:	f846 5c04 	str.w	r5, [r6, #-4]
 8008468:	9502      	str	r5, [sp, #8]
 800846a:	784a      	ldrb	r2, [r1, #1]
 800846c:	1c4b      	adds	r3, r1, #1
 800846e:	9303      	str	r3, [sp, #12]
 8008470:	b342      	cbz	r2, 80084c4 <__hexnan+0x88>
 8008472:	4610      	mov	r0, r2
 8008474:	9105      	str	r1, [sp, #20]
 8008476:	9204      	str	r2, [sp, #16]
 8008478:	f7ff fd74 	bl	8007f64 <__hexdig_fun>
 800847c:	2800      	cmp	r0, #0
 800847e:	d14f      	bne.n	8008520 <__hexnan+0xe4>
 8008480:	9a04      	ldr	r2, [sp, #16]
 8008482:	9905      	ldr	r1, [sp, #20]
 8008484:	2a20      	cmp	r2, #32
 8008486:	d818      	bhi.n	80084ba <__hexnan+0x7e>
 8008488:	9b02      	ldr	r3, [sp, #8]
 800848a:	459b      	cmp	fp, r3
 800848c:	dd13      	ble.n	80084b6 <__hexnan+0x7a>
 800848e:	454c      	cmp	r4, r9
 8008490:	d206      	bcs.n	80084a0 <__hexnan+0x64>
 8008492:	2d07      	cmp	r5, #7
 8008494:	dc04      	bgt.n	80084a0 <__hexnan+0x64>
 8008496:	462a      	mov	r2, r5
 8008498:	4649      	mov	r1, r9
 800849a:	4620      	mov	r0, r4
 800849c:	f7ff ffa8 	bl	80083f0 <L_shift>
 80084a0:	4544      	cmp	r4, r8
 80084a2:	d950      	bls.n	8008546 <__hexnan+0x10a>
 80084a4:	2300      	movs	r3, #0
 80084a6:	f1a4 0904 	sub.w	r9, r4, #4
 80084aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80084ae:	461d      	mov	r5, r3
 80084b0:	464c      	mov	r4, r9
 80084b2:	f8cd b008 	str.w	fp, [sp, #8]
 80084b6:	9903      	ldr	r1, [sp, #12]
 80084b8:	e7d7      	b.n	800846a <__hexnan+0x2e>
 80084ba:	2a29      	cmp	r2, #41	; 0x29
 80084bc:	d155      	bne.n	800856a <__hexnan+0x12e>
 80084be:	3102      	adds	r1, #2
 80084c0:	f8ca 1000 	str.w	r1, [sl]
 80084c4:	f1bb 0f00 	cmp.w	fp, #0
 80084c8:	d04f      	beq.n	800856a <__hexnan+0x12e>
 80084ca:	454c      	cmp	r4, r9
 80084cc:	d206      	bcs.n	80084dc <__hexnan+0xa0>
 80084ce:	2d07      	cmp	r5, #7
 80084d0:	dc04      	bgt.n	80084dc <__hexnan+0xa0>
 80084d2:	462a      	mov	r2, r5
 80084d4:	4649      	mov	r1, r9
 80084d6:	4620      	mov	r0, r4
 80084d8:	f7ff ff8a 	bl	80083f0 <L_shift>
 80084dc:	4544      	cmp	r4, r8
 80084de:	d934      	bls.n	800854a <__hexnan+0x10e>
 80084e0:	4623      	mov	r3, r4
 80084e2:	f1a8 0204 	sub.w	r2, r8, #4
 80084e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80084ea:	429f      	cmp	r7, r3
 80084ec:	f842 1f04 	str.w	r1, [r2, #4]!
 80084f0:	d2f9      	bcs.n	80084e6 <__hexnan+0xaa>
 80084f2:	1b3b      	subs	r3, r7, r4
 80084f4:	f023 0303 	bic.w	r3, r3, #3
 80084f8:	3304      	adds	r3, #4
 80084fa:	3e03      	subs	r6, #3
 80084fc:	3401      	adds	r4, #1
 80084fe:	42a6      	cmp	r6, r4
 8008500:	bf38      	it	cc
 8008502:	2304      	movcc	r3, #4
 8008504:	2200      	movs	r2, #0
 8008506:	4443      	add	r3, r8
 8008508:	f843 2b04 	str.w	r2, [r3], #4
 800850c:	429f      	cmp	r7, r3
 800850e:	d2fb      	bcs.n	8008508 <__hexnan+0xcc>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	b91b      	cbnz	r3, 800851c <__hexnan+0xe0>
 8008514:	4547      	cmp	r7, r8
 8008516:	d126      	bne.n	8008566 <__hexnan+0x12a>
 8008518:	2301      	movs	r3, #1
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	2005      	movs	r0, #5
 800851e:	e025      	b.n	800856c <__hexnan+0x130>
 8008520:	3501      	adds	r5, #1
 8008522:	2d08      	cmp	r5, #8
 8008524:	f10b 0b01 	add.w	fp, fp, #1
 8008528:	dd06      	ble.n	8008538 <__hexnan+0xfc>
 800852a:	4544      	cmp	r4, r8
 800852c:	d9c3      	bls.n	80084b6 <__hexnan+0x7a>
 800852e:	2300      	movs	r3, #0
 8008530:	2501      	movs	r5, #1
 8008532:	f844 3c04 	str.w	r3, [r4, #-4]
 8008536:	3c04      	subs	r4, #4
 8008538:	6822      	ldr	r2, [r4, #0]
 800853a:	f000 000f 	and.w	r0, r0, #15
 800853e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008542:	6020      	str	r0, [r4, #0]
 8008544:	e7b7      	b.n	80084b6 <__hexnan+0x7a>
 8008546:	2508      	movs	r5, #8
 8008548:	e7b5      	b.n	80084b6 <__hexnan+0x7a>
 800854a:	9b01      	ldr	r3, [sp, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d0df      	beq.n	8008510 <__hexnan+0xd4>
 8008550:	f04f 32ff 	mov.w	r2, #4294967295
 8008554:	f1c3 0320 	rsb	r3, r3, #32
 8008558:	40da      	lsrs	r2, r3
 800855a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800855e:	4013      	ands	r3, r2
 8008560:	f846 3c04 	str.w	r3, [r6, #-4]
 8008564:	e7d4      	b.n	8008510 <__hexnan+0xd4>
 8008566:	3f04      	subs	r7, #4
 8008568:	e7d2      	b.n	8008510 <__hexnan+0xd4>
 800856a:	2004      	movs	r0, #4
 800856c:	b007      	add	sp, #28
 800856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008572 <__ascii_mbtowc>:
 8008572:	b082      	sub	sp, #8
 8008574:	b901      	cbnz	r1, 8008578 <__ascii_mbtowc+0x6>
 8008576:	a901      	add	r1, sp, #4
 8008578:	b142      	cbz	r2, 800858c <__ascii_mbtowc+0x1a>
 800857a:	b14b      	cbz	r3, 8008590 <__ascii_mbtowc+0x1e>
 800857c:	7813      	ldrb	r3, [r2, #0]
 800857e:	600b      	str	r3, [r1, #0]
 8008580:	7812      	ldrb	r2, [r2, #0]
 8008582:	1e10      	subs	r0, r2, #0
 8008584:	bf18      	it	ne
 8008586:	2001      	movne	r0, #1
 8008588:	b002      	add	sp, #8
 800858a:	4770      	bx	lr
 800858c:	4610      	mov	r0, r2
 800858e:	e7fb      	b.n	8008588 <__ascii_mbtowc+0x16>
 8008590:	f06f 0001 	mvn.w	r0, #1
 8008594:	e7f8      	b.n	8008588 <__ascii_mbtowc+0x16>

08008596 <_realloc_r>:
 8008596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859a:	4680      	mov	r8, r0
 800859c:	4614      	mov	r4, r2
 800859e:	460e      	mov	r6, r1
 80085a0:	b921      	cbnz	r1, 80085ac <_realloc_r+0x16>
 80085a2:	4611      	mov	r1, r2
 80085a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085a8:	f7fd bcfe 	b.w	8005fa8 <_malloc_r>
 80085ac:	b92a      	cbnz	r2, 80085ba <_realloc_r+0x24>
 80085ae:	f7fd fc8b 	bl	8005ec8 <_free_r>
 80085b2:	4625      	mov	r5, r4
 80085b4:	4628      	mov	r0, r5
 80085b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ba:	f000 f86d 	bl	8008698 <_malloc_usable_size_r>
 80085be:	4284      	cmp	r4, r0
 80085c0:	4607      	mov	r7, r0
 80085c2:	d802      	bhi.n	80085ca <_realloc_r+0x34>
 80085c4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085c8:	d812      	bhi.n	80085f0 <_realloc_r+0x5a>
 80085ca:	4621      	mov	r1, r4
 80085cc:	4640      	mov	r0, r8
 80085ce:	f7fd fceb 	bl	8005fa8 <_malloc_r>
 80085d2:	4605      	mov	r5, r0
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d0ed      	beq.n	80085b4 <_realloc_r+0x1e>
 80085d8:	42bc      	cmp	r4, r7
 80085da:	4622      	mov	r2, r4
 80085dc:	4631      	mov	r1, r6
 80085de:	bf28      	it	cs
 80085e0:	463a      	movcs	r2, r7
 80085e2:	f7ff fc3d 	bl	8007e60 <memcpy>
 80085e6:	4631      	mov	r1, r6
 80085e8:	4640      	mov	r0, r8
 80085ea:	f7fd fc6d 	bl	8005ec8 <_free_r>
 80085ee:	e7e1      	b.n	80085b4 <_realloc_r+0x1e>
 80085f0:	4635      	mov	r5, r6
 80085f2:	e7df      	b.n	80085b4 <_realloc_r+0x1e>

080085f4 <__ascii_wctomb>:
 80085f4:	4603      	mov	r3, r0
 80085f6:	4608      	mov	r0, r1
 80085f8:	b141      	cbz	r1, 800860c <__ascii_wctomb+0x18>
 80085fa:	2aff      	cmp	r2, #255	; 0xff
 80085fc:	d904      	bls.n	8008608 <__ascii_wctomb+0x14>
 80085fe:	228a      	movs	r2, #138	; 0x8a
 8008600:	f04f 30ff 	mov.w	r0, #4294967295
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	4770      	bx	lr
 8008608:	2001      	movs	r0, #1
 800860a:	700a      	strb	r2, [r1, #0]
 800860c:	4770      	bx	lr

0800860e <_raise_r>:
 800860e:	291f      	cmp	r1, #31
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4604      	mov	r4, r0
 8008614:	460d      	mov	r5, r1
 8008616:	d904      	bls.n	8008622 <_raise_r+0x14>
 8008618:	2316      	movs	r3, #22
 800861a:	6003      	str	r3, [r0, #0]
 800861c:	f04f 30ff 	mov.w	r0, #4294967295
 8008620:	bd38      	pop	{r3, r4, r5, pc}
 8008622:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008624:	b112      	cbz	r2, 800862c <_raise_r+0x1e>
 8008626:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800862a:	b94b      	cbnz	r3, 8008640 <_raise_r+0x32>
 800862c:	4620      	mov	r0, r4
 800862e:	f000 f831 	bl	8008694 <_getpid_r>
 8008632:	462a      	mov	r2, r5
 8008634:	4601      	mov	r1, r0
 8008636:	4620      	mov	r0, r4
 8008638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800863c:	f000 b818 	b.w	8008670 <_kill_r>
 8008640:	2b01      	cmp	r3, #1
 8008642:	d00a      	beq.n	800865a <_raise_r+0x4c>
 8008644:	1c59      	adds	r1, r3, #1
 8008646:	d103      	bne.n	8008650 <_raise_r+0x42>
 8008648:	2316      	movs	r3, #22
 800864a:	6003      	str	r3, [r0, #0]
 800864c:	2001      	movs	r0, #1
 800864e:	e7e7      	b.n	8008620 <_raise_r+0x12>
 8008650:	2400      	movs	r4, #0
 8008652:	4628      	mov	r0, r5
 8008654:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008658:	4798      	blx	r3
 800865a:	2000      	movs	r0, #0
 800865c:	e7e0      	b.n	8008620 <_raise_r+0x12>
	...

08008660 <raise>:
 8008660:	4b02      	ldr	r3, [pc, #8]	; (800866c <raise+0xc>)
 8008662:	4601      	mov	r1, r0
 8008664:	6818      	ldr	r0, [r3, #0]
 8008666:	f7ff bfd2 	b.w	800860e <_raise_r>
 800866a:	bf00      	nop
 800866c:	20000064 	.word	0x20000064

08008670 <_kill_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	2300      	movs	r3, #0
 8008674:	4d06      	ldr	r5, [pc, #24]	; (8008690 <_kill_r+0x20>)
 8008676:	4604      	mov	r4, r0
 8008678:	4608      	mov	r0, r1
 800867a:	4611      	mov	r1, r2
 800867c:	602b      	str	r3, [r5, #0]
 800867e:	f7f9 fa29 	bl	8001ad4 <_kill>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	d102      	bne.n	800868c <_kill_r+0x1c>
 8008686:	682b      	ldr	r3, [r5, #0]
 8008688:	b103      	cbz	r3, 800868c <_kill_r+0x1c>
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	bd38      	pop	{r3, r4, r5, pc}
 800868e:	bf00      	nop
 8008690:	20000688 	.word	0x20000688

08008694 <_getpid_r>:
 8008694:	f7f9 ba17 	b.w	8001ac6 <_getpid>

08008698 <_malloc_usable_size_r>:
 8008698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800869c:	1f18      	subs	r0, r3, #4
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bfbc      	itt	lt
 80086a2:	580b      	ldrlt	r3, [r1, r0]
 80086a4:	18c0      	addlt	r0, r0, r3
 80086a6:	4770      	bx	lr

080086a8 <_init>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	bf00      	nop
 80086ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ae:	bc08      	pop	{r3}
 80086b0:	469e      	mov	lr, r3
 80086b2:	4770      	bx	lr

080086b4 <_fini>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	bf00      	nop
 80086b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ba:	bc08      	pop	{r3}
 80086bc:	469e      	mov	lr, r3
 80086be:	4770      	bx	lr
